type `poLCA` <class<`formula`>, class<`data.frame`>, double, double, logical, double, logical, null | list<class<`matrix`>>, double, logical, logical> => class<`poLCA`>;
type `poLCA.compress` <class<`matrix`>> => list<class<`matrix`> | double[]>;
type `poLCA.dLL2dBeta.C` <class<`matrix`>, class<`matrix`>, class<`matrix`>> => list<double[] | class<`matrix`>>;
type `poLCA.entropy` <class<`poLCA`>> => double;
type `poLCA.postClass.C` <class<`matrix`>, list<double[]>, class<`matrix`>> => class<`matrix`>;
type `poLCA.posterior` <class<`poLCA`>, class<`matrix`> | double[], class<`matrix`> | null | double[]> => class<`matrix`>;
type `poLCA.predcell` <class<`poLCA`>, class<`data.frame`> | class<`matrix`> | double[]> => class<`matrix`>;
type `poLCA.probHat.C` <class<`matrix`>, class<`matrix`>, list<double[]>> => double[];
type `poLCA.reorder` <list<class<`matrix`>>, integer[]> => list<class<`matrix`>>;
type `poLCA.se` <class<`matrix`>, any, list<class<`matrix`>>, class<`matrix`>, class<`matrix`>> => list<double[] | class<`matrix`> | list<class<`matrix`>> | null | list<class<`matrix`>>>;
type `poLCA.simdata` <double, null | list<class<`matrix`>>, double, double, null, null, double, class<`matrix`> | null, null | double[], logical, null> => list<any>;
type `poLCA.table` <class<`formula`>, list<any>, class<`poLCA`>> => class<`matrix`>;
type `poLCA.unvectorize` <list<double[]>> => list<class<`matrix`>>;
type `poLCA.updatePrior` <class<`matrix`> | double[], class<`matrix`>, double> => class<`matrix`>;
type `poLCA.vectorize` <list<class<`matrix`>>> => list<double[]>;
type `poLCA.ylik.C` <list<double[]>, class<`matrix`> | class<`data.frame`>> => class<`matrix`>;
type `print.poLCA` <class<`poLCA`>, ...> => class<`poLCA`>;
type `rmulti` <class<`matrix`> | double[]> => double[];
