type `AIC.moveHMM` <class<`list`, `moveHMM`>, ..., double> => double;
type `allProbs` <class<`data.frame`>, integer, character, character, class<`matrix`>, class<`matrix`>, logical, null> => class<`matrix`>;
type `CI` <class<`list`, `moveHMM`>, double, any> => list<list<class<`matrix`>>>;
type `f` <double[], double, class<`matrix`>, double[], class<`data.frame`>, character, character, double[], logical, logical, null> => double;
type `filter` <character[]> => logical[];
type `fitHMM` <class<`data.frame`, `moveData`>, double, double[], double[], null, null, class<`formula`>, character, character, double[], logical, null> => class<`list`, `moveHMM`>;
type `FUN` <class<`matrix`>> => double[];
type `is.formula` <class<`formula`>> => logical;
type `is.moveData` <class<`data.frame`, `moveData`>> => logical;
type `is.moveHMM` <class<`list`, `moveHMM`>> => logical;
type `logAlpha` <class<`list`, `moveHMM`>> => class<`matrix`>;
type `logBeta` <class<`list`, `moveHMM`>> => class<`matrix`>;
type `moveData` <class<`data.frame`>> => class<`data.frame`, `moveData`>;
type `moveHMM` <list<class<`data.frame`> | null | list<class<`matrix`> | double[] | double[] | class<`matrix`> | character | logical | class<`formula`>>>> => class<`list`, `moveHMM`>;
type `n2w` <double[], class<`matrix`>, class<`matrix`>, double[], double, logical> => double[];
type `nLogLike_rcpp` <double, class<`matrix`>, class<`matrix`>, class<`data.frame`>, character, character, class<`matrix`>, class<`matrix`>, double[], integer[], logical, logical> => double;
type `parDef` <character, character, double, logical, logical> => list<double[] | class<`matrix`> | character[]>;
type `plotHist` <^double[], ^double[], list<class<`matrix`>>, list<class<`matrix`>>, character, logical, double, null, null, character[], logical> => list<list<double[]>>;
type `plot.moveData` <class<`data.frame`, `moveData`>, null, logical, logical, double, ...> => list<double[]>;
type `plot.moveHMM` <class<`list`, `moveHMM`>, double, logical, double, null, logical, logical, null, logical, logical, logical, double> => list<logical>;
type `plotPR` <class<`list`, `moveHMM`>> => list<double[]>;
type `plotStates` <class<`list`, `moveHMM`>, double[], logical> => list<logical>;
type `plotStationary` <class<`list`, `moveHMM`>, null, logical, double> => null;
type `prepData` <class<`data.frame`>, character, character[], null> => class<`data.frame`, `moveData`>;
type `print.moveHMM` <class<`list`, `moveHMM`>, ...> => double[];
type `pseudoRes` <class<`list`, `moveHMM`>> => list<^double[]>;
type `simData` <double, double, character, character, double[], double[], null, null, double, logical, double[], null> => class<`data.frame`, `moveData`>;
type `stateProbs` <class<`list`, `moveHMM`>> => class<`matrix`>;
type `stationary` <class<`list`, `moveHMM`>, class<`matrix`>> => class<`matrix`>;
type `trMatrix_rcpp` <integer, class<`matrix`>, class<`matrix`>> => class<`array`>;
type `turnAngle` <double[], double[], double[], logical> => double;
type `viterbi` <class<`list`, `moveHMM`>> => integer[];
type `w2n` <double[], class<`matrix`>, double[], double, double, logical, logical> => list<class<`matrix`> | double[] | class<`matrix`> | null>;
