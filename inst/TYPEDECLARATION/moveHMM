type `filter` <character[]> => logical[];
type `is.formula` <language> => logical;
type `is.moveData` <struct<`ID`:integer[], `step`:^double[], `angle`:^double[], `x`:double[], `y`:double[], `cov1`:double[], `cov2`:double[]>> => logical;
type `is.moveHMM` <struct<`data`:struct<`ID`:integer[], `step`:^double[], `angle`:^double[], `x`:double[], `y`:double[], `(Intercept)`:double[], `cov1`:double[], `cos(cov2)`:double[]>, `mle`:struct<`stepPar`:^double[], `anglePar`:^double[], `beta`:^double[], `delta`:double[]>, `mod`:struct<`minimum`:double, `estimate`:double[], `gradient`:double[], `hessian`:^double[], `code`:integer, `iterations`:integer>, `conditions`:struct<`stepDist`:character, `angleDist`:character, `zeroInflation`:logical, `estAngleMean`:logical, `stationary`:logical, `formula`:language>, `rawCovs`:struct<`cov1`:double[], `cov2`:double[]>>> => logical;
type `nLogLike_rcpp` <double, ^double[], ^double[], struct<`ID`:integer[], `step`:^double[], `angle`:^double[], `x`:double[], `y`:double[], `(Intercept)`:double[], `cov1`:double[], `cos(cov2)`:double[]>, character, character, ^double[], ^double[], double[], integer[], logical, logical, double> => double;
type `plot.moveData` <struct<`ID`:integer[], `step`:^double[], `angle`:^double[], `x`:double[], `y`:double[], `cov1`:double[], `cov2`:double[]>, null, logical, logical, double, null> => struct<`mar`:double[]>;
type `plot.moveHMM` <struct<`data`:struct<`ID`:integer[], `step`:^double[], `angle`:^double[], `x`:double[], `y`:double[], `(Intercept)`:double[], `cov1`:double[], `cos(cov2)`:double[]>, `mle`:struct<`stepPar`:^double[], `anglePar`:^double[], `beta`:^double[], `delta`:double[]>, `mod`:struct<`minimum`:double, `estimate`:double[], `gradient`:double[], `hessian`:^double[], `code`:integer, `iterations`:integer>, `conditions`:struct<`stepDist`:character, `angleDist`:character, `zeroInflation`:logical, `estAngleMean`:logical, `stationary`:logical, `formula`:language>, `rawCovs`:struct<`cov1`:double[], `cov2`:double[]>>, double, logical, double, null, logical, logical, null, logical, logical, logical, double, null> => struct<`ask`:logical>;
type `plotHist` <^double[], ^double[], tuple<^double[], ^double[]>, tuple<^double[], ^double[]>, character, logical, double, null, null, character[], logical> => struct<`rect`:struct<`w`:double, `h`:double, `left`:double, `top`:double>, `text`:struct<`x`:double[], `y`:double[]>>;
type `print.moveHMM` <struct<`data`:struct<`ID`:integer[], `step`:^double[], `angle`:^double[], `x`:double[], `y`:double[], `(Intercept)`:double[], `cov1`:double[], `cos(cov2)`:double[]>, `mle`:struct<`stepPar`:^double[], `anglePar`:^double[], `beta`:^double[], `delta`:double[]>, `mod`:struct<`minimum`:double, `estimate`:double[], `gradient`:double[], `hessian`:^double[], `code`:integer, `iterations`:integer>, `conditions`:struct<`stepDist`:character, `angleDist`:character, `zeroInflation`:logical, `estAngleMean`:logical, `stationary`:logical, `formula`:language>, `rawCovs`:struct<`cov1`:double[], `cov2`:double[]>, `knownStates`:null>, null> => double[];
type `trMatrix_rcpp` <integer, ^double[], ^double[]> => double[];
