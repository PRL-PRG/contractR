type `ans` < > => null;
type `Args` <any, logical> => class<`data.frame`>;
type `as.object_sizes` <double[] | character | complex | null | list<any>> => any;
type `bindData` <class<`data.frame`>, class<`data.frame`>, character[]> => class<`data.frame`>;
type `case` <double[], ..., character | null> => class<`factor`>;
type `cbindX` <...> => (class<`data.frame`> | class<`matrix`>);
type `centerText` <character[], integer> => character[];
type `.checkLevelsMap` <class<`levelsMap`>, character> => null;
type `c.levelsMap` <..., logical, logical> => class<`levelsMap`>;
type `c.listLevelsMap` <..., logical, logical> => class<`levelsMap`>;
type `combine` <..., character[] | null> => class<`data.frame`>;
type `ConvertMedUnits` <double[], character, any, character, logical> => double[];
type `drop.levels` <class<`data.frame`> | class<`factor`> | character[] | double[] | list<class<`factor`> | integer[] | character[]>, any, ...> => (class<`data.frame`> | class<`factor`> | character[] | double[] | list<class<`factor`> | integer[] | character[]>);
type `drop.levels.data.frame` <class<`data.frame`>, logical, ...> => class<`data.frame`>;
type `drop.levels.default` <character[] | double[], any, ...> => (character[] | double[]);
type `drop.levels.factor` <class<`factor`>, logical, ...> => class<`factor`>;
type `drop.levels.list` <class<`data.frame`> | list<class<`factor`> | integer[] | character[]>, any, ...> => list<any>;
type `duplicated2` <class<`data.frame`>, logical, ...> => logical[];
type `findPerl` <any, character | logical> => character;
type `first` <class<`data.frame`> | class<`matrix`> | integer[] | list<double>, double, ...> => (class<`data.frame`> | class<`matrix`> | integer | list<double>);
type `first<-` <class<`data.frame`> | class<`matrix`> | integer[] | list<double>, double, ..., class<`factor`> | character | double> => (class<`data.frame`> | class<`matrix`> | double[] | list<character | double>);
type `format.object_sizes` <class<`numeric`, `object_sizes`>, any, character, any, double, null, character, any, ...> => character[];
type `frameApply` <class<`data.frame`>, character[], character[], class<`function`>, any, logical, character, ...> => class<`data.frame`>;
type `FUN` <class<`levelsMap`>, character> => null | <class<`data.frame`> | class<`factor`> | character[] | double[] | list<class<`factor`> | integer[] | character[]>, any, ...> => (class<`data.frame`> | class<`factor`> | character[] | double[] | list<class<`factor`> | integer[] | character[]>) | <character[] | class<`factor`> | integer[] | class<`data.frame`> | list<character[] | class<`factor`> | integer[]>, any, ...> => (character[] | class<`factor`> | integer[] | class<`data.frame`> | list<character[] | class<`factor`> | integer[]>) | <class<`levelsMap`>> => logical | <class<`lm`> | ^double[] | class<`data.frame`>, ...> => integer[] | <class<`factor`> | character | list<class<`factor`>>, logical, any, logical, logical, ...> => class<`levelsMap`> | <^double[], ...> => integer;
type `getDay` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, any, ...> => character;
type `getDay.Date` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `getDay.POSIXct` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `getDay.POSIXlt` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `getMonth` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, any, ...> => character;
type `getMonth.Date` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `getMonth.POSIXct` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `getMonth.POSIXlt` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `getYear` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, any, ...> => character;
type `getYear.Date` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `getYear.POSIXct` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `getYear.POSIXlt` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, character, ...> => character;
type `humanReadable` <class<`numeric`, `object_sizes`> | double[], any, character[], double, null | double, character, character[]> => character[];
type `interleave` <..., logical, character, logical> => (class<`matrix`> | integer[]);
type `is.levelsMap` <class<`levelsMap`>> => logical;
type `is.listLevelsMap` <class<`listLevelsMap`>> => logical;
type `is.object_sizes` <class<`numeric`, `object_sizes`>> => logical;
type `isUnknown` <class<`factor`> | ^double[] | list<^double[] | class<`factor`> | class<`factor`> | double[]>, ^character[] | ^double[] | null | list<character | double | double | character>, ...> => (logical[] | list<logical[]>);
type `isUnknown.default` <class<`factor`> | ^double[], ^character[] | ^double[] | null, ...> => logical[];
type `isUnknown.list` <list<^double[] | class<`factor`> | class<`factor`> | double[]>, ^double[] | character[] | list<character | double | double | character>, ...> => list<logical[]>;
type `is.what` <class<`function`> | class<`lm`> | double | null, logical> => (character[] | class<`data.frame`>);
type `keep` <..., character[], logical, logical> => character[];
type `last` <class<`data.frame`> | class<`matrix`> | integer[] | list<double>, double, ...> => (class<`data.frame`> | class<`matrix`> | integer | list<double>);
type `last<-` <class<`data.frame`> | class<`matrix`> | double[] | list<character | double>, double, ..., character | double | list<double[]>> => (class<`data.frame`> | class<`matrix`> | double[] | list<character | double>);
type `left` <class<`data.frame`> | class<`matrix`>, integer> => (class<`data.frame`> | class<`matrix`>);
type `left.data.frame` <class<`data.frame`> | class<`matrix`>, double> => (class<`data.frame`> | class<`matrix`>);
type `left.matrix` <class<`data.frame`> | class<`matrix`>, double> => (class<`data.frame`> | class<`matrix`>);
type `[.levelsMap` <class<`levelsMap`>, integer[]> => class<`levelsMap`>;
type `ll` <character | double | class<`data.frame`> | class<`family`> | class<`glm`, `lm`>, character, double, logical, logical, null | character, logical, ...> => class<`data.frame`>;
type `lowerTriangle` <class<`matrix`>, logical, logical> => integer[];
type `lowerTriangle<-` <class<`matrix`>, logical, logical, character[] | integer[] | null> => class<`matrix`>;
type `ls.funs` <...> => character[];
type `mapLevels` <class<`factor`> | character | list<class<`factor`>>, logical, any, logical, logical, ...> => class<`levelsMap`>;
type `mapLevels<-` <character[] | class<`factor`> | integer[], class<`levelsMap`>> => class<`factor`>;
type `mapLevels.character` <character, logical, logical, logical, logical, ...> => class<`levelsMap`>;
type `mapLevels<-.default` <character[] | class<`factor`> | integer[], class<`levelsMap`>> => class<`factor`>;
type `mapLevels.factor` <character | class<`factor`>, logical, any, any, logical, ...> => class<`levelsMap`>;
type `mapLevels.list` <list<class<`factor`>>, logical, logical, logical, logical, ...> => class<`levelsMap`>;
type `matchcols` <class<`matrix`>, character[], any, character[], ...> => character[];
type `mv` <character, character, environment> => null;
type `NAToUnknown` <class<`factor`> | ^double[] | list<^double[] | class<`factor`> | class<`factor`> | ^double[]>, character | double | list<character | double>, logical, logical, ...> => (class<`factor`> | double[] | list<double[] | class<`factor`> | class<`factor`> | double[]>);
type `NAToUnknown.default` <^double[], double, logical, logical, ...> => double[];
type `NAToUnknown.factor` <class<`factor`>, character | double, logical, logical, ...> => class<`factor`>;
type `NAToUnknown.list` <list<^double[] | class<`factor`> | class<`factor`> | ^double[]>, double | list<character | double>, logical, logical, ...> => list<double[] | class<`factor`> | class<`factor`> | double[]>;
type `nobs` <class<`lm`> | ^double[] | class<`data.frame`>, ...> => integer[];
type `nobs.data.frame` <class<`data.frame`>, ...> => integer[];
type `nobs.default` <^double[], ...> => integer;
type `nPairs` <class<`data.frame`>, logical, logical, logical, ...> => class<`matrix`, `nPairs`>;
type `object.size` <...> => class<`numeric`, `object_sizes`>;
type `print.object_sizes` <class<`numeric`, `object_sizes`>, logical, logical, character, any, double, null, character, character[], ...> => class<`numeric`, `object_sizes`>;
type `read.xls` <character, character | double, logical, any, character[], ..., character[], character> => class<`data.frame`>;
type `remove.vars` <class<`data.frame`>, character, logical> => class<`data.frame`>;
type `rename.vars` <class<`data.frame`>, character[], character[], logical> => class<`data.frame`>;
type `reorder.factor` <class<`factor`>, any, any, ..., logical, any, any> => class<`factor`>;
type `resample` <double[], any, logical, null> => double[];
type `right` <class<`data.frame`> | class<`matrix`>, integer> => (class<`data.frame`> | class<`matrix`>);
type `sheetCmd` <character, character, logical, character> => (character[] | integer);
type `sheetCount` <character, logical, character> => integer;
type `sheetNames` <character, logical, character> => character[];
type `sort.levelsMap` <class<`levelsMap`>, logical, logical, ...> => class<`levelsMap`>;
type `startsWith` <character[], character, logical, logical> => logical[];
type `summary.nPairs` <class<`matrix`, `nPairs`>, ...> => class<`matrix`>;
type `trim` <character[] | class<`factor`> | integer[] | class<`data.frame`> | list<character[] | class<`factor`> | integer[]>, any, ...> => (character[] | class<`factor`> | integer[] | class<`data.frame`> | list<character[] | class<`factor`> | integer[]>);
type `trim.character` <character[], any, ...> => character[];
type `trim.data.frame` <class<`data.frame`>, logical, ...> => class<`data.frame`>;
type `trim.default` <integer[], logical, ...> => integer[];
type `trim.factor` <class<`factor`>, logical, ...> => class<`factor`>;
type `trim.list` <class<`data.frame`> | list<character[] | class<`factor`> | integer[]>, logical, ...> => list<class<`factor`> | integer[] | character[] | class<`factor`> | integer[]>;
type `trimSum` <^integer[], double, logical, logical, ...> => ^integer[];
type `unique.levelsMap` <class<`levelsMap`>, logical, ...> => class<`levelsMap`>;
type `.unknownList` <class<`data.frame`> | list<class<`factor`> | double[] | ^double[] | class<`factor`> | class<`factor`> | ^double[]>, character[] | ^double[] | list<character[] | double | character | double | double | character>> => (character[] | ^double[] | list<double | character[] | double | character | character | double>);
type `unknownToNA` <class<`data.frame`> | class<`factor`> | ^double[] | list<^double[] | class<`factor`> | class<`factor`> | double[]>, double | character[] | list<double | character | character[] | double>, logical, ...> => (class<`data.frame`> | class<`factor`> | ^double[] | list<^double[] | class<`factor`> | class<`factor`> | ^double[]>);
type `unknownToNA.data.frame` <class<`data.frame`>, list<double | character>, logical, ...> => class<`data.frame`>;
type `unknownToNA.default` <^double[], double, logical, ...> => ^double[];
type `unknownToNA.factor` <class<`factor`>, character[] | double, logical, ...> => class<`factor`>;
type `unknownToNA.list` <class<`data.frame`> | list<^double[] | class<`factor`> | class<`factor`> | double[]>, list<double | character | character[] | double>, logical, ...> => list<^double[] | class<`factor`> | class<`factor`> | ^double[]>;
type `.unlistLevelsMap` <class<`levelsMap`>, logical> => list<character[] | integer[]>;
type `unmatrix` <class<`matrix`>, logical> => (character[] | double[]);
type `update.list` <list<double | character>, list<character | double>, logical, ...> => list<double | character>;
type `upperTriangle` <class<`matrix`>, logical, logical> => (character[] | integer[]);
type `upperTriangle<-` <class<`matrix`>, logical, logical, integer[] | null> => class<`matrix`>;
type `wideByFactor` <class<`data.frame`>, character, character[], logical, logical> => class<`data.frame`>;
type `write.fwf` <class<`data.frame`>, character, logical, logical, character, character, logical, logical, null | character, character, logical, logical, null | double, character, character[], logical, ...> => (class<`data.frame`> | null);
type `xls2sep` <character, character | double, logical, logical, ..., character, character> => class<`connection`, `file`>;
type `xlsFormats` <character, logical> => character[];
