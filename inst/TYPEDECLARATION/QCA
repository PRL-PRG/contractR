type `[[` <class<`condition`, `error`, `simpleError`>> => class<`condition`, `error`, `simpleError`>;
type `allExpressions` <double[], logical, double | null, logical, ...> => class<`aE`, `matrix`>;
type `calibrate` <double[], character, character, character | null | double[], logical, double, logical, double, double, ...> => double[];
type `causalChain` <class<`data.frame`>, character | null, logical, ...> => class<`chain`>;
type `check.equal` <double, double> => logical;
type `checkpos` <any, character> => integer[];
type `createMatrix` <double[], ...> => class<`matrix`>;
type `extract` <character, character, class<`data.frame`>> => list<any>;
type `filter` <character[]> => logical[];
type `findmin` <class<`matrix`> | class<`matrix`, `pic`>> => integer;
type `findRows` <character, class<`tt`>, logical, double, ...> => double[];
type `findTh` <double[], double, character, character, ...> => double[];
type `fun` <...> => null;
type `FUN` <double[]> => logical | <double[]> => double[] | <double[]> => logical | <double[]> => double[] | <double[]> => logical | <integer> => logical[] | <double[]> => double[] | <double> => character | <double[]> => double[] | <character[]> => character[] | <double[]> => logical | <double> => logical | <double[]> => double[] | <integer[]> => double[] | <double[]> => logical[] | <character[]> => class<`matrix`> | <double[]> => character | <double[]> => logical;
type `fuzzyand` <..., logical, logical> => class<`fuzzy`, `numeric`>;
type `fuzzyor` <..., logical, logical> => class<`fuzzy`, `numeric`>;
type `getName` <character> => character;
type `getRow` <double[], double[], logical, ...> => class<`matrix`>;
type `getSolution` <class<`matrix`> | list<class<`matrix`> | null | class<`matrix`>>, any, any, any, any, any, any, any, any, ...> => any;
type `makeChart` <character[] | class<`matrix`>, character[] | class<`matrix`>, character[], any, any, character, ...> => class<`matrix`, `pic`>;
type `minimize` <class<`data.frame`> | class<`tt`>, character, null, character, double, double, double, double, double, logical, logical, logical> => any;
type `minimizeit` <list<class<`data.frame`> | logical | character | class<`data.frame`> | double | character>> => (class<`qca`> | null);
type `nec` <character> => logical;
type `pof` <character, character, class<`data.frame`>, character, character, double[], null, ...> => class<`pof`>;
type `setColnames` <class<`matrix`>, character[]> => null;
type `solveChart` <class<`matrix`> | class<`matrix`, `pic`>, logical, logical, null, ...> => class<`matrix`>;
type `suf` <character> => logical;
type `truthTable` <class<`data.frame`>, character, character, double, double, double, logical, logical, logical, logical, character, character> => class<`tt`>;
type `verify.data` <class<`data.frame`>, character, character[]> => null;
type `verify.inf.test` <character, any> => null;
type `verify.minimize` <class<`data.frame`>, character, character[], character, character, logical> => null;
type `verify.qca` <class<`data.frame`> | double[]> => null;
type `verify.tt` <class<`data.frame`>, character, character[], any, any, double, double, character> => null;
type `writePrimeimp` <class<`matrix`>, any, any, character, character> => character[];
type `writeSolution` <class<`matrix`>, class<`matrix`>> => list<any>;
