type `anova.gnm` <class<`glm`, `gnm`, `lm`>, ..., null, character | null> => class<`anova`, `data.frame`>;
type `asGnm` <class<`lm`>, ...> => class<`glm`, `gnm`, `lm`>;
type `asGnm.lm` <class<`lm`>, ...> => class<`glm`, `gnm`, `lm`>;
type `checkEstimable` <class<`glm`, `gnm`, `lm`>, class<`matrix`> | double[], null> => ^logical[];
type `coef.gnm` <class<`glm`, `gnm`, `lm`>, ...> => class<`coef.gnm`, `numeric`>;
type `confint.gnm` <class<`glm`, `gnm`, `lm`>, integer[], double, logical, ...> => class<`matrix`>;
type `confint.profile.gnm` <class<`profile`, `profile.glm`, `profile.gnm`>, character[], double, ...> => class<`matrix`>;
type `Const` <double> => class<`call`>;
type `cooks.distance.gnm` <class<`glm`, `gnm`, `lm`>, class<`table`>, double, ...> => class<`table`>;
type `Diag` <..., logical> => (class<`factor`> | double[]);
type `Dref` <..., class<`formula`>> => list<any>;
type `DrefWeights` <class<`glm`, `gnm`, `lm`>> => (list<class<`data.frame`>> | list<double[]>);
type `exitInfo` <class<`glm`, `gnm`, `lm`>> => class<`data.frame`>;
type `Exp` <any, null> => list<any>;
type `expandCategorical` <class<`data.frame`>, character, character, character, character, logical, logical> => class<`data.frame`>;
type `getContrasts` <class<`glm`, `gnm`, `lm`>, integer[], character | class<`array`>, character | class<`array`>, null | character | class<`array`>, null, logical, ...> => class<`qv`>;
type `glm.fit.e` <class<`matrix`>, double[], double[], null, null, null, double[], class<`family`>> => (^double[] | list<any>);
type `gnm` <class<`formula`>, any, null | character, double[] | character, double[], character | class<`function`>, class<`data.frame`> | class<`table`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | class<`table`, `xtabs`> | null, any> => (class<`glm`, `gnm`, `lm`> | class<`matrix`>);
type `gnmFit` <list<double[] | class<`function`>> | list<^logical[] | class<`function`> | double[]> | list<^logical[] | integer[] | class<`function`>>, double[], double[], double[], null | class<`factor`>, class<`family`>, double[], double[]> => list<any>;
type `gnmStart` <integer, double> => double[];
type `gnmTerms` <class<`formula`>, null | class<`name`>, class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | class<`table`> | class<`table`, `xtabs`> | null> => class<`formula`, `gnmTerms`, `terms`>;
type `gnmTools` <class<`formula`, `gnmTerms`, `terms`>, class<`data.frame`>, any> => (list<double[] | class<`function`>> | list<^logical[] | class<`function`> | double[]> | list<^logical[] | integer[] | class<`function`>>);
type `grp.sum` <double[], integer[]> => double[];
type `hashSplit` <character[]> => character[];
type `hatvalues.gnm` <class<`glm`, `gnm`, `lm`>, ...> => class<`table`>;
type `instances` <any, double> => character;
type `Inv` <any, null> => list<any>;
type `labels.gnm` <class<`glm`, `gnm`, `lm`>, ...> => character[];
type `meanResiduals` <class<`glm`, `gnm`, `lm`>, class<`formula`>, logical, logical, ...> => class<`meanResiduals`, `table`>;
type `messageVector` <character[]> => null;
type `model.frame.gnm` <class<`glm`, `gnm`, `lm`>, ...> => class<`data.frame`>;
type `model.matrix.gnm` <class<`glm`, `gnm`, `lm`>, integer[] | null, ...> => class<`matrix`>;
type `MPinv` <class<`matrix`>, any, integer | null, character> => class<`matrix`>;
type `Mult` <..., double | null> => list<any>;
type `MultHomog` <..., double | null> => list<any>;
type `naToZero` <class<`coef.gnm`, `numeric`> | class<`matrix`> | ^double[]> => (class<`coef.gnm`, `numeric`> | class<`matrix`> | double[]);
type `nonlinTerms` <list<class<`call`>> | pairlist | list<class<`formula`> | class<`name`>> | list<class<`name`> | double> | list<class<`name`>> | list<double>, null | list<class<`name`>>, class<`function`>, double[], expression | null, double[], null | class<`function`>, null | character> => list<any>;
type `ofInterest` <class<`glm`, `gnm`, `lm`> | class<`summary.gnm`>> => (integer[] | null);
type `ofInterest<-` <class<`glm`, `gnm`, `lm`>, integer[]> => class<`glm`, `gnm`, `lm`>;
type `parameters` <class<`glm`, `gnm`, `lm`>> => class<`coef.gnm`, `numeric`>;
type `pickCoef` <class<`glm`, `gnm`, `lm`>, character, logical, ...> => double[];
type `plot.gnm` <class<`glm`, `gnm`, `lm`>, double[], character[], class<`function`>, character | null, character, logical, ...> => null;
type `plot.profile.gnm` <class<`profile`, `profile.glm`, `profile.gnm`>, any, ...> => null;
type `prattle` <...> => null;
type `predict.gnm` <class<`glm`, `gnm`, `lm`>, null, character[], logical, null, null, any, ...> => (class<`table`> | list<class<`table`> | double>);
type `print.summary.gnm` <class<`summary.gnm`>, double, logical, any, ...> => class<`summary.gnm`>;
type `profile.gnm` <class<`glm`, `gnm`, `lm`>, integer[] | null, double, double, null, logical, ...> => class<`profile`, `profile.glm`, `profile.gnm`>;
type `quickRank` <class<`matrix`>, null> => integer;
type `residSVD` <class<`glm`, `gnm`, `lm`> | class<`lm`>, any, any, double> => (class<`matrix`> | double[]);
type `residuals.gnm` <class<`glm`, `gnm`, `lm`>, character, ...> => (class<`table`> | double[]);
type `se` <class<`glm`, `gnm`, `lm`>, ...> => class<`data.frame`>;
type `se.gnm` <class<`glm`, `gnm`, `lm`>, double[] | null, logical, null, null, ...> => class<`data.frame`>;
type `sumExpression` <list<class<`name`> | class<`call`>> | list<class<`call`>>> => class<`call`>;
type `summary.gnm` <class<`glm`, `gnm`, `lm`>, null, logical, logical, logical, ...> => class<`summary.gnm`>;
type `summary.meanResiduals` <class<`meanResiduals`, `table`>, double, ...> => null;
type `Symm` <..., character> => class<`factor`>;
type `termPredictors` <class<`glm`, `gnm`, `lm`> | class<`glm`, `lm`> | class<`lm`>, ...> => class<`matrix`>;
type `termPredictors.default` <class<`glm`, `lm`> | class<`lm`>, ...> => class<`matrix`>;
type `termPredictors.gnm` <class<`glm`, `gnm`, `lm`>, ...> => class<`matrix`>;
type `Topo` <..., class<`matrix`>> => class<`factor`>;
type `update.gnm` <class<`glm`, `gnm`, `lm`>, any, ..., logical> => class<`glm`, `gnm`, `lm`>;
type `updateLinear` <integer[], double[], double[], double[], double[], double[], double[], class<`family`>> => double[];
type `vcov.gnm` <class<`glm`, `gnm`, `lm`>, null, any, ...> => class<`vcov.gnm`>;
type `weights.gnm` <class<`glm`, `gnm`, `lm`>, any, ...> => class<`table`>;
