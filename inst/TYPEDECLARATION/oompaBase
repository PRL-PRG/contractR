type `bluescale` <double> => character[];
type `blueyellow` <double> => character[];
type `colorCode` <class<`factor`>, character[], double> => list<class<`ColorCoding`>>;
type `ColorCodedPair` <double[], double[], list<class<`ColorCoding`>>> => class<`ColorCodedPair`>;
type `ColorCoding` <logical[], character, double> => class<`ColorCoding`>;
type `cyanyellow` <double> => character[];
type `filter` <character[]> => logical[];
type `FUN` <class<`ColorCoding`>, double[], double[]> => null | <integer, class<`factor`>, character[], double> => class<`ColorCoding`>;
type `grayscale` <double> => character[];
type `initialize` <class<`ColorCoding`>, ...> => class<`ColorCoding`> | <class<`ColorCoding`>, ...> => class<`ColorCoding`>;
type `jetColors` <double> => character[];
type `matrixMean` <class<`matrix`>, logical> => class<`matrix`>;
type `matrixPairedT` <class<`matrix`>, class<`factor`>, integer[]> => class<`matrix`>;
type `matrixT` <class<`matrix`>, class<`factor`>, logical> => class<`matrix`>;
type `matrixUnequalT` <class<`matrix`>, class<`factor`>> => list<class<`matrix`>>;
type `matrixVar` <class<`matrix`>, class<`matrix`>, logical> => class<`matrix`>;
type `plot` <class<`ColorCodedPair`>, any, ...> => class<`ColorCodedPair`>;
type `redgreen` <double> => character[];
type `redscale` <double> => character[];
