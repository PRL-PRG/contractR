type `as.kcca` <class<`hclust`> | class<`kmeans`> | class<`pam`, `partition`>, ...> => class<`kcca`>;
type `as.kcca.hclust` <class<`hclust`>, class<`data.frame`>, double, null, logical, ...> => class<`kcca`>;
type `as.kcca.kmeans` <class<`kmeans`>, class<`matrix`>, logical, ...> => class<`kcca`>;
type `as.kcca.partition` <class<`pam`, `partition`>, class<`matrix`> | null, logical, ...> => class<`kcca`>;
type `barchart` <class<`kcca`>, any, ...> => (class<`trellis`> | null);
type `Barchart` <class<`matrix`>, double[], null, null | character, any, any, character[], character, any, null | double, logical, ...> => class<`trellis`>;
type `barplot` <class<`kcca`>, ...> => null;
type `bclust` <class<`data.frame`>, double, double, double, double, character, character, character, logical, logical, logical, null, double, ...> => class<`bclust`>;
type `bootFlexclust` <class<`matrix`>, double, double, logical, null, logical, logical, ...> => class<`bootFlexclust`>;
type `boxplot` <class<`resampleFlexclust`>, ...> => list<class<`matrix`> | double[] | character[]> | <class<`bootFlexclust`>, ...> => list<class<`matrix`> | double[] | character>;
type `bundestag` <double, logical, logical, logical, character | logical> => (class<`factor`> | class<`matrix`>);
type `bwplot` <class<`kcca`>, any, ...> => class<`trellis`>;
type `cclust` <class<`data.frame`> | class<`matrix`>, double, character, character, null, null, null, logical, logical> => class<`kcca`>;
type `clusinfo` <integer[], class<`matrix`>, logical> => class<`data.frame`>;
type `clusterSim` <class<`kcca`>, ...> => class<`matrix`> | <class<`kcca`>, ...> => class<`matrix`> | <class<`kcca`>, ...> => class<`matrix`>;
type `clusterwiseScheme` <class<`kcca`>> => class<`resampleScheme`>;
type `comPart` <integer[], integer[], character[]> => double[] | <double[], double[], character[]> => double[] | <double[], double[], character[]> => double[];
type `computeClusterSim` <class<`matrix`>, list<integer[]>> => class<`matrix`>;
type `countPairs` <double[], double[]> => class<`matrix`>;
type `createBarchartPanel` <any, any, any, any, any, double | null, any> => class<`function`>;
type `createBWplotPanel` <class<`data.frame`>, any, logical, any, logical, ...> => class<`function`>;
type `Cutree` <class<`hclust`>, double, null> => double[];
type `densityplot` <class<`bootFlexclust`>, any, ...> => class<`trellis`> | <class<`resampleFlexclust`>, any, ...> => class<`trellis`>;
type `dist2` <class<`data.frame`> | class<`matrix`>, class<`data.frame`> | class<`matrix`>, character, double> => class<`matrix`>;
type `distCanberra` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `distEuclidean` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `distJaccard` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `distManhattan` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `distMax` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `distMinkowski` <class<`matrix`>, class<`matrix`>, double> => class<`matrix`>;
type `doRandIndex` <class<`table`>, any, logical, logical> => double;
type `dorelabel` <class<`kcca`>, double[]> => class<`kcca`>;
type `expandColors` <null, class<`kcca`>> => character[];
type `flxColors` <any, character, logical> => character[];
type `getColnames` <class<`prcomp`>> => character[];
type `getColnames.prcomp` <class<`prcomp`>> => character[];
type `getData` <class<`kcca`>, logical> => (class<`matrix`> | null) | <character> => class<`data.frame`>;
type `getDistColClust` <class<`kcca`>, integer, character, character[] | integer[], any> => list<double[] | character[] | double[]>;
type `groupBWplot` <class<`data.frame`>, class<`factor`>, double, character, character, null, logical, character | null, character, null, null, logical, ...> => class<`trellis`>;
type `hclustBclust` <class<`bclust`>, any, double, character, character, logical, integer> => class<`bclust`>;
type `image` <class<`kcca`>, ...> => list<double[] | class<`matrix`>>;
type `initCenters` <class<`matrix`>, double | integer[], class<`kccaFamily`>, any> => list<class<`matrix`> | integer[]>;
type `kcca` <class<`matrix`>, double | integer[], class<`kccaFamily`>, double[] | null, null, null | list<character | double>, logical, logical> => class<`kcca`>;
type `kcca2df` <class<`kcca`>, null> => class<`data.frame`>;
type `kccaFamily` <character, null, null, character, null, double, character> => class<`kccaFamily`>;
type `kmeanspp` <class<`matrix`>, integer, class<`kccaFamily`>> => class<`matrix`>;
type `list2object` <list<double | character | character | double>, character> => (class<`cclustControl`> | class<`flexclustControl`>);
type `matrix2df` <class<`matrix`>, class<`factor`> | integer[]> => class<`data.frame`>;
type `maxDist` <any, character, any> => double;
type `MClapply` <list<double>, any, logical, ...> => list<class<`kccasimple`> | list<class<`matrix`> | double | list<class<`matrix`>> | class<`matrix`> | list<class<`matrix`>>>>;
type `mincross` <class<`table`>> => double[];
type `mlogit` <class<`matrix`>> => class<`matrix`>;
type `neighbourColors` <list<integer[]>, null> => character[];
type `neighbours` <class<`kcca`>, logical, ...> => list<integer[]> | <list<integer[]>, logical, ...> => list<integer[]> | <class<`kcca`> | list<integer[]>, logical, ...> => list<integer[]>;
type `newKccaObject` <class<`matrix`>, class<`kccaFamily`>, class<`matrix`>, null, logical, ...> => (class<`kcca`> | class<`kccasimple`>);
type `newKccasimpleObject` <class<`matrix`>, class<`kccaFamily`>, class<`matrix`>, null, class<`matrix`>, ...> => class<`kccasimple`>;
type `normWeights` <double[]> => double[];
type `plot` <class<`bootFlexclust`>, any, ...> => list<class<`matrix`> | double[] | character> | <class<`projAxes`>, any, ...> => null | <class<`resampleFlexclust`>, any, ...> => list<class<`matrix`> | double[] | character[]> | <class<`shadow`>, any, ...> => null | <class<`bclust`>, any, ...> => integer | <class<`kcca`>, any, ...> => null | <class<`stepFlexclust`>, any, ...> => null;
type `plotFramework` <any, double[], double[], logical, logical, null, null, character, character, character, logical, null | list<character[] | integer[] | double>> => null;
type `plot.priceFeature` <class<`priceFeature`>, logical, ...> => null;
type `predict` <class<`kcca`>, ...> => integer[] | <class<`kccasimple`>, ...> => ^integer[];
type `Predict` <class<`prcomp`>, class<`matrix`>> => class<`matrix`>;
type `priceFeature` <double, character> => class<`priceFeature`>;
type `projAxes` <class<`prcomp`>, double[], null | double, character, double | null, double, list<character>, character[], character, null, any, logical, ...> => class<`projAxes`>;
type `propBarchart` <class<`matrix`>, class<`factor`>, double, character, character, logical, character, null, null, logical, ...> => class<`propBarchart`>;
type `qtclust` <class<`matrix`>, double, class<`kccaFamily`>, null, logical, logical> => class<`kccasimple`>;
type `randIndex` <class<`table`>, any, logical, logical> => double[] | <class<`table`>, any, logical, logical> => double[];
type `randomcent` <class<`matrix`>, integer, class<`kccaFamily`>> => class<`matrix`>;
type `resampleFlexclust` <class<`matrix`>, integer, class<`resampleScheme`>, double, null, logical, logical, ...> => class<`resampleFlexclust`>;
type `shadow` <class<`kcca`>, ...> => class<`shadow`> | <class<`kcca`>, ...> => class<`shadow`>;
type `shadowPlot` <class<`shadow`>, ...> => null | <class<`shadow`>, ...> => null;
type `shadowStars` <class<`kcca`>, integer[], null, double, logical, class<`function`>, null, null, logical, ...> => null;
type `Silhouette` <class<`kcca`>, ...> => class<`shadow`> | <class<`kcca`>, ...> => class<`shadow`>;
type `simple2kcca` <class<`matrix`>, class<`kccasimple`>, null, class<`matrix`> | null> => class<`kcca`>;
type `slsaplot` <class<`stepFlexclust`>, null, ...> => list<double[]>;
type `slswFlexclust` <class<`matrix`>, class<`kcca`>, ...> => class<`resampleFlexclust`>;
type `stepFlexclust` <class<`matrix`>, double | integer[], double, logical, class<`function`>, logical, null, logical, logical, null, logical, ...> => class<`stepFlexclust`>;
type `stripes` <class<`kcca`>, class<`factor`> | null, character[], logical, null, null, null | class<`gpar`>, null | class<`gpar`>, logical, any, null, character, double[], ...> => null;
type `transitions` <class<`stepFlexclust`>, double, double, double, logical, logical, logical, null, null> => list<double[]>;
