type `%||%` <null, class<`unit`>> => class<`unit`>;
type `cbind_gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`gDesc`, `gTree`, `grob`, `gtable`>, any> => any;
type `compare_unit` <class<`unit`>, class<`unit`>, class<`function`>> => class<`unit`>;
type `dim.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>> => integer[];
type `dimnames<-.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>, list<double[] | character[]> | list<double[] | null> | list<integer[] | null>> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `dimnames.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>, ...> => (list<double[] | character[]> | list<double[] | null> | list<integer[] | null> | list<null>);
type `gtable` <class<`unit`>, class<`unit`>, logical, character, null, null, null> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `[.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>, any, any> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_add_cols` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`unit`>, double> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_add_col_space` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`unit`>> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_add_grob` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`circle`, `gDesc`, `grob`> | class<`gDesc`, `grob`, `points`> | class<`gDesc`, `grob`, `rect`> | class<`matrix`> | list<class<`gDesc`, `grob`, `rect`> | class<`circle`, `gDesc`, `grob`> | class<`gDesc`, `grob`, `lines`>>, double | integer[], double | integer[], double | integer[], double | integer[], double[], character, character> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_add_padding` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`unit`>> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_add_rows` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`unit`>, double> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_add_row_space` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`unit`>> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_col` <character, list<class<`gDesc`, `grob`, `rect`> | class<`circle`, `gDesc`, `grob`> | class<`gDesc`, `grob`, `lines`>>, null, null, null, null> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_filter` <class<`gDesc`, `gTree`, `grob`, `gtable`>, character, logical, logical, logical> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_layout` <class<`gDesc`, `gTree`, `grob`, `gtable`>> => class<`layout`>;
type `gtable_matrix` <character, class<`matrix`>, class<`unit`>, class<`unit`>, class<`matrix`> | null, logical, character, null> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_row` <character, list<class<`gDesc`, `grob`, `rect`> | class<`circle`, `gDesc`, `grob`> | class<`gDesc`, `grob`, `lines`>>, null, null, null, null> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_show_layout` <class<`gDesc`, `gTree`, `grob`, `gtable`>, ...> => class<`viewport`>;
type `gtable_trim` <class<`gDesc`, `gTree`, `grob`, `gtable`>> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `insert.unit` <class<`unit`>, class<`unit`>, double> => class<`unit`>;
type `is.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>> => logical;
type `length.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>> => integer;
type `makeContent.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `makeContext.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `makeContext.gTableChild` <class<`circle`, `gDesc`, `gTableChild`, `grob`> | class<`gDesc`, `gTableChild`, `grob`, `lines`> | class<`gDesc`, `gTableChild`, `grob`, `null`> | class<`gDesc`, `gTableChild`, `grob`, `points`> | class<`gDesc`, `gTableChild`, `grob`, `rect`>> => (class<`circle`, `gDesc`, `gTableChild`, `grob`> | class<`gDesc`, `gTableChild`, `grob`, `lines`> | class<`gDesc`, `gTableChild`, `grob`, `null`> | class<`gDesc`, `gTableChild`, `grob`, `points`> | class<`gDesc`, `gTableChild`, `grob`, `rect`>);
type `neg_to_pos` <double | integer[], any> => (double | integer[]);
type `new_data_frame` <list<double[] | character[]> | list<double | character>, double | null> => class<`data.frame`>;
type `plot.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>, ...> => null;
type `rbind_gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`gDesc`, `gTree`, `grob`, `gtable`>, character> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `t.gtable` <class<`gDesc`, `gTree`, `grob`, `gtable`>> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `vpname` <class<`data.frame`>> => character[];
