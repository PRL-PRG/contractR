type `contr.block` <integer[], logical> => class<`matrix`>;
type `efficient.rounding` <double[], double, logical> => double[];
type `expand` <class<`matrix`>> => class<`matrix`>;
type `expand.formula` <class<`formula`>, any, logical, any> => class<`formula`>;
type `filter` <character[]> => logical[];
type `find.dot` <character[]> => double;
type `findFunction` <character, character> => double[];
type `FUN` <class<`name`>> => character;
type `gen.factorial` <double[], double, logical, character | integer[], null | character[]> => class<`data.frame`>;
type `gen.mixture` <double, double> => class<`data.frame`>;
type `getCenteredDesign` <integer, double, any> => list<class<`data.frame`> | double[]>;
type `model.matrix.formula` <class<`formula`>, class<`data.frame`>, ...> => class<`matrix`>;
type `nameargs` <...> => character[];
type `optBlock` <class<`formula`>, class<`data.frame`> | class<`factor`>, double[], null, class<`data.frame`> | null, logical, double, character, logical> => list<class<`data.frame`> | double[] | list<class<`data.frame`>>>;
type `optFederov` <class<`formula`>, class<`data.frame`> | class<`matrix`>, any, logical, logical, character, logical, any, logical, double[] | null, double, double> => list<class<`data.frame`> | double[] | double | class<`data.frame`> | integer[]>;
type `optMonteCarlo` <class<`formula`>, class<`data.frame`>, any, logical, character, logical, null, double, null | class<`function`>, logical, double, any> => list<double | class<`data.frame`>>;
type `quad` <...> => character;
type `RandomCand` <integer, double> => class<`matrix`>;
type `RandomLevels` <double, double[]> => double[];
type `RandomMixture` <integer> => double[];
type `remove.nesting` <class<`formula`>> => class<`formula`>;
type `set.factors` <class<`data.frame`>, class<`data.frame`>, logical> => class<`data.frame`>;
