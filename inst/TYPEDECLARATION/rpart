type `descendants` <double[], logical> => class<`matrix`>;
type `formatg` <double[] | class<`matrix`>, any, character> => (character[] | class<`matrix`>);
type `importance` <list<any> | class<`rpart`>> => double[];
type `labels.rpart` <class<`rpart`>, double, any, any, logical, ...> => character[];
type `meanvar` <class<`rpart`>, ...> => list<double[] | character[]>;
type `meanvar.rpart` <class<`rpart`>, character, character, ...> => list<double[] | character[]>;
type `node.match` <double[], double[], any, logical> => integer[];
type `path.rpart` <class<`rpart`>, double[], double, logical> => list<character[]>;
type `plot.rpart` <class<`rpart`>, logical, double, logical, any, double, double, ...> => list<double[]>;
type `predict.rpart` <class<`rpart`>, any, character[], any, ...> => (class<`factor`> | class<`matrix`> | double[]);
type `pred.rpart` <class<`rpart`>, class<`matrix`, `rpart.matrix`>> => double[];
type `printcp` <class<`rpart`>, integer> => class<`matrix`>;
type `print.rpart` <class<`rpart`>, integer, integer, any, integer, ...> => class<`rpart`>;
type `prune` <class<`rpart`>, ...> => class<`rpart`>;
type `prune.rpart` <class<`rpart`>, double, ...> => class<`rpart`>;
type `residuals.rpart` <class<`rpart`>, character[], ...> => double[];
type `rpart` <any, any, any, any, class<`function`>, any, logical, logical> => class<`rpart`>;
type `rpart.branch` <double[], double[], double[], any> => list<class<`matrix`>>;
type `rpartcallback` <list<class<`function`>>, integer, list<double[] | class<`function`>> | list<double[] | null | class<`function`>> | list<double> | list<double | null>> => list<class<`{`> | environment>;
type `rpartco` <class<`rpart`>, any> => list<double[]>;
type `rpart.control` <double, double, double, double, double, double, integer[] | double, integer> => (list<double | integer[]> | list<double>);
type `rpart.exp` <class<`Surv`>, null, any, any> => list<class<`matrix`> | integer[] | class<`function`>>;
type `rpart.matrix` <class<`data.frame`>> => class<`matrix`, `rpart.matrix`>;
type `rsq.rpart` <class<`rpart`>> => null;
type `snip.rpart` <class<`rpart`>, double | integer[]> => class<`rpart`>;
type `string.bounding.box` <character[]> => list<integer[]>;
type `summary.rpart` <class<`rpart`>, double, integer, any, ...> => class<`rpart`>;
type `text.rpart` <class<`rpart`>, logical, any, class<`function`>, logical, null, integer, logical> => null;
type `tree.depth` <double[]> => double[];
type `xpred.rpart` <class<`rpart`>, integer[], any, logical> => (class<`array`> | class<`matrix`>);
