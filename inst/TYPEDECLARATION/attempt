type `[[` <class<`condition`, `error`, `simpleError`>> => class<`condition`, `error`, `simpleError`>;
type `attempt` <any, null, logical, logical> => class<`try-error`>;
type `filter` <character[]> => logical[];
type `FUN` <character> => logical;
type `if_all` <integer[], class<`formula`>, class<`formula`>> => character[];
type `if_any` <integer[], class<`function`>, class<`formula`>> => character[];
type `if_else` <logical, class<`function`>, class<`formula`>, any> => character;
type `if_none` <integer[], class<`function`>, any> => null;
type `if_not` <double, class<`function`>, class<`formula`>> => character;
type `if_then` <double, class<`function`>, class<`formula`>> => character;
type `is_try_error` <class<`try-error`>> => logical;
type `try_catch` <any, class<`function`>, class<`function`>, null> => class<`condition`, `error`, `simpleError`>;
type `with_message` <class<`function`>, character> => class<`function`>;
type `with_warning` <class<`function`>, character> => class<`function`>;
