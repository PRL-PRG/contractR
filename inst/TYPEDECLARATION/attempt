type `attempt` <any, character | null, logical, logical> => (class<`try-error`> | double);
type `if_all` <integer[], class<`formula`>, class<`formula`>> => character[];
type `if_any` <integer[], class<`function`>, class<`formula`>> => character[];
type `if_else` <double, class<`function`>, class<`formula`>, any> => character;
type `if_none` <integer[], class<`function`>, any> => (double[] | null);
type `if_not` <double, class<`function`>, class<`formula`>> => character;
type `if_then` <double, class<`function`>, class<`formula`>> => character;
type `is_try_error` <class<`try-error`>> => logical;
type `silent_attempt` <...> => (class<`try-error`> | null);
type `silently` <class<`function`>> => class<`function`>;
type `stop_if` <double, class<`function`>, null> => any;
type `surely` <class<`function`>> => class<`function`>;
type `try_catch` <any, class<`formula`> | class<`function`>, class<`formula`> | class<`function`>, null> => any;
type `with_message` <class<`function`>, character> => class<`function`>;
type `without_warning` <class<`function`>> => class<`function`>;
type `with_warning` <class<`function`>, character> => class<`function`>;
