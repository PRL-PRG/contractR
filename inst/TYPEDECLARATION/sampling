type `algofastflightcube` <class<`matrix`>, double[]> => double[];
type `.as_int` <double> => double;
type `balancedcluster` <class<`matrix`>, double, double[], double, logical, double> => class<`matrix`>;
type `balancedstratification` <class<`matrix`>, double[], double[], logical, double> => double[];
type `balancedtwostage` <class<`matrix`>, double, double, double, double[], logical, double> => class<`matrix`>;
type `calib` <class<`matrix`>, double[], double[], double[], character, any, logical, double> => (double[] | null);
type `calibev` <integer[], class<`matrix`>, double[], class<`matrix`>, double[], double[], double[], logical, double> => list<double>;
type `checkcalibration` <class<`matrix`>, double[], double[], double[], double> => list<character | double>;
type `cleanstrata` <double[]> => integer[];
type `cluster` <class<`data.frame`>, character, double, character, any, logical> => class<`data.frame`>;
type `disjunctive` <double[]> => class<`matrix`>;
type `fastflightcube` <class<`matrix`>, double[], double, logical> => double[];
type `filter` <character[]> => logical[];
type `gencalib` <class<`matrix`>, class<`matrix`>, double[], double[], double[], character, any, logical, double, double> => double[];
type `getdata` <class<`data.frame`>, double[] | class<`data.frame`> | list<class<`data.frame`>>> => (class<`data.frame`> | list<class<`data.frame`>>);
type `Hajekestimator` <double[], double[], integer | null, character> => class<`matrix`>;
type `Hajekstrata` <integer[], double[], integer[], class<`table`>, character, logical> => class<`matrix`>;
type `HTestimator` <double[], double[]> => class<`matrix`>;
type `HTstrata` <integer[], double[], integer[], logical> => class<`matrix`>;
type `inclusionprobabilities` <double[], double> => double[];
type `inclusionprobastrata` <double[], double[]> => double[];
type `jump` <class<`matrix`>, double[]> => double[];
type `landingcube` <class<`matrix`>, double[], double[], logical> => double[];
type `mstage` <class<`data.frame`>, character[] | list<character>, any, list<class<`table`> | double[] | double[]>, character[] | list<character>, any, logical> => list<class<`data.frame`>>;
type `reduc` <class<`matrix`>> => class<`matrix`>;
type `samplecube` <class<`matrix`>, double[], double, logical, double> => double[];
type `srswor` <double, integer> => double[];
type `str` <integer[], integer, integer> => double[];
type `strata` <class<`data.frame`>, null | character, class<`table`> | double[], character, any, logical> => class<`data.frame`>;
type `UPpoisson` <double[]> => double[];
type `UPsystematic` <double[], double> => double[];
type `UPsystematicpi2` <double[]> => class<`matrix`>;
type `writesample` <double, integer> => class<`matrix`>;
