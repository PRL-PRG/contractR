type `[[` <class<`condition`, `error`, `simpleError`>> => null | <class<`condition`, `error`, `simpleError`>> => logical;
type `$` < > => character | < > => any | < > => any | < > => any | < > => any | <...> => logical | < > => any | < > => list<double[] | list<character>> | < > => any | < > => any;
type `as.list.iter` <class<`abstractiter`, `iter`>, integer, ...> => list<class<`matrix`> | integer[]>;
type `filter` <character[]> => logical[];
type `FUN` <integer> => character | <class<`factor`>> => character[] | <class<`factor`>> => class<`factor`>;
type `getIterVal` <class<`containeriter`, `iter`> | class<`dataframeiter`, `iter`>, any, ...> => (character | class<`data.frame`> | class<`factor`> | double[]);
type `getIterVal.containeriter` <class<`containeriter`, `iter`>, integer, ...> => (character | integer);
type `getIterVal.dataframeiter` <class<`dataframeiter`, `iter`>, integer, logical, ...> => (class<`data.frame`> | class<`factor`> | double[]);
type `iapply` <class<`array`>, double[]> => class<`abstractiter`, `iter`>;
type `icount` <double> => class<`abstractiter`, `iter`>;
type `icountn` <integer[]> => class<`abstractiter`, `iter`>;
type `idiv` <double, ..., any, any> => class<`abstractiter`, `iter`>;
type `ireadLines` <character, double, ...> => class<`abstractiter`, `iter`>;
type `irnorm` <..., double> => class<`abstractiter`, `iter`>;
type `isplit` <double[], class<`factor`>, logical, ...> => class<`abstractiter`, `iter`>;
type `isplit.default` <double[], class<`factor`>, logical, ...> => class<`abstractiter`, `iter`>;
type `iter` <character[] | integer[] | class<`data.frame`> | class<`function`>, ...> => (class<`containeriter`, `iter`> | class<`dataframeiter`, `iter`> | class<`funiter`, `iter`>);
type `iter.data.frame` <class<`data.frame`>, character[], class<`function`>, logical, ...> => class<`dataframeiter`, `iter`>;
type `iter.default` <character[] | integer[], class<`function`>, logical, ...> => class<`containeriter`, `iter`>;
type `iter.function` <class<`function`>, class<`function`>, logical, ...> => class<`funiter`, `iter`>;
type `iwhich` <list<integer[]>, integer> => integer[];
type `makeIwrapper` <character> => class<`function`>;
type `mysample` <..., double> => class<`abstractiter`, `iter`>;
type `nextElem` <class<`abstractiter`, `iter`> | class<`containeriter`, `iter`> | class<`dataframeiter`, `iter`> | class<`funiter`, `iter`>, ...> => any;
type `nextElem.abstractiter` <class<`abstractiter`, `iter`>, ...> => any;
type `nextElem.containeriter` <class<`containeriter`, `iter`>, ...> => (character | integer);
type `nextElem.dataframeiter` <class<`dataframeiter`, `iter`>, ...> => (class<`data.frame`> | class<`factor`> | double[]);
type `nextElem.funiter` <class<`funiter`, `iter`>, ...> => double;
