type `filter` <character[]> => logical[];
type `iter.iter` <environment | struct<`nextElem`:any => any> | struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical, `chunksize`:integer> | struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>, null> => environment | struct<`nextElem`:any => any> | struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical, `chunksize`:integer> | struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>;
type `nextElem.abstractiter` <environment | struct<`nextElem`:any => any> | struct<`nextElem`:any => any, `hasNext`:any => any>, null> => double[] | character | ^integer[] | struct<`value`:double[], `key`:tuple<character>>;
type `[[` <struct<`message`:character, `call`:null> | struct<`message`:character, `call`:language>> => null | integer;
type `$` <language | symbol> => double[] | character | struct<`value`:double[], `key`:tuple<character>> | ^integer[];
type `as.list.iter` <struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>, `.doRNG.stream`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>, `.doRNG.stream`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `ie1`:struct<`ie1`:struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical>, `qcond`:language, `evalenv`:environment, `argnames`:character, `errorHandling`:character, `verbose`:logical>, `e2`:struct<`args`:language, `argnames`:character[], `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:tuple<>, `verbose`:logical>, `argnames`:character[], `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `ie1`:struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical>, `e2`:struct<`args`:language, `argnames`:character[], `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:tuple<>, `verbose`:logical>, `argnames`:character[], `errorHandling`:character, `verbose`:logical> | struct<`ie1`:struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>, `r`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical>, `qcond`:language, `evalenv`:environment, `argnames`:character[], `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:tuple<struct<`nextElem`:any => any>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:tuple<struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`col`:struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical, `chunksize`:integer>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`col`:struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`i`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`j`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`k`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`ntree`:struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`row`:struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`row`:struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical, `chunksize`:integer>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`x`:struct<`nextElem`:any => any>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `iargs`:struct<`x`:struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical, `chunksize`:integer>>, `argnames`:character, `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `verbose`:logical> | struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical, `chunksize`:integer> | struct<`nextElem`:any => any> | struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>, double, null> => tuple<struct<`i`:integer>, struct<`i`:integer>, struct<`i`:integer>> | list<tuple<>> | list<struct<`col`:^double[]>> | tuple<struct<`col`:integer[]>, struct<`col`:integer[]>, struct<`col`:integer[]>> | list<struct<`i`:double>> | list<struct<`j`:double>> | list<struct<`k`:integer>> | tuple<struct<`ntree`:double>, struct<`ntree`:double>, struct<`ntree`:double>, struct<`ntree`:double>> | list<struct<`row`:struct<`a`:integer, `b`:integer, `c`:integer>>> | list<struct<`row`:^double[]>> | list<struct<`x`:double[]>> | tuple<struct<`x`:^integer[]>, struct<`x`:^integer[]>, struct<`x`:^integer[]>> | tuple<^double[]> | list<^double[]>;
type `getIterVal.containeriter` <struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>, integer, null> => integer[] | double | character;
type `iter.default` <tuple<integer[]> | list<integer[]> | double[] | character[], any => any, logical, null> => struct<`state`:environment, `length`:integer, `checkFunc`:any => any, `recycle`:logical>;
type `getIterVal.dataframeiter` <struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical>, integer, logical, null> => struct<`a`:integer, `b`:integer, `c`:integer> | double[];
type `getIterVal.matrixiter` <struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical, `chunksize`:integer>, integer, null> => ^double[];
type `icount` <double | null> => struct<`nextElem`:any => any>;
type `irnorm` <double, double | null> => struct<`nextElem`:any => any>;
type `iter.data.frame` <struct<`a`:integer[], `b`:integer[], `c`:integer[]>, character[], any => any, logical, null> => struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical>;
type `iter.matrix` <^double[], character, integer, any => any, logical, null> => struct<`state`:environment, `by`:character, `length`:integer, `checkFunc`:any => any, `recycle`:logical, `chunksize`:integer>;
type `FUN` <integer[]> => character[] | integer[];
type `iapply` <^integer[], double[]> => struct<`nextElem`:any => any>;
type `icountn` <double[]> => struct<`nextElem`:any => any>;
type `idiv` <double, null, double | null, null | double> => struct<`nextElem`:any => any>;
type `ireadLines` <character, double, null> => struct<`nextElem`:any => any>;
type `irunif` <double, null> => struct<`nextElem`:any => any>;
type `isplit.default` <double[], integer[] | tuple<integer[], integer[]>, logical, null> => struct<`nextElem`:any => any>;
type `iter.function` <any => any, any => any, logical, null> => struct<`state`:environment, `args`:logical, `checkFunc`:any => any, `recycle`:logical>;
type `iwhich` <tuple<integer[]>, integer[]> => integer[];
type `makeIwrapper` <character> => any => any;
type `mysample` <integer[], double> => struct<`nextElem`:any => any>;
