type `as.list.iter` <class<`iter`, `matrixiter`> | class<`abstractiter`, `iter`> | class<`abstractiter`, `iforever`, `iter`> | class<`abstractiter`, `irep`, `iter`> | class<`abstractiter`, `ilimit`, `iter`> | class<`abstractiter`, `irecycle`, `iter`> | class<`abstractiter`, `iter`, `ivector`> | class<`containeriter`, `iter`>, double, ...> => list<class<`matrix`> | double | integer[]>;
type `FUN` <class<`dataframeiter`, `iter`> | class<`containeriter`, `iter`> | class<`abstractiter`, `iter`> | class<`abstractiter`, `iforever`, `iter`> | class<`abstractiter`, `ihasNext`, `iter`> | class<`abstractiter`, `ilimit`, `iter`> | class<`iter`, `matrixiter`> | class<`abstractiter`, `irep`, `iter`> | class<`funiter`, `iter`> | class<`abstractiter`, `iter`, `ivector`> | class<`abstractiter`, `irecycle`, `iter`> | class<`iforeach`, `iter`>, ...> => any;
type `getIterVal` <class<`containeriter`, `iter`> | class<`dataframeiter`, `iter`> | class<`iter`, `matrixiter`>, any, ...> => any;
type `getIterVal.containeriter` <class<`containeriter`, `iter`>, integer, ...> => any;
type `getIterVal.dataframeiter` <class<`dataframeiter`, `iter`>, integer, logical, ...> => any;
type `getIterVal.matrixiter` <class<`iter`, `matrixiter`>, integer, ...> => any;
type `iapply` <class<`array`> | class<`matrix`>, double[]> => class<`abstractiter`, `iter`>;
type `icount` <double> => class<`abstractiter`, `iter`>;
type `icountn` <double[]> => class<`abstractiter`, `iter`>;
type `idiv` <double, ..., any, any> => class<`abstractiter`, `iter`>;
type `ireadLines` <character, double, ...> => class<`abstractiter`, `iter`>;
type `irnorm` <..., any> => class<`abstractiter`, `iter`>;
type `irunif` <..., any> => class<`abstractiter`, `iter`>;
type `isplit` <double[], class<`factor`> | list<class<`factor`>>, logical, ...> => class<`abstractiter`, `iter`>;
type `isplit.default` <double[], class<`factor`> | list<class<`factor`>>, logical, ...> => class<`abstractiter`, `iter`>;
type `iter` <class<`abstractiter`, `iforever`, `iter`> | class<`abstractiter`, `irecycle`, `iter`> | class<`abstractiter`, `iter`> | character[] | class<`containeriter`, `iter`> | double[] | class<`data.frame`> | class<`dataframeiter`, `iter`> | class<`function`> | class<`foreach`> | class<`matrix`> | list<integer[]>, ...> => (class<`abstractiter`, `iforever`, `iter`> | class<`abstractiter`, `irecycle`, `iter`> | class<`abstractiter`, `iter`> | class<`containeriter`, `iter`> | class<`dataframeiter`, `iter`> | class<`funiter`, `iter`> | class<`iforeach`, `iter`> | class<`iter`, `matrixiter`>);
type `iter.data.frame` <class<`data.frame`>, character[], class<`function`>, logical, ...> => class<`dataframeiter`, `iter`>;
type `iter.default` <character[] | double[] | list<integer[]>, class<`function`>, logical, ...> => class<`containeriter`, `iter`>;
type `iter.function` <class<`function`>, class<`function`>, logical, ...> => class<`funiter`, `iter`>;
type `iter.iter` <class<`abstractiter`, `iforever`, `iter`> | class<`abstractiter`, `irecycle`, `iter`> | class<`abstractiter`, `iter`> | class<`containeriter`, `iter`> | class<`dataframeiter`, `iter`>, ...> => (class<`abstractiter`, `iforever`, `iter`> | class<`abstractiter`, `irecycle`, `iter`> | class<`abstractiter`, `iter`> | class<`containeriter`, `iter`> | class<`dataframeiter`, `iter`>);
type `iter.matrix` <class<`matrix`>, character, integer, class<`function`>, logical, ...> => class<`iter`, `matrixiter`>;
type `iwhich` <list<integer[]>, integer[]> => integer[];
type `makeIwrapper` <character> => class<`function`>;
type `nextElem` <class<`dataframeiter`, `iter`> | class<`containeriter`, `iter`> | class<`abstractiter`, `iter`> | class<`abstractiter`, `iforever`, `iter`> | class<`abstractiter`, `ihasNext`, `iter`> | class<`abstractiter`, `ilimit`, `iter`> | class<`iter`, `matrixiter`> | class<`abstractiter`, `irep`, `iter`> | class<`funiter`, `iter`> | class<`abstractiter`, `iter`, `ivector`> | class<`abstractiter`, `irecycle`, `iter`> | class<`iforeach`, `iter`>, ...> => any;
type `nextElem.abstractiter` <class<`abstractiter`, `iforever`, `iter`> | class<`abstractiter`, `ihasNext`, `iter`> | class<`abstractiter`, `ilimit`, `iter`> | class<`abstractiter`, `iter`> | class<`abstractiter`, `irep`, `iter`> | class<`abstractiter`, `iter`, `ivector`> | class<`abstractiter`, `irecycle`, `iter`>, ...> => any;
type `nextElem.containeriter` <class<`containeriter`, `iter`>, ...> => any;
type `nextElem.dataframeiter` <class<`dataframeiter`, `iter`>, ...> => any;
type `nextElem.funiter` <class<`funiter`, `iter`>, ...> => any;
type `nextElem.matrixiter` <class<`iter`, `matrixiter`>, ...> => any;
