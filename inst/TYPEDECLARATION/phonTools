type `anova.rcr` <class<`rcr`>, ...> => class<`anova.rcr`>;
type `combocalc` <double, double, logical, logical> => double;
type `createtemplate` <class<`data.frame`>, class<`factor`>> => class<`template`>;
type `errorbars` <integer[], integer[], double, double, double, logical, ...> => null;
type `fastacf` <double[], double, character, logical, logical> => class<`data.frame`>;
type `Ffilter` <double[], double[], double[], double, double, logical> => double[];
type `findformants` <class<`sound`> | double[], double, null | double, double, double, logical, logical, logical> => class<`data.frame`>;
type `FIRfilter` <double[], double, double, double, double, logical, double[], logical> => double[];
type `formanttrack` <class<`sound`>, double, double, double, double, double, double, double, logical, double, logical> => class<`data.frame`>;
type `freqresponse` <double[], double[], double, logical, logical, double, ...> => class<`data.frame`>;
type `hotelling.test` <class<`data.frame`>, class<`data.frame`> | null> => class<`hotelling.test`>;
type `imputeformants` <double[], double[], class<`factor`>> => double[];
type `interpolate` <double[], double[], double, double, logical, character, ...> => class<`data.frame`>;
type `ipainfo` <any> => list<any>;
type `ldboundary` <double[], double[], class<`matrix`>, double, double, logical, ...> => double[];
type `ldclassify` <class<`data.frame`>, class<`matrix`>, class<`matrix`>, null, character> => class<`factor`>;
type `lpc` <class<`sound`> | class<`ts`> | double[], double, any, logical, logical, logical> => double[];
type `makeFIR` <double[], double[], double, double[] | null, character, logical, character> => double[];
type `makesound` <double[], any, double> => class<`sound`>;
type `multiplot` <double, character, double[], logical> => null;
type `normalize` <class<`data.frame`>, integer[], class<`factor`>, character, character[] | null> => class<`data.frame`>;
type `ntypes` <class<`factor`>> => integer;
type `peakfind` <double[], logical> => (double | integer[]);
type `phasor` <complex[], logical, logical, logical, any, any, ...> => null;
type `pitchtrack` <class<`sound`> | double[], double[], double, double, double, logical, logical, double, logical> => (class<`data.frame`> | double[]);
type `plot.sound` <class<`sound`>, ...> => null;
type `plot.spectrogram` <class<`spectrogram`>, any, double[], any, logical, ...> => null;
type `plot.template` <class<`template`>, logical, logical, ...> => null;
type `polezero` <double[], double[], ...> => null;
type `powertrack` <class<`sound`>, double, double, double, logical, logical, ...> => class<`data.frame`>;
type `preemphasis` <class<`ts`> | double[], double, any, logical, double> => (class<`ts`> | double[]);
type `PSTM` <class<`data.frame`>, integer[], class<`template`>, logical> => (class<`data.frame`> | list<class<`data.frame`>>);
type `pwelch` <double[], double, double, double, character, logical, double, double, logical, any, ...> => class<`matrix`>;
type `rcr` <class<`formula`>, integer[], class<`data.frame`>, ...> => class<`rcr`>;
type `reduce.fraction` <double[]> => double[];
type `resample` <class<`ts`> | double[], double, double, double, double, logical> => (class<`ts`> | double[]);
type `rmvtnorm` <double, double, double[], double> => class<`matrix`>;
type `rotate` <class<`matrix`> | complex[], double, logical, logical> => (class<`matrix`> | complex[]);
type `sdellipse` <class<`matrix`>, double, double, logical, logical, double[] | null, logical, ...> => class<`matrix`>;
type `sinc` <double[], logical> => double[];
type `sinusoid` <double[], double[], double, double[], double, logical, logical, null> => class<`data.frame`>;
type `spectralslice` <class<`sound`> | class<`ts`> | double[], double, any, logical, logical, character, double, logical, double, any, logical, logical, ...> => class<`matrix`>;
type `spectrogram` <class<`sound`> | class<`ts`>, any, double, double, double, double, double, logical, double, any, character, logical, character, double, logical> => class<`spectrogram`>;
type `summary.rcr` <class<`rcr`>, ...> => class<`summary.rcr`>;
type `synthfilter` <class<`ts`> | double[], double[], any, logical, double> => (class<`ts`> | double[]);
type `vowelplot` <double[], double[], class<`factor`>, null, null, logical, logical, double, logical, double, null, character, logical, logical, logical, ...> => null;
type `vowelsynth` <double[], double[], double, double[], double, logical, logical, double, double, null> => (class<`sound`> | double[]);
type `vplot` <integer[], integer[], class<`factor`>, null, null, logical, double, logical, logical, logical, logical, ...> => null;
type `windowfunc` <class<`ts`> | double[], character, any> => double[];
type `writesound` <double[], character, double> => null;
type `xsampatoIPA` <character[] | class<`factor`>, logical, logical> => class<`hexmode`>;
type `zeros` <double[], double> => (class<`matrix`> | double[]);
