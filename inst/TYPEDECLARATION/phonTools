type `anova.rcr` <struct<`formula`:language, `call`:language, `participants`:integer[], `factors`:integer[], `factor.names`:character[], `coefficients`:struct<`(Intercept)`:double[], `vowel3'`:double[], `vowelA`:double[], `vowelE`:double[], `voweli`:double[], `vowelI`:double[], `vowelO`:double[], `vowelu`:double[], `vowelU`:double[], `vowelV`:double[]>, `coefficient.means`:double[], `coefficient.names`:character[], `varExp`:double[]>, null> => struct<`call`:language, `coefficients`:struct<`df1`:double[], `df2`:double[], `f.value`:double[], `p.value`:double[]>>;
type `combocalc` <double, double, logical, logical> => double;
type `errorbars` <integer[], integer[], double, double, double, logical, double | null> => null;
type `fastacf` <double[], double, character, logical, logical> => struct<`lag`:integer[], `acf`:double[]>;
type `Ffilter` <double[], double[], double[], double, double, logical> => double[];
type `filter` <character[]> => logical[];
type `findformants` <double[] | struct<`filename`:character, `fs`:double, `numSamples`:integer, `duration`:double, `sound`:double[]>, double, null | double, double, double, logical, logical, logical> => struct<`formant`:double[], `bandwidth`:double[]>;
type `FIRfilter` <double[], double, double, double, double, logical, double[], logical> => double[];
type `formanttrack` <struct<`filename`:character, `fs`:integer, `numSamples`:double, `duration`:double, `sound`:double[]>, double, double, double, double, double, double, symbol, logical, double, logical> => struct<`time`:double[], `f1`:double[], `f2`:double[], `f3`:double[], `f4`:double[], `f5`:double[]>;
type `freqresponse` <double[], double[], double, logical, logical, double, null> => struct<`frequency`:double[], `response`:double[]>;
type `FUN` <double> => double[] | language;
type `hotelling.test` <struct<`(Intercept)`:double[], `vowel3'`:double[], `vowelA`:double[], `vowelE`:double[], `voweli`:double[], `vowelI`:double[], `vowelO`:double[], `vowelu`:double[], `vowelU`:double[], `vowelV`:double[]>, null | struct<`(Intercept)`:double[], `vowel3'`:double[], `vowelA`:double[], `vowelE`:double[], `voweli`:double[], `vowelI`:double[], `vowelO`:double[], `vowelu`:double[], `vowelU`:double[], `vowelV`:double[]>> => struct<`f.value`:^double[], `df1`:integer, `df2`:double, `p.value`:^double[], `samples`:double>;
type `interpolate` <double[], double[], double, double, logical, character, null> => struct<`x`:double[], `y`:double[]>;
type `ipainfo` <null> => struct<`symbol`:integer[], `description`:character[], `num`:integer[], `chooseplot`:struct<`height`:double[], `frontness`:double[], `rounded`:double[]>, `sampa`:character[]>;
type `ldboundary` <double[], double[], ^double[], double, double, logical, null> => double[];
type `lpc` <double[] | struct<`filename`:character, `fs`:double, `numSamples`:integer, `duration`:double, `sound`:double[]>, double, double | symbol, logical, logical, logical> => double[];
type `makesound` <double[], character | null, double> => struct<`filename`:character, `fs`:double, `numSamples`:integer, `duration`:double, `sound`:double[]>;
type `multiplot` <double, character, double[], logical> => null;
type `ntypes` <integer[]> => integer;
type `peakfind` <double[], logical> => integer[];
type `phasor` <complex[], logical, logical, logical, null, null, null> => null;
type `pitchtrack` <struct<`filename`:character, `fs`:integer, `numSamples`:double, `duration`:double, `sound`:double[]> | double[], double[], double, symbol | double, double, logical, logical, double, logical> => struct<`time`:double[], `f0`:double[], `acf`:double[]> | double[];
type `plot.sound` <struct<`filename`:character, `fs`:double, `numSamples`:integer, `duration`:double, `sound`:double[]> | struct<`filename`:character, `fs`:integer, `numSamples`:double, `duration`:double, `sound`:double[]>, null> => null;
type `plot.spectrogram` <struct<`spectrogram`:^double[], `fs`:double, `windowlength`:double, `timestep`:double, `dynamicrange`:double, `colors`:logical, `maxfreq`:double>, null, double[], null, logical, null> => null;
type `plot.template` <struct<`classes`:character[], `means`:^double[], `covariance`:^double[], `ranges`:^double[], `territory`:null>, logical, logical, null> => null;
type `polezero` <double[], double[], null> => null;
type `powertrack` <struct<`filename`:character, `fs`:integer, `numSamples`:double, `duration`:double, `sound`:double[]>, double, double, double, logical, logical, null> => struct<`time`:double[], `power`:double[]>;
type `preemphasis` <double[], double, double | symbol, logical, double> => double[];
type `pwelch` <double[], double, double, double, character, logical, double, double, logical, null, null> => ^double[];
type `rcr` <language, integer[], struct<`type`:integer[], `sex`:integer[], `speaker`:integer[], `vowel`:integer[], `repetition`:integer[], `f0`:integer[], `f1`:integer[], `f2`:integer[], `f3`:integer[]>, null> => struct<`formula`:language, `call`:language, `participants`:integer[], `factors`:integer[], `factor.names`:character[], `coefficients`:struct<`(Intercept)`:double[], `f0`:double[], `f3`:double[], `f0:f3`:double[]>, `coefficient.means`:double[], `coefficient.names`:character[], `varExp`:double[]> | struct<`formula`:language, `call`:language, `participants`:integer[], `factors`:integer[], `factor.names`:character[], `coefficients`:struct<`(Intercept)`:double[], `vowel3'`:double[], `vowelA`:double[], `vowelE`:double[], `voweli`:double[], `vowelI`:double[], `vowelO`:double[], `vowelu`:double[], `vowelU`:double[], `vowelV`:double[]>, `coefficient.means`:double[], `coefficient.names`:character[], `varExp`:double[]>;
type `rotate` <complex[] | ^integer[], double, logical, logical> => complex[] | ^double[];
type `sdellipse` <^double[], double, double, logical, logical, null | double[], logical, null | double | character> => ^double[];
type `sinc` <double[], logical> => double[];
type `sinusoid` <double[], double[], double, double[], double, logical, logical, null> => struct<`time`:double[], `wave1`:double[]>;
type `spectralslice` <double[] | struct<`filename`:character, `fs`:double, `numSamples`:integer, `duration`:double, `sound`:double[]>, double, double | symbol, logical, logical, character, double, logical, double, null, logical, logical, character | double | null> => ^double[];
type `spectrogram` <double[] | struct<`filename`:character, `fs`:integer, `numSamples`:double, `duration`:double, `sound`:double[]>, symbol, double, double, double, double, logical, double, symbol, character, logical, character, double, logical> => struct<`spectrogram`:^double[], `fs`:double, `windowlength`:double, `timestep`:double, `dynamicrange`:double, `colors`:logical, `maxfreq`:double>;
type `summary.rcr` <struct<`formula`:language, `call`:language, `participants`:integer[], `factors`:integer[], `factor.names`:character[], `coefficients`:struct<`(Intercept)`:double[], `f0`:double[], `f3`:double[], `f0:f3`:double[]>, `coefficient.means`:double[], `coefficient.names`:character[], `varExp`:double[]> | struct<`formula`:language, `call`:language, `participants`:integer[], `factors`:integer[], `factor.names`:character[], `coefficients`:struct<`(Intercept)`:double[], `vowel3'`:double[], `vowelA`:double[], `vowelE`:double[], `voweli`:double[], `vowelI`:double[], `vowelO`:double[], `vowelu`:double[], `vowelU`:double[], `vowelV`:double[]>, `coefficient.means`:double[], `coefficient.names`:character[], `varExp`:double[]>, null> => struct<`call`:language, `coefficients`:^double[]>;
type `synthfilter` <double[], double[], double | symbol, logical, double> => double[];
type `vowelplot` <double[], double[], integer[], null | double | any => any, null | double | character[], logical, logical, double, logical, null | double | any => any, null | double | tuple<>, character, logical, logical, logical, null | character> => null;
type `vplot` <integer[], integer[], integer[], null | any => any, null, logical, double, logical, logical, logical, logical, null | double> => null;
type `writesound` <double[], character, double> => null;
