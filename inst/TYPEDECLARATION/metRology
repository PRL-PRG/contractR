type `algA` <class<`array`> | double[], double, logical, double, double, logical> => list<double>;
type `algS` <class<`array`> | double[], any, logical, double, logical, double, double, logical> => double;
type `barplot.mandel.kh` <class<`data.frame`, `mandel.kh`>, double[], any, character, character, logical, logical, any, character, logical, ..., double, double[], double, character, double, double, double, double, double> => class<`matrix`>;
type `barplot.MSD` <class<`MSD`, `numeric`>, character, character[], logical, double[], double, double[], double[], integer, ...> => class<`matrix`>;
type `bkp` <class<`blockplot`, `list`> | list<^double[] | class<`factor`> | character[] | double[] | class<`factor`> | character[] | double[] | null | character[]>, character[], null, null, character | null, character | null, character, logical, logical, double, double, null, null | character[], null, null, double, double, double, double, null> => list<^double[] | class<`factor`> | character[] | double[] | class<`factor`> | character[] | double[] | null | character[]>;
type `blockplot` <class<`formula`> | ^double[], ...> => class<`blockplot`, `list`>;
type `blockplot.default` <^double[], character, character[], class<`factor`> | null, null, null, character | null, character | null, character, character[] | logical, logical, logical, null, logical, logical, ...> => class<`blockplot`, `list`>;
type `blockplot.formula` <class<`formula`>, null, ..., any, null, null> => class<`blockplot`, `list`>;
type `boxplot.mandel.kh` <class<`data.frame`, `mandel.kh`>, double[], any, character, character, logical, logical, any, character, logical, logical, any, ..., double, double[], double, character, double, double, double> => list<class<`matrix`> | double[] | character[]>;
type `buildCor` <double, class<`matrix`> | double[]> => class<`matrix`>;
type `buildCov` <integer[], any, double[], class<`matrix`>, any> => class<`matrix`>;
type `cbind` <..., double> => (class<`data.frame`> | class<`matrix`>);
type `cbind.default` <..., double> => class<`matrix`>;
type `construct.ilab` <character[] | class<`factor`>, character | class<`factor`>, character | class<`factor`>, ^double[], any, any, any, any, any, any, null | character, null, null, character[] | null, double, ...> => class<`ilab`>;
type `.construct.loc.est` <double, double, double | null, double[], double[], ^logical[], double[], double[], character, class<`lm`, `rlm`> | list<double>> => class<`loc.est`>;
type `.construct.uncert` <class<`call`>, class<`formula`> | class<`function`> | expression | null, double | null, double, character, null | list<double>, null | list<null>, double[] | list<double>, double[] | list<double>, null, character[] | null, class<`matrix`> | null, class<`matrix`>, null, null | list<character>, null | list<list<double>>, class<`data.frame`> | double[], class<`data.frame`> | double[], null | double, null | list<double[] | class<`data.frame`>>> => class<`list`, `uncert`>;
type `contribs` <class<`list`, `uncert`>, any, logical, logical, logical, logical> => (class<`matrix`> | double[]);
type `cov.dellipse` <class<`data.frame`> | class<`matrix`>, null, character[] | null, null | class<`function`>, null, list<any>> => class<`cov.dellipse`>;
type `cplot` <double[], double[], null, character, logical, double[], character[], logical, character, null, logical, double, double, ...> => class<`matrix`>;
type `data.ellipse` <class<`cov.dellipse`>, double[], logical, double, ...> => class<`d.ellipse`>;
type `drop1.uncert` <class<`list`, `uncert`>, any, logical, character[], ...> => (class<`data.frame`, `drop1.uncert`> | double[]);
type `dsl` <double[], ..., logical> => class<`loc.est`>;
type `dsl.default` <double[], double[], null, null, ..., logical> => class<`loc.est`>;
type `dtri` <double[], double, double, double, logical> => double[];
type `duewer.plot` <double[], ...> => list<double>;
type `duewer.plot.default` <double[], double[], double, double, double, null, integer[], character[], any, any, any, any, any, null, null, any, character, character, double, logical> => list<double>;
type `.get.df` <double, double> => double;
type `.get.mandel.rowname` <character, any> => character;
type `.get.pars` <character, double, double, any> => list<double>;
type `gplot` <class<`data.frame`, `mandel.kh`>, character | null, character | null, character, null, double, logical, double, logical, double, double, character | integer[], logical, character, double, double, logical, double, double, double> => integer[];
type `GUM` <character[], class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`> | double[], character, class<`matrix`>, character[], double, character, double, ...> => list<double[] | class<`matrix`> | character[] | double | class<`matrix`> | character[]>;
type `GUM.validate` <character[], double[], double[], double[], character[], character[], character, class<`matrix`>, character[], double, character, double> => double;
type `huber.estimate` <double[], ...> => class<`loc.est`>;
type `huber.estimate.default` <double[], double[], double, ...> => class<`loc.est`>;
type `[.ilab` <class<`ilab`>, integer[], any> => class<`ilab`>;
type `kplot` <class<`ilab`> | double[], ...> => list<integer[]>;
type `kplot.default` <double[], double[], null, double, double, double[], double[], double, null, logical, logical, any, any, any, null, null, null, double, double, integer[]> => list<integer[]>;
type `kplot.ilab` <class<`ilab`>, ...> => list<integer[]>;
type `LCS` <double[], double[], double, character, logical, logical> => integer[];
type `mandel.h` <class<`data.frame`> | class<`ilab`> | ^double[], class<`factor`> | null, null | class<`factor`>, any, null | character, any, null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.h.default` <class<`data.frame`> | ^double[], class<`factor`>, null | class<`factor`>, logical, null | character, character[], null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.h.ilab` <class<`ilab`>, null, null, logical, null, character[], null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.k` <class<`data.frame`> | class<`ilab`> | ^double[], class<`factor`> | null, null | class<`factor`>, any, null | character, any, null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.k.default` <class<`data.frame`> | ^double[], class<`factor`>, null | class<`factor`>, logical, null | character, character[], null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.kh` <class<`data.frame`> | class<`ilab`> | ^double[], class<`factor`> | null, any, any, any, any, any, null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.kh.data.frame` <class<`data.frame`>, class<`factor`>, any, logical, any, character[], character[], null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.kh.default` <^double[], class<`factor`>, class<`factor`>, logical, any, character[], character[], null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.kh.ilab` <class<`ilab`>, null, null, logical, null, character, character[], null, ...> => class<`data.frame`, `mandel.kh`>;
type `mandel.k.ilab` <class<`ilab`>, null, null, logical, null, character[], null, ...> => class<`data.frame`, `mandel.kh`>;
type `mle.1wre` <double[], double[], double[], double, double, integer[], double, double, logical> => class<`summary.mle.1wre`>;
type `MM.estimate` <double[], ...> => class<`loc.est`>;
type `MM.estimate.default` <double[], double[], double, ...> => class<`loc.est`>;
type `mpaule` <double[], ..., any, double> => class<`loc.est`>;
type `mpaule.default` <double[], double[], null, null, double, double, ...> => class<`loc.est`>;
type `msd` <double[], class<`function`> | double[], ...> => class<`MSD`, `numeric`>;
type `nclass.23` <double[]> => double;
type `.neg.ll.reml` <double, double, double[], double[], logical, logical, logical> => double;
type `.newton.raphson` <class<`function`>, class<`function`>, double, double, logical, double> => double;
type `plot.d.ellipse` <class<`d.ellipse`>, double, double, double, null, null, double, logical, double, any, any, logical, double, double, double, null, null, ...> => null;
type `plot.drop1.uncert` <class<`data.frame`, `drop1.uncert`>, ..., character[]> => null;
type `plot.ilab` <class<`ilab`>, ...> => list<integer[]>;
type `plot.mandel.kh` <class<`data.frame`, `mandel.kh`>, double[], any, character, character, null, double, logical, double, logical, double, double, character | integer[], double, double[], double, logical, character, double, double> => integer[];
type `plot.MSD` <class<`MSD`, `numeric`>, character, character, ...> => null;
type `plot.uncert` <class<`list`, `uncert`>, integer[], character, logical, list<character | expression>, double, ...> => class<`matrix`>;
type `plot.uncertMC` <class<`list`, `uncert`, `uncertMC`>, integer[], character, logical, list<character>, character, ..., double, double, double, double, double, null, null, null> => null;
type `.pmsd.interp.spline` <integer, logical> => class<`function`>;
type `print.ilab` <class<`ilab`>, ..., null, logical> => class<`data.frame`>;
type `print.loc.est` <class<`loc.est`>, ...> => null;
type `print.uncert` <class<`list`, `uncert`>, null, logical, ..., logical> => class<`list`, `uncert`>;
type `print.uncertMC` <class<`list`, `uncert`, `uncertMC`>, null, logical, ..., logical, logical> => class<`list`, `uncert`, `uncertMC`>;
type `ptri` <double[], double, double, double, logical, logical> => double[];
type `qmandelh` <double[], integer[], logical, logical> => double[];
type `qmandelk` <double[], integer[], double, logical, logical> => double[];
type `qmsd` <double[], integer, logical, character[], double> => double[];
type `.qmsd.interp` <double[], integer, logical> => double[];
type `qtri` <double[], double, double, double, logical, logical> => double[];
type `qt.scaled` <double[], double, double, double, any, logical, logical> => double[];
type `rbind` <..., any> => (class<`data.frame`> | class<`ilab`> | class<`matrix`>);
type `rbind.default` <..., double> => class<`matrix`>;
type `rbind.ilab` <..., double> => class<`ilab`>;
type `reml.loc` <double[], ..., logical> => class<`loc.est`>;
type `reml.loc.default` <double[], double[], null, null, logical, double, logical, ...> => class<`loc.est`>;
type `rtri` <double, double, double, double> => double[];
type `rt.scaled` <double, double, double, double, any> => double[];
type `subset.ilab` <class<`ilab`>, any, logical, ...> => class<`ilab`>;
type `summary.d.ellipse` <class<`d.ellipse`>, ...> => list<class<`summaryDefault`, `table`>>;
type `.to.wide` <^double[], class<`factor`>, class<`factor`>> => class<`data.frame`>;
type `uncert` <any, ...> => (class<`list`, `uncert`> | class<`list`, `uncert`, `uncertMC`>);
type `uncert.default` <any, double[], character[], any, any, null, null, double, null, logical, double[], ...> => class<`list`, `uncert`>;
type `uncert.expression` <expression, list<double>, list<double>, character, any, any, null, null, double, double, logical, ...> => (class<`list`, `uncert`> | class<`list`, `uncert`, `uncertMC`>);
type `uncert.formula` <class<`formula`>, list<double>, list<double>, character, any, any, null, null, double, double, logical, ...> => (class<`list`, `uncert`> | class<`list`, `uncert`, `uncertMC`>);
type `uncert.function` <class<`function`>, list<double>, any, character, any, any, null, null, any, double, logical, ...> => class<`list`, `uncert`>;
type `uncertMC` <class<`formula`> | expression, list<double>, any, character, any, any, any, null | character[], any, double, logical, logical, ...> => class<`list`, `uncert`, `uncertMC`>;
type `updateCor` <class<`matrix`>, double[], any> => class<`matrix`>;
type `update.uncert` <class<`list`, `uncert`>, null, null | character, null, null | list<double>, null, null, null, null, null, null, null, null, null, ...> => (class<`list`, `uncert`> | class<`list`, `uncert`, `uncertMC`>);
type `vr.mle` <double[], double[], double[], double, double, integer[], double, double, logical> => class<`summary.vr.mle`>;
type `w.s` <double[], double[], double[], double> => double;
type `xs.plot` <class<`array`> | double[], ...> => list<class<`array`> | double | list<class<`data.frame`>>>;
type `xs.plot.default` <class<`array`> | double[], any, any, any, null | logical, any, any, double[], character[], character[], character, character, any, logical, character, character, double, logical, character, character[]> => list<class<`array`> | double | list<class<`data.frame`>>>;
type `youden.plot` <class<`data.frame`> | double[], ...> => class<`d.ellipse`>;
type `youden.plot.default` <class<`data.frame`> | double[], null | double[], character[], any, double[], any, any, integer, double, character, character, any, any, any, character[], character[], double, double, double, double> => class<`d.ellipse`>;
type `yplot` <class<`data.frame`> | double[], ...> => class<`d.ellipse`>;
