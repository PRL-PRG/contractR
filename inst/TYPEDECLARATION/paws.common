type `build` <any> => any;
type `check_config_file_region` <any> => null;
type `check_os_region` < > => character;
type `check_r_env_region` < > => character;
type `client_config` <any, any, null> => any;
type `Config` <class<`struct`>, character, character, logical, character, logical, double, null, logical, logical, logical, logical, logical, logical, logical, logical, null, logical> => class<`struct`>;
type `FUN` <double | character | null | list<any>> => logical;
type `get_aws_path` < > => character;
type `get_os_env_variable` <character> => character;
type `get_region` <any> => any;
type `Handler` <class<`function`>, character> => list<class<`function`> | character>;
type `HandlerList` <..., null> => list<null | list<list<class<`function`> | character>>>;
type `Handlers` <list<null | list<list<class<`function`> | character>>>, list<null | list<list<class<`function`> | character>>>, list<null | list<list<class<`function`> | character>>>, list<null | list<list<class<`function`> | character>>>, list<null | list<list<class<`function`> | character>>>, list<null | list<list<class<`function`> | character>>>, list<null | list<list<class<`function`> | character>>>, list<null | list<list<class<`function`> | character>>>, list<null | list<any>>, list<null | list<any>>, list<null | list<any>>> => class<`struct`>;
type `is_empty` <double | character | null | list<any>> => logical;
type `is_empty.character` <character> => logical;
type `is_empty.default` <double | null> => logical;
type `is_empty.list` <list<double | list<any>>> => logical;
type `new_handlers` <character, character> => class<`struct`>;
type `new_operation` <character, character, character, list<any>, null> => class<`struct`>;
type `new_service` <any, any, null> => any;
type `new_session` < > => class<`struct`>;
type `populate` <character | double | list<any>, character | class<`struct`> | null | list<null>> => (character | class<`struct`> | double | list<double>);
type `send_request` <any> => any;
type `Session` <class<`struct`>, class<`struct`>> => class<`struct`>;
type `set_config` <list<any>, list<character | list<list<character>>>> => list<list<class<`struct`>>>;
type `sign` <any> => any;
type `$.struct` <class<`struct`>, character> => (character | class<`struct`>);
type `tag_add` <character | class<`function`> | class<`struct`> | double | logical[] | list<any>, list<character>> => (character | class<`function`> | class<`struct`> | double | logical[] | list<any>);
type `tag_annotate` <character | class<`function`> | class<`struct`> | double | null | list<class<`function`>>> => (character | class<`function`> | class<`struct`> | double | logical[] | list<class<`function`>>);
type `tag_del` <list<any>, null> => list<any>;
type `tag_get` <character | class<`struct`> | null | list<any>, character> => character;
type `tag_has` <list<any>, character> => logical;
