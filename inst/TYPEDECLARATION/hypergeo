type `buhring_eqn11` <integer[] | double, double, double, double, double, double> => complex[];
type `buhring_eqn12` <integer[], double, double, double, double, double> => complex[];
type `buhring_eqn5_factors` <double, double, double, complex, double> => complex[];
type `buhring_eqn5_series` <double, double, double, double, complex, double, logical, double, double> => complex;
type `complex_factorial` <double, logical> => complex;
type `complex_gamma` <complex, logical> => complex;
type `complex_ode` <complex[], double[], class<`function`>, complex[], null, class<`function`>, class<`function`>, ...> => class<`deSolve`, `matrix`>;
type `crit` <...> => complex[];
type `f` <integer[] | double, double, double, double, double, double> => complex[];
type `f15.1.1` <complex, complex, complex, complex[], double, double> => complex[];
type `f15.3.1` <double, double, double, double, complex[]> => complex;
type `f15.3.10_11_12` <double, double, double, complex, double, double, character> => (complex | null);
type `f15.3.11` <double, double, double, complex, double, double, character> => (complex | null);
type `f15.3.11_bit1` <double, double, double, complex, any> => complex;
type `f15.3.11_bit2_a` <double, double, double, complex, double, double> => (complex | null);
type `f15.3.12` <double, double, double, complex, double, double, character> => complex;
type `f15.3.12_bit1` <double, double, double, complex, double> => complex;
type `f15.3.12_bit2_a` <double, double, double, complex, double, double> => complex;
type `f15.3.13` <double, double, complex[], double, double, character> => complex[];
type `f15.3.13_14` <double, double, double, complex[], double, double, character> => complex[];
type `f15.3.13_a` <double, double, complex[], double, double> => complex[];
type `f15.3.14` <double, double, double, complex, double, double, character> => complex;
type `f15.3.14_bit1_a` <double, double, double, complex, double, double> => complex;
type `f15.3.14_bit2` <double, double, double, complex, double> => complex;
type `f15.3.4` <complex, complex, complex, complex[], double, double> => complex[];
type `f15.3.6` <complex, complex, complex, complex, double, double> => complex;
type `f15.3.7` <complex, complex, complex, complex[], double, double> => complex[];
type `f15.3.8` <complex, complex, complex, complex[], double, double> => complex[];
type `f15.3.9` <complex, complex, complex, complex[], double, double> => complex[];
type `f15.5.1` <double, double, double, any, double, class<`function`>, class<`function`>, logical, ...> => complex;
type `.f3` <double, double, double> => complex;
type `.f4` <complex, complex, complex, complex> => complex;
type `genhypergeo` <complex[] | null, double[] | complex, complex[], double, double, logical, logical, logical, logical> => complex[];
type `genhypergeo_contfrac` <double[], double[], complex, double, double> => complex;
type `genhypergeo_contfrac_single` <double[], double[], complex, double, double> => complex;
type `genhypergeo_series` <complex[] | null, double[] | complex, complex[], double, double, logical, any, logical> => complex[];
type `genhypergeo_shanks` <double[], double, complex, double> => complex;
type `hypergeo` <class<`matrix`> | complex, complex, complex, complex[], double, any> => (class<`matrix`> | complex[]);
type `hypergeo_A_nonpos_int` <double, double, double, complex, double> => complex;
type `hypergeo_AorB_nonpos_int` <double, double, double, complex, double> => complex;
type `hypergeo_buhring` <double, double, double, complex, double, double, double, logical> => complex;
type `hypergeo_contfrac` <double, double, double, complex, double, double> => complex;
type `hypergeo_cover1` <double, double, double, complex[], double, double, character, logical> => (complex[] | null);
type `hypergeo_cover2` <double, double, double, complex[], double, double, character, logical> => complex[];
type `hypergeo_cover3` <double, double, double, complex[], double, double, character, logical> => complex[];
type `hypergeo_general` <complex, complex, complex, complex[], double, double, logical> => complex[];
type `hypergeo_gosper` <double, double, double, complex[], double, double> => complex[];
type `hypergeo_powerseries` <complex, complex, complex, complex[], any, any> => (complex[] | null);
type `hypergeo_press` <double, double, double, complex, ...> => class<`deSolve`, `matrix`>;
type `hypergeo_shanks` <double, double, double, complex, double> => complex;
type `hypergeo_taylor` <double, double, double, complex, double, double> => complex;
type `i15.3.6` <complex, complex, complex> => complex[];
type `i15.3.7` <complex, complex, complex> => complex[];
type `i15.3.8` <complex, complex, complex> => complex[];
type `i15.3.9` <complex, complex, complex> => complex[];
type `isgood` <complex[], double> => logical;
type `is.near_integer` <double[] | complex, null> => logical[];
type `is.nonpos` <double[] | complex> => logical[];
type `is.zero` <complex> => logical;
type `j15.3.6` <double, double, double> => logical[];
type `j15.3.7` <double, double, double> => logical[];
type `j15.3.8` <double, double, double> => logical[];
type `j15.3.9` <double, double, double> => logical[];
type `lanczos` <complex[], logical> => complex[];
type `lpham` <double, double> => double;
type `.process_args` <...> => list<class<`matrix`> | list<integer[]>>;
type `semicircle` <double[], double, complex, logical> => complex[];
type `semidash` <double, double, complex, logical> => complex;
type `shanks` <any, complex, complex> => complex;
type `straight` <double[], double, double> => double[];
type `straightdash` <any, double, double> => double;
type `thingfun` <complex[], logical> => class<`matrix`>;
type `to_complex` <class<`matrix`> | double[]> => (class<`matrix`> | complex[]);
type `to_real` <complex[]> => double[];
type `w07.23.06.0026.01` <double, double, double, complex[], double, double, character> => complex[];
type `w07.23.06.0026.01_bit1` <any, double, any, complex[], any> => complex;
type `w07.23.06.0026.01_bit2` <double, double, double, complex[], double, double> => complex[];
type `w07.23.06.0026.01_bit3_a` <double, double, double, complex[], any> => complex[];
type `w07.23.06.0029.01` <double, double, double, complex, double, double> => complex;
type `w07.23.06.0031.01` <double, double, double, complex, double, double> => complex;
type `w07.23.06.0031.01_bit1` <double, double, double, complex, any, any> => complex;
type `w07.23.06.0031.01_bit2` <double, double, double, complex, double, double> => complex;
