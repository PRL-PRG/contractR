type `-` <class<`bdsmatrix`>, double> => class<`bdsmatrix`>;
type `/` <class<`bdsmatrix`>, double> => class<`bdsmatrix`>;
type `[` <class<`bdsmatrix`>, double[], double[], ..., logical> => (class<`bdsmatrix`> | class<`matrix`>);
type `*` <class<`bdsmatrix`>, double> => class<`bdsmatrix`> | <double, class<`bdsmatrix`>> => class<`bdsmatrix`>;
type `%*%` <class<`matrix`>, class<`gchol.bdsmatrix`>> => class<`matrix`> | <integer[], class<`gchol.bdsmatrix`>> => class<`matrix`> | <class<`bdsmatrix`>, class<`matrix`>> => class<`matrix`> | <class<`gchol.bdsmatrix`>, class<`matrix`>> => class<`matrix`> | <class<`gchol.bdsmatrix`>, integer[]> => class<`matrix`> | <double[], class<`bdsmatrix`>> => class<`matrix`> | <class<`bdsmatrix`>, double[]> => class<`matrix`> | <class<`matrix`>, class<`bdsmatrix`>> => class<`matrix`>;
type `+` <class<`bdsmatrix`>, double> => class<`bdsmatrix`> | <integer[], class<`bdsmatrix`>> => class<`matrix`> | <class<`matrix`>, class<`bdsmatrix`>> => class<`matrix`> | <class<`bdsmatrix`>, class<`bdsmatrix`>> => class<`bdsmatrix`> | <class<`bdsmatrix`>, integer[]> => class<`matrix`>;
type `as.matrix.bdsmatrix` <class<`bdsmatrix`>, ...> => class<`matrix`>;
type `as.matrix.gchol` <class<`gchol`>, logical, ...> => class<`matrix`>;
type `as.matrix.gchol.bdsmatrix` <class<`gchol.bdsmatrix`>, logical, ...> => class<`matrix`>;
type `asMethod` <class<`bdsmatrix`>, character, logical> => class<`matrix`>;
type `backsolve` <class<`gchol`> | class<`gchol.bdsmatrix`> | class<`matrix`>, ...> => class<`matrix`> | <class<`gchol`>, ...> => class<`matrix`> | <class<`gchol.bdsmatrix`>, ...> => class<`matrix`> | <class<`matrix`>, ...> => class<`matrix`>;
type `bdsBlock` <character[], double[]> => class<`bdsmatrix`>;
type `bdsI` <integer[] | character[], any> => class<`bdsmatrix`>;
type `bdsmatrix` <double[], double[], any, null | list<null | character[] | character[] | integer[]>> => class<`bdsmatrix`>;
type `bdsmatrix.reconcile` <class<`function`> | list<any>, character[]> => (class<`bdsmatrix`> | list<class<`bdsmatrix`>>);
type `diag` <class<`bdsmatrix`>, any, any, logical> => double[] | <class<`gchol.bdsmatrix`>, any, any, logical> => double[] | <class<`gchol`>, any, any, logical> => double[];
type `diag<-` <class<`bdsmatrix`>, double[]> => class<`bdsmatrix`>;
type `dim` <any> => integer[] | <any> => integer[] | <any> => integer[];
type `dimnames` <any> => list<character[] | null | character[]>;
type `dimnames<-` <any, any> => class<`bdsmatrix`>;
type `exp` <class<`bdsmatrix`>> => class<`bdsmatrix`>;
type `filter` <character[]> => logical[];
type `FUN` <integer[]> => integer;
type `gchol` <class<`bdsmatrix`>, double> => class<`gchol.bdsmatrix`> | <class<`matrix`>, double> => class<`gchol`> | <class<`matrix`> | class<`bdsmatrix`>, double> => (class<`gchol`> | class<`gchol.bdsmatrix`>);
type `ismat` <class<`bdsmatrix`> | class<`function`> | class<`matrix`>> => logical;
type `kmat` <integer[] | character[], any> => class<`bdsmatrix`>;
type `.local` <class<`gchol`>, any, any> => double[] | <class<`bdsmatrix`>, logical> => double | <class<`gchol`>, class<`matrix`>, integer, logical, ...> => class<`matrix`> | <class<`bdsmatrix`>, any, any> => double[] | <class<`gchol.bdsmatrix`>, any, any> => double[] | <class<`gchol.bdsmatrix`>, class<`matrix`>, integer, logical, ...> => class<`matrix`> | <class<`bdsmatrix`>, logical> => double;
type `max` <class<`bdsmatrix`>, ..., logical> => double;
type `min` <class<`bdsmatrix`>, ..., logical> => double;
type `prod` <class<`bdsmatrix`>, ..., logical> => double;
type `range` <class<`bdsmatrix`>, ..., logical> => double[];
type `round` <class<`bdsmatrix`>, double> => class<`bdsmatrix`>;
type `solve.bdsmatrix` <class<`bdsmatrix`>, any, logical, double, ...> => (class<`matrix`> | double[]);
type `solve.gchol` <class<`gchol`>, any, logical, ...> => (class<`matrix`> | double[]);
type `solve.gchol.bdsmatrix` <class<`gchol.bdsmatrix`>, any, logical, ...> => (class<`bdsmatrix`> | class<`gchol.bdsmatrix`> | class<`matrix`> | double[]);
type `sum` <class<`bdsmatrix`>, ..., logical> => double;
type `unique.bdsmatrix` <class<`bdsmatrix`>, logical, ...> => double[];
type `varlist` <integer[] | character[], any> => class<`bdsmatrix`>;
