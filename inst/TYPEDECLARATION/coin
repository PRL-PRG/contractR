type `:::` <double, double, double, character, any> => double[];
type `[[` <double[] | ^integer[], character[]> => ^double[];
type `@` < > => double[] | <logical> => (class<`matrix`> | double[]) | <logical> => double[];
type `ansari_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `ansari_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `ansari_test.IndependenceProblem` <class<`IndependenceProblem`>, any, logical, double, ...> => any;
type `ansari_trafo` <^integer[] | double[], character[]> => ^double[];
type `approximate` <double, character[], integer, null, any> => class<`function`>;
type `ApproxNullDistribution` <class<`QuadTypeIndependenceTestStatistic`>, ...> => class<`ApproxNullDistribution`> | <class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>, ...> => class<`ApproxNullDistribution`> | <class<`MaxTypeIndependenceTestStatistic`>, ...> => class<`ApproxNullDistribution`> | <class<`ScalarIndependenceTestStatistic`>, ...> => class<`ApproxNullDistribution`>;
type `AsymptNullDistribution` <class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>, ...> => class<`AsymptNullDistribution`> | <class<`ScalarIndependenceTestStatistic`>, ...> => class<`AsymptNullDistribution`> | <class<`QuadTypeIndependenceTestStatistic`>, ...> => class<`AsymptNullDistribution`> | <class<`MaxTypeIndependenceTestStatistic`>, ...> => class<`AsymptNullDistribution`>;
type `asymptotic` <double, double, double> => class<`function`>;
type `average_scores` <^double[], ^integer[] | double[]> => ^double[];
type `check_distribution_arg` <class<`function`> | character[], any> => class<`function`>;
type `check_trafo` <any, any> => any;
type `chisq_test` <class<`formula`> | class<`IndependenceProblem`> | class<`table`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `chisq_test.formula` <class<`formula`>, class<`data.frame`>, null, null, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `chisq_test.IndependenceProblem` <class<`IndependenceProblem`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `chisq_test.table` <class<`table`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `cmh_test` <class<`formula`> | class<`IndependenceProblem`> | class<`table`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `cmh_test.formula` <class<`formula`>, class<`data.frame`>, null, null, ...> => class<`QuadTypeIndependenceTest`>;
type `cmh_test.IndependenceProblem` <class<`IndependenceProblem`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `cmh_test.table` <class<`table`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `.confint` <class<`ScalarIndependenceTestConfint`> | class<`ScalarIndependenceTestStatistic`>, any, ...> => list<double[]> | <class<`ScalarIndependenceTestStatistic`>, class<`AsymptNullDistribution`>, ...> => list<double[]> | <class<`ScalarIndependenceTestStatistic`>, class<`ApproxNullDistribution`>, ...> => list<double[]> | <class<`ScalarIndependenceTestConfint`>, any, ...> => list<double[]> | <class<`ScalarIndependenceTestStatistic`>, class<`ExactNullDistribution`>, ...> => list<double[]>;
type `confint_binom` <double, double, double, character, any> => double[];
type `conover_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `conover_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `conover_test.IndependenceProblem` <class<`IndependenceProblem`>, logical, double, ...> => any;
type `consal_trafo` <double[] | ^integer[], character[], double[]> => (class<`matrix`> | ^double[]);
type `copyslots` <class<`IndependenceLinearStatistic`> | class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`> | class<`IndependenceProblem`> | class<`SymmetryProblem`>, class<`IndependenceLinearStatistic`> | class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => (class<`IndependenceLinearStatistic`> | class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>);
type `covariance` <class<`ScalarIndependenceTest`>, ...> => class<`matrix`> | <class<`QuadTypeIndependenceTest`>, ...> => class<`matrix`> | <class<`QuadTypeIndependenceTestStatistic`>, ...> => class<`matrix`> | <class<`ScalarIndependenceTestConfint`>, ...> => class<`matrix`> | <class<`ScalarIndependenceTestStatistic`>, ...> => class<`matrix`> | <class<`CovarianceMatrix`> | class<`IndependenceLinearStatistic`> | class<`MaxTypeIndependenceTest`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTest`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTest`> | class<`ScalarIndependenceTestConfint`> | class<`ScalarIndependenceTestStatistic`>, ...> => class<`matrix`> | <class<`MaxTypeIndependenceTestStatistic`>, ...> => class<`matrix`> | <class<`CovarianceMatrix`>, ...> => class<`matrix`> | <class<`IndependenceLinearStatistic`>, ...> => class<`matrix`> | <class<`MaxTypeIndependenceTest`>, ...> => class<`matrix`>;
type `cSR_shift_2sample` <double[], integer, double> => list<double[]>;
type `dperm` <class<`ApproxNullDistribution`> | class<`AsymptNullDistribution`> | class<`ExactNullDistribution`> | class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>, any, ...> => (class<`matrix`> | double[] | null) | <class<`ApproxNullDistribution`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`QuadTypeIndependenceTest`>, class<`matrix`> | integer[] | double, ...> => (class<`matrix`> | double[]) | <class<`ExactNullDistribution`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`AsymptNullDistribution`>, any, ...> => (class<`matrix`> | double[] | null) | <class<`ScalarIndependenceTest`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`MaxTypeIndependenceTest`>, any, ...> => (class<`matrix`> | double[] | null);
type `%EQ%` <class<`matrix`> | ^double[], double> => (class<`matrix`> | ^logical[]);
type `exact` <character[], null | double> => class<`function`>;
type `ExactNullDistribution` <class<`ScalarIndependenceTestStatistic`>, ...> => any | <class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>, ...> => any | <class<`QuadTypeIndependenceTestStatistic`>, ...> => class<`ExactNullDistribution`>;
type `expectation` <class<`ScalarIndependenceTest`>, ...> => double | <class<`ScalarIndependenceTestConfint`>, ...> => double | <class<`MaxTypeIndependenceTestStatistic`>, ...> => double[] | <class<`QuadTypeIndependenceTest`>, ...> => double[] | <class<`IndependenceLinearStatistic`>, ...> => double[] | <class<`QuadTypeIndependenceTestStatistic`>, ...> => double[] | <class<`IndependenceLinearStatistic`> | class<`ScalarIndependenceTestStatistic`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTest`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestConfint`> | class<`MaxTypeIndependenceTest`> | class<`ScalarIndependenceTest`>, ...> => double[] | <class<`MaxTypeIndependenceTest`>, ...> => double[] | <class<`ScalarIndependenceTestStatistic`>, ...> => double;
type `factor_trafo` <class<`factor`>> => class<`matrix`>;
type `fisyat_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `fisyat_test.formula` <class<`formula`>, class<`data.frame`>, null, null, ...> => any;
type `fisyat_test.IndependenceProblem` <class<`IndependenceProblem`>, character[], character[], ...> => any;
type `fligner_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `fligner_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `fligner_test.IndependenceProblem` <class<`IndependenceProblem`>, any, logical, double, ...> => any;
type `fligner_trafo` <^integer[] | class<`array`> | double[], character[]> => ^double[];
type `fmaxstat_trafo` <class<`factor`>, double, double> => class<`matrix`>;
type `formula2data` <class<`formula`>, class<`data.frame`> | list<any>, null | double[], class<`formula`> | null, ...> => list<any>;
type `friedman_test` <class<`formula`> | class<`SymmetryProblem`>, ...> => any;
type `friedman_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, ...> => any;
type `friedman_test.SymmetryProblem` <class<`SymmetryProblem`>, ...> => any;
type `fsplits` <integer> => class<`matrix`>;
type `ft` <character, character, class<`formula`>, class<`data.frame`> | list<any>, null | double[], class<`formula`> | null, ...> => any;
type `f_trafo` <class<`factor`>> => class<`matrix`>;
type `%GE%` <class<`matrix`> | class<`matrix`, `pvalue`> | double[], double[] | class<`matrix`, `pvalue`>> => (class<`matrix`> | logical[]);
type `%GT%` <class<`array`> | double[], double> => (class<`array`> | logical[]);
type `has_distribution` <list<character[] | class<`function`> | null | character | class<`function`> | null | class<`function`> | character[] | null>> => logical;
type `id_trafo` <^integer[]> => ^integer[];
type `independence_test` <class<`formula`> | class<`IndependenceProblem`> | class<`table`>, ...> => any;
type `independence_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null | double[], class<`formula`> | null, ...> => any;
type `independence_test.IndependenceProblem` <class<`IndependenceProblem`>, character[], character[] | class<`function`>, character[], class<`function`>, any, null | list<double[]>, null | class<`function`>, ...> => any;
type `independence_test.table` <class<`table`>, ...> => (class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `is_2sample` <class<`IndependenceProblem`> | class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`> | class<`SymmetryProblem`>> => logical;
type `is_censored_x` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_censored_y` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_completeblock` <class<`SymmetryProblem`>> => logical;
type `is_contingency` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_contingency_2x2` <class<`MaxTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_corr` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_doubly_ordered` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `isequal` <character | class<`matrix`> | class<`numeric`, `pvalue`> | double[] | null, character | class<`matrix`> | class<`numeric`, `pvalue`> | double[] | null> => logical;
type `is_factor_x` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_factor_y` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_integer` <double[], null | double> => logical;
type `is_Ksample` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_numeric_x` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_numeric_y` <class<`IndependenceProblem`> | class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`> | class<`SymmetryProblem`>> => logical;
type `is_ordered` <class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_ordered_x` <class<`IndependenceProblem`> | class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`> | class<`SymmetryProblem`>> => logical;
type `is_ordered_y` <class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_scalar` <class<`IndependenceTestProblem`>> => logical;
type `is_singly_ordered` <class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_unity` <double[]> => logical;
type `is_unordered_x` <class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_unordered_y` <class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => logical;
type `is_ytrafo` < > => logical;
type `joint` <class<`MaxTypeIndependenceTestStatistic`>, class<`AsymptNullDistribution`>, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTest`> | class<`MaxTypeIndependenceTestStatistic`>, any, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTestStatistic`>, class<`ApproxNullDistribution`>, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTestStatistic`>, class<`AsymptNullDistribution`>, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTestStatistic`>, class<`ApproxNullDistribution`>, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTest`>, any, ...> => class<`matrix`, `pvalue`>;
type `klotz_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `klotz_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `klotz_test.IndependenceProblem` <class<`IndependenceProblem`>, any, logical, double, ...> => any;
type `klotz_trafo` <^integer[] | double[], character[]> => ^double[];
type `koziol_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `koziol_test.formula` <class<`formula`>, class<`data.frame`>, null, null, ...> => any;
type `koziol_test.IndependenceProblem` <class<`IndependenceProblem`>, character[], character[], ...> => any;
type `koziol_trafo` <^integer[] | double[], character[], double> => ^double[];
type `kruskal_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `kruskal_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `kruskal_test.IndependenceProblem` <class<`IndependenceProblem`>, ...> => any;
type `lbl_test` <class<`formula`> | class<`IndependenceProblem`> | class<`table`>, ...> => class<`ScalarIndependenceTest`>;
type `lbl_test.formula` <class<`formula`>, class<`data.frame`>, null, null, ...> => class<`ScalarIndependenceTest`>;
type `lbl_test.IndependenceProblem` <class<`IndependenceProblem`>, ...> => class<`ScalarIndependenceTest`>;
type `lbl_test.table` <class<`table`>, ...> => class<`ScalarIndependenceTest`>;
type `%LE%` <class<`array`> | class<`matrix`> | double[], double[]> => (class<`array`> | class<`matrix`> | logical[]);
type `logrank_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `logrank_test.formula` <class<`formula`>, class<`data.frame`>, null, null, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `logrank_test.IndependenceProblem` <class<`IndependenceProblem`>, character[], character[], null | double, null, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `logrank_trafo` <class<`Surv`>, character[], any, ...> => any;
type `%LT%` <class<`array`> | double[], double> => (class<`array`> | logical[]);
type `marginal` <class<`MaxTypeIndependenceTestStatistic`>, class<`ApproxNullDistribution`>, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTest`> | class<`MaxTypeIndependenceTestStatistic`>, any, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTest`>, any, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTestStatistic`>, class<`AsymptNullDistribution`>, ...> => class<`matrix`, `pvalue`>;
type `maxstat_test` <class<`formula`> | class<`IndependenceProblem`> | class<`table`>, ...> => (class<`MaxTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `maxstat_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => (class<`MaxTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `maxstat_test.IndependenceProblem` <class<`IndependenceProblem`>, character[], character[] | class<`function`>, double, double, ...> => (class<`MaxTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `maxstat_test.table` <class<`table`>, ...> => (class<`MaxTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `maxstat_trafo` <double[] | ^integer[] | class<`factor`, `ordered`>, double, double> => class<`matrix`>;
type `mcp_trafo` <...> => class<`function`> | <class<`data.frame`>> => class<`matrix`>;
type `median_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `median_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `median_test.IndependenceProblem` <class<`IndependenceProblem`>, any, logical, double, ...> => any;
type `median_trafo` <^integer[] | double[], character[]> => ^double[];
type `mh_test` <class<`formula`> | class<`SymmetryProblem`> | class<`table`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `mh_test.formula` <class<`formula`>, class<`data.frame`>, null, ...> => class<`QuadTypeIndependenceTest`>;
type `mh_test.SymmetryProblem` <class<`SymmetryProblem`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `mh_test.table` <class<`table`>, ...> => (class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `midpvalue` <class<`ExactNullDistribution`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`> | class<`ApproxNullDistribution`> | class<`MaxTypeIndependenceTest`>, ...> => class<`numeric`, `pvalue`> | <class<`MaxTypeIndependenceTest`>, ...> => class<`numeric`, `pvalue`> | <class<`ScalarIndependenceTest`>, ...> => class<`numeric`, `pvalue`> | <class<`QuadTypeIndependenceTest`>, ...> => class<`numeric`, `pvalue`> | <class<`ApproxNullDistribution`>, ...> => class<`numeric`, `pvalue`> | <class<`ApproxNullDistribution`>, ...> => class<`numeric`, `pvalue`> | <class<`ExactNullDistribution`>, ...> => class<`numeric`, `pvalue`>;
type `MonteCarlo` <class<`matrix`>, class<`matrix`>, class<`factor`>, double[], double, character, any, any> => class<`matrix`>;
type `mood_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `mood_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `mood_test.IndependenceProblem` <class<`IndependenceProblem`>, any, logical, double, ...> => any;
type `mood_trafo` <^integer[] | double[], character[]> => ^double[];
type `MPinv` <class<`matrix`>, double> => list<class<`matrix`> | integer>;
type `n_decimal_digits` <double[]> => integer;
type `%NE%` <double[], double[]> => logical[];
type `normal_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `normal_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `normal_test.IndependenceProblem` <class<`IndependenceProblem`>, any, logical, double, ...> => any;
type `normal_trafo` <double[] | ^integer[], character[]> => ^double[];
type `numeric_trafo` <double[] | ^integer[], character[]> => ^double[] | <^integer[] | double[], character[]> => ^double[] | <double[] | ^integer[], character[], double[]> => (class<`matrix`> | ^double[]) | <^integer[] | class<`array`> | double[], character[]> => ^double[] | <double[] | ^integer[] | class<`array`> | class<`data.frame`>, character[]> => ^double[];
type `ofmaxstat_trafo` <double[] | ^integer[] | class<`factor`, `ordered`>, double, double> => class<`matrix`>;
type `of_trafo` <class<`factor`> | class<`factor`, `ordered`>, null | double[] | list<double[]>> => class<`matrix`>;
type `oneway_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `oneway_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `oneway_test.IndependenceProblem` <class<`IndependenceProblem`>, ...> => any;
type `ordered_scores` <double, double[]> => class<`matrix`>;
type `ordered_trafo` <class<`factor`> | class<`factor`, `ordered`>, null | double[] | list<double[]>> => class<`matrix`>;
type `pmvn` <double, double, double[], class<`matrix`>, logical, ...> => double;
type `pperm` <class<`QuadTypeIndependenceTest`>, class<`matrix`> | integer[] | double, ...> => (class<`matrix`> | double[]) | <class<`ApproxNullDistribution`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`MaxTypeIndependenceTest`>, class<`matrix`> | integer[] | double, ...> => (class<`matrix`> | double[]) | <class<`AsymptNullDistribution`>, class<`matrix`> | integer[] | double, ...> => (class<`matrix`> | double[]) | <class<`ExactNullDistribution`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`ScalarIndependenceTest`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`ApproxNullDistribution`> | class<`AsymptNullDistribution`> | class<`ExactNullDistribution`> | class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]);
type `pvalue` <class<`ScalarIndependenceTestConfint`>, ...> => class<`numeric`, `pvalue`> | <class<`ExactNullDistribution`>, ...> => class<`numeric`, `pvalue`> | <class<`MaxTypeIndependenceTest`> | class<`AsymptNullDistribution`> | class<`ExactNullDistribution`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`> | class<`ScalarIndependenceTestConfint`> | class<`ApproxNullDistribution`>, ...> => (class<`matrix`, `pvalue`> | class<`numeric`, `pvalue`>) | <class<`AsymptNullDistribution`>, ...> => class<`numeric`, `pvalue`> | <class<`MaxTypeIndependenceTest`>, ...> => (class<`matrix`, `pvalue`> | class<`numeric`, `pvalue`>) | <class<`ApproxNullDistribution`>, ...> => class<`numeric`, `pvalue`> | <class<`ScalarIndependenceTest`>, ...> => class<`numeric`, `pvalue`> | <class<`MaxTypeIndependenceTest`>, ...> => (class<`matrix`, `pvalue`> | class<`numeric`, `pvalue`>) | <class<`ApproxNullDistribution`>, ...> => class<`numeric`, `pvalue`> | <class<`QuadTypeIndependenceTest`>, ...> => class<`numeric`, `pvalue`>;
type `pvalue_interval` <class<`QuadTypeIndependenceTest`>, ...> => double[] | <class<`MaxTypeIndependenceTest`>, ...> => double[] | <class<`ScalarIndependenceTest`>, ...> => (double[] | null) | <class<`ApproxNullDistribution`>, ...> => (class<`matrix`> | double[]) | <class<`ExactNullDistribution`>, ...> => (class<`matrix`> | double[] | null) | <class<`ApproxNullDistribution`> | class<`ExactNullDistribution`> | class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>, ...> => (class<`matrix`> | double[] | null);
type `qmvn` <double, double[], class<`matrix`>, ...> => double;
type `qperm` <class<`ApproxNullDistribution`> | class<`AsymptNullDistribution`> | class<`ExactNullDistribution`> | class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`ExactNullDistribution`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`AsymptNullDistribution`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`MaxTypeIndependenceTest`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`ScalarIndependenceTest`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`QuadTypeIndependenceTest`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`ApproxNullDistribution`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]);
type `quade_test` <class<`formula`> | class<`SymmetryProblem`>, ...> => any;
type `quade_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, ...> => any;
type `quade_test.SymmetryProblem` <class<`SymmetryProblem`>, ...> => any;
type `quadrant_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `quadrant_test.formula` <class<`formula`>, class<`data.frame`>, null, null, ...> => any;
type `quadrant_test.IndependenceProblem` <class<`IndependenceProblem`>, character[], character[], ...> => any;
type `rank_trafo` <double[] | ^integer[] | class<`array`> | class<`data.frame`>, character[]> => ^double[];
type `rperm` <class<`ScalarIndependenceTest`>, double, ...> => double[] | <class<`ExactNullDistribution`>, double, ...> => double[] | <class<`AsymptNullDistribution`>, double, ...> => double[] | <class<`ApproxNullDistribution`>, double, ...> => double[] | <class<`MaxTypeIndependenceTest`>, double, ...> => double[] | <class<`QuadTypeIndependenceTest`>, double, ...> => double[] | <class<`ApproxNullDistribution`> | class<`AsymptNullDistribution`> | class<`ExactNullDistribution`> | class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>, double, ...> => double[];
type `savage_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `savage_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `savage_test.IndependenceProblem` <class<`IndependenceProblem`>, any, logical, double, ...> => any;
type `savage_trafo` <^integer[] | double[], character[]> => ^double[];
type `setAttributes` <double[], null | list<integer[] | integer[] | list<character | null> | character>> => (class<`matrix`> | double[]);
type `setColnames` <class<`matrix`>, character[]> => class<`matrix`>;
type `setDimnames` <class<`matrix`>, list<integer[] | character[]>> => class<`matrix`>;
type `setRownames` <class<`matrix`>, integer[]> => class<`matrix`>;
type `setscores` <class<`IndependenceProblem`> | class<`SymmetryProblem`>, list<double[]>> => (class<`IndependenceProblem`> | class<`SymmetryProblem`>);
type `setup_args` <...> => list<any>;
type `sign_test` <class<`formula`> | class<`SymmetryProblem`>, ...> => any;
type `sign_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, ...> => any;
type `sign_test.SymmetryProblem` <class<`SymmetryProblem`>, ...> => any;
type `size` <class<`ApproxNullDistribution`>, ...> => double | <class<`ExactNullDistribution`>, ...> => double | <class<`ScalarIndependenceTest`>, ...> => double | <class<`ApproxNullDistribution`> | class<`ExactNullDistribution`> | class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>, ...> => double | <class<`MaxTypeIndependenceTest`>, ...> => double | <class<`QuadTypeIndependenceTest`>, ...> => double;
type `spearman_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `spearman_test.formula` <class<`formula`>, class<`data.frame`>, null, null, ...> => any;
type `spearman_test.IndependenceProblem` <class<`IndependenceProblem`>, character[], ...> => any;
type `SR_shift_1sample` <class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>, any> => any;
type `SR_shift_2sample` <class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>, double> => class<`ExactNullDistribution`>;
type `statistic` <class<`IndependenceLinearStatistic`> | class<`MaxTypeIndependenceTest`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTest`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTest`> | class<`ScalarIndependenceTestConfint`> | class<`ScalarIndependenceTestStatistic`>, ...> => (class<`matrix`> | double) | <class<`QuadTypeIndependenceTestStatistic`>, ...> => (class<`matrix`> | double) | <class<`QuadTypeIndependenceTest`>, ...> => (class<`matrix`> | double) | <class<`ScalarIndependenceTestConfint`>, ...> => class<`matrix`> | <class<`QuadTypeIndependenceTestStatistic`>, ...> => (class<`matrix`> | double) | <class<`MaxTypeIndependenceTest`>, ...> => (class<`matrix`> | double) | <class<`ScalarIndependenceTestStatistic`>, ...> => (class<`matrix`> | double) | <class<`MaxTypeIndependenceTestStatistic`>, ...> => (class<`matrix`> | double) | <class<`ScalarIndependenceTest`>, ...> => (class<`matrix`> | double) | <class<`ScalarIndependenceTestStatistic`>, ...> => (class<`matrix`> | double) | <class<`MaxTypeIndependenceTestStatistic`>, ...> => (class<`matrix`> | double) | <class<`IndependenceLinearStatistic`>, ...> => class<`matrix`>;
type `statnames` <class<`IndependenceLinearStatistic`> | class<`IndependenceTestProblem`> | class<`MaxTypeIndependenceTestStatistic`> | class<`QuadTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTestStatistic`>> => list<character[] | list<character[]> | character | list<character>>;
type `str2lang` <character> => class<`<-`>;
type `support` < > => double[] | <logical> => (class<`matrix`> | double[]) | <logical> => double[] | <class<`ScalarIndependenceTest`>, ...> => (double[] | null) | <class<`ApproxNullDistribution`>, ...> => (class<`matrix`> | double[]) | <class<`ApproxNullDistribution`> | class<`ExactNullDistribution`> | class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`> | class<`AsymptNullDistribution`>, ...> => (class<`matrix`> | double[] | null) | <class<`QuadTypeIndependenceTest`>, ...> => (double[] | null) | <class<`ExactNullDistribution`>, ...> => double[] | <class<`AsymptNullDistribution`>, ...> => null | <class<`MaxTypeIndependenceTest`>, ...> => double[];
type `surv_trafo` <class<`Surv`>, character[], any, ...> => any;
type `symmetry_test` <class<`formula`> | class<`SymmetryProblem`> | class<`table`>, ...> => any;
type `symmetry_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `symmetry_test.SymmetryProblem` <class<`SymmetryProblem`>, character[], character[] | class<`function`>, character[], class<`function`>, class<`function`>, null | list<integer[]>, null | class<`function`>, logical, ...> => any;
type `symmetry_test.table` <class<`table`>, ...> => (class<`MaxTypeIndependenceTest`> | class<`QuadTypeIndependenceTest`> | class<`ScalarIndependenceTest`>);
type `table2IndependenceProblem` <class<`table`>> => class<`IndependenceProblem`>;
type `table2SymmetryProblem` <class<`table`>> => class<`SymmetryProblem`>;
type `taha_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `taha_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, null, ...> => any;
type `taha_test.IndependenceProblem` <class<`IndependenceProblem`>, logical, double, ...> => any;
type `trafo` <class<`data.frame`>, any, any, any, any, null | list<class<`function`>>, class<`factor`> | null> => any;
type `unadjusted` <class<`MaxTypeIndependenceTest`>, any, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTestStatistic`>, class<`AsymptNullDistribution`>, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTestStatistic`>, class<`ApproxNullDistribution`>, ...> => class<`matrix`, `pvalue`> | <class<`MaxTypeIndependenceTest`> | class<`MaxTypeIndependenceTestStatistic`>, any, ...> => class<`matrix`, `pvalue`>;
type `variance` <class<`CovarianceMatrix`> | class<`IndependenceLinearStatistic`> | class<`ScalarIndependenceTestStatistic`> | class<`Variance`> | class<`QuadTypeIndependenceTest`> | class<`QuadTypeIndependenceTestStatistic`> | class<`MaxTypeIndependenceTestStatistic`> | class<`ScalarIndependenceTest`> | class<`MaxTypeIndependenceTest`>, ...> => double[] | <class<`ScalarIndependenceTest`>, ...> => double | <class<`IndependenceLinearStatistic`>, ...> => double[] | <class<`MaxTypeIndependenceTest`>, ...> => double[] | <class<`Variance`>, ...> => double[] | <class<`QuadTypeIndependenceTest`>, ...> => double[] | <class<`CovarianceMatrix`>, ...> => double[] | <class<`ScalarIndependenceTestStatistic`>, ...> => double | <class<`MaxTypeIndependenceTestStatistic`>, ...> => double[] | <class<`QuadTypeIndependenceTestStatistic`>, ...> => double[];
type `vdW_split_up_2sample` <class<`ScalarIndependenceTestStatistic`>> => any;
type `wilcoxsign_test` <class<`formula`> | class<`SymmetryProblem`>, ...> => any;
type `wilcoxsign_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, null, ...> => any;
type `wilcoxsign_test.SymmetryProblem` <class<`SymmetryProblem`>, character[], ...> => any;
type `wilcox_test` <class<`formula`> | class<`IndependenceProblem`>, ...> => any;
type `wilcox_test.formula` <class<`formula`>, class<`data.frame`> | list<any>, logical[] | null, null, ...> => any;
type `wilcox_test.IndependenceProblem` <class<`IndependenceProblem`>, logical, double, ...> => any;
type `xtrafo` <class<`data.frame`>, any, any, any, any, null | list<class<`function`>>, class<`factor`> | null> => any;
type `ytrafo` <double[] | ^integer[] | class<`array`> | class<`data.frame`>, character[]> => ^double[] | <class<`data.frame`>, any, any, any, any, null | list<class<`function`>>, class<`factor`> | null> => any;
type `zheng_trafo` <class<`factor`> | class<`factor`, `ordered`>, double> => class<`matrix`>;
