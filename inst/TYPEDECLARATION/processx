type `%||%` <null, logical> => logical;
type `assert_that` <..., environment, null> => logical;
type `check_result` <logical> => logical;
type `default_pty_options` < > => list<logical>;
type `format_unix_time` <double> => class<`POSIXct`, `POSIXt`>;
type `get_id` < > => character;
type `get_private` <class<`R6`, `process`>> => environment;
type `is_connection_list` <list<any>> => logical;
type `is_flag` <logical> => logical;
type `is_integerish_scalar` <double> => logical;
type `is_list_of_pollables` <list<class<`R6`, `process`>>> => logical;
type `is_named` <list<any>> => logical;
type `is_string` <character> => logical;
type `is_string_or_null` <character | null> => logical;
type `is_time_interval` <double> => logical;
type `poll` <list<class<`R6`, `process`>>, double> => list<character[]>;
type `process_close_connections` <any, environment> => null;
type `process_get_error_connection` <class<`R6`, `process`>, environment> => class<`processx_connection`>;
type `process_get_exit_status` <any, environment> => integer;
type `process_get_output_connection` <class<`R6`, `process`>, environment> => class<`processx_connection`>;
type `process_get_short_name` <any, environment> => character;
type `process_get_start_time` <any, environment> => class<`POSIXct`, `POSIXt`>;
type `process_has_error_connection` <any, environment> => logical;
type `process_has_output_connection` <any, environment> => logical;
type `process_initialize` <class<`R6`, `process`>, environment, character, character[], null, character, character, logical, list<any>, list<any>, null, null, logical, logical, null, logical, logical, logical, logical, character> => class<`R6`, `process`>;
type `process_is_alive` <any, environment> => logical;
type `process_is_incompelete_error` <class<`R6`, `process`>, environment> => logical;
type `process_is_incompelete_output` <class<`R6`, `process`>, environment> => logical;
type `process_kill` <any, environment, double, logical> => logical;
type `process_poll_io` <class<`R6`, `process`>, any, double> => character[];
type `process_read_error` <class<`R6`, `process`>, environment, double> => character;
type `process_read_output` <class<`R6`, `process`>, environment, double> => character;
type `process_wait` <class<`R6`, `process`>, environment, double> => class<`R6`, `process`>;
type `run` <character, character[], logical, null, logical, logical, logical, double, null, null, null, null, logical, null, logical, logical, character, logical, ...> => list<integer | character>;
type `run_manage` <class<`R6`, `process`>, double, logical, any, any, any, any, environment> => list<integer | character>;
type `see_if` <..., environment, any> => logical;
type `set_names` <character[], character[]> => character[];
type `supervisor_reset` < > => null;
type `supervisor_running` < > => logical;
