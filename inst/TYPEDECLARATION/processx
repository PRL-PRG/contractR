type `filter` <character[]> => logical[];
type `fun` <symbol, symbol> => null;
type `supervisor_reset` < > => null;
type `supervisor_running` < > => logical;
type `.subset2` <character, character[], null, character, character, logical, tuple<>, tuple<>, null, null, logical, logical, null, logical, logical, logical, logical, character, null> => null | environment;
type `(` < > => any => any;
type `[[` <symbol> => null;
type `%||%` <null, logical> => logical;
type `$` <double, logical> => null | character[] | environment | double;
type `check_result` <logical> => logical;
type `default_pty_options` < > => struct<`echo`:logical>;
type `do_output` < > => logical;
type `format_unix_time` <double> => double;
type `full_path` <character> => character;
type `FUN` <environment | character[] | integer[]> => null | tuple<null, null> | character[] | logical;
type `get_id` < > => character;
type `get_private` <environment> => environment;
type `is_connection_list` <tuple<>> => logical;
type `is_flag` <logical> => logical;
type `is_integerish_scalar` <double> => logical;
type `is_list_of_pollables` <tuple<environment>> => logical;
type `is_named` <tuple<>> => logical;
type `is_string` <character> => logical;
type `is_string_or_null` <null | character> => logical;
type `is_time_interval` <double> => logical;
type `is_windows` < > => logical;
type `last_char` <character> => character;
type `poll` <tuple<environment>, double> => tuple<character[]>;
type `process_close_connections` <symbol, environment> => null;
type `process_get_exit_status` <symbol, environment> => integer;
type `process_get_output_connection` <environment> => environment;
type `process_get_start_time` <symbol, environment> => double;
type `process_has_error_connection` <symbol, environment> => logical;
type `process_has_output_connection` <symbol, environment> => logical;
type `process_initialize` <environment, environment, character, character[], null, character, character, logical, tuple<>, tuple<>, null, null, logical, logical, null, logical, logical, logical, logical> => environment;
type `process_is_alive` <symbol, environment> => logical;
type `process_is_incompelete_output` <environment, environment> => logical;
type `process_kill` <symbol, environment, double, logical> => logical;
type `process_poll_io` <environment, symbol, double> => character[];
type `process_read_output` <environment, environment, double> => character;
type `process_wait` <environment, environment, double> => environment;
type `run_manage` <environment, double, logical, null | any => any, null, symbol, symbol, environment> => struct<`status`:integer, `stdout`:character, `stderr`:character, `timeout`:logical>;
type `see_if` <language, environment, symbol> => logical;
type `set_names` <character[], character[]> => character[];
type `process_get_error_connection` <environment> => environment;
type `process_is_incompelete_error` <environment, environment> => logical;
type `process_read_error` <environment, environment, double> => character;
type `run` <character, character[], logical, null, logical, logical, logical, double, null, null, null, null, logical, null, logical, logical, character, logical, null> => struct<`status`:integer, `stdout`:character, `stderr`:character, `timeout`:logical>;
