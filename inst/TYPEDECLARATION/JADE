type `amari.error` <class<`matrix`>, class<`matrix`>, logical> => double;
type `AMUSE` <class<`matrix`> | class<`matrix`, `mts`, `ts`>, ...> => class<`bss`>;
type `AMUSE.default` <class<`matrix`, `mts`, `ts`> | class<`matrix`>, double, ...> => class<`bss`>;
type `AMUSE.ts` <class<`matrix`, `mts`, `ts`>, ...> => class<`bss`>;
type `bss.components` <class<`bss`>> => class<`matrix`, `mts`, `ts`>;
type `cjd` <class<`array`> | class<`matrix`>, double, double> => (list<class<`matrix`> | class<`array`>> | list<class<`matrix`>>);
type `coef.bss` <class<`bss`>, ...> => class<`matrix`>;
type `ComonGAP` <class<`matrix`>, class<`matrix`>> => double;
type `djd` <class<`array`>, character, double, double, double> => class<`matrix`>;
type `djd.log` <class<`array`>, class<`matrix`>, class<`matrix`>, integer, integer, double, double> => class<`matrix`>;
type `djd.max` <class<`array`>, class<`matrix`>, double, integer, integer, double, double, double> => class<`matrix`>;
type `FOBI` <class<`matrix`>, class<`function`>> => class<`bss`>;
type `frjd` <class<`array`> | class<`matrix`>, null, double, double, class<`function`>> => (list<class<`matrix`> | class<`array`> | double> | list<class<`matrix`> | double>);
type `frjd.int` <class<`array`>, double, double> => list<class<`matrix`> | class<`array`> | double>;
type `JADE` <class<`matrix`>, double | null, double, double, class<`function`>> => class<`bss`>;
type `k_JADE` <class<`matrix`>, double, double, double, class<`function`>> => class<`bss`>;
type `MD` <class<`matrix`>, class<`matrix`>> => double;
type `multscatter` <character[], class<`matrix`>, logical> => class<`array`>;
type `M.x` <class<`matrix`>, double> => class<`matrix`>;
type `NSS.JD` <class<`matrix`>, ...> => class<`bss`>;
type `NSS.JD.default` <class<`matrix`>, double, double, double[] | null, double, double, ...> => class<`bss`>;
type `NSS.SD` <class<`matrix`>, ...> => class<`bss`>;
type `NSS.SD.default` <class<`matrix`>, double[] | null, ...> => class<`bss`>;
type `NSS.TD.JD` <class<`matrix`>, ...> => class<`bss`>;
type `NSS.TD.JD.default` <class<`matrix`>, double, double[], null | double[], double, double, ...> => class<`bss`>;
type `plot.bss` <class<`bss`>, ...> => null;
type `pMatrix.min` <class<`matrix`>> => list<class<`matrix`> | double[]>;
type `rand_orth` <double, null | class<`matrix`>> => class<`matrix`>;
type `rjd` <class<`array`> | class<`matrix`>, double, double, class<`function`>> => (list<class<`matrix`> | class<`array`>> | list<class<`matrix`>>);
type `SIR` <class<`matrix`>, class<`matrix`>> => double;
type `SOBI` <class<`matrix`> | class<`matrix`, `mts`, `ts`>, ...> => class<`bss`>;
type `SOBI.default` <class<`matrix`, `mts`, `ts`> | class<`matrix`>, double[], character, double, double, ...> => class<`bss`>;
type `SOBI.ts` <class<`matrix`, `mts`, `ts`>, ...> => class<`bss`>;
type `.standard.B` <class<`matrix`>> => class<`matrix`>;
