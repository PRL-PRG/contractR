type `%||%` <null, double> => double;
type `asISO8601Time` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`yearmon`> | class<`yearqtr`> | character> => character[];
type `computeYaxisRange` <class<`dygraphs`, `htmlwidget`>, character[]> => class<`dygraphs`, `htmlwidget`>;
type `dyAnnotation` <class<`dygraphs`, `htmlwidget`>, character, character, character, null, null, null, null> => class<`dygraphs`, `htmlwidget`>;
type `dyAxis` <class<`dygraphs`, `htmlwidget`>, character, character | null, double[], null, null, null, null> => class<`dygraphs`, `htmlwidget`>;
type `dyBarChart` <class<`dygraphs`, `htmlwidget`>> => class<`dygraphs`, `htmlwidget`>;
type `dyBarSeries` <class<`dygraphs`, `htmlwidget`>, character, ...> => class<`dygraphs`, `htmlwidget`>;
type `dyCandlestick` <class<`dygraphs`, `htmlwidget`>, logical> => class<`dygraphs`, `htmlwidget`>;
type `dyCandlestickGroup` <class<`dygraphs`, `htmlwidget`>, character[], ...> => class<`dygraphs`, `htmlwidget`>;
type `dyCrosshair` <class<`dygraphs`, `htmlwidget`>, character> => class<`dygraphs`, `htmlwidget`>;
type `dyDependency` <class<`dygraphs`, `htmlwidget`>, class<`html_dependency`>> => class<`dygraphs`, `htmlwidget`>;
type `dyEvent` <class<`dygraphs`, `htmlwidget`>, character[], character[], character, character, character, any> => class<`dygraphs`, `htmlwidget`>;
type `dyFilledLine` <class<`dygraphs`, `htmlwidget`>, character, ...> => class<`dygraphs`, `htmlwidget`>;
type `dygraph` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`>, null | character, null, null, null, null, null, null> => class<`dygraphs`, `htmlwidget`>;
type `dygraphColors` <class<`dygraphs`, `htmlwidget`>, double> => character[];
type `dyGroup` <class<`dygraphs`, `htmlwidget`>, character[], null, null, character, null, null, null> => class<`dygraphs`, `htmlwidget`>;
type `dyHighlight` <class<`dygraphs`, `htmlwidget`>, double, double, list<any>, logical> => class<`dygraphs`, `htmlwidget`>;
type `dyLegend` <class<`dygraphs`, `htmlwidget`>, character, double, logical, null, logical, logical> => class<`dygraphs`, `htmlwidget`>;
type `dyLimit` <class<`dygraphs`, `htmlwidget`>, double, character, character[], character, character> => class<`dygraphs`, `htmlwidget`>;
type `dyMultiColumn` <class<`dygraphs`, `htmlwidget`>> => class<`dygraphs`, `htmlwidget`>;
type `dyOptions` <class<`dygraphs`, `htmlwidget`>, logical, logical, double, logical, logical, logical, double> => class<`dygraphs`, `htmlwidget`>;
type `dyPlotter` <class<`dygraphs`, `htmlwidget`>, character, character, character> => class<`dygraphs`, `htmlwidget`>;
type `dyPlugin` <class<`dygraphs`, `htmlwidget`>, character, character, list<any>, character> => class<`dygraphs`, `htmlwidget`>;
type `dyRangeSelector` <class<`dygraphs`, `htmlwidget`>, character[] | null, double, character, character, logical, logical> => class<`dygraphs`, `htmlwidget`>;
type `dyRoller` <class<`dygraphs`, `htmlwidget`>, logical, double> => class<`dygraphs`, `htmlwidget`>;
type `dySeries` <class<`dygraphs`, `htmlwidget`>, character, character | null, null | character, character, null | logical, null, null> => class<`dygraphs`, `htmlwidget`>;
type `dyShading` <class<`dygraphs`, `htmlwidget`>, character, character, character, character> => class<`dygraphs`, `htmlwidget`>;
type `dyShadow` <class<`dygraphs`, `htmlwidget`>, character, ...> => class<`dygraphs`, `htmlwidget`>;
type `dyStackedBarGroup` <class<`dygraphs`, `htmlwidget`>, character[], ...> => class<`dygraphs`, `htmlwidget`>;
type `dyStackedRibbonGroup` <class<`dygraphs`, `htmlwidget`>, character[], ...> => class<`dygraphs`, `htmlwidget`>;
type `dyStemSeries` <class<`dygraphs`, `htmlwidget`>, character, ...> => class<`dygraphs`, `htmlwidget`>;
type `dyUnzoom` <class<`dygraphs`, `htmlwidget`>> => class<`dygraphs`, `htmlwidget`>;
type `hsvToRGB` <double, double, double> => character;
type `mergeLists` <list<character[] | logical | list<list<double[]>>> | list<character[] | logical | list<list<double | character | double[] | character | logical | character | class<`JS_EVAL`>>>> | list<character[] | logical | list<list<double[] | character | double[] | logical | character | class<`JS_EVAL`> | character | class<`JS_EVAL`>>>> | list<character[] | logical | list<list<double[] | character | character | class<`JS_EVAL`>>>> | list<character[] | logical | list<list<double | character>>> | list<character[] | logical | list<list<double>>> | list<character> | null | list<character | class<`JS_EVAL`>> | list<character | logical> | list<character | double[]> | list<list<character | double[] | character | logical | character | class<`JS_EVAL`>>> | list<list<character | double[] | logical | character | class<`JS_EVAL`> | character | class<`JS_EVAL`>>> | list<list<character | character | class<`JS_EVAL`>>> | list<list<character>> | list<logical | character | class<`JS_EVAL`>> | list<double[]> | list<list<double[]>>, list<double | character | list<list<logical>>> | list<character[] | logical | list<list<double[] | character | double[] | character | logical | character | class<`JS_EVAL`>>>> | list<character[] | logical | list<list<double[] | character | double[] | logical | character | class<`JS_EVAL`> | character | class<`JS_EVAL`>>>> | list<character[] | logical | list<list<double[] | character | character | class<`JS_EVAL`>>>> | list<character[] | logical | list<list<double[] | character>>> | list<character[] | logical | list<list<double[]>>> | list<character> | list<character | class<`JS_EVAL`>> | list<character | logical> | list<character | double[]> | list<double | character | class<`JS_EVAL`>> | list<list<character | double[] | character | logical | character | class<`JS_EVAL`>>> | list<list<character | double[] | logical | character | class<`JS_EVAL`> | character | class<`JS_EVAL`>>> | list<list<character | character | class<`JS_EVAL`>>> | list<list<character>> | list<logical | character | class<`JS_EVAL`>> | list<double | list<any>> | list<character[] | double | class<`JS_EVAL`>> | list<character | double> | list<double[]> | list<list<double[]>>, logical> => list<any>;
type `resolveStemPlot` <null | logical, character | null> => (character | null);
type `resolveStrokePattern` <character | null> => (double[] | null);
