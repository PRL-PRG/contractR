type `::` <..., null> => character | <logical, ...> => logical | <character, ...> => (character | class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>) | <character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | <null | character[] | class<`function`>, logical, logical, logical, logical, list<any>, ..., logical> => any;
type `:::` <logical, ...> => list<character[]> | <character | null, character[] | null, null | character | class<`function`>, ...> => class<`BasicObject`, `DevEvalProduct`, `character`>;
type `[[` <class<`condition`, `error`, `simpleError`>> => class<`condition`, `error`, `simpleError`>;
type `architecture` <class<`RecordedPlot`, `recordedplot`>, ...> => list<character | integer | character | null | integer | null | integer>;
type `architecture.recordedplot` <class<`RecordedPlot`, `recordedplot`>, ...> => list<null | integer>;
type `architecture.RecordedPlot` <class<`RecordedPlot`, `recordedplot`>, ...> => list<character | integer | character | null | integer | null | integer>;
type `as.architecture` <class<`RecordedPlot`, `recordedplot`>, any, any, any, any, ...> => class<`RecordedPlot`, `recordedplot`>;
type `as.architecture.recordedplot` <class<`RecordedPlot`, `recordedplot`>, any, character, integer, character, ...> => class<`RecordedPlot`, `recordedplot`>;
type `as.architecture.RecordedPlot` <class<`RecordedPlot`, `recordedplot`>, ...> => class<`RecordedPlot`, `recordedplot`>;
type `as.character.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, ...> => character;
type `as.character.DevEvalProduct` <class<`BasicObject`, `DevEvalProduct`, `character`>, ...> => character[];
type `base_capabilities` <logical> => logical[];
type `capabilities` <logical> => logical[] | < > => logical[] | < > => character[];
type `capabilitiesX11` <logical, ...> => logical;
type `capturePlot` <any, environment, class<`function`>, ...> => class<`RecordedPlot`, `recordedplot`>;
type `cleanLength` <double | null, ...> => (double | null);
type `devAll` <logical, ...> => list<character[]>;
type `devDone` <integer[], ...> => integer;
type `devEqualTypes` <character | class<`function`>, character | class<`function`>, any> => logical;
type `devEval` <class<`function`> | character[], any, null, null, any, character | null | class<`RecordedPlot`, `recordedplot`>, character[] | null, any, ..., any, any, any> => any;
type `DevEvalFileProduct` <null | character, null, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>;
type `DevEvalProduct` <character | null, character[] | null, null | character | class<`function`>, ...> => class<`BasicObject`, `DevEvalProduct`, `character`>;
type `!.DevEvalProduct` <class<`BasicObject`, `DevEvalProduct`, `character`>> => null;
type `[[.DevEvalProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | class<`BasicObject`, `DevEvalProduct`, `character`>, character, ...> => (character | class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | null);
type `$.DevEvalProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | class<`BasicObject`, `DevEvalProduct`, `character`>, character> => character;
type `devGetLabel` <character | integer, ...> => any;
type `devIsInteractive` <null | class<`function`> | character[], ...> => logical[];
type `devIsOpen` <character | integer[] | null | double, ...> => logical[];
type `devList` <logical, logical, ...> => integer[];
type `.devList` < > => pairlist;
type `.devListIndexOf` <character[], logical> => (^integer[] | null);
type `devNew` <character | class<`function`>, ..., double, double | null, null | double | list<double>, null | character> => any;
type `.devNextAvailable` < > => integer;
type `devOff` <character | integer[], ...> => integer;
type `devOptions` <null | character[] | class<`function`>, logical, logical, logical, logical, list<any>, ..., logical> => any;
type `devSet` <character | double[] | list<double>, ...> => integer;
type `devSetLabel` <character | integer, character | null, ...> => pairlist;
type `.devTypeExt` <character | class<`function`>, ...> => character;
type `.devTypeName` <character[] | class<`function`>, logical, any, ...> => (character[] | class<`function`>);
type `.devTypeNameFromFunction` <class<`function`>, list<character[]>, ...> => character;
type `eps` <character, double, double, logical, character, logical, ...> => null;
type `favicon` <character, integer, double, character, any, ...> => any;
type `filter` <character[]> => logical[];
type `findDeviceFunction` <class<`function`>, ...> => character;
type `fun` <any, character> => list<any> | <any, character> => null;
type `FUN` <null | character[] | class<`function`>, logical, logical, logical, logical, list<any>, ..., logical> => any | <integer[], ...> => integer | <null | class<`function`> | character[], ...> => logical[] | <character | integer[], ...> => integer | <list<any>> => list<any> | <list<any>> => character[] | <character | null> => logical | <character[]> => class<`function`> | <pairlist | raw[]> => logical | <character[] | null> => (class<`function`> | null) | <character> => any | <character> => logical | <...> => character;
type `getData` <...> => (character | raw[]);
type `getData.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, character, ...> => (character | raw[]);
type `getDataURI` <...> => character;
type `getDataURI.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, character, ...> => character;
type `getDeviceFunctions` <character, any, ...> => list<class<`function`> | null>;
type `getDevOption` <character[] | class<`function`>, character, character | null | logical, logical, ..., logical | character> => any;
type `getDevOptions` <character, ...> => list<any>;
type `getExtension` <...> => character;
type `getExtension.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, ...> => character;
type `getFilename` <...> => character;
type `getFilename.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, ...> => character;
type `getFullname` <...> => character[];
type `getFullname.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, ...> => character;
type `getFullname.DevEvalProduct` <class<`BasicObject`, `DevEvalProduct`, `character`>, ...> => character[];
type `getMime` <...> => character;
type `getMime.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, ...> => character;
type `getMimeType` <...> => character;
type `getMimeType.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, character, ...> => character;
type `getName` <...> => character;
type `getName.DevEvalProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | class<`BasicObject`, `DevEvalProduct`, `character`>, ...> => character;
type `getNnnOptions` <character, logical, ...> => class<`function`>;
type `getPath` <...> => character;
type `getPath.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, ...> => character;
type `getPathname` <...> => character;
type `getPathname.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, logical, ...> => character;
type `getSpecialDimensions` <list<any>, any, ...> => double[];
type `getTags` <...> => character;
type `getTags.DevEvalProduct` <class<`BasicObject`, `DevEvalProduct`, `character`>, character, ...> => character;
type `getType` <...> => (character | class<`function`> | null);
type `getType.DevEvalProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, ...> => (character | class<`function`> | null);
type `gpar` <class<`RecordedPlot`, `recordedplot`>> => raw[];
type `gpar<-` <class<`RecordedPlot`, `recordedplot`>, raw[]> => class<`RecordedPlot`, `recordedplot`>;
type `.importOldGlobalOption` <any, character, logical, ...> => null;
type `isFALSE` <logical | null> => logical;
type `is_nullfile` <character> => logical;
type `nnn.options` <..., logical> => (null | list<character | logical>) | <...> => list<any>;
type `nulldev` <any, ...> => null;
type `nullfile` < > => character;
type `print.RecordedPlot` <class<`RecordedPlot`, `recordedplot`>, ...> => class<`RecordedPlot`, `recordedplot`>;
type `setDevOptions` <character, ..., logical> => (null | list<any>);
type `stop_if_not` <...> => null;
type `supports` <character, character> => logical;
type `toDefault` <class<`RecordedPlot`, `recordedplot`> | character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>;
type `toFavicon` <..., character, character, character> => character;
type `toFcn` <character, ...> => (character | class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>) | <character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | <class<`RecordedPlot`, `recordedplot`> | character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | <..., character, character, character> => character | <character, ..., logical> => any | <character, ...> => any | <character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | <character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | <character, ...> => any | <character, ..., character> => any | <character, ...> => any | <character, ...> => any | <character, ...> => any | <character, ..., character> => any | <character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | <character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | <character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>;
type `toPDF` <character, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>;
type `type` <any, ...> => null;
type `view` <...> => (class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`> | null);
type `view.DevEvalFileProduct` <class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>, ...> => class<`BasicObject`, `DevEvalFileProduct`, `DevEvalProduct`, `character`>;
type `view.DevEvalProduct` <class<`BasicObject`, `DevEvalProduct`, `character`>, ...> => null;
type `withPar` <any, ..., list<any>, environment> => null;
