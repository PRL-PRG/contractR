type `-` <null, null> => null;
type `.local` <integer[], ^double[]> => integer;
type `.superdiagonal_tensor` <double, double[]> => integer;
type `[` <double | null, double | null, logical> => double | null;
type `[<-` <double, double | null, ^double[]> => double | null;
type `*` <null, null> => null;
type `/` <null, null> => null;
type `+` <null, null> => null;
type `as.tensor` <logical> => ^double[];
type `cp` <double, double, double> => struct<`lambdas`:double[], `U`:tuple<^double[], ^double[], ^double[]>, `conv`:logical, `est`:null, `norm_percent`:double, `fnorm_resid`:double, `all_resids`:double[]>;
type `dim` <null> => integer[];
type `filter` <character[]> => logical[];
type `fnorm` < > => double;
type `fold` <double | integer[], double[], double[]> => ^double[];
type `FUN` <complex[] | ^double[]> => ^double[];
type `hadamard_list` <tuple<^double[], ^double[]> | struct<`mat1`:^double[], `mat2`:^double[], `mat3`:^double[]>> => ^double[];
type `head` <null> => double[];
type `hosvd` <null | double[]> => struct<`Z`:null, `U`:tuple<^double[], ^double[], ^double[]>, `est`:null, `fnorm_resid`:double>;
type `initialize` < > => integer;
type `innerProd` < > => double;
type `k_fold` <double[]> => double;
type `k_unfold` < > => double;
type `khatri_rao` <^double[], ^double[]> => ^double[];
type `khatri_rao_list` <tuple<^double[], ^double[]> | struct<`mat1`:^double[], `mat2`:^double[], `mat3`:^double[]>, logical> => ^double[];
type `kronecker_list` <struct<`mat1`:^double[], `mat2`:^double[], `mat3`:^double[]> | tuple<double[], double[]>> => ^double[];
type `matvec` <null, null> => null;
type `modeMean` <logical> => double;
type `modeSum` <logical> => double;
type `mpca` <double[], double, double> => struct<`Z_ext`:null, `U`:tuple<^double[], ^double[], null>, `conv`:logical, `est`:null, `norm_percent`:double, `fnorm_resid`:double, `all_resids`:double[]>;
type `plot_orl` <double, double> => null;
type `print` <null> => double[];
type `pvd` <double[], double[], double, double> => struct<`P`:^double[], `D`:^double[], `V`:list<^double[]>, `est`:null, `norm_percent`:double, `fnorm_resid`:double>;
type `rand_tensor` <logical> => double[];
type `rs_fold` <double, integer[]> => ^double[];
type `rs_unfold` < > => double;
type `show` < > => double[];
type `t` <null, null> => null;
type `t_mult` <null, null> => null;
type `t_svd` < > => struct<`U`:null, `V`:null, `S`:null>;
type `t_svd_reconstruct` < > => struct<`U`:null, `V`:null, `S`:null>;
type `tail` <null> => double[];
type `tperm` <null> => language;
type `ttl` <double[]> => tuple<^double[]> | struct<`mat1`:^double[], `mat2`:^double[], `mat3`:^double[]>;
type `ttm` <double> => ^double[];
type `tucker` <double[], double, double> => struct<`Z`:null, `U`:tuple<^double[], ^double[], ^double[], ^double[]>, `conv`:logical, `est`:null, `norm_percent`:double, `fnorm_resid`:double, `all_resids`:double[]>;
type `unfold` <double[]> => double[];
type `unmatvec` < > => double[];
type `validityMethod` < > => logical;
type `vec` < > => double[];
