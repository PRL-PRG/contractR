type `add_computed_columns` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`list`, `quosures`>> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `add_count` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., null, logical, character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `add_rownames` <class<`data.frame`>, character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `add_suffixes` <character[], any, character> => character[];
type `add_tally` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`>, any, logical, character> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `all_equal` <class<`data.frame`>, class<`data.frame`>, logical, logical, logical, ...> => (character | logical);
type `all_exprs` <..., logical> => class<`formula`, `quosure`>;
type `all_vars` <any> => class<`all_vars`, `formula`, `quosure`>;
type `anti_join` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, null | character, logical, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `anti_join_impl` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, character, character, logical, environment> => class<`data.frame`, `tbl`, `tbl_df`>;
type `anti_join.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, null | character, logical, ..., null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `any_apply` <list<character[]> | list<class<`factor`, `ordered`>> | list<class<`array`>>, class<`function`>> => logical;
type `any_vars` <any> => class<`any_vars`, `formula`, `quosure`>;
type `append_pos` <character[], logical[]> => character[];
type `apply_filter_syms` <class<`all_vars`, `formula`, `quosure`> | class<`any_vars`, `formula`, `quosure`> | class<`formula`>, list<class<`name`>>, any> => class<`formula`, `quosure`>;
type `arrange` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `arrange_all` <class<`data.frame`, `tbl`, `tbl_df`>, class<`function`> | list<any>, ..., logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `arrange.data.frame` <class<`data.frame`>, ..., logical> => class<`data.frame`>;
type `arrange.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ..., logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `arrange_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`list`, `quosures`>, environment> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `arrange.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, ..., any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `as.data.frame.tbl_cube` <class<`tbl_cube`>, ...> => class<`data.frame`>;
type `as_fun` <class<`formula`, `quosure`>, any, list<any>> => class<`formula`, `quosure`>;
type `as_fun_list` <list<any> | class<`function`> | character | class<`formula`>, any, ...> => list<any>;
type `as_group_map_function` <class<`function`> | class<`formula`>> => (class<`function`> | class<`function`, `rlang_lambda_function`>);
type `as_inlined_function` <class<`formula`>, any, ...> => class<`inline_colwise_function`>;
type `assert_all_allow_list` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => null;
type `as.tbl` <class<`data.frame`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `as.tbl_cube` <class<`data.frame`> | class<`table`>, ...> => class<`tbl_cube`>;
type `as.tbl_cube.array` <class<`array`>, any, character, ...> => class<`tbl_cube`>;
type `as.tbl_cube.data.frame` <class<`data.frame`>, integer[], any, ...> => class<`tbl_cube`>;
type `as.tbl_cube.table` <class<`table`>, any, character, ...> => class<`tbl_cube`>;
type `as.tbl.data.frame` <class<`data.frame`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `auto_by_msg` <character[]> => character;
type `auto_copy` <class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, any, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `auto_name_formulas` <list<class<`function`>> | list<class<`formula`>>> => (list<class<`function`>> | list<class<`formula`>>);
type `between` <double[], double, double> => logical[];
type `big_mark` <integer[], ...> => character[];
type `bind_cols` <...> => (class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>);
type `bind_rows` <..., character | null> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `bind_rows_` <list<class<`data.frame`>> | list<class<`data.frame`, `tbl`, `tbl_df`>> | list<double[] | class<`data.frame`, `tbl`, `tbl_df`>> | list<double[]> | list<list<double[]>>, null | character> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `case_when` <...> => (^character[] | ^double[]);
type `cbind_all` <list<class<`data.frame`>> | list<list<double[]>> | list<class<`data.frame`, `tbl`, `tbl_df`>> | list<class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>>> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `changes` <class<`data.frame`>, class<`data.frame`>> => (class<`matrix`> | null);
type `check_class` <^character[] | class<`factor`> | ^double[] | null, any, any> => null;
type `check_dbplyr` < > => logical;
type `check_dot_cols` <character[] | class<`list`, `quosures`>, null> => (character[] | class<`list`, `quosures`>);
type `check_frac` <double, any> => double;
type `check_grouped` <class<`data.frame`, `tbl`, `tbl_df`>, character, character, logical> => null;
type `check_length` <^character[] | class<`factor`> | ^double[] | null, ^character[] | null | class<`factor`> | ^double[], any, any> => null;
type `check_length_val` <integer, integer, any, any, any> => null;
type `check_na_matches` <null> => logical;
type `check_pkg` <character, character, logical> => logical;
type `check_size` <double, integer, any> => double;
type `check_suffix` <character[]> => list<character>;
type `check_type` <^character[] | class<`factor`> | ^double[] | null, ^character[] | null | class<`factor`> | ^double[], any> => null;
type `check_valid_names` <class<`character`, `dplyr_sel_vars`>, logical> => null;
type `coalesce` <...> => double[];
type `collapse` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `collect` <class<`data.frame`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `collect.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `combine` <...> => character[];
type `combine_all` <list<class<`factor`>>> => character[];
type `commas` <...> => character;
type `common_by` <character[] | null, class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`data.frame`, `tbl`, `tbl_df`>> => list<character[]>;
type `common_by.character` <character[], class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`data.frame`, `tbl`, `tbl_df`>> => list<character[]>;
type `common_by_from_vector` <character[]> => list<character[]>;
type `common_by.list` <list<character[]>, class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`data.frame`, `tbl`, `tbl_df`>> => list<character[]>;
type `common_by.NULL` <null, class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>> => list<character[]>;
type `compact` <list<character> | list<class<`data.frame`>> | list<integer> | list<character | null>> => (list<character> | list<class<`data.frame`>> | list<integer> | list<character | null>);
type `compact_null` <list<class<`formula`>> | list<class<`formula`> | null>> => list<class<`formula`>>;
type `compat_lazy` <character | class<`formula`, `quosure`>, any, logical> => class<`formula`, `quosure`>;
type `compat_lazy_dots` <list<any> | character[], any, ..., logical> => list<any>;
type `compat_lengths` < > => null;
type `compute` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, any, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `copy_to` <class<`SQLiteConnection`> | class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, any, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `copy_to.DBIConnection` <class<`SQLiteConnection`>, class<`data.frame`>, character, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
##type `count` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, ..., null, logical, character, logical> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `cumall` <logical[]> => logical[];
type `cumany` <logical[]> => logical[];
type `cume_dist` <^double[]> => ^double[];
type `cummean` <double[]> => double[];
type `db_analyze` <class<`SQLiteConnection`>, character, ...> => integer;
type `db_begin` <class<`SQLiteConnection`>, ...> => logical;
type `db_commit` <class<`SQLiteConnection`>, ...> => logical;
type `db_create_index` <class<`SQLiteConnection`>, character, character, null, logical, ...> => integer;
type `db_create_indexes` <class<`SQLiteConnection`>, any, list<any> | null, logical, ...> => null;
type `db_data_type` <class<`SQLiteConnection`>, class<`data.frame`>> => character[];
type `db_explain` <class<`SQLiteConnection`>, class<`character`, `sql`>, ...> => character;
type `db_has_table` <class<`SQLiteConnection`>, character> => logical;
type `db_list_tables` <class<`SQLiteConnection`>> => character[];
type `db_query_fields` <class<`SQLiteConnection`>, class<`character`, `ident`> | class<`character`, `sql`>, ...> => character[];
type `db_save_query` <class<`SQLiteConnection`>, class<`character`, `sql`>, character, logical, ...> => character;
type `db_write_table` <class<`SQLiteConnection`>, character, character[], class<`data.frame`>, logical, ...> => character;
type `default_missing` <integer[]> => null;
type `default_missing.default` <integer[]> => null;
type `dense_rank` <^double[]> => ^integer[];
type `deparse_names` <null | list<class<`name`>>> => character[];
type `desc` <class<`Date`> | double[] | class<`factor`>> => double[];
type `dfloc` <class<`data.frame`>> => character[];
type `dim_desc` <class<`data.frame`>> => character;
type `distinct` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., logical> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `distinct_all` <class<`data.frame`, `tbl`, `tbl_df`>, class<`function`> | list<any>, ..., logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `distinct_at` <class<`data.frame`, `tbl`, `tbl_df`>, class<`list`, `quosures`>, list<any>, ..., logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `distinct.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ..., logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `distinct_if` <class<`data.frame`, `tbl`, `tbl_df`>, class<`function`>, list<any>, ..., logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `distinct_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, integer[], integer[], environment> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `distinct_prepare` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`list`, `quosures`>, character[], any> => (list<class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | character[]> | list<class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | integer[]> | list<class<`data.frame`, `tbl`, `tbl_df`> | character[]> | list<class<`data.frame`, `tbl`, `tbl_df`> | character> | list<class<`data.frame`, `tbl`, `tbl_df`> | character | integer[]> | list<class<`data.frame`, `tbl`, `tbl_df`> | integer[]> | list<class<`data.frame`, `tbl`, `tbl_df`> | integer>);
type `distinct.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, ..., logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `do` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>);
type `do.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>);
type `do.rowwise_df` <class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>;
type `ensure_group_vars` <character[], class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, any> => character[];
type `env_bind_do_pronouns` <environment, class<`function`>> => list<class<`rlang_zap`>>;
type `equal_data_frame` <class<`data.frame`>, class<`data.frame`>, logical, logical, logical> => class<`BoolResult`>;
type `explain` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `expr_substitute` <class<`all_vars`, `formula`, `quosure`> | class<`any_vars`, `formula`, `quosure`> | class<`formula`, `quosure`>, class<`name`>, class<`name`>> => (class<`all_vars`, `formula`, `quosure`> | class<`any_vars`, `formula`, `quosure`> | class<`formula`, `quosure`>);
type `expr_type_of` <class<`(`> | class<`call`> | class<`name`> | double> => character;
#type `filter` <character[]> => logical[] | <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., logical> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `filter_all` <class<`data.frame`>, class<`all_vars`, `formula`, `quosure`> | class<`any_vars`, `formula`, `quosure`>, logical> => class<`data.frame`>;
type `filter_at` <class<`data.frame`>, class<`list`, `quosures`>, class<`any_vars`, `formula`, `quosure`> | class<`formula`>, logical> => class<`data.frame`>;
type `filter.data.frame` <class<`data.frame`>, ..., logical> => class<`data.frame`>;
type `filter_if` <class<`data.frame`>, class<`formula`>, class<`all_vars`, `formula`, `quosure`>, logical> => class<`data.frame`>;
type `filter_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`formula`, `quosure`>> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `filter.tbl_cube` <class<`tbl_cube`>, ...> => class<`tbl_cube`>;
type `filter.tbl_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., logical> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `find_index` <class<`call`> | double | class<`name`>, character[]> => integer[];
type `find_index_check` <any, class<`formula`, `quosure`>, character[]> => integer;
type `find_template` <list<character> | list<integer>, null | character[], null | character> => (character | integer);
type `first` <integer[], null, any> => (integer | null);
type `flatten_bindable` <list<list<class<`data.frame`>>> | list<class<`data.frame`>> | list<class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>> | list<class<`rlang_box`, `rlang_box_splice`>> | list<list<class<`data.frame`, `tbl`, `tbl_df`>>> | list<class<`data.frame`, `tbl`, `tbl_df`>> | list<double[] | class<`data.frame`, `tbl`, `tbl_df`>> | list<double[]> | list<list<double[]>>> => (list<class<`data.frame`>> | list<class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>> | list<class<`data.frame`, `tbl`, `tbl_df`>> | list<double[] | class<`data.frame`, `tbl`, `tbl_df`>> | list<double[]> | list<list<double[]>>);
type `fmt_cols` <character> => class<`character`, `glue`>;
type `fmt_comma` <..., double> => character;
type `fmt_dims` <character[]> => character;
type `fmt_items` <character, double> => character;
type `fmt_obj` <character> => character;
type `fmt_obj1` <character> => character;
type `from_context` <character> => integer;
type `full_join` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, character | null, logical, any, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `full_join_impl` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, integer[], integer[], integer[], integer[], logical, environment> => class<`data.frame`, `tbl`, `tbl_df`>;
type `full_join.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, character | null, logical, character[], ..., null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `fun_env` <class<`formula`, `quosure`>, any> => environment;
type `funs` <..., list<any>> => class<`fun_list`>;
type `funs_` <character[], list<any>, any> => class<`fun_list`>;
type `get_by_aux` <class<`character`, `dplyr_sel_vars`>, character[]> => list<integer[]>;
type `get_join_var_idx` <class<`character`, `dplyr_sel_vars`>, class<`character`, `dplyr_sel_vars`>, list<character[]>> => list<list<integer[]>>;
type `glubort` <class<`character`, `glue`>, ..., environment, class<`function`>> => character;
type `group_by` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., logical, any> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `group_by_all` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, class<`function`> | list<any>, ..., logical, logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `group_by_at` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, character | class<`list`, `quosures`>, list<any>, ..., logical, logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `group_by.data.frame` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., logical, logical> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `group_by_drop_default` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>> => logical;
type `group_by_drop_default.default` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => logical;
type `group_by_drop_default.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => logical;
type `group_by_if` <class<`data.frame`>, class<`function`>, class<`function`> | list<any>, ..., logical, logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `group_by_prepare` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., list<any>, logical> => (list<class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | character[] | list<any>> | list<class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | character[] | list<class<`name`>>> | list<class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | character | list<class<`name`>>> | list<class<`data.frame`> | character[] | list<class<`name`>>> | list<class<`data.frame`> | character | list<class<`name`>>> | list<class<`data.frame`, `tbl`, `tbl_df`> | character[] | list<any>> | list<class<`data.frame`, `tbl`, `tbl_df`> | character[] | list<class<`name`>>> | list<class<`data.frame`, `tbl`, `tbl_df`> | character | list<class<`name`>>> | list<class<`tbl_cube`> | character[] | list<class<`name`>>> | list<class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | character | list<class<`name`>>>);
type `.group_by_static_drop` <..., logical> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `group_by.tbl_cube` <class<`tbl_cube`>, ..., logical, logical> => class<`tbl_cube`>;
type `group_cols` <class<`character`, `dplyr_sel_vars`>> => integer;
type `group_data` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_data.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_data_grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_data.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `[.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, character[] | integer[], any, logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, list<class<`name`>> | character[], logical> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `grouped_df_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, character[], logical> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `grouped_indices_grouped_df_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => integer[];
type `group_indices` <class<`data.frame`>, ...> => integer[];
type `group_indices.data.frame` <class<`data.frame`>, ..., logical> => integer[];
type `group_keys` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_keys.data.frame` <class<`data.frame`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_keys.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_keys_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_map` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, class<`formula`> | class<`function`>, ..., logical> => (list<class<`data.frame`, `tbl`, `tbl_df`>> | list<double[]> | list<null>);
type `group_modify` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, class<`formula`>, ..., logical> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>);
type `group_modify.data.frame` <class<`data.frame`>, class<`formula`>, ..., logical> => class<`data.frame`>;
type `group_modify.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, class<`formula`>, ..., logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `group_nest` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., character, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_nest.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>, ..., character, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_nest.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ..., character, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_nest_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, character, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `group_rows` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>> => list<integer[]>;
type `groups` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => (list<class<`name`>> | null);
type `groups.default` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => null;
type `groups.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => list<class<`name`>>;
type `group_size` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => integer[];
type `group_size_grouped_cpp` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => integer[];
type `group_size.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => integer[];
type `group_split` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ..., logical> => list<class<`data.frame`, `tbl`, `tbl_df`>>;
type `group_split.data.frame` <class<`data.frame`>, ..., logical> => list<class<`data.frame`, `tbl`, `tbl_df`>>;
type `group_split.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ..., logical> => list<class<`data.frame`, `tbl`, `tbl_df`>>;
type `group_split_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, logical, environment> => list<class<`data.frame`, `tbl`, `tbl_df`>>;
type `group_trim` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, any> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `group_trim.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `group_vars` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `group_vars.default` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => character[];
type `group_vars.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => character[];
type `group_walk` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, class<`formula`>, ...> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `hybrid_call` <class<`data.frame`>, any> => class<`hybrid_call`>;
type `hybrid_call.data.frame` <class<`data.frame`>, any> => class<`hybrid_call`>;
type `hybrid_impl` <class<`data.frame`>, class<`formula`, `quosure`>, environment> => class<`hybrid_call`>;
type `ident` <...> => class<`character`, `ident`>;
type `if_else` <^logical[], character | class<`factor`> | null, character | class<`factor`> | ^integer[], character | null> => (character[] | class<`factor`> | ^integer[]);
type `inner_join` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, character | null, logical, any, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `inner_join_impl` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, integer, integer, integer[], integer[], logical, environment> => class<`data.frame`, `tbl`, `tbl_df`>;
type `inner_join.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, character | null, logical, character[], ..., null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `intersect` <character[] | class<`character`, `dplyr_sel_vars`> | list<character> | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`character`, `dplyr_sel_vars`> | ^character[] | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (character[] | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `intersect_data_frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `intersect.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `intersect.default` <character[] | class<`character`, `dplyr_sel_vars`> | list<character>, class<`character`, `dplyr_sel_vars`> | ^character[], ...> => character[];
type `is_fun_list` <character | class<`formula`> | class<`function`> | list<any>> => logical;
type `is_grouped_df` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>> => logical;
type `is_sel_vars` <class<`character`, `dplyr_sel_vars`>> => logical;
type `join_vars` <class<`character`, `dplyr_sel_vars`>, class<`character`, `dplyr_sel_vars`>, list<character[]>, list<character>> => (list<character[] | integer[] | list<list<integer[]>>> | list<character[] | ^integer[] | list<list<integer[]>>> | list<character[] | ^integer[] | list<list<integer>>>);
type `label_output_dataframe` <class<`data.frame`, `tbl`, `tbl_df`> | null, list<list<class<`data.frame`, `tbl`, `tbl_df`>>> | list<list<class<`data.frame`>>>, any, any> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>);
type `label_output_list` <null | class<`data.frame`, `tbl`, `tbl_df`>, list<list<class<`anova`, `data.frame`>>> | list<list<integer[]>> | list<list<class<`lm`>>>, any> => class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>;
type `lag` <double[] | class<`factor`>, double, null, null | integer[], ...> => (^double[] | class<`factor`>);
type `last` <integer[], integer[] | null, any> => integer;
type `lead` <double[], double, null, null, ...> => ^double[];
type `left_join` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, character[] | null, any, any, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `left_join.data.frame` <class<`data.frame`>, class<`data.frame`>, character[], logical, ...> => class<`data.frame`>;
type `left_join_impl` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, integer[], integer[], integer[], integer[], logical, environment> => class<`data.frame`, `tbl`, `tbl_df`>;
type `left_join.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, null | character[], any, character[], ..., null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `list_cols_warning` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, character[] | integer[]> => (character[] | integer[]);
type `loc` <class<`data.frame`>> => character;
type `location` <class<`data.frame`>> => class<`location`>;
type `make_tbl` <character[], ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `manip_all` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, list<any> | class<`function`>, any, any, ..., logical> => list<any>;
type `manip_apply_syms` <list<any>, list<class<`name`>>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => list<any>;
type `manip_at` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, class<`list`, `quosures`> | character[], list<any> | class<`formula`> | class<`function`>, any, any, ..., logical> => list<any>;
type `manip_if` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`function`>, list<any> | class<`function`>, any, any, ..., logical> => list<any>;
type `map` <list<any> | null | integer[] | pairlist | character | class<`list`, `quosures`>, class<`function`>, ...> => list<any>;
type `map2` <list<class<`data.frame`, `tbl`, `tbl_df`>> | integer[] | list<class<`formula`>>, list<class<`data.frame`, `tbl`, `tbl_df`>> | class<`list`, `quosures`> | integer[], class<`function`> | class<`function`, `rlang_lambda_function`>, ...> => (list<class<`data.frame`, `tbl`, `tbl_df`>> | list<double[]> | list<null> | list<list<class<`formula`, `quosure`>>>);
type `map2_int` <integer[], class<`list`, `quosures`>, class<`function`>, ...> => integer[];
type `map_chr` <list<any> | null, class<`function`>, ...> => character[];
type `map_if` <list<class<`name`>> | null, class<`function`>, class<`function`>, ...> => (list<class<`name`>> | null);
type `map_lgl` <list<class<`data.frame`>> | list<class<`formula`>> | list<class<`function`>> | null | list<class<`name`>> | class<`data.frame`, `tbl`, `tbl_df`> | class<`list`, `quosures`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, class<`function`>, ...> => logical[];
type `map_mold` <list<any> | null | class<`data.frame`, `tbl`, `tbl_df`> | class<`list`, `quosures`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, class<`function`>, character | logical, ...> => (character[] | logical[]);
type `match_up` <character[], character[]> => class<`matrix`>;
type `match_vars` <character[] | integer[], any> => integer[];
type `materialize_binding` <integer, externalptr> => (class<`factor`> | class<`lm`> | ^double[]);
type `minimal_names` <character[], any> => character[];
type `min_rank` <^double[]> => ^integer[];
type `mutate` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => any;
type `mutate_at` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`list`, `quosures`> | character[], class<`function`> | class<`formula`>, ..., null> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `mutate.data.frame` <class<`data.frame`>, ...> => class<`data.frame`>;
type `mutate_if` <class<`data.frame`, `tbl`, `tbl_df`>, class<`function`>, class<`function`> | list<class<`formula`>> | list<class<`function`>>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `mutate_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`list`, `quosures`>, environment> => any;
type `mutate.tbl_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => any;
type `n` < > => integer;
type `na_if` <^character[] | double[], character | double | integer[]> => (^character[] | ^double[]);
type `named_args` <class<`list`, `quosures`>> => logical;
type `n_distinct` <..., logical> => integer;
type `n_distinct_multi` <list<integer[]>, logical> => integer;
type `near` <double, double, double> => logical;
type `nest_join` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, null, logical, logical, null, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `nest_join_impl` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, integer, integer, integer, character, environment> => class<`data.frame`, `tbl`, `tbl_df`>;
type `nest_join.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, null, logical, logical, null, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `new_funs` <list<class<`formula`, `quosure`>>> => class<`fun_list`>;
type `new_grouped_df` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, ..., character[]> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `new_sel_vars` <character[], character[]> => class<`character`, `dplyr_sel_vars`>;
type `n_groups` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => integer;
type `n_groups.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => integer;
type `n_name` <character[], character> => character;
type `node_walk_replace` <pairlist, class<`name`>, class<`name`>> => null;
type `now` < > => double;
type `ntext` <integer, character, character> => character;
type `nth` <integer[], double, any, any> => (integer | null);
type `ntile` <^double[], double> => ^integer[];
type `order_by` <integer[], any> => double[];
type `paste_line` <...> => character;
type `percent_rank` <^double[]> => ^double[];
type `plfloc` <list<character[] | integer[]> | list<character[]>> => character[];
type `probe` <null | list<class<`name`>>, class<`function`>, ...> => logical[];
type `progress_estimated` <double, double> => class<`Progress`, `R6`>;
type `pull` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, any> => (character[] | ^double[]);
type `pull.data.frame` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`>, any> => (character[] | ^double[]);
type `quo_reduce` <..., class<`name`>> => class<`formula`, `quosure`>;
type `recode` <character[] | ^integer[] | double[] | class<`factor`>, ..., null | character[], null | character> => (^character[] | class<`factor`> | ^integer[]);
type `recode.character` <character[], ..., null, null> => ^character[];
type `recode_default` <character[] | class<`factor`> | double[] | ^integer[], null | character[], any> => (character[] | ^integer[] | null);
type `recode_default.default` <character[] | double[] | ^integer[], null | character, ^character[] | ^integer[]> => (character[] | ^integer[] | null);
type `recode_default.factor` <class<`factor`>, character[] | null, any> => character[];
type `recode_factor` <character[] | class<`factor`> | ^integer[], ..., null | character, null | character, logical> => class<`factor`>;
type `recode.factor` <class<`factor`>, ..., character[] | null, null> => class<`factor`>;
type `recode.numeric` <^integer[] | double[], ..., character | null, null | character> => (^character[] | ^integer[]);
type `reconstruct_join` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `reconstruct_set` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `reduce` <class<`list`, `quosures`>, class<`function`>, ..., any> => class<`call`>;
type `regroup` <class<`data.frame`, `tbl`, `tbl_df`>, environment> => class<`data.frame`, `tbl`, `tbl_df`>;
type `rename` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `rename_all` <class<`data.frame`>, class<`function`>, ...> => class<`data.frame`>;
type `rename_at` <class<`data.frame`>, class<`list`, `quosures`>, class<`function`>, ...> => class<`data.frame`>;
type `rename.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `rename_if` <class<`data.frame`>, class<`function`>, class<`function`>, ...> => class<`data.frame`>;
type `replace_with` <^character[] | null | class<`factor`> | ^double[], any, null | ^character[] | class<`factor`> | ^double[], any, any> => (^character[] | class<`factor`> | ^double[] | null);
type `right_join` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, null, logical, any, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `right_join_impl` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, integer, integer, integer, integer[], logical, environment> => class<`data.frame`, `tbl`, `tbl_df`>;
type `right_join.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, null, logical, character[], ..., null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `row_number` <any> => ^integer[];
type `rowwise` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>;
type `same_src` <class<`data.frame`, `tbl`, `tbl_df`> | class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`> | class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => logical;
type `same_src.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>> => logical;
type `sample_frac` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, double, logical, any, null, ...> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `sample_frac.data.frame` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, double, logical, any, null, ...> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `sample_n` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, double, logical, any, null, ...> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `sample_n.data.frame` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, double, logical, any, null, ...> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `select` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `select_all` <class<`data.frame`>, character | class<`function`> | list<any>, ...> => class<`data.frame`>;
type `select_at` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`list`, `quosures`> | character, class<`function`> | list<any>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `select.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `.select_grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ..., logical> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `select.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `select_if` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`function`>, class<`function`> | list<any>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `select_impl` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, character[]> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `select.tbl_cube` <class<`tbl_cube`>, ...> => class<`tbl_cube`>;
type `semi_join` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, null | character, logical, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `semi_join_impl` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, character, character, logical, environment> => class<`data.frame`, `tbl`, `tbl_df`>;
type `semi_join.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, null | character, logical, ..., null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `setdiff` <character[] | class<`character`, `dplyr_sel_vars`> | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | null, character[] | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (character[] | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | null);
type `setdiff_data_frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `setdiff.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `setdiff.default` <character[] | class<`character`, `dplyr_sel_vars`> | null, character[], ...> => (character[] | null);
type `setequal` <class<`data.frame`>, class<`data.frame`>, ...> => logical;
type `setequal.data.frame` <class<`data.frame`>, class<`data.frame`>, ...> => logical;
type `show_query` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `signal_soft_deprecated` <character, any, environment> => null;
type `slice` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., logical> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `slice.data.frame` <class<`data.frame`>, ..., logical> => class<`data.frame`>;
type `slice_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`formula`, `quosure`>> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `slice.tbl_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., logical> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `sql_escape_ident` <class<`SQLiteConnection`>, character[] | class<`character`, `ident`>> => character[];
type `sql_escape_string` <class<`SQLiteConnection`>, character> => class<`SQL`>;
type `sql_join` <class<`SQLiteConnection`>, class<`character`, `ident`>, class<`character`, `ident`>, list<^character[]>, character, list<character[]>, ...> => class<`character`, `sql`>;
type `sql_select` <class<`SQLiteConnection`>, class<`character`, `sql`>, class<`character`, `ident`> | class<`character`, `sql`>, class<`character`, `sql`> | null | character[], character[] | class<`character`, `sql`> | null, character[] | null, character[] | null, null> => class<`character`, `sql`>;
type `sql_subquery` <class<`SQLiteConnection`>, class<`character`, `ident`> | class<`character`, `sql`>, any, ...> => (class<`character`, `ident`> | class<`character`, `sql`>);
type `sql_translate_env` <class<`SQLiteConnection`>> => class<`sql_variant`>;
type `src_df` <character, null> => class<`src`, `src_local`>;
type `src_local` <character, character, null> => class<`src`, `src_local`>;
type `src_sqlite` <character, logical> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `src_tbls` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>> => character[];
type `strip_pos` <character[]> => character[];
##type `summarise` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl_cube`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `summarise_all` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, list<class<`formula`>> | list<class<`function`>>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `summarise_at` <class<`data.frame`, `tbl`, `tbl_df`>, character[] | class<`list`, `quosures`>, class<`function`>, ..., null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `summarise.data.frame` <class<`data.frame`>, ...> => class<`data.frame`>;
type `summarise_if` <class<`data.frame`, `tbl`, `tbl_df`>, class<`function`>, class<`function`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `summarise_impl` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`list`, `quosures`>, environment, environment> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `summarise.tbl_cube` <class<`tbl_cube`>, ...> => class<`tbl_cube`>;
type `summarise.tbl_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `switch_expr` <class<`(`> | class<`call`> | double | class<`name`>, ...> => (null | pairlist);
type `tally` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, any, logical, character> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `tbl` <class<`src`, `src_local`> | class<`SQLiteConnection`> | class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, ...> => (class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `tbl_at_syms` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, class<`list`, `quosures`> | character[], logical> => list<class<`name`>>;
type `tbl_at_vars` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`list`, `quosures`> | character[], logical> => character[];
type `tbl_cube` <list<character[]> | list<class<`factor`, `ordered`>>, list<class<`array`>>> => class<`tbl_cube`>;
type `tbl.DBIConnection` <class<`SQLiteConnection`>, character | class<`character`, `sql`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `tbl_df` <class<`data.frame`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `tbl_if_syms` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, class<`function`> | class<`formula`>, any, ..., logical> => list<class<`name`>>;
type `tbl_if_vars` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`formula`> | list<class<`function`>> | class<`function`>, any, ..., logical> => character[];
type `tbl_nongroup_vars` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>> => character[];
type `tbl.src_local` <class<`src`, `src_local`>, character, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `tbl_vars` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => class<`character`, `dplyr_sel_vars`>;
type `tbl_vars.data.frame` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>> => character[];
type `tbl_vars_dispatch` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `top_frac` <class<`data.frame`>, double, any> => class<`data.frame`>;
type `top_n` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, any, any> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `top_n_rank` <double, double[]> => logical[];
type `transmute` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `transmute.default` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `undimname` <class<`array`>> => class<`array`>;
type `ungroup` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => (class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>);
type `ungroup_grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `ungroup.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `ungroup.rowwise_df` <class<`data.frame`, `rowwise_df`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `union` <character[] | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, character[] | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (character[] | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `union_all` <class<`data.frame`>, class<`data.frame`>, ...> => class<`data.frame`>;
type `union_all.data.frame` <class<`data.frame`>, class<`data.frame`>, ...> => class<`data.frame`>;
type `union_data_frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `union.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `union.default` <character[], character[], ...> => character[];
type `unique_names` <character[], logical, class<`function`>> => character[];
type `validate_case_when_length` <list<^logical[]>, list<^character[]> | list<double | null> | list<null | ^character[]> | list<double[]>, any> => integer;
type `validate_recode_default` <character[] | null, class<`factor`> | character[] | double[] | ^integer[], any, any> => (character[] | ^integer[] | null);
type `vars` <...> => class<`list`, `quosures`>;
type `vars_select_syms` <character[] | class<`character`, `dplyr_sel_vars`>, list<any>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, logical> => list<any>;
type `warn_deprecated` <any, character> => (character | null);
type `warn_text_se` < > => null;
type `warn_underscored` < > => null;
type `with_order` <integer[], class<`function`>, double[], ...> => ^double[];
type `wrap_dbplyr_obj` <character> => class<`<-`>;
