type `accumulate` <any, class<`polynomial`>, class<`polylist`>, logical> => class<`polynomial`>;
type `as.character.polynomial` <class<`polynomial`>, logical, ...> => character;
type `as.function` <class<`polynomial`>> => class<`polynomial`>;
type `as.function.polynomial` <class<`polynomial`>, ...> => class<`function`>;
type `as.polylist` <class<`polylist`> | class<`polynomial`> | list<class<`polynomial`>>> => class<`polylist`>;
type `as.polynomial` <double[] | class<`polynomial`>> => class<`polynomial`>;
type `change.origin` <class<`polynomial`>, double> => class<`polynomial`>;
type `coef.polynomial` <class<`polynomial`>, ...> => double[];
type `c.polylist` <..., logical> => class<`polylist`>;
type `.degree` <class<`polynomial`>> => double;
type `deriv.polylist` <class<`polylist`>, ...> => class<`polylist`>;
type `deriv.polynomial` <class<`polynomial`>, ...> => class<`polynomial`>;
type `f` <double[]> => double[] | <class<`polynomial`>, class<`polynomial`>> => class<`polynomial`> | <double[]> => double[] | <any, class<`polynomial`>> => class<`polynomial`> | <double[]> => double[] | <double[]> => double[];
type `filter` <character[]> => logical[];
type `fp3` <integer[]> => double[];
type `FUN` <class<`polylist`> | class<`polynomial`> | list<class<`polynomial`>>> => class<`polylist`> | <double[] | class<`polynomial`>> => class<`polynomial`> | <class<`polynomial`>, double[], ...> => double[] | <class<`polynomial`> | class<`polylist`>, ...> => (class<`polynomial`> | class<`polylist`>) | <class<`polynomial`>, ...> => class<`summary.polynomial`>;
type `GCD` <...> => class<`polynomial`>;
type `.GCD2` <any, class<`polynomial`>> => class<`polynomial`>;
type `GCD.polylist` <...> => class<`polynomial`>;
type `integral` <class<`polynomial`> | class<`polylist`>, ...> => (class<`polynomial`> | class<`polylist`>);
type `integral.polylist` <class<`polylist`>, ...> => class<`polylist`>;
type `integral.polynomial` <class<`polynomial`>, null, ...> => class<`polynomial`>;
type `is.polylist` <class<`polylist`> | class<`polynomial`> | list<class<`polynomial`>>> => logical;
type `is.polynomial` <class<`polynomial`> | double[]> => logical;
type `.is_zero_polynomial` <class<`polynomial`>> => logical;
type `LCM` <...> => class<`polynomial`>;
type `LCM.polylist` <...> => class<`polynomial`>;
type `lines.polynomial` <class<`polynomial`>, double, null, null, ...> => null;
type `Math.polynomial` <class<`polynomial`>, ...> => class<`polynomial`>;
type `Ops.polynomial` <class<`polynomial`> | double, class<`polynomial`> | double> => (class<`polynomial`> | logical);
type `plot.polylist` <class<`polylist`>, any, double[], character, double, ..., character, character> => null;
type `plot.polynomial` <class<`polynomial`>, any, double[], character, double, ..., character, character> => null;
type `points.polynomial` <class<`polynomial`>, double, ...> => null;
type `poly.calc` <class<`summary.polynomial`> | complex[], any, any, any> => (class<`polylist`> | class<`polynomial`>);
type `poly.from.roots` <...> => class<`polynomial`>;
type `poly.from.values` <class<`summary.polynomial`> | complex[], any, any, any> => (class<`polylist`> | class<`polynomial`>);
type `polylist` <...> => class<`polylist`>;
type `[.polylist` <class<`polylist`>, double[]> => class<`polylist`>;
type `.polylist_from_list` <list<any>> => class<`polylist`>;
type `polynomial` <class<`polynomial`> | complex[]> => class<`polynomial`>;
type `poly.orth` <double[], double, logical> => class<`polylist`>;
type `predict.polynomial` <class<`polynomial`>, double[], ...> => double[];
type `prf` <integer[]> => double[];
type `print.polynomial` <class<`polynomial`>, integer, logical, ...> => class<`polynomial`>;
type `rep.polylist` <class<`polylist`>, double, ...> => class<`polylist`>;
type `solve.polynomial` <class<`polynomial`>, any, ...> => complex[];
type `Summary.polylist` <..., logical> => class<`polynomial`>;
type `summary.polynomial` <class<`polynomial`>, ...> => class<`summary.polynomial`>;
type `unique.polylist` <class<`polylist`>, logical, ...> => class<`polylist`>;
