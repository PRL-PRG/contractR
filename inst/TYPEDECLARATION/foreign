type `filter` <character[]> => logical[];
type `fun` <symbol, symbol> => tuple<>;
type `FUN` <^double[] | ^character[]> => ^double[] | character;
type `read.dbf` <character, logical> => struct<`a`:^integer[], `b`:^double[], `c`:^logical[], `d`:^integer[], `e`:^integer[], `f`:^double[]>;
type `read.dta` <character, logical, logical, logical, logical, logical> => struct<`Fertility`:double[], `Agriculture`:double[], `Examination`:integer[], `Education`:integer[], `Catholic`:double[], `Infant_Mortality`:double[]>;
type `read.spss` <character, logical, logical, double, logical, logical, null, logical, character, character[], character[], character, ??? | logical> => struct<`CASEID`:double[], `FIRSTCHD`:integer[], `AGE`:double[], `DBP58`:^double[], `EDUYR`:^double[], `CHOL58`:double[], `CGT58`:^double[], `HT58`:double[], `WT58`:double[], `DAYOFWK`:^integer[], `VITAL10`:integer[], `FAMHXCVR`:integer[], `CHD`:double[]>;
type `read.systat` <character, logical> => struct<`SPECIES`:double[], `SEPALLEN`:double[], `SEPALWID`:double[], `PETALLEN`:double[], `PETALWID`:double[]>;
type `spquote` <character> => character;
type `squote` <character[]> => character[];
type `trim` <character[] | ^double[], logical> => character[] | ^double[];
type `write.arff` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, character, character, character> => null;
type `write.dbf` <struct<`a`:^integer[], `b`:^double[], `c`:^logical[], `d`:^integer[], `e`:^character[], `f`:^double[]>, character, logical, double> => null;
type `write.dta` <struct<`Fertility`:double[], `Agriculture`:double[], `Examination`:integer[], `Education`:integer[], `Catholic`:double[], `Infant.Mortality`:double[]>, character, integer, logical, character, character[]> => null;
