type `filter` <character[]> => logical[];
type `fun` <any, any> => list<any>;
type `FUN` <double[]> => logical | <class<`Date`> | ^character[] | ^double[]> => (class<`Date`> | class<`factor`> | ^double[]) | <double[]> => null | <double[]> => logical | <class<`AsIs`> | class<`Date`> | class<`factor`> | ^double[]> => character | <class<`AsIs`> | class<`Date`> | class<`factor`> | ^double[]> => logical | <double[]> => logical;
type `read.arff` <character> => any;
type `read.dbf` <character, logical> => class<`data.frame`>;
type `read.dta` <character, logical, logical, logical, logical, logical> => class<`data.frame`>;
type `read.spss` <character, logical, logical, double, logical, logical, null, logical, character, character[], character[], character> => (class<`data.frame`> | list<class<`factor`> | ^double[]>);
type `read.systat` <character, logical> => class<`data.frame`>;
type `spquote` <character> => character;
type `squote` <character[]> => character[];
type `trim` <character[] | ^double[], logical> => (character[] | ^double[]);
type `write.arff` <class<`data.frame`>, character, character, character> => null;
type `write.dbf` <class<`data.frame`>, character, logical, double> => null;
type `write.dta` <class<`data.frame`>, character, integer, logical, character, character[]> => null;
