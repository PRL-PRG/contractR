type `.log_level` <character | double, character | null | struct<`message`:character, `call`:language>, integer, character, logical> => character;
type `[[` <struct<`message`:character, `call`:language>> => character;
type `appender` <character> => null;
type `appender.console` < > => any => any;
type `filter` <character[]> => logical[];
type `flog.appender` <character> => any => any;
type `flog.carp` <logical> => null;
type `flog.debug` <character, null | character, character, logical> => null | character;
type `flog.info` <character | double, null | symbol, character, logical> => null | character;
type `flog.layout` <character | any => any> => null | any => any;
type `flog.logger` <character> => null | struct<`name`:character, `threshold`:integer, `appender`:any => any, `layout`:any => any, `carp`:logical> | struct<`name`:character, `threshold`:integer, `appender`:any => any, `layout`:any => any>;
type `flog.remove` <character> => null;
type `flog.threshold` <integer> => null;
type `flog.warn` <character, character | struct<`message`:character, `call`:language>, character, logical> => character;
type `ftry` <language, symbol, null> => character;
type `layout` <integer, character | double, null | character | struct<`message`:character, `call`:language>> => character;
type `layout.format` <character, character> => any => any;
type `scat` <character, integer, logical> => null;
