type `accounting` <character[] | double[], integer, character, character, ...> => class<`formattable`, `numeric`>;
type `accounting.character` <character[], integer, character, character, ...> => class<`formattable`, `numeric`>;
type `accounting.default` <double[], integer, character, character, ...> => class<`formattable`, `numeric`>;
type `all.formattable` <...> => class<`formattable`, `logical`>;
type `any.formattable` <...> => class<`formattable`, `logical`>;
type `area` <any, any> => class<`area`>;
type `as.character.formattable` <class<`formattable`, `numeric`>, ...> => character;
type `as.datatable` <class<`data.frame`, `formattable`>, ...> => class<`datatables`, `htmlwidget`>;
type `as.datatable.formattable` <class<`data.frame`, `formattable`>, logical, ...> => class<`datatables`, `htmlwidget`>;
type `as_numeric` <class<`array`> | class<`matrix`> | double[]> => (class<`array`> | class<`matrix`> | double[]);
type `call_or_default` <character | class<`function`>, character[] | double[], ...> => (character[] | double[]);
type `check_rgb` <character[], logical> => logical[];
type `check_rgba` <character[]> => logical[];
type `color_bar` <any, class<`function`> | character, ...> => class<`formatter`, `function`>;
type `color_text` <...> => class<`formatter`, `function`>;
type `color_tile` <...> => class<`formatter`, `function`>;
type `comma` <character | double[], any, character, character, ...> => class<`formattable`, `numeric`>;
type `comma.character` <character, integer, character, character, ...> => class<`formattable`, `numeric`>;
type `comma.default` <double[], integer, character, character, ...> => class<`formattable`, `numeric`>;
type `cop_create_obj` <class<`function`>, character, class<`Date`, `formattable`> | class<`formattable`, `numeric`> | class<`POSIXct`, `POSIXt`, `formattable`>, double | class<`formattable`, `numeric`>> => (class<`Date`, `formattable`> | class<`formattable`, `numeric`> | class<`POSIXct`, `POSIXt`, `formattable`>);
type `copy_dim` <class<`formattable`, `numeric`> | double[] | character[] | class<`matrix`>, character[] | class<`formattable`, `numeric`>, logical> => (character[] | class<`formattable`, `numeric`> | class<`matrix`>);
type `copy_obj` <class<`formattable`, `logical`> | class<`formattable`, `numeric`> | class<`formattable`, `matrix`>, double[], character> => (class<`formattable`, `logical`> | class<`formattable`, `numeric`>);
type `create_obj` <class<`array`> | class<`data.frame`> | class<`Date`> | class<`factor`> | ^integer[] | class<`matrix`> | double[] | class<`POSIXct`, `POSIXt`>, character, list<any>> => (class<`array`, `formattable`> | class<`data.frame`, `formattable`> | class<`Date`, `formattable`> | class<`factor`, `formattable`> | class<`formattable`, `integer`> | class<`formattable`, `logical`> | class<`formattable`, `matrix`> | class<`formattable`, `numeric`> | class<`POSIXct`, `POSIXt`, `formattable`>);
type `csscolor` <character[] | class<`matrix`>, any, logical> => character[];
type `csscolor.character` <character[], character[], logical> => character[];
type `csscolor.matrix` <class<`matrix`>, character[], logical> => character[];
type `currency` <character | double, any, any, character, character, ...> => class<`formattable`, `numeric`>;
type `currency.character` <character, any, integer, character, character, ...> => class<`formattable`, `numeric`>;
type `currency.default` <double, any, integer, character, character, ..., character> => class<`formattable`, `numeric`>;
type `digits` <double, double, character, ...> => class<`formattable`, `numeric`>;
type `eval_formula` <class<`formula`>, any, any, environment> => ^character[];
type `fcreate_obj` <class<`function`>, character, class<`formattable`, `logical`> | class<`formattable`, `numeric`>, ...> => (class<`formattable`, `logical`> | class<`formattable`, `numeric`>);
type `format.formattable` <class<`formattable`, `numeric`>, ..., null, character, logical, logical, logical> => character[];
type `formattable` <class<`array`> | class<`data.frame`> | class<`Date`> | class<`factor`> | ^integer[] | class<`matrix`> | class<`formattable`, `numeric`> | double[] | class<`POSIXct`, `POSIXt`>, ...> => (class<`array`, `formattable`> | class<`data.frame`, `formattable`> | class<`Date`, `formattable`> | class<`factor`, `formattable`> | class<`formattable`, `integer`> | class<`formattable`, `logical`> | class<`formattable`, `matrix`> | class<`formattable`, `numeric`> | class<`POSIXct`, `POSIXt`, `formattable`>);
type `[.formattable` <class<`formattable`, `numeric`> | class<`formattable`, `matrix`>, ...> => class<`formattable`, `numeric`>;
type `[[<-.formattable` <class<`formattable`, `numeric`>, ..., double> => class<`formattable`, `numeric`>;
type `[[.formattable` <class<`formattable`, `logical`> | class<`formattable`, `numeric`>, ...> => (class<`formattable`, `logical`> | class<`formattable`, `numeric`>);
type `*.formattable` <class<`formattable`, `numeric`>, double> => class<`formattable`, `numeric`>;
type `+.formattable` <class<`Date`, `formattable`> | class<`formattable`, `numeric`> | class<`POSIXct`, `POSIXt`, `formattable`>, double | class<`formattable`, `numeric`>> => (class<`Date`, `formattable`> | class<`formattable`, `numeric`> | class<`POSIXct`, `POSIXt`, `formattable`>);
type `format_table` <class<`data.frame`>, list<class<`formula`>> | list<class<`formatter`, `function`>> | list<logical>, character[], character, ..., integer, character> => class<`knitr_kable`>;
type `formattable.data.frame` <class<`data.frame`>, ..., character, null, null> => class<`data.frame`, `formattable`>;
type `formattable.Date` <class<`Date`>, ..., character, null, null> => class<`Date`, `formattable`>;
type `formattable.factor` <class<`factor`>, ..., character, null, null> => class<`factor`, `formattable`>;
type `formattable.formattable` <class<`formattable`, `numeric`>, ..., any, any, list<class<`function`>>> => class<`formattable`, `numeric`>;
type `formattable.logical` <logical[], ..., character, null, null> => class<`formattable`, `logical`>;
type `formattable.numeric` <class<`array`> | ^integer[] | class<`matrix`> | double[], ..., character, character | null, character | list<class<`function`>> | class<`function`> | null> => (class<`array`, `formattable`> | class<`formattable`, `integer`> | class<`formattable`, `matrix`> | class<`formattable`, `numeric`>);
type `formattable.POSIXct` <class<`POSIXct`, `POSIXt`>, ..., character, null, null> => class<`POSIXct`, `POSIXt`, `formattable`>;
type `formatter` <character, ...> => class<`formatter`, `function`>;
type `get_digits` <character[]> => integer[];
type `get_false_entries` <list<any>> => (character[] | null);
type `gradient` <double[], character, character, logical | null, logical, logical> => class<`matrix`>;
type `icontext` <character[] | list<character[]>, list<null> | double[] | character[], ..., logical, character, character> => (class<`list`, `shiny.tag.list`> | list<class<`list`, `shiny.tag.list`>>);
type `ifelse` <logical[], character[] | double | integer[], character | double, ...> => (character[] | double[]);
type `is_false` <class<`formatter`, `function`> | class<`formula`> | logical> => logical;
type `is.formattable` <class<`data.frame`, `formattable`> | class<`formattable`, `numeric`> | double> => logical;
type `max.formattable` <...> => class<`formattable`, `numeric`>;
type `mean.formattable` <class<`formattable`, `numeric`>, ...> => class<`formattable`, `numeric`>;
type `normalize` <double[], double, double, logical> => double[];
type `normalize_bar` <character, ...> => class<`formatter`, `function`>;
type `percent` <class<`array`> | class<`matrix`> | character[] | double[], any, character, ...> => (class<`array`, `formattable`> | class<`formattable`, `matrix`> | class<`formattable`, `numeric`>);
type `percent.character` <character[], null, character, ...> => class<`formattable`, `numeric`>;
type `percent.default` <double[] | class<`array`> | class<`matrix`>, double, character, ...> => (class<`formattable`, `numeric`> | class<`array`, `formattable`> | class<`formattable`, `matrix`>);
type `prefix` <^integer[] | class<`formattable`, `numeric`> | double[], character, character, ..., character | null> => (class<`formattable`, `integer`> | class<`formattable`, `numeric`>);
type `proportion` <double[], logical> => double[];
type `proportion_bar` <character, ...> => class<`formatter`, `function`>;
type `qrank` <double[], ...> => double[];
type `remove_attribute` <character[], character> => character[];
type `remove_class` <class<`data.frame`, `formattable`> | class<`Date`, `formattable`> | class<`POSIXct`, `POSIXt`, `formattable`> | class<`formattable`, `numeric`> | class<`formattable`, `logical`>, character> => (class<`data.frame`> | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[]);
type `render_html_matrix` <class<`data.frame`>, ...> => class<`matrix`>;
type `render_html_matrix.data.frame` <class<`data.frame`>, list<class<`formula`>> | list<class<`formatter`, `function`>> | list<logical>, integer, ...> => class<`matrix`>;
type `render_html_matrix.formattable` <class<`data.frame`, `formattable`>, ...> => class<`matrix`>;
type `reset_class` <class<`formattable`, `numeric`>, class<`formattable`, `numeric`>, character> => class<`formattable`, `numeric`>;
type `scientific` <double, character[], ...> => class<`formattable`, `numeric`>;
type `seq_list` <character[]> => list<integer>;
type `set_class` <class<`array`> | class<`data.frame`> | class<`Date`> | class<`factor`> | ^integer[] | class<`matrix`> | double[] | class<`POSIXct`, `POSIXt`>, character> => (class<`array`, `formattable`> | class<`data.frame`, `formattable`> | class<`Date`, `formattable`> | class<`factor`, `formattable`> | class<`formattable`, `integer`> | class<`formattable`, `logical`> | class<`formattable`, `matrix`> | class<`formattable`, `numeric`> | class<`POSIXct`, `POSIXt`, `formattable`>);
type `str2rgb` <character[], logical | null> => class<`matrix`>;
type `style` <...> => character[];
type `suffix` <^integer[] | class<`formattable`, `numeric`> | double[], any, character, ..., character | null> => (class<`formattable`, `integer`> | class<`formattable`, `numeric`>);
type `vmap` <double[] | character[], ..., logical> => (character[] | double[]);
