type `[.formattable` <^double[], integer[] | character> => double[];
type `[[.formattable` <double[], double> => double;
type `[[<-.formattable` <double[], double, double> => double[];
type `*.formattable` <double[], double> => double[];
type `+.formattable` <double[], double> => double[];
type `accounting.character` <character[], integer, character, character, null> => double[];
type `accounting.default` <double[], integer, character, character, null> => double[];
type `all.formattable` <logical[]> => logical;
type `any.formattable` <logical[]> => logical;
type `area` <double | language | null, null | language> => struct<`row`:double, `col`:logical, `envir`:environment> | struct<`row`:language, `col`:language, `envir`:environment> | struct<`row`:language, `col`:logical, `envir`:environment> | struct<`row`:logical, `col`:language, `envir`:environment>;
type `arg` <^double[], null> => ^character[];
type `as_numeric` <^double[]> => ^double[];
type `as.character.formattable` <double, null> => character;
type `as.datatable.formattable` <struct<`id`:integer[], `price`:double[], `rating`:double[], `market_share`:double[], `revenue`:double[], `profit`:double[]>, logical, null> => struct<`x`:struct<`filter`:character, `data`:struct<` `:character[], `id`:character[], `price`:character[], `rating`:character[], `market_share`:character[], `revenue`:character[], `profit`:character[]>, `container`:character, `options`:struct<`order`:tuple<>, `autoWidth`:logical, `orderClasses`:logical, `columnDefs`:tuple<struct<`orderable`:logical, `targets`:double>>>>, `width`:null, `height`:null, `sizingPolicy`:struct<`defaultWidth`:null, `defaultHeight`:null, `padding`:null, `viewer`:struct<`defaultWidth`:null, `defaultHeight`:null, `padding`:null, `fill`:logical, `suppress`:logical, `paneHeight`:null>, `browser`:struct<`defaultWidth`:null, `defaultHeight`:null, `padding`:null, `fill`:logical, `external`:logical>, `knitr`:struct<`defaultWidth`:character, `defaultHeight`:character, `figure`:logical>>, `dependencies`:tuple<struct<`name`:character, `version`:character, `src`:struct<`file`:character>, `meta`:null, `script`:character, `stylesheet`:character[], `head`:null, `attachment`:null, `package`:null, `all_files`:logical>, struct<`name`:character, `version`:character, `src`:struct<`file`:character>, `meta`:null, `script`:character, `stylesheet`:null, `head`:null, `attachment`:null, `package`:null, `all_files`:logical>, struct<`name`:character, `version`:character, `src`:struct<`file`:character>, `meta`:null, `script`:character, `stylesheet`:character, `head`:null, `attachment`:null, `package`:null, `all_files`:logical>>, `elementId`:null, `preRenderHook`:any => any, `jsHooks`:tuple<>>;
type `call_or_default` <character | any => any, character[] | double[], double[] | null> => character[] | double[];
type `check_rgb` <character[], logical> => logical[];
type `check_rgba` <character[]> => logical[];
type `color_bar` <character | symbol, character | any => any, null> => any => any;
type `color_text` <character> => any => any;
type `color_tile` <character> => any => any;
type `comma.character` <character, integer, character, character, null> => double;
type `comma.default` <double[], integer, character, character, null> => double[];
type `cop_create_obj` <any => any, character, double[], double> => double[];
type `copy_dim` <^double[] | character[], character[] | double[], logical> => ^character[] | double[];
type `copy_obj` <^double[], double[], character> => double[];
type `create_obj` <struct<`a`:double[], `b`:double[], `c`:double[]> | ^double[], character, struct<`formatter`:character, `format`:tuple<tuple<language>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<list<language>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`change`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`cur_score`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`prev_score`:any => any, `cur_score`:any => any, `change`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`prev_score`:logical>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`price`:any => any, `rating`:any => any, `market_share`:any => any, `revenue`:any => any, `profit`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`price`:any => any, `revenue`:any => any, `profit`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`profit`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`cyl`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`mpg`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`mpg`:any => any, `qsec`:any => any, `am`:any => any>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<struct<`mpg`:logical, `cyl`:logical>>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:struct<`format`:character>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<>, `preproc`:null, `postproc`:tuple<any => any>> | struct<`formatter`:character, `format`:struct<`digits`:double>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:struct<`format`:character>, `preproc`:null, `postproc`:tuple<any => any>> | struct<`formatter`:character, `format`:struct<`format`:character, `big.mark`:character, `digits`:integer>, `preproc`:null, `postproc`:character> | struct<`formatter`:character, `format`:struct<`format`:character, `digits`:double>, `preproc`:character, `postproc`:character> | struct<`formatter`:character, `format`:struct<`format`:character, `big.mark`:character, `digits`:integer>, `preproc`:null, `postproc`:any => any> | struct<`formatter`:character, `format`:struct<`a`:character, `b`:character, `c`:character>, `preproc`:null, `postproc`:null> | struct<`formatter`:character, `format`:tuple<>, `preproc`:null, `postproc`:any => any> | struct<`formatter`:character, `format`:tuple<character, character>, `preproc`:null, `postproc`:null>> => struct<`a`:double[], `b`:double[], `c`:double[]> | ^double[];
type `csscolor.character` <character[], character[], logical> => character[];
type `csscolor.matrix` <^integer[], character[], logical> => character[];
type `currency.character` <character, character | language, integer, character, character, null> => double;
type `currency.default` <double, symbol | character, integer, character, character, null, character> => double;
type `digits` <double, double, character, null> => double;
type `eval_formula` <language, ^double[] | symbol, symbol | struct<>, environment> => ^character[];
type `f` <^double[], symbol | struct<>> => ^character[];
type `fcreate_obj` <any => any, character, double[], logical | null> => double;
type `filter` <character[]> => logical[];
type `format_table` <struct<`a`:double[], `b`:double[], `c`:double[]>, tuple<language> | struct<`mpg`:any => any> | struct<`mpg`:logical, `cyl`:logical>, character[], character, null, integer, character> => character;
type `format.formattable` <double[], null | integer, null, character, logical, logical, logical> => character[];
type `formattable.data.frame` <struct<`a`:double[], `b`:double[], `c`:double[]>, tuple<language> | list<language> | null | struct<`change`:any => any> | struct<`cur_score`:any => any> | struct<`prev_score`:any => any, `cur_score`:any => any, `change`:any => any> | struct<`prev_score`:logical> | struct<`price`:any => any, `rating`:any => any, `market_share`:any => any, `revenue`:any => any, `profit`:any => any> | struct<`price`:any => any, `revenue`:any => any, `profit`:any => any> | struct<`profit`:any => any> | struct<`cyl`:any => any> | struct<`mpg`:any => any> | struct<`mpg`:any => any, `qsec`:any => any, `am`:any => any> | struct<`mpg`:logical, `cyl`:logical>, character, null, null> => struct<`a`:double[], `b`:double[], `c`:double[]>;
type `formattable.Date` <double[], character, character, null, null> => double[];
type `formattable.factor` <integer[], character, character, null, null> => integer[];
type `formattable.formattable` <double[], null, null, null, tuple<any => any>> => double[];
type `formattable.logical` <logical[], character, character, null, null> => logical[];
type `formattable.numeric` <^double[], character | double | null, character, null | character, null | character | tuple<any => any> | any => any> => ^double[];
type `formattable.POSIXct` <double[], character, character, null, null> => double[];
type `formatter` <character, character | any => any | language | null> => any => any;
type `FUN` <any => any | language | character | integer[]> => ^character[] | logical | struct<`name`:character, `attribs`:struct<`class`:character>, `children`:tuple<>>;
type `get_digits` <character[]> => integer[];
type `get_false_entries` <struct<`mpg`:any => any> | struct<`mpg`:logical, `cyl`:logical> | struct<`price`:any => any, `revenue`:any => any, `profit`:any => any> | tuple<> | tuple<language>> => null | character[];
type `gradient` <double[], character, character, null | logical, logical, logical> => ^integer[];
type `icontext` <character[] | tuple<character[], character[]>, double[] | tuple<null> | character[], null, logical, character, character> => list<struct<``:tuple<struct<`name`:character, `attribs`:struct<`class`:character>, `children`:tuple<>>>, ``:double>> | tuple<struct<``:tuple<struct<`name`:character, `attribs`:struct<`class`:character>, `children`:tuple<>>>, ``:null>, struct<``:tuple<struct<`name`:character, `attribs`:struct<`class`:character>, `children`:tuple<>>>, ``:null>> | struct<``:tuple<struct<`name`:character, `attribs`:struct<`class`:character>, `children`:tuple<>>>, ``:null>;
type `ifelse` <logical[], character[] | double | integer[], character | double, null> => character[] | double[];
type `is_false` <any => any | language | logical> => logical;
type `is.formattable` <struct<`id`:integer[], `price`:double[], `rating`:double[], `market_share`:double[], `revenue`:double[], `profit`:double[]> | double> => logical;
type `match.fun` <character[] | double[], double[]> => character[] | double[];
type `max.formattable` <double[]> => double;
type `mean.formattable` <double[], null> => double;
type `normalize` <double[], double, double, logical> => double[];
type `normalize_bar` <character, null> => any => any;
type `percent.character` <character[], null, character, null> => double[];
type `percent.default` <^double[], double, character, null> => ^double[];
type `plain_formatter` <double[], null> => character[];
type `prefix` <double[] | ^integer[], character, character, character | null, null | character> => double[] | ^integer[];
type `proportion` <double[], logical> => double[];
type `proportion_bar` <character, null> => any => any;
type `qrank` <double[], null> => double[];
type `remove_attribute` <character[], character> => character[];
type `remove_class` <struct<`id`:integer[], `price`:double[], `rating`:double[], `market_share`:double[], `revenue`:double[], `profit`:double[]> | double[], character> => struct<`id`:integer[], `price`:double[], `rating`:double[], `market_share`:double[], `revenue`:double[], `profit`:double[]> | double[];
type `render_html_matrix.data.frame` <struct<`a`:double[], `b`:double[], `c`:double[]>, tuple<language> | struct<`mpg`:any => any> | struct<`mpg`:logical, `cyl`:logical>, integer, null> => ^character[];
type `render_html_matrix.formattable` <struct<`id`:integer[], `price`:double[], `rating`:double[], `market_share`:double[], `revenue`:double[], `profit`:double[]>, null> => ^character[];
type `reset_class` <double[], double[], character> => double[];
type `scientific` <double, character[], double | null> => double;
type `seq_list` <character[]> => struct<`1`:integer, `2`:integer, `3`:integer, `4`:integer, `5`:integer, `6`:integer, `7`:integer, `8`:integer, `9`:integer, `10`:integer> | struct<`a`:integer, `b`:integer, `c`:integer> | struct<`Mazda RX4`:integer, `Mazda RX4 Wag`:integer, `Datsun 710`:integer, `Hornet 4 Drive`:integer, `Hornet Sportabout`:integer, `Valiant`:integer, `Duster 360`:integer, `Merc 240D`:integer, `Merc 230`:integer, `Merc 280`:integer, `Merc 280C`:integer, `Merc 450SE`:integer, `Merc 450SL`:integer, `Merc 450SLC`:integer, `Cadillac Fleetwood`:integer, `Lincoln Continental`:integer, `Chrysler Imperial`:integer, `Fiat 128`:integer, `Honda Civic`:integer, `Toyota Corolla`:integer, `Toyota Corona`:integer, `Dodge Challenger`:integer, `AMC Javelin`:integer, `Camaro Z28`:integer, `Pontiac Firebird`:integer, `Fiat X1-9`:integer, `Porsche 914-2`:integer, `Lotus Europa`:integer, `Ford Pantera L`:integer, `Ferrari Dino`:integer, `Maserati Bora`:integer, `Volvo 142E`:integer> | struct<`mpg`:integer, `cyl`:integer, `disp`:integer, `hp`:integer, `drat`:integer, `wt`:integer, `qsec`:integer, `vs`:integer, `am`:integer, `gear`:integer, `carb`:integer>;
type `set_class` <struct<`a`:double[], `b`:double[], `c`:double[]> | ^double[], character> => struct<`a`:double[], `b`:double[], `c`:double[]> | ^double[];
type `sign_formatter` <double[], null> => character[];
type `str2rgb` <character[], null | logical> => ^integer[];
type `style` <^character[] | double[]> => character[];
type `suffix` <double[] | ^integer[], character | language, character, null, null | character> => double[] | ^integer[];
type `vmap` <double[] | character[], character | double, logical> => character[] | double[];
type `width_formatter` <double[], null> => character[];
