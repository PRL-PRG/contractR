type `filter` <character[]> => logical[];
type `cov.pooled` <^double[], integer[], double[]> => ^double[];
type `distmirr` <double[]> => ^double[];
type `FUN` <^double[], ^double[], integer[], any => any, integer, logical> => character | ^double[];
type `loclda.default` <^double[], integer[], any => any, integer, logical, double[]> => struct<`learn`:^double[], `grouping`:integer[], `lev`:character[], `weight.func`:any => any, `k`:integer, `weighted.apriori`:logical, `call`:language>;
type `loclda.formula` <language, struct<`PHASEN`:integer[], `BSP91JW`:double[], `CP91JW`:double[], `DEFRATE`:double[], `EWAJW`:double[], `EXIMRATE`:double[], `GM1JW`:double[], `IAU91JW`:double[], `IB91JW`:double[], `LSTKJW`:double[], `PBSPJW`:double[], `PCPJW`:double[], `ZINSK`:double[], `ZINSLR`:double[]>, double[], null, symbol> => struct<`learn`:^double[], `grouping`:integer[], `lev`:character[], `weight.func`:any => any, `k`:integer, `weighted.apriori`:logical, `call`:language, `terms`:language, `xlevels`:tuple<>>;
type `loclda.matrix` <^double[], integer[], double[], null, symbol> => struct<`learn`:^double[], `grouping`:integer[], `lev`:character[], `weight.func`:any => any, `k`:integer, `weighted.apriori`:logical, `call`:language>;
type `membercheck` <^double[]> => null;
type `ML` <double[], ^double[], integer[], integer[], double[], double[]> => double[];
type `mu.weighted` <^double[], integer[], integer[], double[], integer> => double[];
type `NaiveBayes.default` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, integer[], null, logical, double, null> => struct<`apriori`:double[], `tables`:struct<`Sepal.Length`:^double[], `Sepal.Width`:^double[], `Petal.Length`:^double[], `Petal.Width`:^double[]>, `levels`:character[], `call`:language, `x`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, `usekernel`:logical, `varnames`:character[]>;
type `nm.formula` <language, symbol, null | double, null, symbol> => struct<`learn`:^double[], `grouping`:integer[], `lev`:character[], `k`:double, `gamma`:double, `call`:language, `terms`:language, `xlevels`:tuple<>>;
type `plot.corclust` <struct<`cor`:^double[], `crv`:null, `cluster.numerics`:struct<`merge`:^integer[], `height`:double[], `order`:integer[], `labels`:character[], `method`:character, `call`:language, `dist.method`:null>, `cluster.factors`:null, `id.numerics`:integer[], `id.factors`:integer[]>, character, null | double, null> => struct<`ask`:logical>;
type `plot.EDAM` <struct<`preimages`:^double[], `Z`:^integer[], `Z.old.terms`:^integer[], `cl.ord`:integer[], `S`:^double[]>> => struct<`Cells.ex`:^double[], `S`:double>;
type `rda.formula` <language, symbol, double> => struct<`call`:language, `regularization`:double[], `classes`:character[], `prior`:double[], `error.rate`:double, `varnames`:character[], `means`:^double[], `covariances`:double[], `covpooled`:^double[], `converged`:logical, `iter`:double, `terms`:language, `xlevels`:tuple<>>;
type `shardsplot` <struct<`preimages`:^double[], `Z`:^integer[], `Z.old.terms`:^integer[], `cl.ord`:integer[], `S`:^double[]>, double, logical, logical, logical, null, logical, logical, double, logical, character, double, character, character, character, character, null, logical> => struct<`Cells.ex`:^double[], `S`:double>;
type `sknn.default` <^double[], integer[], double, double, null> => struct<`learn`:^double[], `grouping`:integer[], `lev`:character[], `k`:double, `gamma`:double, `call`:language>;
type `sknn.matrix` <^double[], integer[], double, null, symbol> => struct<`learn`:^double[], `grouping`:integer[], `lev`:character[], `k`:double, `gamma`:double, `call`:language>;
type `update_mode` <integer, symbol, struct<`a`:integer[], `b`:integer[], `c`:integer[], `d`:integer[], `e`:integer[]>, integer[]> => character[];
