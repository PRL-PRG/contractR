type `benchB3` <character, double[], character, logical, ...> => list<double[] | list<class<`lda`>> | double[] | list<class<`loclda`>>>;
type `betascale` <list<double | class<`matrix`> | list<list<double>> | double | list<list<double>>>, any> => class<`matrix`>;
type `b.scal` <class<`matrix`>, class<`factor`>, logical, double> => list<double | class<`matrix`> | list<list<double>>>;
type `calc.trans` <class<`factor`>> => class<`table`>;
type `centerlines` <double> => class<`matrix`>;
type `classify` <class<`matrix`>, class<`matrix`>, class<`array`>, class<`matrix`>, double, double, integer, integer, integer, double[]> => integer[] | <class<`matrix`>, class<`matrix`>, class<`array`>, class<`matrix`>, double, double, integer, integer, integer, double[]> => class<`matrix`>;
type `classscatter` <class<`formula`>, class<`data.frame`>, character, character, character, null, ...> => double;
type `cond.index` <class<`formula`>, class<`data.frame`>, ...> => double[];
type `corclust` <class<`data.frame`>, class<`factor`> | null, character> => class<`corclust`>;
type `cov.pooled` <class<`matrix`>, class<`factor`>, double[]> => class<`matrix`>;
type `cvtree` <class<`corclust`>, double, null, ...> => class<`cvtree`>;
type `distmirr` <class<`dist`>> => class<`matrix`>;
type `dkernel` <double[], class<`density`>, logical, ...> => double[];
type `.dmvnorm` <class<`matrix`>, double[], class<`matrix`>, double | null> => double[];
type `EDAM` <class<`data.frame`> | class<`matrix`>, double, double, logical, logical, double, class<`factor`> | integer[], logical, double, double, double> => class<`EDAM`>;
type `errormatrix` <class<`factor`>, class<`factor`> | integer[], logical> => class<`matrix`>;
type `e.scal` <class<`matrix`>, double, class<`factor`> | null> => list<class<`matrix`> | double>;
type `f` <double, class<`matrix`>, class<`factor`>> => (double | null);
type `filter` <character[]> => logical[];
type `friedman.cov` <double, any, double> => double[];
type `friedman.data` <double, double, double, logical> => class<`data.frame`>;
type `friedman.mean` <any, integer, double> => double[];
type `FUN` <double[], double[], class<`matrix`>, double> => double | <class<`data.frame`>, character[], logical, double> => list<double> | <double[]> => integer | <integer[]> => integer | <double> => double | <integer> => double | <double> => integer | <double[], class<`matrix`>, class<`factor`>, class<`function`>, integer, logical> => double[] | <integer> => double[] | <integer> => logical[] | <class<`factor`>> => double | <double[]> => integer | <double[]> => double[] | <double[]> => double[] | <double[], integer> => double[] | <integer[]> => character | <double[]> => integer[] | <double> => class<`matrix`> | <integer> => double[] | <double[]> => integer | <double> => double;
type `greedy.wilks` <class<`formula`> | class<`matrix`>, ...> => class<`greedy.wilks`>;
type `greedy.wilks.default` <class<`matrix`>, class<`factor`>, double, ...> => class<`greedy.wilks`>;
type `greedy.wilks.formula` <class<`formula`>, any, ...> => class<`greedy.wilks`>;
type `hmm.sop` <character, class<`table`>, class<`matrix`>> => class<`matrix`>;
type `klassen` <class<`factor`>> => class<`matrix`>;
type `kmodes` <class<`matrix`>, double, double, logical, logical> => class<`kmodes`>;
type `Lambda` <class<`matrix`>, class<`factor`>> => double;
type `loclda` <any, ...> => class<`loclda`>;
type `loclda.default` <class<`matrix`>, class<`factor`>, class<`function`>, integer, logical, ...> => class<`loclda`>;
type `loclda.formula` <class<`formula`>, class<`data.frame`>, ..., any, any> => class<`loclda`>;
type `loclda.matrix` <class<`matrix`>, class<`factor`>, ..., any, any> => class<`loclda`>;
type `membercheck` <class<`matrix`>> => null;
type `ML` <double[], class<`matrix`>, class<`factor`>, class<`factor`>, double[], double[]> => double[];
type `mu.weighted` <class<`matrix`>, class<`factor`>, class<`factor`>, double[], integer> => double[];
type `plot.corclust` <class<`corclust`>, character, double | null, ...> => list<logical>;
type `plot.EDAM` <...> => class<`EDAM.ex`>;
type `predict.loclda` <class<`loclda`>, class<`data.frame`>, ...> => list<class<`factor`> | class<`matrix`> | integer[]>;
type `predict.rda` <class<`rda`>, class<`data.frame`>, logical, logical, ...> => list<class<`factor`> | class<`matrix`>>;
type `rda` <class<`formula`>, ...> => class<`rda`>;
type `rda.default` <class<`matrix`>, class<`factor`>, null, double, double, double[], logical, double, double, logical, logical, null> => class<`rda`>;
type `rda.formula` <class<`formula`>, any, ...> => class<`rda`>;
type `scal` <double, class<`matrix`>> => class<`matrix`>;
type `shardsplot` <class<`EDAM`>, character[], double, logical, logical, logical, null, logical, logical, double, logical, character> => class<`EDAM.ex`>;
type `sim.ann` <any, any, any, any, class<`matrix`>, class<`matrix`>, double> => list<class<`matrix`>>;
type `TopoS` <class<`matrix`>, class<`matrix`> | double[]> => class<`matrix`>;
type `ucpm` <class<`matrix`>, class<`factor`>, null> => list<double[]>;
type `update_mode` <integer, any, class<`data.frame`>, integer[]> => character[];
type `weighted` <double[], class<`matrix`>, class<`factor`>, class<`function`>, integer, logical> => list<class<`factor`> | double[] | class<`matrix`>>;
