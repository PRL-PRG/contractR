type `::` <class<`lmerMod`> | class<`merModLmerTest`>, double> => any | <any, any, logical, any, null, integer, any, any, any, any, any, logical, ...> => any;
type `:::` <class<`lmerMod`> | class<`merModLmerTest`>, double> => any | <character[]> => class<`data.frame`> | <...> => class<`data.frame`>;
type `anova.lmerModLmerTest` <class<`lmerModLmerTest`>, ..., any, any> => any;
type `anova.merModLmerTest` <class<`merModLmerTest`>, ..., character[], character[]> => class<`anova`, `data.frame`>;
type `as.data.frame.ls_means` <class<`data.frame`, `ls_means`>, ..., logical> => class<`data.frame`>;
type `as_lmerModLmerTest` <class<`lmerMod`> | class<`merModLmerTest`>, double> => any;
type `as_lmerModLT` <class<`lmerMod`> | class<`merModLmerTest`>, class<`function`>, double> => class<`lmerModLmerTest`>;
type `containment` <class<`lmerModLmerTest`>> => list<character[]>;
type `contest` <class<`lmerModLmerTest`> | class<`merModLmerTest`>, class<`matrix`> | double[] | list<double[] | class<`matrix`>>, ...> => (class<`data.frame`> | list<class<`data.frame`>>);
type `contest1D` <class<`lmerMod`> | class<`lmerModLmerTest`>, class<`matrix`> | ^double[] | list<double[]>, ...> => any;
type `contest1D.lmerMod` <class<`lmerMod`>, double[], double, character[], logical, double, ...> => class<`data.frame`>;
type `contest1D.lmerModLmerTest` <class<`lmerModLmerTest`>, class<`matrix`> | ^double[] | list<double[]>, double, character[], logical, any, ...> => any;
type `contest.lmerMod` <class<`merModLmerTest`>, class<`matrix`> | double[], double, logical, logical, logical, double, logical, character[], ...> => class<`data.frame`>;
type `contest.lmerModLmerTest` <class<`lmerModLmerTest`>, class<`matrix`> | double[] | list<double[] | class<`matrix`>>, double, logical, logical, any, any, any, character[], ...> => (class<`data.frame`> | list<class<`data.frame`>>);
type `contestMD` <class<`lmerMod`> | class<`lmerModLmerTest`>, class<`matrix`> | ^double[] | list<class<`matrix`>>, ...> => any;
type `contestMD.lmerMod` <class<`lmerMod`>, class<`matrix`>, double, character[], any, ...> => class<`data.frame`>;
type `contestMD.lmerModLmerTest` <class<`lmerModLmerTest`>, class<`matrix`> | ^double[] | list<class<`matrix`>>, double[], any, any, ...> => any;
type `difflsmeans` <class<`lmerModLmerTest`> | class<`merModLmerTest`>, ...> => class<`data.frame`, `ls_means`>;
type `difflsmeans.lmerModLmerTest` <class<`lmerModLmerTest`>, null, double, character[], ...> => class<`data.frame`, `ls_means`>;
type `difflsmeans.merModLmerTest` <class<`merModLmerTest`>, null, double, character[], ...> => class<`data.frame`, `ls_means`>;
type `doolittle` <class<`matrix`>, double> => list<class<`matrix`>>;
type `drop1.lmerModLmerTest` <class<`lmerModLmerTest`>, any, character[], logical, ...> => any;
type `drop1.merModLmerTest` <class<`merModLmerTest`>, any, character[], logical, ...> => class<`anova`, `data.frame`>;
type `ensure_full_rank` <class<`matrix`>, double, logical, logical> => class<`matrix`>;
type `extract_contrasts_type3` <class<`lmerModLmerTest`>, class<`matrix`>> => list<class<`matrix`>>;
type `fix_redTable` <class<`anova`, `data.frame`>> => class<`anova`, `data.frame`>;
type `FUN` <class<`call`> | class<`name`>, integer, logical, character[], integer> => character;
type `get_coefmat` <class<`lmerModLmerTest`>, character> => class<`matrix`>;
type `get_contrast_coding` <class<`lmerModLmerTest`>, character> => (null | list<any>);
type `get_contrasts_marginal` <class<`lmerModLmerTest`>, null | character[]> => list<class<`matrix`>>;
type `get_contrasts_type1` <class<`lmerModLmerTest`>> => list<class<`matrix`>>;
type `get_contrasts_type2` <class<`lmerModLmerTest`>, character[]> => list<class<`matrix`>>;
type `get_contrasts_type2_unfolded` <class<`lmerModLmerTest`>, null> => list<class<`matrix`>>;
type `get_contrasts_type3` <class<`lmerModLmerTest`>, null> => list<class<`matrix`>>;
type `get_fac_list` <class<`lmerModLmerTest`>> => list<any>;
type `get_Fstat_ddf` <double[], double> => double;
type `get_Ldiffmat2` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `get_lhs` <character> => class<`formula`>;
type `get_lm_call` <class<`lmerModLmerTest`> | class<`merModLmerTest`>, class<`formula`>> => list<class<`name`> | class<`formula`>>;
type `get_logLik` <class<`lm`> | class<`lmerMod`> | class<`lmerModLmerTest`> | class<`merModLmerTest`>, ...> => class<`data.frame`>;
type `get_min_data` <class<`lmerModLmerTest`>, any> => class<`data.frame`>;
type `get_model` <class<`step_list`>, ...> => class<`lmerModLmerTest`>;
type `get_model_matrix` <class<`lmerModLmerTest`>, character, character> => class<`matrix`>;
type `get_model.step_list` <class<`step_list`>, ...> => class<`lmerModLmerTest`>;
type `get_num_list` <class<`lmerModLmerTest`>, any> => list<any>;
type `get_pairs` <character[]> => class<`data.frame`>;
type `get_rdX` <class<`lmerModLmerTest`>, logical> => class<`matrix`>;
type `get_rhs` <character> => character;
type `get_var_list` <class<`lmerModLmerTest`>, any> => list<any>;
type `has_ranef` <class<`call`> | class<`formula`>> => logical;
type `has_terms` <class<`formula`>> => logical;
type `is_estimable` <class<`matrix`>, class<`matrix`>, null, any> => logical[];
type `lmer` <any, any, logical, any, null, integer, any, any, any, any, any, logical, ...> => any;
type `ls_means` <class<`lmerModLmerTest`> | class<`merModLmerTest`>, ...> => class<`data.frame`, `ls_means`>;
type `lsmeans_contrasts` <class<`lmerModLmerTest`>, null | character> => list<any>;
type `ls_means.lmerModLmerTest` <class<`lmerModLmerTest`>, character | null, double, character[], logical, ...> => class<`data.frame`, `ls_means`>;
type `lsmeansLT` <class<`lmerModLmerTest`>, ...> => class<`data.frame`, `ls_means`>;
type `lsmeansLT.lmerModLmerTest` <class<`lmerModLmerTest`>, character | null, double, character[], logical, ...> => class<`data.frame`, `ls_means`>;
type `ls_means.merModLmerTest` <class<`merModLmerTest`>, null, double, character[], logical, ...> => class<`data.frame`, `ls_means`>;
type `mk_LRtab` <class<`data.frame`>> => class<`data.frame`>;
type `nullspace` <class<`matrix`>, character[], any> => class<`matrix`>;
type `numeric_terms` <class<`lmerModLmerTest`>> => (logical[] | list<any>);
type `qform` <double[], class<`matrix`>> => double;
type `ranova` <class<`lmerModLmerTest`> | class<`merModLmerTest`>, logical, ...> => class<`anova`, `data.frame`>;
type `ran_redTable` <class<`anova`, `data.frame`>> => class<`anova`, `data.frame`>;
type `rbindall` <...> => class<`data.frame`>;
type `reduce_fixed` <class<`lmerModLmerTest`>, character[], double, character[]> => class<`anova`, `data.frame`>;
type `reduce_random` <class<`lmerModLmerTest`>, double> => class<`anova`, `data.frame`>;
type `rm_complete_terms` <character[] | list<character>, class<`formula`>, logical> => list<class<`formula`>>;
type `safeDeparse` <class<`call`> | class<`name`>, integer, logical, character[], integer> => character;
type `show_tests` <class<`anova`, `data.frame`> | class<`data.frame`, `ls_means`>, ...> => list<class<`fractions`, `matrix`> | class<`matrix`>>;
type `show_tests.anova` <class<`anova`, `data.frame`> | class<`data.frame`, `ls_means`>, logical, logical, ...> => list<class<`fractions`, `matrix`> | class<`matrix`>>;
type `show_tests.default` <class<`anova`, `data.frame`> | class<`data.frame`, `ls_means`>, logical, logical, ...> => list<class<`fractions`, `matrix`> | class<`matrix`>>;
type `show_tests.ls_means` <class<`anova`, `data.frame`> | class<`data.frame`, `ls_means`>, logical, logical, ...> => list<class<`fractions`, `matrix`> | class<`matrix`>>;
type `single_anova` <class<`lmerModLmerTest`>, character[] | double, any> => any;
type `step` <class<`lmerModLmerTest`> | class<`merModLmerTest`>, ...> => class<`step_list`>;
type `step.lmerModLmerTest` <class<`lmerModLmerTest`>, character[], double, double, logical, logical, any, ...> => class<`step_list`>;
type `step.merModLmerTest` <class<`merModLmerTest`>, character[], double, double, logical, logical, any, ...> => class<`step_list`>;
type `summary.lmerModLmerTest` <class<`lmerModLmerTest`>, ..., character[]> => (class<`summary.lmerModLmerTest`, `summary.merMod`> | class<`summary.merMod`>);
type `summary.merModLmerTest` <class<`merModLmerTest`>, ..., character[]> => class<`summary.lmerModLmerTest`, `summary.merMod`>;
type `term2colX` <class<`formula`, `terms`>, class<`matrix`>> => list<integer[]>;
type `term_contain` <character, class<`matrix`>, character[], character[]> => logical[];
type `update.lmerModLmerTest` <class<`lmerModLmerTest`>, any, ..., logical> => (class<`call`> | class<`function`> | class<`lmerModLmerTest`>);
type `waldCI` <double[] | null, double[] | null, double[] | null, double> => class<`matrix`>;
