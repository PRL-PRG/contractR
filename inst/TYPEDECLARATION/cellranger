type `%||%` <logical | null, any> => logical;
type `A1_to_R1C1` <character[], logical> => (^character[] | null);
type `A1_to_ra_ref` <character[], logical> => list<class<`list`, `ra_ref`>>;
type `addr_col` <class<`cell_addr`>, ...> => integer[];
type `addr_col.cell_addr` <class<`cell_addr`>, ...> => integer[];
type `addr_row` <class<`cell_addr`>, ...> => integer[];
type `addr_row.cell_addr` <class<`cell_addr`>, ...> => (integer[] | null);
type `add_single_quotes` <character | null> => (character | null);
type `anchored` <character, double[], null | character[] | class<`data.frame`>, null | logical, logical> => class<`cell_limits`, `list`>;
type `as.cell_addr` <character[] | class<`list`, `ra_ref`>, ...> => class<`cell_addr`>;
type `as.cell_addr.character` <character[], null, logical, ...> => class<`cell_addr`>;
type `as.cell_addr.ra_ref` <class<`list`, `ra_ref`>, ...> => class<`cell_addr`>;
type `as.cell_addr_v` <list<class<`list`, `ra_ref`>>, ...> => class<`cell_addr`>;
type `as.cell_addr_v.list` <list<class<`list`, `ra_ref`>>, ...> => class<`cell_addr`>;
type `as.cell_limits` <character, ...> => class<`cell_limits`, `list`>;
type `as.cell_limits.character` <character, null, ...> => class<`cell_limits`, `list`>;
type `as.range` <class<`cell_limits`, `list`>, character[], logical, null> => character;
type `as.ra_ref` <character | class<`cell_addr`>, ...> => class<`list`, `ra_ref`>;
type `as.ra_ref.cell_addr` <class<`cell_addr`>, ...> => class<`list`, `ra_ref`>;
type `as.ra_ref.character` <character, character | null, logical, ...> => class<`list`, `ra_ref`>;
type `as.ra_ref_v` <class<`cell_addr`> | character[], ...> => list<class<`list`, `ra_ref`>>;
type `as.ra_ref_v.cell_addr` <class<`cell_addr`>, ...> => list<class<`list`, `ra_ref`>>;
type `as.ra_ref_v.character` <character[], null | character, any, ...> => list<class<`list`, `ra_ref`>>;
type `[.cell_addr` <class<`cell_addr`>, integer[]> => class<`cell_addr`>;
type `[[.cell_addr` <class<`cell_addr`>, double> => class<`cell_addr`>;
type `cell_addr` <double | ^integer[] | null, double | integer[]> => class<`cell_addr`>;
type `cell_cols` <^character[] | ^double[]> => class<`cell_limits`, `list`>;
type `cell_limits` <^double[] | list<integer>, ^double[] | list<integer>, null | character> => class<`cell_limits`, `list`>;
type `cell_rows` <^double[]> => class<`cell_limits`, `list`>;
type `dim.cell_limits` <class<`cell_limits`, `list`>> => ^double[];
type `FUN` <character[] | class<`list`, `ra_ref`>, ...> => class<`cell_addr`> | <class<`list`, `ra_ref`> | class<`cell_addr`>, any, any, null | logical, ...> => (character[] | null);
type `guess_fo` <character[] | double, character[]> => (character[] | null);
type `is_A1` <character[] | double> => logical[];
type `isFALSE` <logical> => logical;
type `is_R1C1` <character[] | double> => logical[];
type `isTOGGLE` <logical | null> => logical;
type `isTRUE_v` <^logical[] | null> => logical[];
type `length.cell_addr` <class<`cell_addr`>> => integer;
type `letter_to_num` <^character[] | null> => (^integer[] | null);
type `num_to_letter` <^double[]> => ^character[];
type `parse_ref_string` <character, null> => list<character[]>;
type `print.ra_ref` <class<`list`, `ra_ref`>, character, ...> => null;
type `R1C1_to_A1` <character[], logical> => ^character[];
type `R1C1_to_ra_ref` <character[]> => list<class<`list`, `ra_ref`>>;
type `ra_ref` <double | null | character, logical | null, double | null | character, logical | null, character | null, null> => class<`list`, `ra_ref`>;
type `rel_abs_format` <logical, any, character[]> => (character | integer);
type `relativize` <class<`list`, `ra_ref`>> => class<`list`, `ra_ref`>;
type `to_string` <class<`list`, `ra_ref`> | class<`cell_addr`>, any, any, null | logical, ...> => (character[] | null);
type `to_string.cell_addr` <class<`cell_addr`>, character[], any, logical, ...> => character[];
type `to_string.ra_ref` <class<`list`, `ra_ref`>, any, any, null | logical, ...> => (character | null);
type `to_string_v` <class<`cell_addr`> | list<class<`list`, `ra_ref`>>, any, logical, null, ...> => character[];
type `to_string_v.cell_addr` <class<`cell_addr`>, character[], any, logical, ...> => character[];
type `to_string_v.list` <list<class<`list`, `ra_ref`>>, character[], logical, null, ...> => character[];
