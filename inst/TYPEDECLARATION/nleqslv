type `catmsg` <character, character, character> => null;
type `f` <symbol> => any => any;
type `filter` <character[]> => logical[];
type `makeerrlist` <character, character, null> => struct<`Method`:character, `Global`:character, `termcd`:null, `Fcnt`:null, `Jcnt`:null, `Iter`:null, `Message`:character, `Fnorm`:null>;
type `makereslist` <character, character, struct<`x`:double[], `fvec`:double[], `termcd`:integer, `message`:character, `scalex`:double[], `nfcnt`:integer, `njcnt`:integer, `iter`:integer>, null> => struct<`Method`:character, `Global`:character, `termcd`:integer, `Fcnt`:integer, `Jcnt`:integer, `Iter`:integer, `Message`:character, `Fnorm`:double>;
type `nleqslv` <double[], any => any, null | any => any, null | double, character[], character[], character[], logical, tuple<> | struct<`btol`:double> | struct<`trace`:double> | struct<`dsub`:double, `dsuper`:double>> => struct<`x`:double[], `fvec`:double[], `termcd`:integer, `message`:character, `scalex`:double[], `nfcnt`:integer, `njcnt`:integer, `iter`:integer>;
type `print.test.nleqslv` <struct<`out`:struct<`Method`:character[], `Global`:character[], `termcd`:integer[], `Fcnt`:integer[], `Jcnt`:integer[], `Iter`:integer[], `Message`:character[], `Fnorm`:double[]>, `call`:language>, double, integer, null> => struct<`out`:struct<`Method`:character[], `Global`:character[], `termcd`:integer[], `Fcnt`:integer[], `Jcnt`:integer[], `Iter`:integer[], `Message`:character[], `Fnorm`:double[]>, `call`:language>;
type `searchZeros` <^double[], any => any, integer, character> => struct<`x`:^double[], `xfnorm`:double[], `fnorm`:double[], `idxcvg`:integer[], `idxxtol`:integer[], `idxnocvg`:integer[], `idxfatal`:integer[], `xstart`:^double[], `cvgstart`:^double[]>;
type `testnslv` <double[], any => any, null, null, character[], character[], integer, null> => struct<`out`:struct<`Method`:character[], `Global`:character[], `termcd`:^integer[], `Fcnt`:^integer[], `Jcnt`:^integer[], `Iter`:^integer[], `Message`:character[], `Fnorm`:^double[]>, `call`:language>;
