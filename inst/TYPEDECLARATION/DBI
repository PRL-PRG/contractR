type `::` <class<`AnsiConnection`> | class<`SQLiteConnection`> | class<`SQLiteDriver`>, character[] | class<`factor`> | double[] | class<`AsIs`> | class<`Date`> | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`data.frame`> | list<raw[]>, ...> => character[] | <class<`AnsiConnection`>, character[] | class<`factor`> | double[] | class<`AsIs`> | class<`Date`> | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`data.frame`> | list<raw[]>, ...> => character[];
type `[[` <class<`condition`, `dbi_abort`>> => null;
type `ANSI` < > => class<`AnsiConnection`>;
type `asMethod` <class<`SQL`>, character, logical> => class<`SQL`>;
type `check_raw_list` <list<raw[]>> => null;
type `dbAppendTable` <class<`SQLiteConnection`>, character, class<`data.frame`>, ..., null> => integer | <class<`SQLiteConnection`>, character, class<`data.frame`>, ..., null> => integer;
type `dbBegin` <class<`SQLiteConnection`>, ...> => logical;
type `dbBind` <class<`SQLiteResult`>, list<any>, ...> => class<`SQLiteResult`>;
type `dbBreak` < > => any;
type `dbCanConnect` <class<`SQLiteDriver`>, ...> => logical | <class<`SQLiteDriver`>, ...> => logical;
type `dbClearResult` <class<`SQLiteResult`>, ...> => logical;
type `dbColumnInfo` <class<`SQLiteResult`>, ...> => class<`data.frame`>;
type `dbCommit` <class<`SQLiteConnection`>, ...> => logical;
type `dbConnect` <class<`DBIConnector`>, ...> => class<`SQLiteConnection`> | <class<`DBIConnector`> | class<`SQLiteDriver`>, ...> => class<`SQLiteConnection`>;
type `dbCreateTable` <class<`SQLiteConnection`>, character, character[] | class<`data.frame`>, ..., null, logical> => logical | <class<`SQLiteConnection`>, character, character[] | class<`data.frame`>, ..., null, logical> => logical;
type `dbDataType` <class<`AnsiConnection`> | class<`SQLiteConnection`> | class<`SQLiteDriver`>, character[] | class<`factor`> | double[] | class<`AsIs`> | class<`Date`> | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`data.frame`> | list<raw[]>, ...> => character[] | <class<`AnsiConnection`>, character[] | class<`factor`> | double[] | class<`AsIs`> | class<`Date`> | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`data.frame`> | list<raw[]>, ...> => character[];
type `dbDisconnect` <class<`SQLiteConnection`>, ...> => logical;
type `dbDriver` <character, ...> => class<`SQLiteDriver`> | <character, ...> => class<`SQLiteDriver`>;
type `dbExecute` <class<`SQLiteConnection`>, class<`SQL`>, ...> => integer | <class<`SQLiteConnection`>, character | class<`SQL`>, ...> => integer | <class<`SQLiteConnection`>, character, ...> => integer;
type `dbExistsTable` <class<`SQLiteConnection`>, character, ...> => logical;
type `dbFetch` <class<`SQLiteResult`>, double, ...> => class<`data.frame`>;
type `dbGetConnectArgs` <class<`DBIConnector`>, logical, ...> => list<character | character | class<`function`>> | <class<`DBIConnector`>, logical, ...> => list<character | character | class<`function`>>;
type `dbGetQuery` <class<`SQLiteConnection`>, character, ...> => class<`data.frame`> | <class<`SQLiteConnection`>, class<`SQL`>, ...> => class<`data.frame`> | <class<`SQLiteConnection`>, character | class<`SQL`>, ...> => class<`data.frame`>;
type `dbGetRowCount` <class<`SQLiteResult`>, ...> => integer;
type `dbGetRowsAffected` <class<`SQLiteResult`>, ...> => integer;
type `dbGetStatement` <class<`SQLiteResult`>, ...> => character;
type `dbHasCompleted` <class<`SQLiteResult`>, ...> => logical;
type `dbiDataType` <double[], ...> => character | <class<`data.frame`>, ...> => character[] | <logical, ...> => character | <class<`Date`>, ...> => character | <class<`POSIXct`, `POSIXt`>, ...> => character | <list<raw[]>, ...> => character | <character[], ...> => character | <integer[], ...> => character | <character[] | class<`AsIs`> | class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | double[] | class<`data.frame`> | list<raw[]>, ...> => character[] | <class<`AsIs`>, ...> => character | <class<`difftime`>, ...> => character | <class<`factor`>, ...> => character;
type `dbIsReadOnly` <class<`AnsiConnection`>, ...> => logical | <class<`AnsiConnection`>, ...> => logical;
type `dbIsValid` <class<`SQLiteConnection`> | class<`SQLiteDriver`> | class<`SQLiteResult`>, ...> => logical;
type `dbListFields` <class<`SQLiteConnection`>, character, ...> => character[] | <class<`SQLiteConnection`>, character, ...> => character[];
type `dbListObjects` <class<`SQLiteConnection`>, null, ...> => class<`data.frame`> | <class<`SQLiteConnection`>, null, ...> => class<`data.frame`>;
type `dbListTables` <class<`SQLiteConnection`>, ...> => character[];
type `dbQuoteIdentifier` <class<`AnsiConnection`>, class<`Id`>, ...> => class<`SQL`> | <class<`AnsiConnection`>, character[], ...> => class<`SQL`> | <class<`AnsiConnection`> | class<`SQLiteConnection`>, character[] | class<`Id`> | class<`SQL`>, ...> => class<`SQL`> | <class<`AnsiConnection`>, class<`SQL`>, ...> => class<`SQL`>;
type `dbQuoteLiteral` <class<`AnsiConnection`> | class<`SQLiteConnection`>, character | class<`SQL`> | ^integer[] | double | list<raw[] | null>, ...> => class<`SQL`> | <class<`AnsiConnection`>, character | class<`SQL`> | ^integer[] | list<raw[] | null>, ...> => class<`SQL`> | <class<`SQLiteConnection`>, double, ...> => class<`SQL`>;
type `dbQuoteString` <class<`AnsiConnection`> | class<`SQLiteConnection`>, ^character[] | class<`SQL`>, ...> => class<`SQL`> | <class<`AnsiConnection`>, class<`SQL`>, ...> => class<`SQL`> | <class<`SQLiteConnection`>, class<`SQL`>, ...> => class<`SQL`> | <class<`AnsiConnection`>, ^character[], ...> => class<`SQL`>;
type `dbReadTable` <class<`SQLiteConnection`>, character, ...> => class<`data.frame`>;
type `dbRemoveTable` <class<`SQLiteConnection`>, character, ...> => logical;
type `dbRollback` <class<`SQLiteConnection`>, ...> => logical;
type `dbSendQuery` <class<`SQLiteConnection`>, character | class<`SQL`>, ...> => class<`SQLiteResult`>;
type `dbSendStatement` <class<`SQLiteConnection`>, class<`SQL`>, ...> => class<`SQLiteResult`> | <class<`SQLiteConnection`>, character, ...> => class<`SQLiteResult`> | <class<`SQLiteConnection`>, character | class<`SQL`>, ...> => class<`SQLiteResult`>;
type `dbUnquoteIdentifier` <class<`AnsiConnection`> | class<`SQLiteConnection`>, class<`SQL`> | class<`Id`>, ...> => list<class<`Id`>> | <class<`AnsiConnection`>, class<`Id`>, ...> => list<class<`Id`>> | <class<`AnsiConnection`>, class<`SQL`>, ...> => list<class<`Id`>>;
type `dbWithTransaction` <class<`SQLiteConnection`>, any, ...> => (integer | null) | <class<`SQLiteConnection`>, any, ...> => (integer | null);
type `dbWriteTable` <class<`SQLiteConnection`>, character, class<`data.frame`>, ...> => logical;
type `filter` <character[]> => logical[];
type `findDriver` <character> => class<`function`>;
type `FUN` <double[], ...> => character | <character[] | class<`AsIs`> | class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | double[] | class<`data.frame`> | list<raw[]>, ...> => character[] | <class<`factor`>, ...> => character | <class<`AnsiConnection`> | class<`SQLiteConnection`>, ^character[] | class<`SQL`>, ...> => class<`SQL`> | <class<`SQLiteConnection`>, class<`SQL`>, ...> => class<`SQL`> | <class<`SQLiteConnection`>, character[], ...> => class<`SQL`> | <character | class<`function`>> => character | <character> => class<`Id`> | <character[] | class<`SQL`>> => class<`SQL`> | <character | class<`SQL`> | double> => class<`SQL`> | <null | raw[]> => character | <character[] | class<`factor`> | double[]> => character | <character[], ..., null | character[]> => class<`SQL`>;
type `get2` <character, environment> => (class<`function`> | null);
type `guessColName` <any, logical> => null;
type `guessRowName` <any, character | logical | null> => (character | null);
type `Id` <...> => class<`Id`>;
type `is_attached` <character> => logical;
type `list_fields` <class<`SQLiteConnection`>, character> => character[];
type `.local` <any> => character | <class<`SQLiteConnection`>, character | class<`SQL`>, ..., double> => class<`data.frame`> | <class<`AsIs`>> => character | <list<raw[]>> => character | <any> => character | <any> => character | <any> => character | <class<`SQLiteConnection`>, any> => (integer | null) | <any> => character | <any> => character | <class<`data.frame`>> => character[] | <any> => character;
type `names2` <list<any>> => character[];
type `.nextMethod` <any, class<`data.frame`>, ...> => character[];
type `SQL` <character[], ..., null | character[]> => class<`SQL`>;
type `[[.SQL` <class<`SQL`>, ...> => class<`SQL`>;
type `sqlAppendTable` <class<`AnsiConnection`> | class<`SQLiteConnection`>, character | class<`SQL`>, class<`data.frame`> | list<class<`SQL`>>, logical | null, ...> => class<`SQL`> | <class<`SQLiteConnection`>, class<`SQL`>, list<class<`SQL`>>, null, ...> => class<`SQL`> | <class<`AnsiConnection`>, character | class<`SQL`>, class<`data.frame`> | list<class<`SQL`>>, logical | null, ...> => class<`SQL`>;
type `sqlAppendTableTemplate` <class<`AnsiConnection`> | class<`SQLiteConnection`>, character, class<`data.frame`>, null | logical, character, ..., character> => class<`SQL`>;
type `sqlColumnToRownames` <class<`data.frame`>, logical> => class<`data.frame`>;
type `sqlCommentSpec` <character, character, logical> => list<character | logical>;
type `sqlCreateTable` <class<`SQLiteConnection`>, character, character[] | class<`data.frame`>, any, logical, ...> => class<`SQL`> | <class<`AnsiConnection`> | class<`SQLiteConnection`>, character, character[] | class<`data.frame`>, any, logical, ...> => class<`SQL`> | <class<`AnsiConnection`>, character, character[] | class<`data.frame`>, null | logical, logical, ...> => class<`SQL`>;
type `sqlData` <class<`AnsiConnection`>, class<`data.frame`> | list<class<`SQL`>>, logical | null, ...> => (class<`data.frame`> | list<character>) | <class<`AnsiConnection`> | class<`SQLiteConnection`>, class<`data.frame`> | list<class<`SQL`>>, logical | null, ...> => (class<`data.frame`> | list<class<`SQL`> | character>);
type `sqlInterpolate` <class<`SQLiteConnection`>, character, ..., list<any>> => class<`SQL`> | <class<`AnsiConnection`> | class<`SQLiteConnection`>, character, ..., list<any>> => class<`SQL`> | <class<`AnsiConnection`>, character, ..., list<any>> => class<`SQL`>;
type `sqlParseVariables` <class<`AnsiConnection`>, character, ...> => list<integer[]> | <class<`SQLiteConnection`>, character, ...> => list<integer> | <class<`AnsiConnection`> | class<`SQLiteConnection`>, character, ...> => list<integer[]>;
type `sqlParseVariablesImpl` <character, list<list<character | logical>>, list<any>> => list<integer[]>;
type `sqlQuoteSpec` <character, character, character, logical> => list<character | logical>;
type `sqlRownamesToColumn` <class<`data.frame`> | list<class<`SQL`>>, logical | null | character> => (class<`data.frame`> | list<class<`SQL`>>);
type `str_to_vec` <character> => character[];
