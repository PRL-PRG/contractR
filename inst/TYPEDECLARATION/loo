type `::` <class<`importance_sampling_loo`, `loo`, `psis_loo`>, double> => integer[] | <class<`function`> | class<`array`> | class<`importance_sampling`, `list`, `psis`> | class<`matrix`>, ...> => double[];
type `adjust_k_wip` <double, integer> => double;
type `assert_importance_sampling_method_is_implemented` <character> => null;
type `autocovariance` <double[]> => double[];
type `called_from_loo` < > => logical;
type `dim.importance_sampling` <class<`importance_sampling`, `list`, `psis`> | class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>> => integer[];
type `dim.psis_loo` <class<`importance_sampling`, `list`, `psis`> | class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>> => integer[];
type `dim.waic` <class<`importance_sampling`, `list`, `psis`> | class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>> => integer[];
type `dirichlet_rng` <double, double[]> => class<`matrix`>;
type `do_importance_sampling` <class<`matrix`>, double[], double, character> => (class<`importance_sampling`, `list`, `psis`> | class<`importance_sampling`, `list`, `sis`> | class<`importance_sampling`, `list`, `tis`>);
type `.E_fun` <character> => class<`function`>;
type `E_fun` <double[], double[], ...> => double;
type `E_loo` <class<`matrix`, `ppd`>, class<`importance_sampling`, `list`, `psis`>, ...> => list<class<`matrix`> | null | double[] | double[] | null>;
type `.E_loo_khat_i` <double[], double[], double> => double;
type `E_loo_khat.matrix` <class<`matrix`, `ppd`>, class<`importance_sampling`, `list`, `psis`>, class<`matrix`>, ...> => double[];
type `E_loo.matrix` <class<`matrix`, `ppd`>, class<`importance_sampling`, `list`, `psis`>, ..., character, double[] | null, null | class<`matrix`>> => list<class<`matrix`> | null | double[] | double[] | null>;
type `enough_tail_samples` <double, double> => logical;
type `example_loglik_array` < > => class<`array`>;
type `example_loglik_matrix` < > => class<`matrix`>;
type `fft_next_good_size` <integer> => integer;
type `find_model_names` <list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>> => character[];
type `.fr` <null | double[] | class<`data.frame`> | class<`compare.loo`, `matrix`> | class<`matrix`>, double> => (character[] | class<`data.frame`> | class<`matrix`>);
type `FUN` <double, double> => logical | <class<`importance_sampling_loo`, `loo`, `psis_loo`> | list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>> => logical | <integer, class<`function`>, ..., class<`data.frame`>, class<`matrix`>, double[] | null, logical, character> => list<class<`matrix`> | null | list<double>> | <class<`importance_sampling_loo`, `loo`, `psis_loo`>> => logical;
type `gpdfit` <double[], logical, double, logical> => list<double>;
type `implemented_is_methods` < > => character[];
type `importance_sampling.array` <class<`array`>, character, ..., double[] | null, double> => (class<`importance_sampling`, `list`, `psis`> | class<`importance_sampling`, `list`, `sis`> | class<`importance_sampling`, `list`, `tis`>);
type `importance_sampling_loo_object` <class<`matrix`>, list<double[]>, integer[], character, null> => class<`importance_sampling_loo`, `loo`, `psis_loo`>;
type `importance_sampling.matrix` <class<`matrix`>, character, ..., double[] | null, double> => class<`importance_sampling`, `list`, `psis`>;
type `importance_sampling_object` <class<`matrix`>, double[], double[], double[], character[]> => (class<`importance_sampling`, `list`, `psis`> | class<`importance_sampling`, `list`, `sis`> | class<`importance_sampling`, `list`, `tis`>);
type `is.loo` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>> => logical;
type `is.psis` <class<`importance_sampling`, `list`, `psis`>> => logical;
type `is.psis_loo` <class<`importance_sampling_loo`, `loo`, `psis_loo`>> => logical;
type `k_cut` <^double[]> => class<`factor`>;
type `kfold_split_grouped` <double, class<`factor`>> => double[];
type `kfold_split_random` <double, double> => integer[];
type `kfold_split_stratified` <double, double[]> => integer[];
type `.k_help` < > => character;
type `llarray_to_matrix` <class<`array`>> => class<`matrix`>;
type `llmatrix_to_array` <class<`matrix`>, integer[]> => class<`array`>;
type `logMeanExp` <double[]> => double;
type `loo` <class<`array`> | class<`function`> | class<`matrix`> | class<`glm`, `lm`, `stanreg`>, ...> => class<`importance_sampling_loo`, `loo`, `psis_loo`>;
type `[[.loo` <class<`importance_sampling_loo`, `loo`, `psis_loo`>, character, logical> => null;
type `$.loo` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>, character> => (class<`matrix`> | list<^double[]>);
type `loo.array` <class<`array`>, ..., double[] | null, logical, double, character[]> => class<`importance_sampling_loo`, `loo`, `psis_loo`>;
type `loo_compare` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>, ...> => class<`compare.loo`, `matrix`>;
type `loo_compare_checks` <list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>> => null;
type `loo_compare.default` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>, ...> => class<`compare.loo`, `matrix`>;
type `loo_compare_matrix` <list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>> => class<`matrix`>;
type `loo_compare_order` <list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>> => integer[];
type `loo_cores` <double> => double;
type `loo.function` <class<`function`>, ..., class<`data.frame`>, class<`matrix`> | list<class<`family`> | class<`matrix`> | class<`family`> | class<`matrix`> | double[]>, double[] | null, logical, double, character[]> => class<`importance_sampling_loo`, `loo`, `psis_loo`>;
type `.loo_i` <integer, class<`function`>, ..., class<`data.frame`>, class<`matrix`>, double[] | null, logical, character> => list<class<`matrix`> | null | list<double>>;
type `loo_i` <double, class<`function`>, ..., class<`data.frame`>, class<`matrix`>, null, character> => list<class<`matrix`> | null | list<double>>;
type `loo.matrix` <class<`matrix`>, ..., double[] | null, logical, double, character[]> => class<`importance_sampling_loo`, `loo`, `psis_loo`>;
type `loo_model_weights` <list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>, ...> => (class<`pseudobma_bb_weights`> | class<`pseudobma_weights`> | class<`stacking_weights`>);
type `loo_model_weights.default` <list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>, ..., character[], character, any, logical, double, double, null, double> => (class<`pseudobma_bb_weights`> | class<`pseudobma_weights`> | class<`stacking_weights`>);
type `lx` <double[], double[]> => double[];
type `mcse_elpd` <class<`matrix`>, class<`matrix`>, double[], double[], double> => double[];
type `mcse_loo` <class<`importance_sampling_loo`, `loo`, `psis_loo`>, double> => (double | null);
type `min_n_eff_by_k` <double[], class<`factor`>> => ^double[];
type `nlist` <...> => list<any>;
type `n_pareto` <double[], integer> => double[];
type `os_is_windows` < > => logical;
type `parallel_importance_sampling_list` <integer, class<`function`>, class<`function`>, class<`data.frame`>, class<`matrix`> | list<class<`family`> | class<`matrix`> | class<`family`> | class<`matrix`> | double[]>, double[], logical, double, character, ...> => list<list<class<`matrix`> | null | list<double>>>;
type `pareto_k_ids` <class<`importance_sampling_loo`, `loo`, `psis_loo`>, double> => integer[];
type `pareto_k_table` <class<`importance_sampling_loo`, `loo`, `psis_loo`>> => class<`matrix`, `pareto_k_table`>;
type `pareto_k_values` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`importance_sampling`, `list`, `psis`>> => ^double[];
type `plot_diagnostic` <double[], null, ..., any, character> => null;
type `plot.psis` <class<`importance_sampling`, `list`, `psis`>, character[], ..., logical, character> => null;
type `plot.psis_loo` <class<`importance_sampling`, `list`, `psis`>, character[], ..., any, character> => null;
type `pointwise_loo_calcs` <class<`matrix`>, class<`importance_sampling`, `list`, `psis`>> => class<`matrix`>;
type `prepare_psis_r_eff` <double[] | null, integer> => double[];
type `print.compare.loo` <class<`compare.loo`, `matrix`>, ..., double, logical> => class<`compare.loo`, `matrix`>;
type `print_dims` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>, ...> => null;
type `print_dims.psis_loo` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>, ...> => null;
type `print_dims.waic` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>, ...> => null;
type `print.loo` <class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>, double, ...> => (class<`importance_sampling_loo`, `loo`, `psis_loo`> | class<`loo`, `waic`>);
type `print_mcse_summary` <class<`importance_sampling_loo`, `loo`, `psis_loo`>, double> => null;
type `print.pareto_k_table` <class<`matrix`, `pareto_k_table`>, any, ...> => (class<`matrix`, `pareto_k_table`> | null);
type `print.psis_loo` <class<`importance_sampling_loo`, `loo`, `psis_loo`>, double, logical, ...> => class<`importance_sampling_loo`, `loo`, `psis_loo`>;
type `print.waic` <class<`loo`, `waic`>, double, ...> => class<`loo`, `waic`>;
type `pseudobma_weights` <class<`matrix`>, logical, any, any> => (class<`pseudobma_bb_weights`> | class<`pseudobma_weights`>);
type `psis` <class<`array`> | class<`matrix`>, ...> => class<`importance_sampling`, `list`, `psis`>;
type `psis_apply` <list<list<double[]>>, character, character[], double[]> => (class<`matrix`> | double[]);
type `psis.array` <class<`array`>, ..., double[], double> => class<`importance_sampling`, `list`, `psis`>;
type `psis.matrix` <class<`matrix`>, ..., double[], double> => class<`importance_sampling`, `list`, `psis`>;
type `psis_n_eff` <class<`matrix`>, ...> => double[];
type `psis_n_eff.matrix` <class<`matrix`>, double[], ...> => double[];
type `psis_n_eff_values` <class<`importance_sampling_loo`, `loo`, `psis_loo`>> => double[];
type `psis_smooth_tail` <double[], double> => list<double[]>;
type `qgpd` <double[], double, double> => double[];
type `relative_eff` <class<`function`> | class<`array`> | class<`importance_sampling`, `list`, `psis`> | class<`matrix`>, ...> => double[];
type `relative_eff.array` <class<`array`>, ..., double> => double[];
type `relative_eff.default` <double[], integer[], ...> => double;
type `relative_eff.function` <class<`function`>, integer[], ..., double, class<`data.frame`>, list<class<`family`> | class<`matrix`> | class<`family`> | class<`matrix`> | double[]>> => double[];
type `relative_eff.importance_sampling` <class<`importance_sampling`, `list`, `psis`>, ...> => double[];
type `relative_eff.matrix` <class<`matrix`>, integer[], ..., double> => double[];
type `sis` <class<`array`>, ...> => class<`importance_sampling`, `list`, `sis`>;
type `sis.array` <class<`array`>, ..., double[], double> => class<`importance_sampling`, `list`, `sis`>;
type `stacking_weights` <class<`matrix`>, character, list<any>> => class<`stacking_weights`>;
type `table_of_estimates` <class<`matrix`>> => class<`matrix`>;
type `throw_pareto_warnings` <double[], double, double> => (character | null);
type `throw_pwaic_warnings` <double[], double, logical> => null;
type `throw_tail_length_warnings` <double[]> => double[];
type `tis` <class<`array`>, ...> => class<`importance_sampling`, `list`, `tis`>;
type `tis.array` <class<`array`>, ..., double[], double> => class<`importance_sampling`, `list`, `tis`>;
type `validate_ll` <class<`array`> | class<`matrix`>> => (class<`array`> | class<`matrix`>);
type `validate_llfun` <class<`function`>> => class<`function`>;
type `validate_psis_loo_list` <list<class<`importance_sampling_loo`, `loo`, `psis_loo`>>> => logical;
type `waic` <class<`array`> | class<`matrix`> | class<`glm`, `lm`, `stanreg`>, ...> => class<`loo`, `waic`>;
type `waic.array` <class<`array`>, ...> => class<`loo`, `waic`>;
type `waic.function` <class<`function`>, ..., class<`data.frame`>, list<class<`family`> | class<`matrix`> | class<`family`> | class<`matrix`> | double[]>> => class<`loo`, `waic`>;
type `waic.matrix` <class<`matrix`>, ...> => class<`loo`, `waic`>;
type `waic_object` <class<`matrix`>, integer[]> => class<`loo`, `waic`>;
type `.warn` <..., logical> => character;
type `weights.importance_sampling` <class<`importance_sampling`, `list`, `psis`> | class<`importance_sampling`, `list`, `sis`> | class<`importance_sampling`, `list`, `tis`>, ..., logical, logical> => class<`matrix`>;
type `.wmean` <double[], double[], ...> => double;
