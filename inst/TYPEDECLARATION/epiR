type `.bin.ci` <double, double, double, character, logical> => double[];
type `.funARscore` <^double[], double, double> => double[];
type `.funARwald` <^double[], double, double> => double[];
type `.funincrate` <^double[], double> => struct<`est`:double[], `lower`:double[], `upper`:double[]>;
type `.funincrisk` <^double[], double | symbol> => struct<`est`:double, `lower`:double, `upper`:double>;
type `.funMHRD.GR` <^double[], double | symbol, double | symbol> => ? double[];
type `.funMHRD.Sato` <^double[], double | symbol, double | symbol> => ? double[];
type `.funORcfield` <^double[], double, double[]> => double[];
type `.funORml` <^double[], double> => double[];
type `.funORscore` <^double[], double> => double[];
type `.funORwald` <^double[], double> => double[];
type `.funRRscore` <^double[], double> => double[];
type `.funRRwald` <^double[], double> => double[];
type `.propsingle` <^double[], symbol> => struct<`est`:double, `se`:double, `lower`:double, `upper`:double>;
type `.selectstring` <character, double, double> => character;
type `bc` <double, double, double, character> => double[];
type `epi.betabuster` <double, double, logical, double, double, double, double> => struct<`shape1`:double, `shape2`:double, `mode`:double, `mean`:double, `median`:double, `lower`:double, `upper`:double, `variance`:double>;
type `epi.ccsize` <double, double, ? double, ? double, double, double, double, double, double, character, logical> => struct<`n.total`:double, `n.case`:double, `n.control`:double, `power`:double, `OR`:double>;
type `epi.cohortsize` <? double, double, ? double, double, double, double, double, double> => struct<`n.total`:double, `n.exposed`:double, `n.unexposed`:double, `power`:double, `lambda`:double[]>;
type `epi.cp` <struct<`spontaneous`:double[], `induced`:double[]>> => struct<`cov.pattern`:struct<`id`:integer[], `n`:double[], `spontaneous`:double[], `induced`:double[]>, `id`:integer[]> | struct<`cov.pattern`:struct<`id`:integer[], `n`:double[], `v1`:double[], `v2`:double[]>, `id`:integer[]>;
type `epi.edr` <integer[], double, double, double, logical> => struct<`est`:double[], `lower`:double[], `upper`:double[]>;
type `epi.empbayes` <integer[], integer[]> => double[];
type `epi.equivb` <double, double, double, null, double, double, double> => struct<`n.treat`:double, `n.control`:double, `n.total`:double, `power`:double>;
type `epi.equivc` <double, double, double, double, ? double, double, ? double, double> => struct<`n.treat`:double, `n.control`:double, `n.total`:double>;
type `epi.herdtest` <double, double, double, double, double, double> => struct<`APpos`:double, `APneg`:double, `HSe`:double, `HSp`:double>;
type `epi.ltd` <struct<`ckey`:double[], `pkey`:integer[], `lact`:integer[], `dim`:double[], `llen`:^double[], `vol`:double[], `fat`:double[], `pro`:double[]>, character> => struct<`ckey`:double[], `lact`:double[], `llen`:^double[], `vltd`:double[], `fltd`:double[], `pltd`:double[], `vstd`:double[], `fstd`:double[], `pstd`:double[]>;
type `epi.meansize` <double, double, null, double, double, double, double, double, double> => struct<`n.total`:double, `n.treat`:double, `n.control`:double, `power`:double, `delta`:double>;
type `epi.nomogram` <? double, ? double, ? double[], double, logical> => null;
type `epi.noninfb` <double, double, double, ? double, double, ? double, double> => struct<`n.treat`:double, `n.control`:double, `n.total`:double>;
type `epi.noninfc` <double, double, double, double, null, double, double, double> => struct<`n.treat`:double, `n.control`:double, `n.total`:double>;
type `epi.pooled` <double, double, double, double, double> => struct<`HAPneg`:double, `HSe`:double, `HSp`:double>;
type `epi.popsize` <double, double, double, double, logical> => null;
type `epi.propsize` <? double, double, ? double, double, double, double, double, double> => struct<`n.total`:double, `n.treat`:double, `n.control`:double, `power`:double, `lambda`:double[]>;
type `epi.supb` <double, double, double, null, double, double, double> => struct<`n.treat`:double, `n.control`:double, `n.total`:double>;
type `epi.supc` <double, double, double, double, null, double, double, double> => struct<`n.treat`:double, `n.control`:double, `n.total`:double>;
type `epi.survivalsize` <? double, ? double, ? double, double, double, double, double, double> => struct<`hazard`:double[]> | struct<`n.crude`:double, `n.total`:double, `n.treat`:double, `n.control`:double>;
type `f` <double, double, double, double, double> => double;
type `filter` <character[]> => logical[];
type `fun` <character, character> => null;
type `FUN` <double[], double> => double | character;
type `print.epi.2by2` <struct<`method`:character, `n.strata`:integer, `conf.level`:double, `res`:struct<`RR.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `RR.strata.score`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `RR.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `RR.crude.score`:struct<`est`:double, `lower`:double, `upper`:double>, `RR.mh.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `IRR.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `IRR.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `IRR.mh.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `OR.strata.score`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `OR.strata.cfield`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `OR.strata.mle`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `OR.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.crude.score`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.crude.cfield`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.crude.mle`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.mh.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `ARisk.strata.score`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `ARisk.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.crude.score`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.mh.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.mh.sato`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.mh.green`:struct<`est`:double, `lower`:double, `upper`:double>, `ARate.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `ARate.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `ARate.mh.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `AFRisk.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `AFRisk.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `AFRate.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `AFRate.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `AFest.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `AFest.crude.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PARisk.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PARisk.strata.piri`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PARisk.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `PARisk.crude.piri`:struct<`est`:double, `lower`:double, `upper`:double>, `PARate.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PARate.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `PAFRisk.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PAFRisk.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `PAFRate.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PAFRate.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `PAFest.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PAFest.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `RR.conf`:struct<`est`:double, `lower`:double, `upper`:double>, `IRR.conf`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.conf`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `ARisk.conf`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `ARate.conf`:struct<`est`:double, `lower`:double, `upper`:double>, `count.units`:character, `time.units`:character, `chisq.strata`:struct<`test.statistic`:double[], `df`:double[], `p.value`:double[]>, `chisq.crude`:struct<`test.statistic`:double, `df`:double, `p.value`:double>, `chisq.mh`:struct<`test.statistic`:double, `df`:double, `p.value`:double>, `wOR.homog`:struct<`test.statistic`:double, `df`:double, `p.value`:double>, `bOR.homog`:struct<`test.statistic`:double, `df`:double, `p.value`:double>, `wRR.homog`:struct<`test.statistic`:double, `df`:double, `p.value`:double>>, `massoc`:struct<`RR.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `RR.strata.score`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `RR.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `RR.crude.score`:struct<`est`:double, `lower`:double, `upper`:double>, `RR.mh.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `OR.strata.score`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `OR.strata.cfield`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `OR.strata.mle`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `OR.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.crude.score`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.crude.cfield`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.crude.mle`:struct<`est`:double, `lower`:double, `upper`:double>, `OR.mh.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `ARisk.strata.score`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `ARisk.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.crude.score`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.mh.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.mh.sato`:struct<`est`:double, `lower`:double, `upper`:double>, `ARisk.mh.green`:struct<`est`:double, `lower`:double, `upper`:double>, `PARisk.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PARisk.strata.piri`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PARisk.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `PARisk.crude.piri`:struct<`est`:double, `lower`:double, `upper`:double>, `AFRisk.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `AFRisk.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `PAFRisk.strata.wald`:struct<`est`:double[], `lower`:double[], `upper`:double[]>, `PAFRisk.crude.wald`:struct<`est`:double, `lower`:double, `upper`:double>, `chisq.strata`:struct<`test.statistic`:double[], `df`:double[], `p.value`:double[]>, `chisq.crude`:struct<`test.statistic`:double, `df`:double, `p.value`:double>, `chisq.mh`:struct<`test.statistic`:double, `df`:double, `p.value`:double>, `RR.homog.woolf`:struct<`test.statistic`:double, `df`:double, `p.value`:double>, `OR.homog.woolf`:struct<`test.statistic`:double, `df`:double, `p.value`:double>, `OR.homog.brday`:struct<`test.statistic`:double, `df`:double, `p.value`:double>>, `tab`:struct<`   Outcome +`:character[], `   Outcome -`:character[], `     Total`:character[], `       Inc risk *`:character[], `       Odds`:character[]>>, ???> => null;
type `print.epi.occc` <struct<`occc`:double, `oprec`:double, `oaccu`:double, `pairs`:struct<`ccc`:double[], `prec`:double[], `accu`:double[], `ksi`:double[], `scale`:double[], `location`:double[]>, `data.name`:character>, ???> => null;
type `print.epi.tests` <struct<`conf.level`:double, `elements`:struct<`pfn.up`:double, `pfn.low`:double, `pfn`:struct<`est`:double, `lower`:double, `upper`:double>, `pfp.up`:double, `pfp.low`:double, `pfp`:struct<`est`:double, `lower`:double, `upper`:double>, `pri.up`:double, `pri.low`:double, `pri`:struct<`est`:double, `lower`:double, `upper`:double>, `pro.up`:double, `pro.low`:double, `pro`:struct<`est`:double, `lower`:double, `upper`:double>, `youden`:struct<`est`:double, `lower`:double, `upper`:double>, `c.up`:double, `c.low`:double, `c.2`:double, `c.1`:double, `c.p`:double, `nnd`:struct<`est`:double, `lower`:double, `upper`:double>, `ndx.up`:double, `ndx.low`:double, `ndx.2`:double, `ndx.1`:double, `ndx`:double, `diag.or`:struct<`est`:double, `lower`:double, `upper`:double>, `dOR.up`:double, `dOR.low`:double, `dOR.se`:double, `lndOR.u`:double, `lndOR.l`:double, `lndOR.se`:double, `lndOR.var`:double, `lndOR`:double, `dOR.p`:double, `diag.acc`:struct<`est`:double, `lower`:double, `upper`:double>, `da.up`:double, `da.low`:double, `da`:double, `lr.negative`:struct<`est`:double, `lower`:double, `upper`:double>, `lrneg.up`:double, `lrneg.low`:double, `lrneg`:double, `lr.positive`:struct<`est`:double, `lower`:double, `upper`:double>, `lrpos.up`:double, `lrpos.low`:double, `lrpos`:double, `pv.negative`:struct<`est`:double, `lower`:double, `upper`:double>, `npv.up`:double, `npv.low`:double, `npv`:double, `pv.positive`:struct<`est`:double, `lower`:double, `upper`:double>, `ppv.up`:double, `ppv.low`:double, `ppv`:double, `specificity`:struct<`est`:double, `lower`:double, `upper`:double>, `sp.up`:double, `sp.low`:double, `sp`:double, `sensitivity`:struct<`est`:double, `lower`:double, `upper`:double>, `se.up`:double, `se.low`:double, `se`:double, `aprev`:struct<`est`:double, `lower`:double, `upper`:double>, `ap.up`:double, `ap.low`:double, `ap`:double, `tprev`:struct<`est`:double, `lower`:double, `upper`:double>, `tp.up`:double, `tp.low`:double, `tp`:double, `trval`:struct<`est`:double, `lower`:double, `upper`:double>, `tdat`:^double[], `total`:double, `N0`:double, `N1`:double, `M0`:double, `M1`:double, `d`:double, `c`:double, `b`:double, `a`:double, `.funincrisk`:any => any, `z`:double, `N.`:double>, `rval`:struct<`aprev`:struct<`est`:double, `lower`:double, `upper`:double>, `tprev`:struct<`est`:double, `lower`:double, `upper`:double>, `se`:struct<`est`:double, `lower`:double, `upper`:double>, `sp`:struct<`est`:double, `lower`:double, `upper`:double>, `diag.acc`:struct<`est`:double, `lower`:double, `upper`:double>, `diag.or`:struct<`est`:double, `lower`:double, `upper`:double>, `nnd`:struct<`est`:double, `lower`:double, `upper`:double>, `youden`:struct<`est`:double, `lower`:double, `upper`:double>, `ppv`:struct<`est`:double, `lower`:double, `upper`:double>, `npv`:struct<`est`:double, `lower`:double, `upper`:double>, `plr`:struct<`est`:double, `lower`:double, `upper`:double>, `nlr`:struct<`est`:double, `lower`:double, `upper`:double>, `pro`:struct<`est`:double, `lower`:double, `upper`:double>, `pri`:struct<`est`:double, `lower`:double, `upper`:double>, `pfp`:struct<`est`:double, `lower`:double, `upper`:double>, `pfn`:struct<`est`:double, `lower`:double, `upper`:double>>, `tab`:struct<`   Outcome +`:character[], `   Outcome -`:character[], `     Total`:character[]>>, ???> => null;
