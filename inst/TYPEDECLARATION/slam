type `::` <double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>> => logical;
type `[.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>>, ^double[] | struct<`i`:integer[], `j`:integer[], `v`:^logical[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | null, null | integer[] | double, logical> => ^double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>>;
type `as.matrix.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:complex[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^complex[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer>, null> => ^complex[];
type `as.simple_triplet_matrix.default` <double[]> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>;
type `as.simple_triplet_matrix.matrix` <^complex[]> => struct<`i`:integer[], `j`:integer[], `v`:complex[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^complex[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:integer[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`ROW`:character[], `COL`:character[]>>;
type `dim.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>> | struct<`i`:integer[], `j`:integer[], `v`:^complex[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>>> => integer[];
type `dimnames.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:character[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:complex[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:tuple<complex, complex, complex>, `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>> | struct<`i`:integer[], `j`:integer[], `v`:^complex[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>>> => null | tuple<character[], character[]> | tuple<character[], null> | tuple<null, character[]> | tuple<null, null> | struct<`A`:character[], `B`:character[]>;
type `dimnames<-.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>>, tuple<null, null> | tuple<character[], character[]> | tuple<character[], null> | tuple<null, character[]>> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>>;
type `f` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>>, struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>>> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>;
type `filter` <character[]> => logical[];
type `rbind` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>>, integer> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>>;
type `simple_triplet_matrix` <double[], double[], ^complex[], double, double, null | tuple<character[], character[]> | struct<`rows`:character[], `cols`:character[]> | tuple<character[], null> | tuple<null, character[]> | struct<`A`:character[], `B`:character[]> | struct<`ROW`:character[], `COL`:character[]>> => struct<`i`:integer[], `j`:integer[], `v`:complex[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:complex[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character>> | struct<`i`:integer[], `j`:integer[], `v`:^complex[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:integer[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`ROW`:character[], `COL`:character[]>>;
type `slam_options` <character, null | double> => double;
type `:::` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>>, ^double[]> => ^double[];
type `.make_dimnames` <struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, ^double[] | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>> => null;
type `.means_simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>>, integer, logical> => ^double[];
type `.reduce` <struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer>> => struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer>;
type `.stm_as_subscript` <struct<`i`:integer[], `j`:integer[], `v`:^logical[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, integer[], logical, null> => ^double[];
type `.tcrossprod_bailout` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, null | ^double[] | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, logical> => ^double[];
type `.tcrossprod_simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, null | ^double[] | struct<`i`:integer[], `j`:integer[], `v`:logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, logical, logical, logical> => ^double[];
type `[.simple_sparse_array` <struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:null>, ^double[] | null> => ^integer[] | double | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:null, `dim`:integer[], `dimnames`:null>;
type `[<-.simple_sparse_array` <struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<character[], null>> | struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:null>, ^double[] | struct<`i`:integer[], `j`:integer[], `v`:^logical[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, null | double[]> => struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<character[], null>> | struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:null>;
type `[<-.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, null | integer[] | struct<`i`:integer[], `j`:integer[], `v`:^logical[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, double | integer[]> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>;
type `abind_simple_sparse_array` <integer[] | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:struct<``:null, `B`:character[]>>, integer> => struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:struct<``:null, `B`:character[]>>;
type `as.array.simple_sparse_array` <struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<null, character[]>> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<character, character, null>> | struct<`i`:^integer[], `v`:double, `dim`:integer, `dimnames`:struct<`A`:character[]>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[]> | struct<`i`:^integer[], `v`:null, `dim`:integer[], `dimnames`:null>, null> => null | ^double[];
type `as.array.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, null> => ^double[];
type `as.simple_sparse_array.array` <double[]> => struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null>;
type `as.simple_sparse_array.default` <integer[]> => struct<`i`:^integer[], `v`:integer[], `dim`:integer, `dimnames`:null>;
type `as.simple_sparse_array.matrix` <^double[]> => struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:tuple<null, null>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:struct<``:null, `B`:character[]>>;
type `as.simple_sparse_array.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^complex[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>>> => struct<`i`:^integer[], `v`:^complex[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<character[], null>> | struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>>;
type `as.simple_triplet_matrix.simple_sparse_array` <struct<`i`:^integer[], `v`:complex[], `dim`:integer[], `dimnames`:tuple<null, character>> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<character[], null>> | struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>>> => struct<`i`:integer[], `j`:integer[], `v`:complex[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>>;
type `as.vector.simple_sparse_array` <struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:null, `dim`:integer[], `dimnames`:null>, character> => null | double[];
type `as.vector.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, character> => double[];
type `cbind` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>>, integer> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>>;
type `col_means.default` <^logical[], logical, double, null> => ^double[];
type `col_means.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>>, logical, double, null> => ^double[];
type `col_norms` <^integer[], double> => integer[];
type `col_sums.default` <^logical[], logical, double, null> => ^double[];
type `col_sums.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:^logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>>, logical, double, null> => ^double[];
type `colapply_simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:complex[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:character[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:tuple<complex, complex, complex>, `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>>, any => any, null | ^double[]> => null | ^double[] | struct<`1`:integer[], `2`:integer[], `3`:integer[]> | struct<`A`:character[], `B`:character[]> | struct<`A`:complex[], `B`:complex[]> | struct<`A`:^double[], `B`:^double[], `C`:^double[], `D`:^double[], `E`:^double[]> | struct<`A`:^double[], `B`:^double[], `C`:^double[], `D`:^double[], `E`:null> | struct<`A`:tuple<complex, null, complex>, `B`:tuple<null, complex, null>> | struct<`A`:struct<`1`:logical[], `2`:logical[], `3`:logical[], `4`:logical[], `5`:logical[]>, `B`:struct<`1`:logical[], `2`:logical[], `3`:logical[], `4`:logical[], `5`:logical[]>, `C`:struct<`1`:logical[], `2`:logical[], `3`:logical[], `4`:logical[], `5`:logical[]>, `D`:struct<`1`:logical[], `2`:logical[], `3`:logical[], `4`:logical[], `5`:logical[]>, `E`:struct<`1`:logical[], `2`:logical[], `3`:logical[], `4`:logical[], `5`:logical[]>> | struct<`A`:struct<`A`:logical[], `B`:logical[], `C`:logical[], `D`:logical[], `E`:logical[]>, `B`:struct<`B`:logical[], `C`:logical[], `D`:logical[], `E`:logical[]>, `C`:struct<`C`:logical[], `D`:logical[], `E`:logical[]>, `D`:struct<`D`:logical[], `E`:logical[]>, `E`:struct<`E`:logical[]>> | struct<`C`:double[], `D`:double[], `E`:double[]> | struct<`E`:logical[]>;
type `crossapply_simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>>, ^double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>>, any => any | character, null> => ^double[] | list<logical[]>;
type `crossprod_simple_triplet_matrix` <^double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, null | struct<`i`:integer[], `j`:integer[], `v`:integer[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | ^integer[]> => ^double[];
type `dim.simple_sparse_array` <struct<`i`:^integer[], `v`:^complex[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>>> => integer[];
type `dim<-.simple_sparse_array` <struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:null>, double[]> => struct<`i`:^integer[], `v`:integer[], `dim`:integer[]>;
type `dim<-.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:integer[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`ROW`:character[], `COL`:character[]>>, double[]> => struct<`i`:integer[], `j`:integer[], `v`:integer[], `nrow`:integer, `ncol`:integer>;
type `dimnames.simple_sparse_array` <struct<`i`:^integer[], `v`:^complex[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>>> => null | struct<`A`:character[], `B`:character[]>;
type `dimnames<-.simple_sparse_array` <struct<`i`:^integer[], `v`:integer[], `dim`:integer[]>, null> => struct<`i`:^integer[], `v`:integer[], `dim`:integer[]>;
type `drop_simple_sparse_array` <struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:double, `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character>>> => struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:double, `dim`:integer, `dimnames`:struct<`A`:character[]>>;
type `extend_simple_sparse_array` <struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:struct<``:null, `B`:character[]>>, integer[]> => struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:null>;
type `FUN` <^double[], ^double[]> => null | ^double[];
type `is.numeric.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>> => logical;
type `is.simple_sparse_array` <struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:double, `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:struct<``:null, `B`:character[]>>> => logical;
type `is.simple_triplet_matrix` <^double[] | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | struct<`i`:integer[], `j`:integer[], `v`:logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>>> => logical;
type `matprod_simple_triplet_matrix` <^double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, struct<`i`:integer[], `j`:integer[], `v`:integer[], `nrow`:integer, `ncol`:integer, `dimnames`:null> | ^integer[]> => ^double[];
type `Ops.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>> => struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer>;
type `reduce_simple_sparse_array` <struct<`i`:^integer[], `v`:complex[], `dim`:integer[], `dimnames`:tuple<null, character>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:tuple<null, null>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer, `dimnames`:null>, logical, logical> => struct<`i`:^integer[], `v`:complex[], `dim`:integer[], `dimnames`:tuple<null, character>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:null, `dim`:integer, `dimnames`:null>;
type `rollup.array` <double[], integer[], null, any => any, null, logical, character> => double[];
type `rollup.matrix` <^complex[], integer[], null | tuple<integer[], double[]> | ^double[], any => any, logical | null, logical, character> => ^complex[] | tuple<double[], double[], double[], double[], double[]>;
type `rollup.simple_sparse_array` <struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:^integer[], `v`:^complex[], `dim`:integer[], `dimnames`:null>, integer[], null | tuple<integer[], double[]> | ^double[], any => any, logical | null, logical, character[], character> => struct<`i`:^integer[], `v`:complex[], `dim`:integer[], `dimnames`:tuple<null, character>> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<character, character, null>> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<null, character[]>> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:^integer[], `v`:double, `dim`:integer, `dimnames`:struct<`A`:character[]>>;
type `rollup.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^complex[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, integer, null | ^integer[] | struct<`1`:integer[]> | double[], any => any, null | logical, logical> => struct<`i`:integer[], `j`:integer[], `v`:complex[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>>;
type `row_means.default` <^logical[], logical, double, null> => ^double[];
type `row_means.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>>, logical, double, null> => ^double[];
type `row_norms` <^integer[], double> => double[];
type `row_sums.default` <^double[], logical, double, null> => ^double[];
type `row_sums.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:^complex[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, logical, double, null> => ^complex[];
type `rowapply_simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>>, any => any, null> => double[] | struct<`1`:integer[], `2`:integer[], `3`:integer[]>;
type `simple_sparse_array` <^double[], null | ^complex[], null | double[], null | tuple<character[], null> | tuple<character, character, null> | tuple<null, character[]> | struct<`A`:character[], `B`:character[]> | tuple<null, null> | struct<``:null, `B`:character[]>> => struct<`i`:^integer[], `v`:complex[], `dim`:integer[], `dimnames`:tuple<null, character>> | struct<`i`:^integer[], `v`:^complex[], `dim`:integer[], `dimnames`:null> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<character[], null>> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<character, character, null>> | struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:tuple<null, character[]>> | struct<`i`:^integer[], `v`:^double[], `dim`:integer[], `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:tuple<null, null>> | struct<`i`:^integer[], `v`:integer[], `dim`:integer[], `dimnames`:struct<``:null, `B`:character[]>> | struct<`i`:^integer[], `v`:null, `dim`:integer[], `dimnames`:null>;
type `simple_sparse_zero_array` <double[], character> => struct<`i`:^integer[], `v`:double[], `dim`:integer[], `dimnames`:null>;
type `simple_triplet_diag_matrix` <double | integer[], double> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>;
type `simple_triplet_zero_matrix` <double, double, character> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>;
type `split.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>>, ^double[], logical, double, null> => struct<`1`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>>, `2`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>>, `3`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>>> | struct<`1`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character, character[]>>, `2`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>>>;
type `spos` <^integer[]> => double[];
type `t.simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>> => struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, character[]>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>;
type `tcrossapply_simple_triplet_matrix` <^double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>>, struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<character[], character[]>>, any => any, null> => ^double[];
type `tcrossprod_simple_triplet_matrix` <struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`A`:character[], `B`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>> | ^double[] | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, null | ^double[] | struct<`i`:integer[], `j`:integer[], `v`:logical[], `nrow`:integer, `ncol`:integer, `dimnames`:struct<`rows`:character[], `cols`:character[]>> | struct<`i`:integer[], `j`:integer[], `v`:^double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>> => ^double[];
