type `:::` <class<`simple_triplet_matrix`>, class<`matrix`>> => class<`matrix`>;
type `abind_simple_sparse_array` <..., integer> => class<`simple_sparse_array`>;
type `as.array.simple_sparse_array` <class<`simple_sparse_array`>, ...> => (class<`array`> | class<`matrix`>);
type `as.array.simple_triplet_matrix` <class<`simple_triplet_matrix`>, ...> => class<`matrix`>;
type `as.matrix.simple_triplet_matrix` <class<`simple_triplet_matrix`>, ...> => class<`matrix`>;
type `as.simple_sparse_array` <class<`array`> | class<`matrix`> | class<`simple_sparse_array`> | class<`simple_triplet_matrix`> | integer[]> => class<`simple_sparse_array`>;
type `as.simple_sparse_array.array` <class<`array`> | class<`matrix`>> => class<`simple_sparse_array`>;
type `as.simple_sparse_array.default` <integer[]> => class<`simple_sparse_array`>;
type `as.simple_sparse_array.matrix` <class<`array`> | class<`matrix`>> => class<`simple_sparse_array`>;
type `as.simple_sparse_array.simple_triplet_matrix` <class<`simple_triplet_matrix`>> => class<`simple_sparse_array`>;
type `as.simple_triplet_matrix` <class<`matrix`> | class<`simple_sparse_array`> | class<`simple_triplet_matrix`>> => class<`simple_triplet_matrix`>;
type `as.simple_triplet_matrix.matrix` <class<`matrix`>> => class<`simple_triplet_matrix`>;
type `as.simple_triplet_matrix.simple_sparse_array` <class<`simple_sparse_array`>> => class<`simple_triplet_matrix`>;
type `as.vector.simple_sparse_array` <class<`simple_sparse_array`>, character> => (double[] | null);
type `as.vector.simple_triplet_matrix` <class<`simple_triplet_matrix`>, character> => double[];
type `cbind` <..., integer> => class<`simple_triplet_matrix`>;
type `colapply_simple_triplet_matrix` <class<`simple_triplet_matrix`>, class<`function`>, ...> => any;
type `col_means` <class<`matrix`> | class<`simple_triplet_matrix`>, logical, double, ...> => ^double[];
type `col_means.default` <class<`matrix`>, logical, double, ...> => ^double[];
type `col_means.simple_triplet_matrix` <class<`simple_triplet_matrix`>, logical, double, ...> => ^double[];
type `col_norms` <class<`matrix`>, double> => integer[];
type `col_sums` <class<`simple_triplet_matrix`> | class<`matrix`>, logical, double, ...> => ^double[];
type `col_sums.default` <class<`matrix`>, logical, double, ...> => ^double[];
type `col_sums.simple_triplet_matrix` <class<`simple_triplet_matrix`>, logical, double, ...> => ^double[];
type `crossapply_simple_triplet_matrix` <class<`matrix`> | class<`simple_triplet_matrix`>, class<`simple_triplet_matrix`> | class<`matrix`> | null, class<`function`> | character, ...> => any;
type `crossprod_simple_triplet_matrix` <class<`matrix`> | class<`simple_triplet_matrix`>, class<`simple_triplet_matrix`> | class<`matrix`> | null> => class<`matrix`>;
type `dimnames<-.simple_sparse_array` <class<`simple_sparse_array`> | class<`simple_triplet_matrix`>, null | list<any>> => (class<`simple_sparse_array`> | class<`simple_triplet_matrix`>);
type `dimnames.simple_sparse_array` <class<`simple_sparse_array`> | class<`simple_triplet_matrix`>> => (null | list<any>);
type `dimnames<-.simple_triplet_matrix` <class<`simple_sparse_array`> | class<`simple_triplet_matrix`>, null | list<any>> => (class<`simple_sparse_array`> | class<`simple_triplet_matrix`>);
type `dimnames.simple_triplet_matrix` <class<`simple_sparse_array`> | class<`simple_triplet_matrix`>> => (null | list<any>);
type `dim<-.simple_sparse_array` <class<`simple_sparse_array`>, double[]> => class<`simple_sparse_array`>;
type `dim.simple_sparse_array` <class<`simple_sparse_array`>> => integer[];
type `dim<-.simple_triplet_matrix` <class<`simple_triplet_matrix`>, double[]> => class<`simple_triplet_matrix`>;
type `dim.simple_triplet_matrix` <class<`simple_triplet_matrix`>> => integer[];
type `drop_simple_sparse_array` <class<`simple_sparse_array`>> => (class<`simple_sparse_array`> | integer[]);
type `extend_simple_sparse_array` <class<`simple_sparse_array`>, integer[]> => class<`simple_sparse_array`>;
type `f` <class<`simple_triplet_matrix`>, class<`simple_triplet_matrix`>> => class<`simple_triplet_matrix`> | <class<`simple_triplet_matrix`>, class<`simple_triplet_matrix`>> => class<`simple_triplet_matrix`>;
type `filter` <character[]> => logical[];
type `FUN` <class<`matrix`> | class<`simple_sparse_array`> | class<`simple_triplet_matrix`>> => class<`simple_triplet_matrix`> | <double[]> => (double | logical[] | null) | <class<`matrix`> | double[]> => (^double[] | null | list<logical[]>) | <class<`matrix`> | double[], class<`matrix`> | double[]> => any | <integer[]> => null;
type `is.numeric.simple_triplet_matrix` <class<`simple_triplet_matrix`>> => logical;
type `is.simple_sparse_array` <class<`simple_sparse_array`>> => logical;
type `is.simple_triplet_matrix` <class<`matrix`> | class<`simple_sparse_array`> | class<`simple_triplet_matrix`> | ^double[]> => logical;
type `.make_dimnames` <class<`simple_triplet_matrix`>, class<`matrix`> | class<`simple_triplet_matrix`>> => null;
type `matprod_simple_triplet_matrix` <class<`matrix`> | class<`simple_triplet_matrix`>, class<`simple_triplet_matrix`> | class<`matrix`>> => class<`matrix`>;
type `.means_simple_triplet_matrix` <class<`simple_triplet_matrix`>, integer, logical> => ^double[];
type `Ops.simple_triplet_matrix` <class<`matrix`> | class<`simple_triplet_matrix`>, any> => class<`simple_triplet_matrix`>;
type `rbind` <..., integer> => class<`simple_triplet_matrix`>;
type `.reduce` <class<`simple_triplet_matrix`>> => class<`simple_triplet_matrix`>;
type `reduce_simple_sparse_array` <class<`simple_sparse_array`>, logical, logical> => class<`simple_sparse_array`>;
type `rollup` <class<`array`> | class<`matrix`> | class<`simple_sparse_array`> | class<`simple_triplet_matrix`>, integer[], any, any, ...> => (class<`array`> | class<`matrix`> | class<`simple_sparse_array`> | class<`simple_triplet_matrix`>);
type `rollup.array` <class<`array`> | class<`matrix`>, integer[], null | ^double[] | list<double[]>, class<`function`>, ..., logical, character> => (class<`array`> | class<`matrix`>);
type `rollup.matrix` <class<`array`> | class<`matrix`>, integer[], null | ^double[] | list<double[]>, class<`function`>, ..., logical, character> => (class<`array`> | class<`matrix`>);
type `rollup.simple_sparse_array` <class<`simple_sparse_array`>, integer[], null | ^double[] | list<double[]>, class<`function`>, ..., logical, character[], character> => class<`simple_sparse_array`>;
type `rollup.simple_triplet_matrix` <class<`simple_triplet_matrix`>, integer, double[] | ^integer[] | null | list<integer[]>, class<`function`>, ..., logical> => class<`simple_triplet_matrix`>;
type `rowapply_simple_triplet_matrix` <class<`simple_triplet_matrix`>, class<`function`>, ...> => (double[] | list<integer[]>);
type `row_means` <class<`matrix`> | class<`simple_triplet_matrix`>, logical, double, ...> => ^double[];
type `row_means.default` <class<`matrix`>, logical, double, ...> => ^double[];
type `row_means.simple_triplet_matrix` <class<`simple_triplet_matrix`>, logical, double, ...> => ^double[];
type `row_norms` <class<`matrix`>, double> => double[];
type `row_sums` <class<`simple_triplet_matrix`> | class<`matrix`>, logical, double, ...> => any;
type `row_sums.default` <class<`matrix`>, logical, double, ...> => ^double[];
type `row_sums.simple_triplet_matrix` <class<`simple_triplet_matrix`>, logical, double, ...> => any;
type `[<-.simple_sparse_array` <class<`simple_sparse_array`>, ..., double[] | class<`simple_triplet_matrix`> | null> => any;
type `[.simple_sparse_array` <class<`simple_sparse_array`>, ...> => any;
type `simple_sparse_array` <class<`matrix`> | integer[], class<`array`> | ^complex[] | null, double[] | null, null | list<any>> => class<`simple_sparse_array`>;
type `simple_sparse_zero_array` <double[], character> => class<`simple_sparse_array`>;
type `simple_triplet_diag_matrix` <double | integer[], double> => class<`simple_triplet_matrix`>;
type `[<-.simple_triplet_matrix` <class<`simple_triplet_matrix`>, ..., double | integer[]> => class<`simple_triplet_matrix`>;
type `[.simple_triplet_matrix` <class<`simple_triplet_matrix`>, any, any, logical> => any;
type `simple_triplet_matrix` <double[], double[], ^complex[], double, double, null | list<any>> => class<`simple_triplet_matrix`>;
type `simple_triplet_zero_matrix` <double, double, character> => class<`simple_triplet_matrix`>;
type `slam_options` <any, any> => (double | list<double>);
type `split.simple_triplet_matrix` <class<`simple_triplet_matrix`>, ^double[], logical, double, ...> => list<class<`simple_triplet_matrix`>>;
type `spos` <class<`matrix`>> => double[];
type `.stm_as_subscript` <class<`matrix`> | class<`simple_triplet_matrix`> | class<`simple_sparse_array`> | ^double[], any, logical, ...> => any;
type `tcrossapply_simple_triplet_matrix` <class<`matrix`> | class<`simple_triplet_matrix`>, class<`simple_triplet_matrix`>, class<`function`>, ...> => class<`matrix`>;
type `.tcrossprod_bailout` <class<`simple_triplet_matrix`>, class<`matrix`> | class<`simple_triplet_matrix`> | null, logical> => class<`matrix`>;
type `.tcrossprod_simple_triplet_matrix` <class<`simple_triplet_matrix`>, class<`matrix`> | class<`simple_triplet_matrix`> | null, logical, logical, logical> => class<`matrix`>;
type `tcrossprod_simple_triplet_matrix` <class<`matrix`> | class<`simple_triplet_matrix`>, class<`simple_triplet_matrix`> | class<`matrix`> | null> => class<`matrix`>;
type `t.simple_triplet_matrix` <class<`simple_triplet_matrix`>> => class<`simple_triplet_matrix`>;
