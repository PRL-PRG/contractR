type `center.step` <^double[], ^double[], double, double> => ^double[];
type `filter` <character[]> => logical[];
type `frobenius.norm` <^double[]> => double;
type `norm` <^double[]> => double[];
type `S2` <struct<`x1`:double[], `x2`:double[], `x3`:double[], `x4`:double[], `x5`:double[], `y`:double[]>, character, any => any, ???> => ^double[];
type `sumsignout` <^double[]> => ^double[];
type `.Q.perm.rank` <^double[], ^double[], ^double[], ^double[], integer> => double;
type `.Q.simu.rank` <^double[], integer, symbol, integer> => double;
type `FUN` <struct<> | double[], integer> => double[];
type `HotellingsT.internal` <^double[], ^double[], double[], character> => struct<`test.statistic`:^double[], `p.value`:^double[], `df.1`:integer, `df.2`:double>;
type `HP1.shape` <^double[], character, any => any, ???> => ^double[];
type `MaRaTe.internal` <^double[], ^double[], character> => struct<`test.statistic`:double, `p.value`:double, `Cov`:^double[], `df`:integer>;
type `MaRaTe.internal.csample` <^double[], integer[], character, ???> => struct<`test.statistic`:double, `p.value`:double, `Cov`:^double[], `df`:double>;
type `mycolMeans` <^double[]> => double[];
type `pair.diff` <^double[]> => ^double[];
type `pair.prod` <^double[]> => ^double[];
type `pair.sum` <^double[]> => ^double[];
type `Q.Test` <^double[], character> => struct<`test.statistic`:double, `p.value`:double>;
type `shape.det` <^double[]> => ^double[];
type `SSCov` <^double[]> => ^double[];
type `SSCov.hub` <^double[], ^double[], double, double> => ^double[];
type `symm.huber` <^double[], double, null, double, double, any => any> => ^double[];
type `symm.huber.wt` <^double[], double[], double, null, double, double, any => any> => ^double[];
