type `AMMI` <class<`factor`>, class<`factor`> | double[], double[], double[], double, logical, logical> => class<`AMMI`>;
type `AMMI.contour` <class<`AMMI`>, double, double, ...> => list<character[] | class<`data.frame`>>;
type `audpc` <class<`data.frame`> | double[], double[], character> => (double[] | null);
type `audps` <double[], double[], character> => double;
type `bar.err` <class<`data.frame`>, character, logical, logical, ...> => list<class<`matrix`> | class<`array`> | class<`matrix`> | double[]>;
type `bar.group` <class<`data.frame`>, logical, ...> => list<class<`matrix`> | double[] | class<`matrix`> | integer[]>;
type `BIB.test` <class<`factor`> | double[], double[] | class<`factor`>, double[], character[], double, logical, logical> => class<`group`>;
type `carolina` <double, class<`data.frame`>> => list<class<`lm`> | double>;
type `consensus` <class<`data.frame`>, character[], character[], double, logical, double, character, ...> => list<class<`data.frame`> | class<`hclust`> | class<`data.frame`> | class<`hclust`> | null>;
type `correl` <double[], double[], character, character> => list<double>;
type `correlation` <double[] | class<`data.frame`>, double[] | null | class<`data.frame`>, character[], character> => (null | list<class<`matrix`> | double>);
type `cv.model` <class<`aov`, `lm`> | class<`lm`>> => double;
type `cv.similarity` <class<`data.frame`>> => double;
type `DAU.test` <character[], character[], double[], character, double, logical, logical> => class<`group`>;
type `delete.na` <class<`data.frame`> | class<`matrix`>, character> => (class<`data.frame`> | class<`matrix`>);
type `design.ab` <double[], double | null, double, character[], double, character, logical, logical> => list<class<`data.frame`> | list<character[] | double[]> | class<`data.frame`> | list<character[] | double>>;
type `design.alpha` <character[] | integer[], double, double, double, double, character, logical> => list<class<`data.frame`> | list<character[] | double | class<`matrix`>> | class<`data.frame`> | list<character | integer[] | double | class<`matrix`>>>;
type `design.bib` <character[], double, null, double, double, character, double, logical> => list<class<`data.frame`> | class<`matrix`> | list<character[] | double>>;
type `design.crd` <character[], double[], double, double, character, logical> => list<class<`data.frame`> | list<character[] | double[]>>;
type `design.cyclic` <character[], double, double, double, logical, double, character, logical> => list<class<`matrix`> | class<`data.frame`> | list<character[] | double>>;
type `design.dau` <character[], character[], double, double, double, character, character, logical> => list<class<`data.frame`> | list<character[] | double>>;
type `design.graeco` <character[], character[] | integer[], double, double, character, logical> => list<class<`matrix`> | class<`data.frame`> | list<character[] | double> | class<`matrix`> | class<`data.frame`> | list<character[] | integer[] | double>>;
type `design.lattice` <character[] | integer[], double, double, double, character, logical> => list<class<`data.frame`> | list<character[] | double | class<`matrix`>> | class<`data.frame`> | list<character | integer[] | double | class<`matrix`>>>;
type `design.lsd` <character[] | integer[], double, double, character, logical, logical> => list<class<`matrix`> | class<`data.frame`> | list<character[] | double> | class<`matrix`> | class<`data.frame`> | list<character | integer[] | double>>;
type `design.rcbd` <character[], double, double, double, character, logical, logical, logical> => list<class<`matrix`> | class<`data.frame`> | list<character[] | double>>;
type `design.split` <character[], double[], double, character[], double, double, character, logical, logical> => list<class<`data.frame`> | list<character[] | double>>;
type `design.strip` <character[], double[], double, double, double, character, logical> => list<class<`data.frame`> | list<character[] | double[]>>;
type `design.youden` <character[], double, double, double, character, logical, logical> => list<class<`matrix`> | class<`data.frame`> | list<character[] | double>>;
type `diffograph` <class<`group`>, null, character, character, character, double, double, double, character, double, double, character, character, ...> => list<list<double[]>>;
type `duncan.test` <class<`aov`, `lm`> | double[], character | class<`factor`>, any, any, double, logical, character | null, logical> => class<`group`>;
type `durbin.test` <class<`factor`>, character[] | double[], double[], double, logical, character, logical> => class<`group`>;
type `friedman` <class<`factor`> | integer[], class<`factor`>, double[], double, logical, null | character, logical> => class<`group`>;
type `graph.freq` <class<`graph.freq`, `histogram`> | double[], null | double[], null | double[], double, logical, null, character, character, logical | character, double, ...> => class<`graph.freq`, `histogram`>;
type `hgroups` <class<`matrix`>> => class<`matrix`>;
type `HSD.test` <class<`aov`, `lm`> | double[], character | class<`factor`> | double[], any, any, double, logical, character | null, logical, logical> => class<`group`>;
type `index.AMMI` <class<`AMMI`>> => class<`data.frame`>;
type `index.bio` <integer[], character, double, double, logical> => class<`data.frame`>;
type `index.smith` <class<`data.frame`>, logical, ...> => list<class<`lm`> | class<`matrix`>>;
type `intervals.freq` <class<`histogram`> | double[]> => class<`matrix`>;
type `join.freq` <class<`graph.freq`, `histogram`>, integer[]> => class<`graph.freq`, `histogram`>;
type `kendall` <double[], double[]> => list<double>;
type `kruskal` <integer[], integer[], double, character[], logical, character, logical> => class<`group`>;
type `kurtosis` <^double[]> => double;
type `lastC` <character[]> => character[];
type `lateblight` <list<class<`data.frame`> | class<`Date`>>, character, character, character, double, double, double, double, double, double, character, ...> => list<class<`data.frame`>>;
type `lineXtester` <double[], class<`factor`> | ^integer[], class<`factor`> | ^integer[], double[]> => class<`aov`, `lm`>;
type `LSD.test` <class<`aov`, `lm`> | double[], character | class<`factor`> | integer[], any, any, double, character[], logical, null, logical> => class<`group`>;
type `Median.test` <integer[], integer[], double, logical, logical, logical, null, logical> => class<`group`>;
type `montecarlo` <class<`histogram`> | double[], double, ...> => double[];
type `nonadditivity` <double[], class<`factor`>, class<`factor`>, integer, double> => list<double | class<`anova`, `data.frame`>>;
type `normal.freq` <class<`graph.freq`, `histogram`> | class<`histogram`>, double, ...> => null;
type `ogive.freq` <class<`graph.freq`, `histogram`>, character, character, character, character, double, ...> => class<`data.frame`>;
type `order.group` <character[], double[], double[], double, double, double[], double, double, null, null, null, null, logical> => class<`data.frame`>;
type `orderPvalue` <character[] | class<`factor`> | double[], double[] | class<`array`>, double, class<`matrix`>, any> => class<`data.frame`>;
type `path.analysis` <class<`matrix`>, class<`matrix`>> => list<class<`matrix`> | double>;
type `PBIB.test` <class<`factor`>, class<`factor`>, class<`factor`>, double[], double, character, character[], double, logical, logical> => class<`group`>;
type `plot.AMMI` <class<`AMMI`>, double, double, double, double, logical, character | null, character | null, double, double, double, null, null, null, null, ...> => null;
type `plot.graph.freq` <class<`graph.freq`, `histogram`>, null, null, double, logical, null, character, character, character | logical, double, ...> => class<`graph.freq`, `histogram`>;
type `plot.group` <class<`group`>, character[], logical, null, double[] | null, null, null, null, double, ...> => class<`matrix`>;
type `polygon.freq` <class<`graph.freq`, `histogram`> | class<`histogram`>, double, ...> => null;
type `reg.homog` <character[] | class<`factor`>, double[], double[]> => list<double | character>;
type `REGW.test` <class<`aov`, `lm`>, character, any, any, double, logical, character | null, logical> => class<`group`>;
type `resampling.cv` <class<`data.frame`>, double, double> => list<class<`lm`> | class<`data.frame`>>;
type `resampling.model` <character, class<`data.frame`>, double, logical> => list<class<`lm`> | class<`matrix`> | double[] | class<`lm`> | class<`matrix`> | double>;
type `scheffe.test` <class<`aov`, `lm`> | double[], character | class<`factor`>, any, any, any, double, logical, character | null, logical> => class<`group`>;
type `similarity` <class<`data.frame`>> => class<`dist`>;
type `simulation.model` <character, class<`data.frame`>, double[] | null, double, logical> => list<class<`lm`> | class<`data.frame`>>;
type `skewness` <^double[]> => double;
type `SNK.test` <class<`aov`, `lm`> | double[], character | class<`factor`>, any, any, double, logical, character | null, logical> => class<`group`>;
type `sp.plot` <integer[], class<`factor`>, class<`factor`>, integer[]> => list<class<`anova`, `data.frame`> | double>;
type `ssp.plot` <integer[], integer[], class<`factor`>, integer[], double[]> => list<class<`anova`, `data.frame`> | double>;
type `stability.nonpar` <class<`data.frame`>, character | null, logical, logical> => list<class<`data.frame`>>;
type `stability.par` <class<`data.frame`>, double, double, double, character, logical, character | null, double[], logical> => list<class<`data.frame`>>;
type `stat.freq` <class<`graph.freq`, `histogram`> | class<`histogram`>> => list<double | class<`matrix`>>;
type `strip.plot` <class<`factor`>, class<`factor`>, class<`factor`>, double[]> => list<class<`data.frame`> | class<`anova`, `data.frame`> | double>;
type `sturges.freq` <double[], double> => list<double[]>;
type `summary.graph.freq` <class<`graph.freq`, `histogram`>, ...> => class<`data.frame`>;
type `table.freq` <class<`graph.freq`, `histogram`>> => class<`data.frame`>;
type `tapply.stat` <class<`data.frame`> | double[], class<`factor`> | character[] | class<`data.frame`> | double[], class<`function`> | character> => class<`data.frame`>;
type `vark` <double[], double[]> => double;
type `waerden.test` <double[], class<`factor`> | integer[], double, logical, null, logical> => class<`group`>;
type `waller` <double, double, double, double> => double;
type `waller.test` <class<`aov`, `lm`> | double[], character | class<`factor`>, any, any, any, double, logical, character | null, logical> => class<`group`>;
type `weatherSeverity` <class<`data.frame`>, class<`data.frame`>, class<`Date`>, class<`Date`>, class<`Date`>, double, double> => list<class<`data.frame`> | class<`Date`>>;
type `zigzag` <list<class<`matrix`> | class<`data.frame`> | list<character[] | double>>> => class<`data.frame`>;
