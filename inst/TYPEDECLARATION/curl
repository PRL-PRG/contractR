type `::` <null | character[] | double, character | null, logical | tuple<> | character | struct<`Accept-Encoding`:character, `Accept`:character> | struct<`httpget`:logical, `useragent`:character>, character> => struct<`url`:character, `status_code`:integer, `type`:character, `headers`:raw[], `modified`:null, `times`:double[], `content`:raw[]> | struct<`version`:character, `ssl_version`:character, `libz_version`:character, `libssh_version`:null, `libidn_version`:character, `host`:character, `protocols`:character[], `ipv6`:logical, `http2`:logical, `idn`:logical> | character[] | struct<> | double[];
type `curl_options` <character> => double[];
type `filter` <character[]> => logical[];
type `handle_setopt` <tuple<> | struct<`customrequest`:character>> => null | character | double;
type `new_handle` < > => null | character | logical;
type `curl` <character, character> => integer;
type `curl_download` <character, character, logical, character> => character;
type `curl_escape` <character> => character;
type `curl_fetch_disk` <character, character> => struct<`url`:character, `status_code`:integer, `type`:character, `headers`:raw[], `modified`:null, `times`:double[], `content`:character>;
type `curl_fetch_memory` <character> => struct<`url`:character, `status_code`:integer, `type`:character, `headers`:raw[], `modified`:null, `times`:double[], `content`:raw[]>;
type `curl_fetch_multi` <any => any, null | any => any, null, null> => character;
type `curl_fetch_stream` <character, any => any> => struct<`url`:character, `status_code`:integer, `type`:character, `headers`:raw[], `modified`:null, `times`:double[]>;
type `curl_symbols` <character> => struct<`name`:character[], `introduced`:character[], `deprecated`:^character[], `removed`:^character[], `value`:integer[], `type`:^character[]>;
type `curl_unescape` <character> => character;
type `curl_version` < > => struct<`version`:character, `ssl_version`:character, `libz_version`:character, `libssh_version`:null, `libidn_version`:character, `host`:character, `protocols`:character[], `ipv6`:logical, `http2`:logical, `idn`:logical>;
type `file_writer` <character> => any => any;
type `form_file` <character, character> => struct<`path`:character, `type`:character>;
type `fun` <symbol, symbol> => null;
type `FUN` <character, character> => character[];
type `func` <environment> => struct<`status`:double, `body`:character, `headers`:character>;
type `handle_cookies` < > => struct<`domain`:character[], `flag`:logical[], `path`:character[], `secure`:logical[], `expiration`:double[], `name`:character[], `value`:^character[]>;
type `handle_data` < > => struct<`url`:character, `status_code`:integer, `type`:character, `headers`:raw[], `modified`:null, `times`:double[]> | struct<`url`:character, `status_code`:integer, `type`:null, `headers`:raw[], `modified`:null, `times`:double[]>;
type `handle_getheaders` < > => character[];
type `handle_reset` <null, null> => null;
type `handle_setform` <tuple<> | struct<`a`:character, `b`:character>> => character | null;
type `is_string` <null> => logical;
type `multi_add` <null | any => any, null | integer, null> => any => any;
type `multi_run` <double, logical, null> => struct<`success`:integer, `error`:integer, `pending`:integer>;
type `multi_set` <double, logical> => double;
type `new_file_writer` < > => character;
type `new_pool` <double, logical> => double;
type `nslookup` <character, logical, logical, logical> => character;
type `parse_date` <character> => integer;
type `parse_headers` <raw[], logical> => character[] | tuple<character[], character[], character[], character[]>;
type `parse_headers_list` <raw[]> => struct<`date`:character, `content-type`:character, `content-length`:character, `connection`:character, `server`:character, `access-control-allow-origin`:character, `access-control-allow-credentials`:character>;
type `replace_host` <character, character> => character;
type `write_file_writer` <raw[], logical> => integer;
type `writer` <raw[], logical> => integer;
