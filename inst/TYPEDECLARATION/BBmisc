type `addClasses` <list<any>, character[]> => class<`foo1`, `foo2`, `list`>;
type `argsAsNamedList` <...> => list<double>;
type `asQuoted` <character, environment> => class<`call`>;
type `binPack` <integer[], double> => integer[];
type `%btwn%` <double, double[]> => logical;
type `capitalizeStrings` <character[], logical, logical> => character[];
type `catf` <..., character, logical, logical> => null;
type `cFactor` <...> => class<`factor`>;
type `checkListElementClass` <list<integer>, character> => null;
type `chunk` <integer[], any, any, any, logical> => list<integer[]>;
type `clipString` <character, double, character> => character;
type `coalesce` <...> => double;
type `collapse` <character[], character> => character;
type `computeMode` <double[], character, logical> => double;
type `convertInteger` <character | double[]> => (character | double[]);
type `convertIntegers` <character | double[]> => (character | double | integer[]);
type `convertListOfRowsToDataFrame` <list<list<double | character>>, logical, any, any> => class<`data.frame`>;
type `convertToShortString` <list<any>, character, integer> => character;
type `explode` <character, character> => character[];
type `extractSubList` <list<list<double>>, character, any, logical, logical> => (double[] | list<double>);
type `FUN` <integer[] | list<any>, null | character> => (^character[] | null);
type `getClass1` <character | double | integer[] | null | list<any>> => character;
type `getMaxIndexOfRows` <class<`matrix`>, character, logical> => integer[];
type `getMinIndexOfRows` <class<`matrix`>, character, logical> => integer[];
type `getNChunks` <integer, integer, logical> => integer[];
type `insert` <list<double>, list<double>, any> => list<double>;
type `isDirectory` <...> => logical;
type `isEmptyDirectory` <...> => logical;
type `is.error` <class<`try-error`> | double> => logical;
type `isExpensiveExampleOk` < > => logical;
type `isFALSE` <double> => logical;
type `isProperlyNamed` <list<double>> => logical;
type `isScalarValue` <double, logical, logical, character> => logical;
type `itostr` <integer[] | double, double> => character[];
type `load2` <character, character[], logical, any, any> => (double | list<double>);
type `makeDataFrame` <double, double, any, any, null, character[]> => class<`data.frame`>;
type `makeProgressBar` <double, double, character, character, character, integer, character> => class<`ProgressBar`>;
type `makeS3Obj` <character, ...> => (class<`car`> | class<`ProgressBar`>);
type `mapValues` <class<`factor`> | integer[], character | double[], character | double[], logical, logical, logical, logical> => (class<`factor`> | double[]);
type `namedList` <character[], any> => list<double | null>;
type `names2` <integer[] | list<any>, null | character> => (^character[] | null);
type `printStrToChar` <class<`data.frame`>, character> => character;
type `printToChar` <null | class<`data.frame`>, null | character> => character[];
type `requirePackages` <character[], null, character, logical, logical, character> => logical[];
type `rowLapply` <class<`data.frame`>, class<`function`>, ..., logical> => list<double>;
type `save2` <character, ..., logical, null, logical, any, logical, logical> => null;
type `seq_col` <class<`data.frame`>> => integer[];
type `seq_row` <class<`data.frame`>> => integer[];
type `setAttribute` <list<any>, character, double> => list<any>;
type `setClasses` <integer[] | list<any>, character[]> => (class<`car`> | class<`factor`> | class<`foo1`, `foo2`> | class<`ProgressBar`>);
type `setColNames` <class<`matrix`>, character[]> => class<`matrix`>;
type `splitTime` <double, character> => ^integer[];
type `stopf` <..., integer> => list<any>;
type `strrepeat` <character, double, character> => character;
type `suppressAll` <character> => character;
type `toRangeStr` <integer[], character, character> => character;
type `viapply` <^double[] | list<character | double>, class<`function`>, ..., logical> => ^integer[];
type `vlapply` <list<character | double>, class<`function`>, ..., logical> => logical[];
type `warningf` <..., logical, integer> => character;
type `which.first` <logical[], logical> => integer[];
type `which.last` <logical[], logical> => integer[];
