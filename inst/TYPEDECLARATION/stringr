type `as_bare_character` <character> => character;
type `boundary` <character, null, ...> => class<`boundary`, `character`, `pattern`>;
type `coll` <character, logical, character, ...> => class<`character`, `coll`, `pattern`>;
type `filter` <character[]> => logical[];
type `fixed` <character, logical> => class<`character`, `fixed`, `pattern`>;
type `invert_match` <class<`matrix`>> => class<`matrix`>;
type `opts` <character[] | class<`character`, `pattern`, `regex`> | class<`character`, `fixed`, `pattern`> | class<`character`, `coll`, `pattern`> | class<`boundary`, `character`, `pattern`>> => (null | list<logical | character | integer | character | logical>);
type `regex` <character, logical, logical, logical, logical, ...> => class<`character`, `pattern`, `regex`>;
type `str_c` <..., character, null | character> => ^character[];
type `str_conv` <character, character> => character;
type `str_count` <character[], character[] | class<`character`, `fixed`, `pattern`> | class<`boundary`, `character`, `pattern`>> => integer[];
type `str_detect` <character[], class<`character`, `coll`, `pattern`> | class<`character`, `fixed`, `pattern`> | character[], logical> => logical[];
type `str_dup` <character[], double | integer[]> => character[];
type `str_extract` <character[], character> => ^character[];
type `str_extract_all` <character[], character | class<`boundary`, `character`, `pattern`> | class<`character`, `pattern`, `regex`>, logical> => (class<`matrix`> | list<character[]>);
type `str_flatten` <character[], character> => character;
type `str_locate_all` <character, character> => list<class<`matrix`>>;
type `str_replace_na` <^character[], character> => character[];
type `str_split` <character, character | class<`boundary`, `character`, `pattern`>, double, logical> => list<character[]>;
type `str_sub` <character, integer[], integer[]> => character[];
type `str_to_lower` <character, character> => character;
type `str_to_sentence` <character, character> => character;
type `str_to_title` <character, character> => character;
type `str_to_upper` <character, character> => character;
type `type` <character[] | class<`boundary`, `character`, `pattern`> | class<`character`, `coll`, `pattern`> | class<`character`, `fixed`, `pattern`> | class<`character`, `pattern`, `regex`>> => character;
type `type.boundary` <class<`boundary`, `character`, `pattern`>> => character;
type `type.character` <character[]> => character;
type `type.coll` <class<`character`, `coll`, `pattern`>> => character;
type `type.fixed` <class<`character`, `fixed`, `pattern`>> => character;
type `type.regex` <class<`character`, `pattern`, `regex`>> => character;
