type `filter` <character[]> => logical[];
type `knn` <struct<`Alcohol`:double[], `Malic`:double[], `Ash`:double[], `Alcalinity`:double[], `Magnesium`:double[], `Phenols`:double[], `Flavanoids`:double[], `Nonflavanoid`:double[], `Proanthocyanins`:double[], `Intensity`:double[], `Hue`:double[], `OD280`:double[], `Proline`:double[]> | ^double[], struct<`Alcohol`:double[], `Malic`:double[], `Ash`:double[], `Alcalinity`:double[], `Magnesium`:double[], `Phenols`:double[], `Flavanoids`:double[], `Nonflavanoid`:double[], `Proanthocyanins`:double[], `Intensity`:double[], `Hue`:double[], `OD280`:double[], `Proline`:double[]> | ^double[], integer[], double, double, logical, logical> => integer[];
type `batchSOM` <struct<`FL`:double[], `RW`:double[], `CL`:double[], `CW`:double[], `BD`:double[]>, struct<`pts`:^double[], `xdim`:double, `ydim`:double, `topo`:character>, double[], null> => struct<`grid`:struct<`pts`:^double[], `xdim`:double, `ydim`:double, `topo`:character>, `codes`:^double[]>;
type `condense` <^double[], integer[], integer, logical> => integer[];
type `knn.cv` <^double[], integer[], double, double, logical, logical> => integer[];
type `knn1` <^double[], struct<`FL`:double[], `RW`:double[], `CL`:double[], `CW`:double[], `BD`:double[]> | ^double[], integer[]> => integer[];
type `lvq1` <^double[], integer[], struct<`x`:^double[], `cl`:integer[]>, double, double> => struct<`x`:^double[], `cl`:integer[]>;
type `lvq2` <^double[], integer[], struct<`x`:^double[], `cl`:integer[]>, double, double, double> => struct<`x`:^double[], `cl`:integer[]>;
type `lvq3` <^double[], integer[], struct<`x`:^double[], `cl`:integer[]>, double, double, double, double> => struct<`x`:^double[], `cl`:integer[]>;
type `lvqinit` <^double[], integer[], double, null, double> => struct<`x`:^double[], `cl`:integer[]>;
type `lvqtest` <struct<`x`:^double[], `cl`:integer[]>, ^double[]> => integer[];
type `multiedit` <^double[], integer[], double, double, double, logical> => integer[];
type `olvq1` <^double[], integer[], struct<`x`:^double[], `cl`:integer[]>, double, double> => struct<`x`:^double[], `cl`:integer[]>;
type `plot.SOM` <struct<`grid`:struct<`pts`:^double[], `xdim`:double, `ydim`:double, `topo`:character>, `codes`:^double[]>, null> => null;
type `plot.somgrid` <struct<`pts`:^double[], `xdim`:double, `ydim`:double, `topo`:character>, character, null> => null;
type `reduce.nn` <^double[], integer[], integer[]> => integer[];
type `SOM` <struct<`FL`:double[], `RW`:double[], `CL`:double[], `CW`:double[], `BD`:double[]>, struct<`pts`:^double[], `xdim`:double, `ydim`:double, `topo`:character>, double, tuple<double[], double[]> | double[], tuple<double[], double[]> | double[], null> => struct<`grid`:struct<`pts`:^double[], `xdim`:double, `ydim`:double, `topo`:character>, `codes`:^double[]>;
type `somgrid` <double, double, character> => struct<`pts`:^double[], `xdim`:double, `ydim`:double, `topo`:character>;
