type `adiag` <..., integer[], logical> => (class<`array`> | class<`matrix`>);
type `allsubhypercubes` <class<`matrix`> | class<`array`>> => list<class<`array`> | class<`matrix`> | class<`array`> | class<`array`> | class<`matrix`>>;
type `allsums` <class<`matrix`>, class<`function`> | null, ...> => list<class<`matrix`> | double[]>;
type `apad` <class<`matrix`> | integer[], double[], any, character, logical> => (class<`matrix`> | integer[]);
type `apldrop` <class<`array`> | class<`matrix`>, double[], logical> => (class<`array`> | list<integer[]>);
type `apldrop<-` <class<`matrix`>, double[], double> => class<`matrix`>;
type `apltake` <class<`array`> | class<`matrix`>, double[], logical> => (class<`array`> | list<integer[]>);
type `apltake<-` <class<`matrix`>, double, double> => class<`matrix`>;
type `aplus` <...> => class<`matrix`>;
type `arev` <class<`array`> | class<`matrix`>, integer | logical[]> => (class<`array`> | class<`matrix`>);
type `arot` <class<`array`>, double, integer[]> => class<`array`>;
type `arow` <class<`array`>, double> => class<`array`>;
type `ashift` <class<`array`> | class<`matrix`>, double[] | class<`matrix`>> => (class<`array`> | class<`matrix`>);
type `as.standard` <class<`array`> | class<`matrix`>, logical, logical> => (class<`array`> | class<`matrix`>);
type `cilleruelo` <double, double> => class<`matrix`>;
type `circulant` <double[], logical> => class<`matrix`>;
type `diag.off` <class<`matrix`>, double, logical> => double[];
type `do.index` <class<`array`>, class<`function`>, ...> => class<`array`>;
type `eq` <class<`matrix`>, class<`matrix`>> => logical;
type `%eq%` <class<`matrix`>, class<`matrix`>> => logical;
type `f` <double> => class<`matrix`>;
type `filter` <character[]> => logical[];
type `fnsd` <class<`array`>, double> => integer[];
type `force.integer` <class<`array`> | class<`matrix`>> => (class<`array`> | class<`matrix`>);
type `FUN` <integer> => integer[] | <integer> => logical | <double[]> => integer[] | <double> => integer[] | <integer> => integer[] | <integer> => double[] | <integer> => double[] | <double[]> => integer[] | <double> => class<`matrix`> | <integer> => double[] | <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>) | <integer> => double[] | <double[]> => integer[] | <integer> => double[] | <integer> => class<`matrix`> | <class<`array`> | class<`matrix`>, logical> => logical | <double[]> => double | <double> => integer[] | <integer> => double[] | <integer> => (class<`array`> | class<`matrix`>) | <integer> => character[] | <double[]> => double[] | <integer, class<`array`> | class<`matrix`>, character> => (class<`array`> | class<`matrix`> | double) | <integer> => (double | integer[]) | <integer> => integer[] | <double[]> => class<`matrix`> | <integer> => (double | integer[]) | <class<`matrix`> | list<class<`matrix`>>, logical, class<`function`>, logical> => logical[] | <integer> => logical | <integer> => integer[] | <integer> => integer[] | <double[]> => double[] | <double[]> => integer[] | <integer> => integer[] | <integer> => (class<`array`> | class<`matrix`> | double[]) | <integer> => class<`array`>;
type `hudson` <double | null, null | double[], null | double[]> => class<`matrix`>;
type `i` <class<`array`>, double> => class<`matrix`>;
type `invert` <double[]> => double[];
type `is.2x2.correct` <class<`matrix`>, logical> => logical;
type `is.alicehypercube` <class<`array`>, double, logical, class<`function`>, logical> => list<logical | class<`matrix`>>;
type `is.associative` <class<`matrix`>> => logical;
type `is.bree.correct` <class<`matrix`>, logical> => logical;
type `is.circulant` <class<`array`> | class<`matrix`>, double[]> => logical;
type `is.diagonally.correct` <class<`array`>, logical, class<`function`>, logical, ...> => (logical | list<logical | class<`array`>>);
type `is.hadamard` <class<`matrix`>> => logical;
type `is.magic` <class<`matrix`> | list<class<`matrix`>>, logical, class<`function`>, logical> => logical[];
type `is.magichypercube` <class<`array`>, logical, class<`function`>, logical, ...> => logical;
type `is.mostperfect` <class<`matrix`>, logical> => logical;
type `is.necessary` <class<`matrix`>, double> => logical;
type `is.normal` <class<`matrix`>> => logical;
type `is.ok` <integer[], integer, double> => logical;
type `is.pandiagonal` <class<`matrix`>, logical, class<`function`>, logical> => logical;
type `is.panmagic` <class<`matrix`>, logical, class<`function`>, logical> => logical;
type `is.perfect` <class<`array`> | class<`matrix`>, logical, class<`function`>, logical> => logical;
type `is.persymmetric` <class<`matrix`>> => logical;
type `is.semimagichypercube` <class<`array`> | class<`matrix`>, logical, class<`function`>, logical, ...> => (logical | list<logical | class<`array`> | logical | class<`matrix`> | logical | list<class<`matrix`>>>);
type `is.square.palindromic` <class<`matrix`>, double, logical> => logical;
type `is.standard` <class<`matrix`>, logical, logical> => logical;
type `lux.n` <double> => class<`matrix`>;
type `magic` <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>);
type `magic.2np1` <double, double[], double[], null> => class<`matrix`>;
type `magic.4n` <double> => class<`matrix`>;
type `magic.4np2` <double> => class<`matrix`>;
type `magic.constant` <integer, double, double> => double;
type `magiccube.2np1` <double> => class<`array`>;
type `magichypercube.4n` <double, double> => class<`array`>;
type `magicplot` <class<`matrix`>, logical, logical, ...> => null;
type `minmax` <class<`array`> | class<`matrix`> | double[], double> => logical;
type `panmagic.4` <double[]> => class<`matrix`>;
type `panmagic.8` <integer[], double[]> => class<`matrix`>;
type `process` <class<`array`> | class<`matrix`> | integer[], double> => (class<`array`> | class<`matrix`> | integer[]);
type `recurse` <double[], integer, double[]> => double[];
type `S` <integer> => class<`matrix`>;
type `shift` <integer[], double> => integer[];
type `subsums` <class<`matrix`>, class<`matrix`> | double[], character, logical, double> => class<`matrix`>;
type `sylvester` <double> => class<`matrix`>;
