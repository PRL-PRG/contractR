type `adiag` <..., double | integer[], logical> => (class<`array`> | class<`matrix`>);
type `allsubhypercubes` <class<`matrix`> | class<`array`>> => list<class<`array`> | class<`matrix`> | class<`array`> | class<`array`> | class<`matrix`>>;
type `allsums` <class<`matrix`>, class<`function`> | null, ...> => list<class<`matrix`> | double[]>;
type `another_incidence` <class<`array`>> => class<`array`>;
type `another_latin` <class<`matrix`>> => class<`matrix`>;
type `apad` <class<`array`> | class<`matrix`> | integer[], double[], any, character, logical> => (class<`array`> | class<`matrix`> | integer[]);
type `apldrop` <class<`array`> | class<`matrix`>, double[], logical> => (class<`array`> | class<`matrix`> | list<integer[]>);
type `apldrop<-` <class<`matrix`>, double[], double> => class<`matrix`>;
type `apltake` <class<`array`> | class<`matrix`>, double[], logical> => (class<`array`> | class<`matrix`> | list<integer[]>);
type `apltake<-` <class<`matrix`>, double, double> => class<`matrix`>;
type `aplus` <...> => class<`matrix`>;
type `arev` <class<`array`> | class<`matrix`>, double | integer[]> => (class<`array`> | class<`matrix`>);
type `arot` <class<`array`>, double, double[]> => class<`array`>;
type `arow` <class<`array`> | class<`matrix`>, double> => (class<`array`> | class<`matrix`>);
type `ashift` <class<`array`> | class<`matrix`>, double[] | class<`matrix`>> => (class<`array`> | class<`matrix`>);
type `as.standard` <class<`array`> | class<`matrix`>, logical, logical> => (class<`array`> | class<`matrix`>);
type `bernhardsson` <double> => class<`matrix`>;
type `bernhardssonA` <double> => class<`matrix`>;
type `cilleruelo` <double, double> => class<`matrix`>;
type `circulant` <double[], logical> => class<`matrix`>;
type `diag.off` <class<`matrix`>, double, logical> => double[];
type `do.index` <class<`array`>, class<`function`>, ...> => class<`array`>;
type `eq` <class<`matrix`>, class<`matrix`>> => logical;
type `%eq%` <class<`matrix`>, class<`matrix`>> => logical;
type `fnsd` <class<`array`>, double> => integer[];
type `force.integer` <class<`array`> | class<`matrix`>> => (class<`array`> | class<`matrix`>);
type `FUN` <double[], logical> => class<`matrix`> | <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>) | <class<`array`> | class<`matrix`>, logical, class<`function`>, logical, ...> => logical | <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>) | <class<`matrix`> | class<`array`> | list<class<`matrix`>>, logical, logical> => logical[] | <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>) | <class<`matrix`> | list<class<`matrix`>>> => logical[] | <class<`matrix`>, double> => class<`matrix`> | <double[]> => (class<`matrix`> | list<class<`matrix`>>) | <double | integer[], double[], double[], null> => (class<`matrix`> | list<class<`matrix`>>) | <class<`matrix`> | list<class<`matrix`>>, logical, class<`function`>, logical> => (logical[] | list<integer[]>);
type `hudson` <double | null, null | double[], null | double[]> => class<`matrix`>;
type `incidence` <class<`matrix`>> => class<`array`>;
type `inc_to_inc` <class<`array`>> => class<`array`>;
type `is.2x2.correct` <class<`matrix`>, logical> => logical;
type `is.alicehypercube` <class<`array`>, double, logical, class<`function`>, logical> => list<logical | class<`matrix`>>;
type `is.antimagic` <class<`matrix`>, logical, class<`function`>> => logical;
type `is.associative` <class<`matrix`>> => logical;
type `is.bree.correct` <class<`matrix`>, logical> => logical;
type `is.circulant` <class<`array`> | class<`matrix`>, double[]> => logical;
type `is.diagonally.correct` <class<`array`> | class<`matrix`>, logical, class<`function`>, logical, ...> => (logical | list<logical | class<`array`> | logical | class<`matrix`>>);
type `is.hadamard` <class<`matrix`>> => logical;
type `is.incidence` <class<`array`>, logical> => logical;
type `is.incidence.improper` <class<`array`>> => logical;
type `is.latin` <class<`matrix`>, logical> => logical;
type `is.latinhypercube` <class<`matrix`>, logical> => logical;
type `is.magic` <class<`matrix`> | list<class<`matrix`>>, logical, class<`function`>, logical> => (logical[] | list<integer[]>);
type `is.magichypercube` <class<`array`> | class<`matrix`>, logical, class<`function`>, logical, ...> => logical;
type `is.mostperfect` <class<`matrix`>, logical> => logical;
type `is.normal` <class<`matrix`> | list<class<`matrix`>>> => logical[];
type `is.ok` <integer[], integer, double> => logical;
type `is.pandiagonal` <class<`matrix`>, logical, class<`function`>, logical> => logical;
type `is.panmagic` <class<`matrix`>, logical, class<`function`>, logical> => logical;
type `is.perfect` <class<`array`> | class<`matrix`>, logical, class<`function`>, logical> => logical;
type `is.persymmetric` <class<`matrix`>> => logical;
type `is.sam` <class<`matrix`>> => logical;
type `is.semimagic` <class<`matrix`>, logical, class<`function`>, logical> => logical;
type `is.semimagichypercube` <class<`array`> | class<`matrix`>, logical, class<`function`>, logical, ...> => (logical | list<logical | class<`array`> | logical | class<`matrix`> | logical | list<class<`matrix`>>>);
type `is.sparse` <class<`matrix`>> => logical;
type `is.square.palindromic` <class<`matrix`>, double, logical> => logical;
type `is.standard` <class<`matrix`> | class<`array`> | list<class<`matrix`>>, logical, logical> => logical[];
type `latin` <double[], logical> => class<`matrix`>;
type `lozenge` <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>);
type `magic` <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>);
type `magic.2np1` <double | integer[], double[], double[], null> => (class<`matrix`> | list<class<`matrix`>>);
type `magic.4n` <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>);
type `magic.4np2` <double> => class<`matrix`>;
type `magic.constant` <double, double, double> => double;
type `magiccube.2np1` <double> => class<`array`>;
type `magichypercube.4n` <double, double> => (class<`array`> | class<`matrix`>);
type `magicplot` <class<`matrix`>, logical, logical, ...> => null;
type `magic.prime` <double, double, double> => class<`matrix`>;
type `magic.product` <class<`matrix`> | double, class<`matrix`> | double, null | class<`matrix`>> => class<`matrix`>;
type `minmax` <class<`array`> | class<`matrix`> | double[], double> => logical;
type `notmagic.2n` <double> => class<`matrix`>;
type `panmagic.4` <double[]> => class<`matrix`>;
type `panmagic.6np1` <double | integer[]> => (class<`matrix`> | list<class<`matrix`>>);
type `panmagic.6npm1` <double[]> => (class<`matrix`> | list<class<`matrix`>>);
type `panmagic.8` <double[], double[]> => class<`matrix`>;
type `process` <class<`array`> | class<`matrix`> | integer[], double> => (class<`array`> | class<`matrix`> | integer[]);
type `recurse` <double[] | class<`matrix`>, double, character[] | double[]> => (character[] | double[]);
type `rlatin` <double, double | null, null, double | null> => (class<`array`> | class<`matrix`>);
type `sam` <double, double, null, class<`matrix`>> => class<`matrix`>;
type `shift` <integer[], double> => integer[];
type `strachey` <double | integer[], class<`matrix`> | list<class<`matrix`>>> => (class<`matrix`> | list<class<`matrix`>>);
type `subsums` <class<`array`> | class<`matrix`>, double[] | class<`matrix`>, character, logical, any> => (class<`array`> | class<`matrix`>);
type `sylvester` <double> => class<`matrix`>;
type `transf` <class<`matrix`>, double> => class<`matrix`>;
type `unincidence` <class<`array`>> => class<`matrix`>;
