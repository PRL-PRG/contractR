type `filter` <character[]> => logical[];
type `-.rle` <struct<`lengths`:integer[], `values`:double[]>, null | struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `!.rle` <struct<`lengths`:integer[], `values`:logical[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `!=.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `.check_lengths` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => null;
type `.Deprecate_method` <character, character> => null | character;
type `.Deprecate_once` <character> => null | character;
type `.recurse_summation` <symbol | language, double> => tuple<symbol>;
type `.run_mul` <integer, integer> => integer[];
type `[.wmatrix` <^double[], integer[] | null, null | integer, null, logical> => ^double[];
type `[<-.wmatrix` <^double[], double, null, null, integer[]> => ^double[];
type `*.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `/.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `&.rle` <struct<`lengths`:integer[], `values`:logical[]>, struct<`lengths`:integer[], `values`:logical[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `%/%.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `%%.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `^.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `+.rle` <struct<`lengths`:integer[], `values`:double[]>, null | struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `<.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `<=.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `==.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `>.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `>=.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `|.rle` <struct<`lengths`:integer[], `values`:logical[]>, struct<`lengths`:integer[], `values`:logical[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `all.rle` <struct<`lengths`:integer[], `values`:logical[]>, logical> => logical;
type `any.rle` <struct<`lengths`:integer[], `values`:logical[]>, logical> => logical;
type `append_rhs.formula` <language, language | tuple<symbol>, logical> => language;
type `as.linwmatrix.logwmatrix` <^double[], null> => ^double[];
type `as.linwmatrix.matrix` <^double[], null, null> => ^double[];
type `as.logwmatrix.linwmatrix` <^double[], null> => ^double[];
type `as.logwmatrix.matrix` <^double[], null, null> => ^double[];
type `as.rle.rle` <struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `binop.rle` <struct<`lengths`:integer[], `values`:double[]>, struct<`lengths`:integer[], `values`:double[]>, any => any> => struct<`lengths`:integer[], `values`:double[]>;
type `c.rle` <struct<`lengths`:integer[], `values`:logical[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `colMeans.mcmc.list` <struct<`line1`:^double[], `line2`:^double[]>, null> => double[];
type `compact.rle` <struct<`lengths`:integer[], `values`:double[]>> => struct<`lengths`:integer[], `values`:double[]>;
type `compress_rows.linwmatrix` <^double[], null> => ^double[];
type `compress_rows.logwmatrix` <^double[], null> => ^double[];
type `compress.data.frame` <struct<`V1`:integer[], `V2`:integer[], `V3`:integer[]>> => struct<`rows`:struct<`V1`:integer[], `V2`:integer[], `V3`:integer[]>, `frequencies`:double[], `ordering`:integer[], `rownames`:character[]>;
type `control.remap` <struct<`a.x`:double, `a.y`:double>, character, character> => struct<`a.x`:double, `a.y`:double, `b.x`:double, `b.y`:double>;
type `decompress.data.frame` <struct<`rows`:struct<`V1`:integer[], `V2`:integer[], `V3`:integer[]>, `frequencies`:double[], `ordering`:integer[], `rownames`:character[]>> => struct<`V1`:integer[], `V2`:integer[], `V3`:integer[]>;
type `despace` <character> => character;
type `eval_lhs.formula` <language> => double;
type `EVL` <language> => double;
type `filter_rhs.formula` <language, any => any, character | null> => language;
type `forkTimeout` <language, double, language, null> => null | logical;
type `FUN` <double[], logical> => ^double[];
type `innermsg` <character> => null;
type `is.na.rle` <struct<`lengths`:integer[], `values`:^double[]>> => struct<`lengths`:integer[], `values`:logical[]>;
type `lapply.mcmc.list` <struct<`line1`:^double[], `line2`:^double[]>, any => any, null> => struct<`line1`:^double[], `line2`:^double[]>;
type `length.rle` <struct<`lengths`:integer[], `values`:double[]>> => double;
type `list_rhs.formula` <language> => tuple<symbol, symbol>;
type `log_mean_exp` <double[], logical> => double;
type `log_sum_exp` <double[], logical> => double;
type `lweighted.mean` <^double[], double[]> => double[];
type `lweighted.var` <^double[], double[]> => ^double[];
type `mean.rle` <struct<`lengths`:integer[], `values`:double[]>, logical, null> => double;
type `message_print` <integer[], null> => null;
type `msg` <character> => null;
type `msg2s` <character> => null;
type `msg3` <character> => null;
type `NVL` <null | language | symbol> => null | double[] | symbol;
type `NVL<-` <null | double, double> => double;
type `NVL2` <null | double, character, character> => character;
type `NVL3` <null | double, character | language, character> => character | double;
type `once` <symbol, double, double> => any => any;
type `order.data.frame` <struct<`V1`:integer[], `V2`:integer[], `V3`:integer[]>, logical, logical> => integer[];
type `order.default` <integer[], logical, logical> => integer[];
type `order.matrix` <^double[], logical, logical> => integer[];
type `persistEvalQ` <language, double, language, environment, environment, logical> => double;
type `rep.rle` <struct<`lengths`:integer[], `values`:double[]>, integer[], character, logical> => struct<`lengths`:integer[], `values`:double[]>;
type `rowweights.logwmatrix` <^double[], null> => double[];
type `rowweights<-.matrix` <^double[], null, double[]> => ^double[];
type `set.control.class` <character, struct<`a.x`:double, `a.y`:double>> => struct<`a.x`:double, `a.y`:double>;
type `sort.data.frame` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, logical, null> => struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>;
type `sum.rle` <struct<`lengths`:integer[], `values`:double[]>, logical> => double;
type `sweep_cols.matrix` <^double[], double[], logical> => ^double[];
type `sweep.mcmc.list` <struct<`line1`:^double[], `line2`:^double[]>, integer[], character, logical, null> => struct<`line1`:^double[], `line2`:^double[]>;
type `ult` <character[] | integer[] | language, double> => character | integer | language;
type `ult<-` <double[] | language, double, double | language> => double[] | language;
type `unwhich` <integer[], double> => logical[];
type `vector.namesmatch` <struct<`c`:double, `b`:double, `a`:double>, character[], null> => struct<`a`:double, `c`:double, `b`:double>;
