type `all_identical` <integer[] | list<character>> => logical;
type `all.rle` <..., logical> => logical;
type `any.rle` <..., logical> => logical;
type `append_rhs.formula` <class<`formula`>, class<`formula`> | list<class<`name`>>, logical> => class<`formula`>;
type `as.linwmatrix` <class<`logwmatrix`, `matrix`, `wmatrix`> | class<`matrix`>, ...> => class<`linwmatrix`, `matrix`, `wmatrix`>;
type `as.linwmatrix.logwmatrix` <class<`logwmatrix`, `matrix`, `wmatrix`>, ...> => class<`linwmatrix`, `matrix`, `wmatrix`>;
type `as.linwmatrix.matrix` <class<`matrix`>, null, ...> => class<`linwmatrix`, `matrix`, `wmatrix`>;
type `as.logwmatrix` <class<`linwmatrix`, `matrix`, `wmatrix`> | class<`matrix`>, ...> => class<`logwmatrix`, `matrix`, `wmatrix`>;
type `as.logwmatrix.linwmatrix` <class<`linwmatrix`, `matrix`, `wmatrix`>, ...> => class<`logwmatrix`, `matrix`, `wmatrix`>;
type `as.logwmatrix.matrix` <class<`matrix`>, null, ...> => class<`logwmatrix`, `matrix`, `wmatrix`>;
type `as.rle` <class<`rle`>> => class<`rle`>;
type `as.rle.rle` <class<`rle`>> => class<`rle`>;
type `binop.rle` <class<`rle`>, class<`rle`>, class<`function`>> => class<`rle`>;
type `.check_lengths` <class<`rle`>, class<`rle`>> => null;
type `colMeans.mcmc.list` <class<`mcmc.list`>, ...> => double[];
type `compact.rle` <class<`rle`>> => class<`rle`>;
type `compress.data.frame` <class<`data.frame`>> => list<class<`data.frame`> | double[] | character[]>;
type `compress_rows` <class<`linwmatrix`, `matrix`, `wmatrix`> | class<`logwmatrix`, `matrix`, `wmatrix`>, ...> => (class<`linwmatrix`, `matrix`, `wmatrix`> | class<`logwmatrix`, `matrix`, `wmatrix`>);
type `compress_rows.linwmatrix` <class<`linwmatrix`, `matrix`, `wmatrix`>, ...> => class<`linwmatrix`, `matrix`, `wmatrix`>;
type `compress_rows.logwmatrix` <class<`logwmatrix`, `matrix`, `wmatrix`>, ...> => class<`logwmatrix`, `matrix`, `wmatrix`>;
type `control.remap` <class<`control.list`, `list`, `test`>, character, character> => class<`control.list`, `list`, `test`>;
type `c.rle` <...> => class<`rle`>;
type `decompress.data.frame` <list<class<`data.frame`> | double[] | character[]>> => class<`data.frame`>;
type `.Deprecate_method` <character, character> => (character | null);
type `.Deprecate_once` <...> => (character | null);
type `despace` <character> => character;
type `ERRVL` <...> => double;
type `eval_lhs.formula` <class<`formula`>> => double;
type `EVL` <...> => double;
type `filter` <character[]> => logical[];
type `filter_rhs.formula` <class<`formula`>, class<`function`>, ...> => class<`formula`>;
type `forkTimeout` <any, double, any, null> => (logical | null);
type `FUN` <class<`rle`>> => class<`rle`> | <integer> => (class<`linwmatrix`, `matrix`, `wmatrix`> | class<`logwmatrix`, `matrix`, `wmatrix`>) | <double[], logical> => double;
type `innermsg` <...> => null;
type `is.na.rle` <class<`rle`>> => class<`rle`>;
type `lapply.mcmc.list` <class<`mcmc.list`>, class<`function`>, ...> => class<`mcmc.list`>;
type `length.rle` <class<`rle`>> => double;
type `list_rhs.formula` <class<`formula`>> => list<class<`name`>>;
type `log_mean_exp` <double[], logical> => double;
type `log_sum_exp` <double[], logical> => double;
type `lweighted.mean` <class<`matrix`> | double[], double[]> => double[];
type `lweighted.var` <class<`matrix`> | double[], double[]> => (class<`matrix`> | double);
type `mean.rle` <class<`rle`>, logical, ...> => double;
type `message_print` <..., null> => null;
type `msg` <...> => null;
type `msg2s` <...> => null;
type `msg3` <...> => null;
type `NVL` <...> => (class<`name`> | double[] | null);
type `NVL<-` <double | null, double> => double;
type `NVL2` <double | null, character, character> => character;
type `NVL3` <null | double, any, character> => (character | double);
type `once` <any, double, double> => class<`function`>;
type `order` <..., logical, logical> => integer[];
type `order.data.frame` <..., logical, logical> => integer[];
type `order.default` <..., logical, logical> => integer[];
type `order.matrix` <..., logical, logical> => integer[];
type `paste.and` <double | integer[] | null, character, character, character> => character;
type `persistEval` <class<`{`> | class<`if`>, double, class<`{`> | class<`call`>, environment, environment, logical> => double;
type `persistEvalQ` <any, double, any, environment, environment, logical> => double;
type `.recurse_summation` <class<`call`> | class<`name`>, double> => list<class<`name`>>;
type `rep.rle` <class<`rle`>, ..., character, logical> => class<`rle`>;
type `^.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `<=.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `<.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `==.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `>=.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `>.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `|.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `-.rle` <class<`rle`>, any> => class<`rle`>;
type `!=.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `!.rle` <class<`rle`>> => class<`rle`>;
type `/.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `*.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `&.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `%/%.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `%%.rle` <class<`rle`>, class<`rle`>> => class<`rle`>;
type `+.rle` <class<`rle`>, any> => class<`rle`>;
type `rowweights` <class<`logwmatrix`, `matrix`, `wmatrix`>, ...> => double[];
type `rowweights<-` <class<`matrix`>, ..., double[]> => class<`linwmatrix`, `matrix`, `wmatrix`>;
type `rowweights.logwmatrix` <class<`logwmatrix`, `matrix`, `wmatrix`>, ...> => double[];
type `rowweights<-.matrix` <class<`matrix`>, ..., double[]> => class<`linwmatrix`, `matrix`, `wmatrix`>;
type `.run_mul` <integer, integer> => integer;
type `set.control.class` <character, list<double>> => class<`control.list`, `list`, `test`>;
type `SnD` <class<`call`> | class<`name`>> => (class<`call`> | class<`name`> | null);
type `sort.data.frame` <class<`data.frame`>, logical, ...> => class<`data.frame`>;
type `sum.rle` <..., logical> => double;
type `sweep_cols.matrix` <class<`matrix`>, double[], logical> => class<`matrix`>;
type `sweep.mcmc.list` <class<`mcmc.list`>, integer[], character, logical, ...> => class<`mcmc.list`>;
type `ult` <character[] | class<`formula`> | integer[], double> => (character | class<`call`> | integer);
type `ult<-` <class<`formula`> | double[], double, class<`call`> | double> => (class<`formula`> | double[]);
type `unwhich` <integer[], double> => logical[];
type `vector.namesmatch` <list<double>, character[], null> => list<double>;
type `[<-.wmatrix` <class<`logwmatrix`, `matrix`, `wmatrix`>, double, any, ..., integer[]> => class<`logwmatrix`, `matrix`, `wmatrix`>;
type `[.wmatrix` <class<`linwmatrix`, `matrix`, `wmatrix`> | class<`logwmatrix`, `matrix`, `wmatrix`>, any, any, ..., logical> => (class<`linwmatrix`, `matrix`, `wmatrix`> | class<`logwmatrix`, `matrix`, `wmatrix`>);
