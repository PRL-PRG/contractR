type `$` <logical> => logical | <any> => logical | <double> => double | <double[]> => character[] | <double[]> => (character[] | double[]) | <double> => class<`data.frame`, `data.table`> | <double[]> => double[] | <class<`ParamSet`, `R6`>, list<class<`R6`, `Sampler`, `Sampler1D`, `Sampler1DUnif`>>> => list<class<`R6`, `Sampler`, `Sampler1D`, `Sampler1DUnif`>> | <character, class<`function`>> => (character[] | double[] | list<character[]>) | <character> => logical | <double> => logical | <character[] | double[]> => class<`data.frame`, `data.table`> | <logical> => (class<`NoDefault`, `R6`> | class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`> | class<`Param`, `ParamInt`, `R6`> | class<`ParamSet`, `R6`>) | <double> => logical | <double> => class<`Design`, `R6`> | <any> => logical | <list<double | character>> => logical | <character, list<any>, double | class<`NoDefault`, `R6`>, character[]> => (double | null) | <class<`ParamSet`, `R6`>> => class<`ParamSet`, `R6`> | <double> => class<`data.frame`, `data.table`> | <any> => logical | <null, null, character | null> => character[] | <class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`>> => class<`ParamSet`, `R6`> | <class<`Param`, `ParamInt`, `R6`>> => class<`ParamSet`, `R6`>;
type `assert_id` <character> => character;
type `assert_param` <class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`>, character, logical, logical> => (class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`>);
type `assert_param_set` <class<`ParamSet`, `R6`>, character, logical, logical, logical> => class<`ParamSet`, `R6`>;
type `copy_slice` <list<any>, list<environment>, list<list<environment>>, logical> => null;
type `filter` <character[]> => logical[];
type `fun` <any, character> => logical;
type `FUN` <class<`R6`, `Sampler`, `Sampler1D`, `Sampler1DUnif`>> => class<`data.frame`, `data.table`> | <character, character[]> => logical | <character[] | class<`data.frame`, `data.table`> | class<`function`> | class<`NoDefault`, `R6`> | double | null | list<any>> => (character[] | class<`data.frame`, `data.table`> | class<`function`> | class<`NoDefault`, `R6`> | double | null | list<any>) | <class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`>> => (class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`>) | <class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`> | class<`Param`, `ParamInt`, `R6`>> => (class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`> | class<`Param`, `ParamInt`, `R6`>) | <double> => double[] | <class<`R6`, `Sampler`, `Sampler1D`, `Sampler1DUnif`>> => character | <character> => (character[] | double[]);
type `generate_design_grid` <class<`ParamSet`, `R6`>, double, null> => class<`Design`, `R6`>;
type `generate_design_lhs` <class<`ParamSet`, `R6`>, double, null> => class<`Design`, `R6`>;
type `generate_design_random` <class<`ParamSet`, `R6`>, double> => class<`Design`, `R6`>;
type `is_method` <character[] | class<`data.frame`, `data.table`> | class<`function`> | class<`NoDefault`, `R6`> | double | null | list<any>, list<environment>> => logical;
type `is_nodefault` <class<`NoDefault`, `R6`> | double> => logical;
type `list2env2` <list<any>, environment, any, any, any, logical> => environment;
type `makeAssertionFunction` <double, any, null> => double;
type `make_first_new_slice` <list<any>, logical> => list<environment>;
type `make_new_slice` <any, environment, environment> => list<environment>;
type `remap_func_envs` <list<any>, list<list<environment>>> => list<any>;
type `.subset2` <class<`ParamSet`, `R6`>> => list<class<`R6`, `Sampler`, `Sampler1D`, `Sampler1DUnif`>> | <list<any>> => character | <character, character[], class<`NoDefault`, `R6`>, list<any>, character[]> => null | <class<`Param`, `ParamDbl`, `R6`> | class<`Param`, `ParamFct`, `R6`>> => class<`ParamSet`, `R6`> | <character, list<any>, logical, character[]> => logical | <class<`ParamSet`, `R6`>, class<`data.frame`, `data.table`>, logical> => (class<`data.frame`, `data.table`> | null) | <character, double, character[], null> => double | <character, double, double, list<any>, double | class<`NoDefault`, `R6`>, character[]> => (double | null);
