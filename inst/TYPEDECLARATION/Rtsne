type `.check_tsne_params` <integer, double, double, double, double, logical, ? ^double[], integer, integer, double, double, double, double> => struct<`no_dims`:double, `perplexity`:double, `theta`:double, `max_iter`:double, `verbose`:logical, `init`:logical, `Y_in`:^double[], `stop_lying_iter`:integer, `mom_switch_iter`:integer, `momentum`:double, `final_momentum`:double, `eta`:double, `exaggeration_factor`:double>;
type `.clear_unwanted_params` <struct<`no_dims`:double, `perplexity`:double, `theta`:double, `max_iter`:double, `verbose`:logical, `init`:logical, `Y_in`:^double[], `stop_lying_iter`:integer, `mom_switch_iter`:integer, `momentum`:double, `final_momentum`:double, `eta`:double, `exaggeration_factor`:double>> => struct<`perplexity`:double, `theta`:double, `max_iter`:double, `stop_lying_iter`:integer, `mom_switch_iter`:integer, `momentum`:double, `final_momentum`:double, `eta`:double, `exaggeration_factor`:double>;
type `filter` <character[]> => logical[];
type `is.wholenumber` <double, double> => logical;
type `normalize_input` <^double[]> => ^double[];
type `normalize_input_cpp` <^double[]> => ^double[];
type `Rtsne.data.frame` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, double> => struct<`N`:integer, `Y`:^double[], `costs`:double[], `itercosts`:double[], `origD`:integer, `perplexity`:double, `theta`:double, `max_iter`:double, `stop_lying_iter`:integer, `mom_switch_iter`:integer, `momentum`:double, `final_momentum`:double, `eta`:double, `exaggeration_factor`:double>;
type `Rtsne.default` <^double[], double, double, double, double, logical, logical, logical, double, logical, logical, ? ^double[], logical, logical, logical, integer, integer, double, double> => struct<`N`:integer, `Y`:^double[], `costs`:double[], `itercosts`:double[], `perplexity`:double, `theta`:double, `max_iter`:double, `stop_lying_iter`:integer, `mom_switch_iter`:integer, `momentum`:double, `final_momentum`:double, `eta`:double, `exaggeration_factor`:double>;
type `Rtsne.dist` <double[], double, logical> => struct<`N`:integer, `Y`:^double[], `costs`:double[], `itercosts`:double[], `perplexity`:double, `theta`:double, `max_iter`:double, `stop_lying_iter`:integer, `mom_switch_iter`:integer, `momentum`:double, `final_momentum`:double, `eta`:double, `exaggeration_factor`:double>;
