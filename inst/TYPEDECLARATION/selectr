type `css_to_xpath` <character, character, character> => character;
type `first_class_name` <class<`ClassSelector`, `R6`> | class<`CombinedSelector`, `R6`> | class<`Element`, `R6`> | class<`Hash`, `R6`> | class<`Pseudo`, `R6`> | class<`R6`, `Selector`>> => character;
type `formatNS` <character[]> => character[];
type `formatNSPrefix` <character[], character> => character;
type `is_safe_name` <character> => logical;
type `match_hash` <character> => ^integer[];
type `match_ident` <character> => ^integer[];
type `match_number` <character> => ^integer[];
type `match_whitespace` <character> => ^integer[];
type `parse` <character> => list<class<`R6`, `Selector`>>;
type `parse_selector` <class<`R6`, `TokenStream`>> => (list<class<`ClassSelector`, `R6`> | null> | list<class<`CombinedSelector`, `R6`> | null> | list<class<`Element`, `R6`> | null> | list<class<`Pseudo`, `R6`> | null>);
type `parse_selector_group` <class<`R6`, `TokenStream`>> => list<class<`R6`, `Selector`>>;
type `parse_simple_selector` <class<`R6`, `TokenStream`>, logical> => (list<class<`ClassSelector`, `R6`> | null> | list<class<`Element`, `R6`> | null> | list<class<`Hash`, `R6`> | null> | list<class<`Pseudo`, `R6`> | null>);
type `querySelector` <class<`XMLAbstractDocument`, `XMLInternalDocument`> | class<`xml_document`, `xml_node`>, character, character | null, ...> => (class<`XMLAbstractNode`, `XMLInternalElementNode`, `XMLInternalNode`> | class<`xml_node`> | null);
type `querySelectorAll` <class<`xml_document`, `xml_node`> | class<`XMLAbstractDocument`, `XMLInternalDocument`> | class<`XMLAbstractNode`, `XMLInternalElementNode`, `XMLInternalNode`>, character, character[] | null, ...> => (class<`xml_nodeset`> | class<`XMLNodeSet`>);
type `querySelectorAllNS` <class<`xml_document`, `xml_node`> | class<`XMLAbstractDocument`, `XMLInternalDocument`>, character, character[], character, ...> => (class<`xml_nodeset`> | class<`XMLNodeSet`>);
type `querySelectorAllNS.XMLInternalDocument` <class<`XMLAbstractDocument`, `XMLInternalDocument`>, character, character[], character, ...> => class<`XMLNodeSet`>;
type `querySelectorAllNS.xml_node` <class<`xml_document`, `xml_node`>, character, character[], character, ...> => class<`xml_nodeset`>;
type `querySelectorAll.XMLInternalDocument` <class<`XMLAbstractDocument`, `XMLInternalDocument`>, character, character[] | null, ...> => class<`XMLNodeSet`>;
type `querySelectorAll.XMLInternalNode` <class<`XMLAbstractNode`, `XMLInternalElementNode`, `XMLInternalNode`>, character, character[] | null, ...> => class<`XMLNodeSet`>;
type `querySelectorAll.xml_node` <class<`xml_document`, `xml_node`>, character, character[] | null, ...> => class<`xml_nodeset`>;
type `querySelectorNS` <class<`XMLAbstractDocument`, `XMLInternalDocument`> | class<`xml_document`, `xml_node`>, character, character, character, ...> => (class<`XMLAbstractNode`, `XMLInternalElementNode`, `XMLInternalNode`> | class<`xml_node`>);
type `querySelectorNS.XMLInternalDocument` <class<`XMLAbstractDocument`, `XMLInternalDocument`>, character, character, character, ...> => class<`XMLAbstractNode`, `XMLInternalElementNode`, `XMLInternalNode`>;
type `querySelectorNS.xml_node` <class<`xml_document`, `xml_node`>, character, character, character, ...> => class<`xml_node`>;
type `querySelector.XMLInternalDocument` <class<`XMLAbstractDocument`, `XMLInternalDocument`>, character, character | null, ...> => (class<`XMLAbstractNode`, `XMLInternalElementNode`, `XMLInternalNode`> | null);
type `querySelector.xml_node` <class<`xml_document`, `xml_node`>, character, character | null, ...> => (class<`xml_node`> | null);
type `reg_s3_method` <character, character, character, class<`function`>> => null;
type `sub_simple_escape` <character> => character;
type `sub_unicode_escape` <character> => character;
type `token_equality` <class<`EOFToken`, `R6`, `Token`> | class<`R6`, `Token`>, character, character | null> => logical;
type `tokenize` <character> => list<class<`R6`, `Token`> | class<`EOFToken`, `R6`, `Token`>>;
type `validateNS` <character[] | class<`xml_namespace`>> => null;
type `xpath_literal` <character> => character;
