type `::` <^double[] | class<`factor`> | character[] | class<`haven_labelled`> | class<`factor`, `ordered`> | class<`data.frame`> | list<^double[]>, any, any, any, any, logical> => (character[] | null | list<character[] | null | character[] | character[] | null>) | <^double[] | class<`factor`> | class<`haven_labelled`> | character[] | class<`data.frame`>, logical> => (null | character[] | ^double[] | list<^double[] | ^double[] | null>) | <^double[] | class<`data.frame`> | class<`haven_labelled`>, ..., null | double[]> => (^double[] | class<`data.frame`> | class<`haven_labelled`>) | <class<`factor`> | ^double[] | class<`data.frame`> | character[] | class<`factor`, `ordered`> | class<`haven_labelled`> | list<^double[]>, ..., any, null | character> => (null | character[]) | <^double[] | character[] | class<`data.frame`> | class<`factor`> | class<`haven_labelled`>, ..., null | character[] | ^double[] | list<character[]>, any, any, logical> => (^double[] | character[] | class<`data.frame`> | class<`factor`> | class<`haven_labelled`>);
type `add_labels` <^double[] | class<`data.frame`> | class<`haven_labelled`>, ..., null | double[]> => (^double[] | class<`data.frame`> | class<`haven_labelled`>);
type `add_labels_helper` <class<`haven_labelled`> | ^double[], null | double[]> => (class<`haven_labelled`> | ^double[]);
type `as_factor` <class<`data.frame`> | ^double[], ...> => (class<`data.frame`> | class<`factor`>);
type `as_factor.data.frame` <class<`data.frame`>, ..., logical> => class<`data.frame`>;
type `as_factor.default` <^double[], logical, ...> => class<`factor`>;
type `as_label` <class<`data.frame`> | character[] | class<`factor`> | class<`haven_labelled`> | ^double[], ...> => (class<`data.frame`> | class<`factor`> | ^double[]);
type `as_label.data.frame` <class<`data.frame`>, ..., logical, logical, null, logical, logical, logical> => class<`data.frame`>;
type `as_label.default` <character[] | class<`factor`> | class<`haven_labelled`> | ^double[], logical, logical, null | character, logical, logical, logical, ...> => (class<`factor`> | ^double[]);
type `as_label_helper` <character[] | class<`factor`> | class<`haven_labelled`> | ^double[], any, logical, null | character, logical, logical, logical> => (class<`factor`> | ^double[]);
type `as_labelled` <^double[], logical, logical, logical> => (class<`haven_labelled`> | class<`haven_labelled`, `numeric`> | double[]);
type `as_labelled.default` <^double[], logical, logical, logical> => (class<`haven_labelled`> | class<`haven_labelled`, `numeric`> | double[]);
type `as_labelled_helper` <^double[], any, any, any> => (class<`haven_labelled`> | class<`haven_labelled`, `numeric`> | double[]);
type `as_numeric` <class<`data.frame`> | class<`factor`> | class<`factor`, `ordered`>, ...> => (class<`data.frame`> | ^double[]);
type `as_numeric.data.frame` <class<`data.frame`>, ..., null, logical, logical> => class<`data.frame`>;
type `as_numeric.default` <class<`factor`> | ^double[] | class<`factor`, `ordered`>, null | double, any, logical, ...> => ^double[];
type `as_numeric_helper` <class<`factor`> | ^double[] | class<`factor`, `ordered`>, any, any, any> => ^double[];
type `convert_case` <character[] | null, character | null, logical, ...> => (character[] | null);
type `copy_labels` <class<`data.frame`>, null | class<`data.frame`>, ...> => class<`data.frame`>;
type `drop_labels` <class<`haven_labelled`> | ^double[], ..., logical> => (class<`haven_labelled`> | ^double[]);
type `drop_labels_helper` <class<`haven_labelled`> | ^double[], logical> => (class<`haven_labelled`> | ^double[]);
type `fill_labels` <class<`haven_labelled`> | ^double[], ...> => (class<`haven_labelled`> | ^double[]);
type `fill_labels_helper` <class<`haven_labelled`> | ^double[]> => (class<`haven_labelled`> | ^double[]);
type `FUN` <^double[] | character[] | class<`factor`> | class<`haven_labelled`> | class<`factor`, `ordered`>, any, any, any, any, logical> => (character[] | null) | <class<`haven_labelled`> | ^double[] | class<`factor`>, any, any> => (character[] | double[] | null) | <^double[] | class<`haven_labelled`> | class<`factor`> | character[], any> => (^double[] | null | character[]);
type `.get_dot_data` <character[] | class<`data.frame`> | class<`factor`> | class<`haven_labelled`> | ^double[], any, logical> => (character[] | class<`data.frame`> | class<`factor`> | class<`haven_labelled`> | ^double[]);
type `get_label` <class<`factor`> | ^double[] | class<`data.frame`> | character[] | class<`factor`, `ordered`> | class<`haven_labelled`> | list<^double[]>, ..., any, null | character> => (null | character[]);
type `get_label.data.frame` <class<`data.frame`>, ..., any, null | character> => character[];
type `get_label.default` <class<`factor`> | ^double[] | character[] | class<`factor`, `ordered`> | class<`haven_labelled`>, ..., null | character, null> => (character | null);
type `get_label.list` <list<^double[]>, ..., null, null> => character[];
type `get_labels` <^double[] | class<`factor`> | character[] | class<`haven_labelled`> | class<`factor`, `ordered`> | class<`data.frame`> | list<^double[]>, any, any, any, any, logical> => (character[] | null | list<character[] | null | character[] | character[] | null>);
type `get_labels.data.frame` <class<`data.frame`>, logical, null | character, logical, logical, logical> => list<null | character[] | character[] | null | character[]>;
type `get_labels.default` <character[] | class<`factor`> | class<`haven_labelled`> | ^double[] | class<`factor`, `ordered`>, any, any, any, any, logical> => (character[] | null);
type `get_labels_helper` <^double[] | character[] | class<`factor`> | class<`haven_labelled`> | class<`factor`, `ordered`>, any, any, any, any, logical> => (character[] | null);
type `get_labels.list` <list<^double[]>, logical, null, logical, logical, logical> => list<character[]>;
type `get_na` <^double[] | class<`factor`> | class<`haven_labelled`> | character[] | class<`data.frame`>, logical> => (null | character[] | ^double[] | list<^double[] | ^double[] | null>);
type `get_na.data.frame` <class<`data.frame`>, logical> => list<^double[] | ^double[] | null>;
type `get_na.default` <class<`factor`> | class<`haven_labelled`> | ^double[] | character[], logical> => (character[] | ^double[] | null);
type `get_na_helper` <^double[] | class<`haven_labelled`> | class<`factor`> | character[], any> => (^double[] | null | character[]);
type `get_value_range` <class<`factor`> | class<`haven_labelled`> | ^double[]> => list<double>;
type `get_values` <class<`haven_labelled`> | ^double[] | class<`factor`> | class<`data.frame`>, logical, any> => (character[] | double[] | null | list<character[]>);
type `get_values.data.frame` <class<`data.frame`>, logical, logical> => list<character[]>;
type `get_values.default` <class<`haven_labelled`> | ^double[] | class<`factor`>, logical, any> => (character[] | double[] | null);
type `get_values_helper` <class<`haven_labelled`> | ^double[] | class<`factor`>, any, any> => (character[] | double[] | null);
type `isempty` <character | ^double[] | null, logical> => logical;
type `is_labelled` <class<`factor`> | ^double[]> => logical;
type `.is_num_chr` <character[] | double[]> => logical;
type `.is_num_fac` <character[] | double[]> => logical;
type `is.num.fac` <class<`factor`> | class<`factor`, `ordered`>> => logical;
type `label_to_colnames` <class<`data.frame`>> => class<`data.frame`>;
type `obj_has_name` <class<`data.frame`>, character> => logical;
type `prepare.labels` <character[], logical[], character> => character[];
type `remove_all_labels` <class<`data.frame`> | class<`factor`> | integer[]> => (class<`data.frame`> | class<`factor`> | integer[]);
type `remove_all_labels.data.frame` <class<`data.frame`>> => class<`data.frame`>;
type `remove_all_labels.default` <class<`factor`> | integer[]> => (class<`factor`> | integer[]);
type `remove_all_labels_helper` <class<`factor`> | integer[]> => (class<`factor`> | integer[]);
type `remove_label` <class<`data.frame`>, ...> => class<`data.frame`>;
type `remove_labels` <class<`haven_labelled`> | ^double[], ..., null | double | character[]> => (class<`haven_labelled`> | ^double[]);
type `remove_labels_helper` <class<`haven_labelled`> | ^double[], null | double | character[]> => (class<`haven_labelled`> | ^double[]);
type `replace_labels` <class<`haven_labelled`> | ^double[], ..., null> => (class<`haven_labelled`> | ^double[]);
type `response_labels` <class<`lm`>, null, logical, logical, ...> => character;
type `set_label` <class<`data.frame`> | class<`factor`> | ^double[] | list<integer[]>, character[] | null> => (class<`data.frame`> | class<`factor`> | ^double[] | list<integer[]>);
type `set_label<-` <class<`factor`> | integer[], character> => (class<`factor`> | integer[]);
type `set_label<-.default` <class<`factor`> | integer[], character> => (class<`factor`> | integer[]);
type `set_labels` <^double[] | character[] | class<`data.frame`> | class<`factor`> | class<`haven_labelled`>, ..., null | character[] | ^double[] | list<character[]>, any, any, logical> => (^double[] | character[] | class<`data.frame`> | class<`factor`> | class<`haven_labelled`>);
type `set_labels_helper` <character[] | class<`factor`> | class<`haven_labelled`> | ^double[], character[] | ^double[] | null, any, any, any, null | character> => (character[] | class<`factor`> | class<`haven_labelled`> | ^double[]);
type `set_na` <class<`data.frame`> | class<`factor`> | ^double[], ..., character[] | double[] | list<double[]>, logical, logical> => (class<`data.frame`> | class<`factor`> | ^double[]);
type `set_na_helper` <class<`factor`> | ^double[], double[] | character[] | list<double[]>, any, logical, any> => (class<`factor`> | ^double[]);
type `string_contains` <character, character[]> => integer[];
type `string_starts_with` <character, character[]> => integer[];
type `term_labels` <class<`lm`>, logical, null, character[], ...> => character[];
type `tidy_labels` <integer[], ..., character, logical> => integer[];
type `tidy_labels_helper` <integer[], any, logical> => integer[];
type `to_fac_helper` <^double[], logical> => class<`factor`>;
type `val_labels` <class<`data.frame`>, ..., logical, logical, logical> => class<`data.frame`>;
type `var_labels` <class<`data.frame`>, ...> => class<`data.frame`>;
type `zap_labels` <class<`data.frame`> | ^double[], ...> => (class<`data.frame`> | ^double[]);
type `zap_labels_helper` <^double[]> => ^double[];
type `zap_na_tags` <class<`haven_labelled`> | ^double[], ...> => (class<`haven_labelled`> | ^double[]);
type `zap_na_tags_helper` <class<`haven_labelled`> | ^double[]> => (class<`haven_labelled`> | ^double[]);
type `zap_unlabelled` <^double[], ...> => ^double[];
type `zap_unlabelled_helper` <^double[]> => ^double[];
