type `cor2pcor` <class<`matrix`> | class<`shrinkage`>, any> => class<`matrix`>;
type `cor.shrink` <class<`matrix`>, any, any, logical> => class<`shrinkage`>;
type `cov.shrink` <class<`matrix`>, any, any, any, logical> => class<`shrinkage`>;
type `crossprod.powcor.shrink` <class<`matrix`>, double[], double, double, any, logical> => class<`shrinkage`>;
type `decompose.cov` <class<`matrix`>> => list<class<`matrix`> | double[]>;
type `decompose.invcov` <class<`matrix`>> => list<class<`matrix`> | double[]>;
type `estimate.lambda` <class<`matrix`>, any, logical> => double;
type `estimate.lambda.var` <class<`matrix`>, any, logical> => double;
type `fast.svd` <class<`matrix`> | class<`shrinkage`>, any> => list<double[] | class<`matrix`> | double | class<`matrix`>>;
type `filter` <character[]> => logical[];
type `invcor.shrink` <class<`matrix`>, any, any, logical> => class<`shrinkage`>;
type `invcov.shrink` <class<`matrix`>, any, any, any, logical> => class<`shrinkage`>;
type `is.positive.definite` <class<`matrix`> | class<`shrinkage`>, any, character[]> => logical;
type `make.positive.definite` <class<`matrix`>, any> => class<`matrix`>;
type `mpower` <class<`matrix`> | class<`shrinkage`>, double, logical, any> => class<`matrix`>;
type `nsmall.svd` <class<`matrix`>, any> => list<double[] | class<`matrix`>>;
type `pcor2cor` <class<`matrix`>, any> => class<`matrix`>;
type `pcor.shrink` <class<`matrix`>, any, any, logical> => class<`shrinkage`>;
type `positive.svd` <class<`matrix`> | class<`shrinkage`>, any> => list<double[] | class<`matrix`> | double | class<`matrix`>>;
type `powcor.shrink` <class<`matrix`>, double, any, any, logical> => class<`shrinkage`>;
type `pseudoinverse` <class<`matrix`> | class<`shrinkage`>, any> => class<`matrix`>;
type `pvar.shrink` <class<`matrix`>, any, any, any, logical> => double[];
type `pvt.check.w` <any, integer> => double[];
type `pvt.cppowscor` <class<`matrix`>, class<`matrix`>, double, double, any, logical> => class<`shrinkage`>;
type `pvt.powscor` <class<`matrix`>, double, any, any, logical> => class<`shrinkage`>;
type `pvt.svar` <class<`matrix`>, any, any, logical> => class<`shrinkage`>;
type `rank.condition` <class<`matrix`> | class<`shrinkage`>, any> => list<double>;
type `rebuild.cov` <class<`matrix`>, double[]> => class<`matrix`>;
type `rebuild.invcov` <class<`matrix`>, double[]> => class<`matrix`>;
type `sm2vec` <class<`matrix`>, logical> => double[];
type `sm.index` <class<`matrix`>, logical> => class<`matrix`>;
type `var.shrink` <class<`matrix`>, any, any, logical> => class<`shrinkage`>;
type `vec2sm` <double[], logical, integer[] | null> => class<`matrix`>;
type `wt.moments` <class<`matrix`>, any> => list<double[]>;
type `wt.scale` <class<`matrix`>, any, logical, logical> => class<`matrix`>;
