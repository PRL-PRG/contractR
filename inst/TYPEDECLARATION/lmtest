type `bgtest` <class<`formula`>, double, null, character[], class<`mts`, `ts`> | list<any>, double> => class<`bgtest`, `htest`>;
type `bptest` <class<`formula`>, class<`formula`> | null, logical, class<`mts`, `ts`> | class<`matrix`, `mts`, `ts`> | list<any>> => class<`htest`>;
type `coef0` <class<`lm`>, ...> => double[];
type `coefci` <class<`lm`>, null, double, class<`function`> | null, double | null, ...> => class<`matrix`>;
type `coefci.default` <class<`lm`>, null, double, class<`function`> | null, double | null, ...> => class<`matrix`>;
type `coeftest` <class<`bgtest`, `htest`> | class<`lm`>, null | class<`function`> | class<`matrix`>, null | double, ...> => class<`coeftest`>;
type `coeftest.default` <class<`bgtest`, `htest`> | class<`lm`>, null | class<`function`> | class<`matrix`>, null | double, ...> => class<`coeftest`>;
type `confint.coeftest` <class<`coeftest`>, null, double, ...> => class<`matrix`>;
type `coxtest` <class<`lm`>, class<`lm`>, any> => class<`anova`, `data.frame`>;
type `df.residual.bgtest` <class<`bgtest`, `htest`>, ...> => null;
type `df.residual.coeftest` <class<`coeftest`>, ...> => double;
type `dwtest` <class<`formula`>, null, character[], double, null, double, class<`data.frame`> | class<`matrix`, `mts`, `ts`> | class<`mts`, `ts`> | list<any>> => class<`htest`>;
type `encomptest` <class<`lm`>, class<`lm`>, any, null, ...> => class<`anova`, `data.frame`>;
type `filter` <character[]> => logical[];
type `FUN` <class<`logLik`>> => double | <integer> => (class<`zoo`> | class<`zoo`, `zooreg`>) | <character | class<`formula`> | class<`lm`> | double> => logical | <class<`lm`>> => integer | <class<`lm`>> => character | <class<`lm`>, ...> => integer | <integer> => (class<`zoo`> | class<`zoo`, `zooreg`>) | <class<`lm`>> => character | <integer> => double[];
type `gqtest` <class<`formula`>, double, double, character[], null, list<any>> => class<`htest`>;
type `grangertest` <class<`formula`> | class<`matrix`> | class<`mts`, `ts`> | class<`ts`>, ...> => class<`anova`, `data.frame`>;
type `grangertest.default` <class<`matrix`> | class<`mts`, `ts`> | class<`ts`>, any, double, class<`function`>, ...> => class<`anova`, `data.frame`>;
type `grangertest.formula` <class<`formula`>, class<`mts`, `ts`>, ...> => class<`anova`, `data.frame`>;
type `harvtest` <class<`formula`>, class<`formula`> | null, class<`matrix`, `mts`, `ts`> | class<`mts`, `ts`> | list<any>> => class<`htest`>;
type `hmctest` <class<`formula`>, double, null, logical, double, logical, list<any>> => class<`htest`>;
type `jtest` <class<`lm`>, class<`lm`>, any, null, ...> => class<`anova`, `data.frame`>;
type `lrtest` <class<`lm`>, ...> => class<`anova`, `data.frame`>;
type `lrtest.default` <class<`lm`>, ..., null> => class<`anova`, `data.frame`>;
type `modelCompare` <class<`lm`>, class<`lm`>, class<`function`>> => double[];
type `modelUpdate` <any, class<`lm`> | character | class<`formula`> | double> => class<`lm`> | <any, class<`lm`> | character | class<`formula`> | double> => class<`lm`>;
type `nobs0` <class<`lm`>, ...> => integer;
type `pdw` <double> => double;
type `raintest` <class<`formula`>, double, character | class<`formula`> | null, null, class<`matrix`, `mts`, `ts`> | class<`mts`, `ts`> | class<`data.frame`> | list<any>> => class<`htest`>;
type `rec.res` <class<`matrix`>, double[]> => double[];
type `reset` <class<`formula`>, double | integer[], character[], class<`matrix`, `mts`, `ts`> | class<`mts`, `ts`> | class<`data.frame`> | list<any>, null, ...> => class<`htest`>;
type `resettest` <class<`formula`>, double | integer[], character[], class<`matrix`, `mts`, `ts`> | class<`mts`, `ts`> | class<`data.frame`> | list<any>, null, ...> => class<`htest`>;
type `tlab` <class<`lm`>> => character[] | <class<`lm`>> => character[];
type `vcov.bgtest` <class<`bgtest`, `htest`>, ...> => class<`matrix`>;
type `waldtest` <class<`lm`>, ...> => class<`anova`, `data.frame`>;
type `waldtest.default` <class<`lm`>, ..., class<`function`> | null, character, null> => class<`anova`, `data.frame`>;
type `waldtest.lm` <class<`lm`>, ..., character[]> => class<`anova`, `data.frame`>;
