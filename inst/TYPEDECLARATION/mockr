type `%||%` <character[], language> => character[];
type `check_dots_env_` <struct<`some_func`:struct<`expr`:language, `env`:environment>, ``:struct<`expr`:language, `env`:environment>>, environment> => null;
type `check_mock` <character, environment> => null;
type `create_mock_env_` <???, struct<`some_func`:struct<`expr`:language, `env`:environment>>, environment, environment> => environment;
type `create_mock_env_with_old_funcs` <struct<`some_func`:any => any>, environment, environment> => environment;
type `evaluate_with_mock_env` <struct<``:struct<`expr`:language, `env`:environment>>, environment, environment> => double;
type `extract_mock` <character, struct<`expr`:language, `env`:environment>, environment> => struct<`name`:symbol, `new_value`:any => any>;
type `extract_mock_name` <character> => character;
type `extract_mocks` <struct<`some_func`:struct<`expr`:language, `env`:environment>>, environment> => struct<`some_func`:struct<`name`:symbol, `new_value`:any => any>>;
type `extract_new_funcs_` <struct<`some_func`:struct<`expr`:language, `env`:environment>>, environment> => struct<`some_func`:any => any>;
type `filter` <character[]> => logical[];
type `FUN` <character> => struct<`name`:symbol, `new_value`:any => any> | any => any;
type `get_code_dots` <struct<`some_func`:struct<`expr`:language, `env`:environment>, ``:struct<`expr`:language, `env`:environment>>> => struct<``:struct<`expr`:language, `env`:environment>>;
type `get_mock_dots` <struct<`some_func`:struct<`expr`:language, `env`:environment>, ``:struct<`expr`:language, `env`:environment>>> => struct<`some_func`:struct<`expr`:language, `env`:environment>>;
type `mock` <character, ???, ???, any => any> => struct<`name`:symbol, `new_value`:any => any>;
type `names2` <struct<`some_func`:struct<`expr`:language, `env`:environment>, ``:struct<`expr`:language, `env`:environment>>> => character[];
type `populate_env` <environment, struct<`some_func`:any => any> | struct<`extract_package_vignettes`:any => any, `analyze_package`:any => any, `extract_package_examples`:any => any, `extract_package_code`:any => any, `is_debug_enabled`:any => any, `log_debug`:any => any, `extract_package_tests`:any => any, `tester_func`:any => any, `some_other_func`:any => any, `is_chr_scalar`:any => any>> => tuple<any => any> | list<any => any>;
type `vlapply` <struct<`pname`:character, `extract_package_vignettes`:any => any, `analyze_package`:any => any, `extract_package_examples`:any => any, `extract_package_code`:any => any, `some_func`:any => any, `is_debug_enabled`:any => any, `t_dir`:character, `args`:character[], `log_debug`:any => any, `extract_package_tests`:any => any, `tester_func`:any => any, `some_other_func`:any => any, `is_chr_scalar`:any => any> | struct<`some_func`:environment, ``:environment>, any => any, ??? | environment, logical> => logical[];
type `with_mock` <language, environment, environment> => double;
type `with_mock_` <???, struct<`some_func`:struct<`expr`:language, `env`:environment>, ``:struct<`expr`:language, `env`:environment>>, environment, environment> => double;
