type `%||%` <character[], any> => character[];
type `check_dots_env_` <class<`lazy_dots`>, environment> => null;
type `check_mock` <character, environment> => null;
type `create_mock_env_` <..., class<`lazy_dots`>, environment, environment> => environment;
type `create_mock_env_with_old_funcs` <list<class<`function`>>, environment, environment> => environment;
type `evaluate_with_mock_env` <class<`lazy_dots`>, environment, environment> => double;
type `extract_mock` <character, class<`lazy`>, environment> => class<`mock`>;
type `extract_mock_name` <character> => character;
type `extract_mocks` <class<`lazy_dots`>, environment> => list<class<`mock`>>;
type `extract_new_funcs_` <class<`lazy_dots`>, environment> => list<class<`function`>>;
type `filter` <character[]> => logical[];
type `FUN` <character> => class<`mock`> | <character> => class<`function`>;
type `get_code_dots` <class<`lazy_dots`>> => class<`lazy_dots`>;
type `get_mock_dots` <class<`lazy_dots`>> => class<`lazy_dots`>;
type `mock` <character, any, any, class<`function`>> => class<`mock`>;
type `names2` <class<`lazy_dots`>> => character[];
type `populate_env` <environment, list<class<`function`>>> => list<class<`function`>>;
type `vlapply` <list<class<`function`> | character[] | environment>, class<`function`>, ..., logical> => logical[];
type `with_mock` <..., environment, environment> => double;
type `with_mock_` <..., class<`lazy_dots`>, environment, environment> => double;
