type `:::` <character, character> => list<double[] | double | integer[]>;
type `bit2int` <class<`matrix`> | double[]> => double;
type `bit2unitreal` <class<`matrix`>> => double;
type `bits.to.real` <class<`matrix`> | double[]> => double;
type `coll.test` <class<`function`>, double, double, double, double, logical, ...> => list<double[]>;
type `coll.test.sparse` <class<`function`>, double, double, double, double, ...> => class<`data.frame`>;
type `congruRand` <double, double, double, double, double, any> => double[];
type `filter` <character[]> => logical[];
type `freq.test` <double[], integer[], logical> => list<double[]>;
type `fun` <character, character> => list<any> | <any, any> => null;
type `FUN` <class<`matrix`> | double[]> => double | <character> => list<double[] | integer[] | double | double | integer[]> | <integer> => integer | <integer> => double | <...> => integer | <integer> => integer | <double> => double[] | <integer> => integer;
type `gap.test` <double[], double, double, logical> => list<double[]>;
type `get.description` < > => list<character[] | integer[]>;
type `getParameters` <character> => list<double[] | class<`matrix`> | double[] | class<`matrix`> | null>;
type `get.primes` <double> => integer[];
type `.getrandtoolboxEnv` <character, character> => list<double[] | double | integer[]>;
type `getWELLState` < > => class<`matrix`>;
type `halton` <double, double, logical, logical, logical, logical, character, double> => (class<`matrix`> | double[]);
type `hex.to.bits` <character> => double[];
type `int2bit` <double> => double[];
type `int.to.bits` <integer[]> => class<`matrix`>;
type `knuthTAOCP` <double, double> => (class<`matrix`> | double[]);
type `M0` <double> => class<`matrix`>;
type `M1` <double> => class<`matrix`>;
type `M2` <double, double> => class<`matrix`>;
type `M3` <double, double> => class<`matrix`>;
type `M4` <double[], double> => class<`matrix`>;
type `M5` <double, double[], double> => class<`matrix`>;
type `M6` <double, double, double, double[], double> => class<`matrix`>;
type `mask` <double, double, double> => double[];
type `mjrec` <class<`matrix`>> => double[];
type `MTemp` <double[], double[], double> => class<`matrix`>;
type `order.test` <double[], double, logical> => list<double[]>;
type `permut` <double> => class<`matrix`>;
type `poker.test` <double[], double, logical> => list<double[]>;
type `put.description` <list<character[] | integer[]>> => null;
type `rand` <double, double, double, logical, double, logical> => double[];
type `rngWELLScriptR` <double, class<`matrix`>, character, logical> => (double[] | list<double[] | class<`matrix`>>);
type `routine` < > => integer | < > => integer;
type `serial.test` <double[], double, logical> => list<double[]>;
type `set.generator` <character, null, double | null, ..., logical> => null;
type `.setrandtoolboxEnv` <...> => null;
type `setSeed` <double> => null;
type `SFMT` <double, double, double, logical, double, logical> => double[];
type `sobol` <double | integer[], double, logical, double, double, logical, logical, character, double> => (class<`matrix`> | double[]);
type `sobol.basic` <double, double[], double, class<`matrix`> | double[], logical, character[]> => double[];
type `sobol.directions` <any, double, class<`matrix`>, double, logical> => class<`matrix`>;
type `sobol.R` <double, double, logical> => class<`matrix`>;
type `stirling` <double> => double[];
type `torus` <double, double, any, logical, logical, logical, logical, double> => (class<`matrix`> | double[]);
type `WELL` <double, double, double, logical, character> => double[];
