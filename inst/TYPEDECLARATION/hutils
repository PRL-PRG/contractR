type `%<->%` <any, any> => null;
type `ahull` <any, double[], double[], double, double, character, logical> => class<`data.frame`, `data.table`>;
type `all_same_sign` <character | null | ^double[]> => (logical | null);
type `any_grepl` <character[], character, logical, logical, logical, logical> => logical;
type `areTrueFalse` <...> => logical[];
type `average_bearing` <double, double, character | double | null> => double;
type `average_bearing_n` <integer[]> => double;
type `check_TF` <logical> => null;
type `coalesce` <^double[], ...> => double[];
type `definitely_sorted` <class<`data.frame`, `data.table`>, any, logical, any, any> => logical;
type `drop_col` <class<`data.frame`, `data.table`>, character, logical> => class<`data.frame`, `data.table`>;
type `drop_constant_cols` <class<`data.frame`, `data.table`>, logical> => class<`data.frame`, `data.table`>;
type `drop_grep` <class<`data.frame`, `data.table`>, character, ..., logical> => class<`data.frame`, `data.table`>;
type `duplicated_rows` <class<`data.frame`, `data.table`>, character[], logical, logical, logical, logical> => class<`data.frame`, `data.table`>;
type `haversine_distance` <double, double, double, double> => double;
type `%implies%` <logical[], logical[]> => logical[];
type `longest_prefix` <character[], null, logical, logical> => character;
type `longest_suffix` <character[], null, logical, logical> => character;
type `mutate_ntile` <class<`data.frame`, `data.table`>, character, double, null, character | null, null | character, null, logical> => class<`data.frame`, `data.table`>;
type `mutate_other` <class<`data.frame`, `data.table`>, character, double, any, null, character, double, logical> => class<`data.frame`, `data.table`>;
type `ngrep` <character, character[], logical, ...> => (character[] | integer[]);
type `%notchin%` <character, character[]> => logical;
type `%pin%` <character[], character[]> => logical[];
type `RQ` <character, null, class<`data.frame`, `data.table`>> => class<`data.frame`, `data.table`>;
type `samp` <double | integer[], double, logical, logical, null> => double[];
type `select_grep` <class<`data.frame`, `data.table`>, character, character | null, character | null, logical, logical, logical, logical> => class<`data.frame`, `data.table`>;
type `selector` <class<`data.frame`, `data.table`>, ..., null, logical, logical> => class<`data.frame`, `data.table`>;
type `select_which` <class<`data.frame`, `data.table`>, class<`function`>, character, logical> => class<`data.frame`, `data.table`>;
type `set_cols_first` <class<`data.frame`, `data.table`>, character, logical> => class<`data.frame`, `data.table`>;
type `set_cols_last` <class<`data.frame`, `data.table`>, character, logical> => class<`data.frame`, `data.table`>;
type `set_colsuborder` <class<`data.frame`, `data.table`>, character[], logical> => class<`data.frame`, `data.table`>;
type `set_local_extrema` <class<`data.frame`, `data.table`>> => class<`data.frame`, `data.table`>;
type `Switch` <character[], ..., double, null, logical> => double[];
type `weight2rows` <class<`data.frame`, `data.table`>, character, double | null, logical> => class<`data.frame`, `data.table`>;
type `weighted_ntile` <integer[], any, double> => integer[];
