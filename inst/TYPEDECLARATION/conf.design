type `conf.design` <class<`matrix`> | double[], double, character, null> => class<`data.frame`>;
type `conf.set` <class<`matrix`>, double> => class<`matrix`>;
type `direct.sum` <class<`data.frame`>, ..., character[]> => class<`data.frame`>;
type `factorize` <class<`factor`> | double, ...> => (class<`data.frame`> | double[]);
type `factorize.default` <double, double[], ...> => double[];
type `factorize.factor` <class<`factor`>, character, character[], ...> => class<`data.frame`>;
type `filter` <character[]> => logical[];
type `FUN` <class<`factor`>> => character[] | <class<`factor`>> => list<class<`factor`>> | <class<`data.frame`>> => logical | <double[]> => logical;
type `join` <...> => class<`factor`>;
type `.listMat` <class<`matrix`>, class<`function`>> => list<character[] | class<`factor`>>;
type `.paste0` <...> => character[];
type `primes` <double | integer[]> => double[];
type `rjoin` <..., character> => class<`data.frame`>;
type `.space` <class<`matrix`>, double> => class<`matrix`>;
type `.zf` <integer[]> => character[];
