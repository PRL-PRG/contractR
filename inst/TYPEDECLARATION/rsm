type `as.coded.data` <class<`coded.data`, `data.frame`> | class<`data.frame`>, ..., list<class<`formula`>>, character> => class<`coded.data`, `data.frame`>;
type `bbd` <double | class<`formula`>, double, logical | character, logical, any> => class<`coded.data`, `data.frame`>;
type `.block.indices` <class<`coded.data`, `data.frame`> | class<`data.frame`>> => list<integer[]>;
type `canonical` <class<`lm`, `rsm`>, double> => list<double[] | class<`eigen`>>;
type `canonical.path` <class<`lm`, `rsm`>, double, double[], logical, double> => class<`data.frame`>;
type `ccd` <class<`formula`> | double, any, character | class<`formula`>, double[], character, double, double, logical> => class<`coded.data`, `data.frame`>;
type `ccd.pick` <double, double[], integer[], double[], integer[], double, integer[] | double, double> => class<`data.frame`>;
type `code2val` <class<`data.frame`> | double[], list<class<`formula`>>> => (class<`data.frame`> | double[]);
type `[.coded.data` <class<`coded.data`, `data.frame`> | class<`data.frame`>, ...> => (class<`coded.data`, `data.frame`> | class<`data.frame`>);
type `coded.data` <class<`data.frame`>, ..., list<any>, character> => class<`coded.data`, `data.frame`>;
type `codings` <class<`coded.data`, `data.frame`> | class<`lm`, `rsm`>> => list<class<`formula`>>;
type `codings<-` <class<`coded.data`, `data.frame`>, list<class<`formula`>>> => class<`coded.data`, `data.frame`>;
type `codings.coded.data` <class<`coded.data`, `data.frame`>> => list<class<`formula`>>;
type `codings.rsm` <class<`lm`, `rsm`>> => list<class<`formula`>>;
type `contour.lm` <class<`lm`, `rsm`>, class<`formula`>, any, any, any, any, any, logical> => list<list<double[] | class<`matrix`> | character[]>>;
type `cube` <class<`formula`> | double, any, double, double, any, logical, any, double> => class<`coded.data`, `data.frame`>;
type `decode.data` <class<`coded.data`, `data.frame`> | class<`data.frame`>> => class<`data.frame`>;
type `djoin` <class<`coded.data`, `data.frame`>, class<`coded.data`, `data.frame`> | class<`call`> | class<`data.frame`>, ..., any, any> => class<`coded.data`, `data.frame`>;
type `dupe` <class<`coded.data`, `data.frame`>, logical, any> => class<`coded.data`, `data.frame`>;
type `FO` <...> => class<`matrix`>;
type `foldover` <class<`coded.data`, `data.frame`>, any, any, logical> => class<`coded.data`, `data.frame`>;
type `is.coded.data` <class<`coded.data`, `data.frame`> | class<`data.frame`>> => logical;
type `loftest` <class<`lm`, `rsm`>> => class<`anova`, `data.frame`>;
type `model.data` <class<`lm`, `rsm`> | class<`lm`>, logical> => (class<`coded.data`, `data.frame`> | class<`data.frame`>);
type `names<-.coded.data` <class<`coded.data`, `data.frame`>, character[]> => class<`coded.data`, `data.frame`>;
type `.orth.moments` <class<`coded.data`, `data.frame`>> => class<`matrix`>;
type `.parse.coding` <class<`formula`>> => list<character[] | double[]>;
type `PE` <...> => class<`factor`>;
type `PQ` <...> => class<`matrix`>;
type `print.coded.data` <class<`coded.data`, `data.frame`>, ..., logical> => class<`coded.data`, `data.frame`>;
type `.randomize` <class<`coded.data`, `data.frame`> | class<`data.frame`>, logical> => (class<`coded.data`, `data.frame`> | class<`data.frame`>);
type `recode.data` <class<`coded.data`, `data.frame`>, ..., list<class<`formula`>>> => class<`coded.data`, `data.frame`>;
type `register_s3_method` <character, character, character> => null;
type `.rot.moments` <class<`coded.data`, `data.frame`>> => double[];
type `.rsdesattr` <class<`coded.data`, `data.frame`> | class<`data.frame`>, character[], character, class<`call`>> => (list<character[] | class<`call`>> | list<character | class<`call`>>);
type `rsm` <class<`formula`>, class<`coded.data`, `data.frame`>, ...> => class<`lm`, `rsm`>;
type `SO` <...> => class<`matrix`>;
type `star` <any, double, character, double, logical> => (class<`call`> | class<`coded.data`, `data.frame`>);
type `stdorder` <class<`coded.data`, `data.frame`>> => class<`coded.data`, `data.frame`>;
type `steepest` <class<`lm`, `rsm`>, double[], logical> => class<`data.frame`>;
type `summary.rsm` <class<`lm`, `rsm`>, character[], ...> => class<`summary.lm`, `summary.rsm`>;
type `truenames` <class<`coded.data`, `data.frame`>> => character[];
type `truenames.coded.data` <class<`coded.data`, `data.frame`>> => character[];
type `TWI` <..., any> => class<`matrix`>;
type `varfcn` <class<`coded.data`, `data.frame`>, class<`formula`>, double[], any, logical, logical, any, ...> => class<`data.frame`>;
