type `as.character.formula` <class<`formula`>, ...> => character;
type `env` <class<`formula`>> => environment;
type `env.formula` <class<`formula`>> => environment;
type `filter` <character[]> => logical[];
type `fun` <any, any> => null;
type `FUN` <class<`call`>> => character;
type `get.vars` <class<`name`>, class<`data.frame`>, ...> => character | <class<`call`> | class<`formula`> | class<`name`>, class<`data.frame`>, ...> => character[] | <class<`call`>, class<`data.frame`>, ...> => character[] | <class<`formula`>, class<`data.frame`>, ...> => character[];
type `invert` <class<`call`>, ...> => class<`call`> | <class<`call`>, ...> => class<`call`>;
type `is.one.sided` <class<`formula`>, ...> => logical | <class<`formula`>, ...> => logical;
type `is.two.sided` <class<`formula`>, ...> => logical | <class<`call`> | class<`formula`>, ...> => logical | <class<`call`>, ...> => logical;
type `lhs` <class<`<-`>, ...> => class<`name`> | <class<`call`> | class<`formula`> | class<`<-`> | expression, ...> => (class<`call`> | class<`name`> | expression | null) | <expression, ...> => expression | <class<`formula`>, ...> => (class<`call`> | class<`name`> | null) | <class<`call`>, ...> => class<`call`>;
type `lhs<-` <class<`formula`>, class<`call`>> => class<`formula`> | <class<`call`>, class<`name`>> => class<`call`> | <class<`call`> | class<`formula`>, class<`name`> | class<`call`>> => (class<`call`> | class<`formula`>);
type `.local` <class<`<-`>> => class<`name`> | <class<`call`> | class<`formula`>> => (class<`call`> | class<`name`>) | <class<`call`> | class<`formula`>> => (class<`call`> | class<`name`> | null) | <class<`call`>> => class<`call`> | <class<`<-`>> => class<`name`>;
type `op` <class<`call`>> => class<`name`> | <class<`formula`>> => class<`name`> | <class<`<-`>> => class<`name`> | <class<`<-`> | class<`call`> | class<`formula`> | expression | class<`name`>> => (class<`name`> | expression | null) | <expression> => expression | <class<`name`>> => null;
type `op<-` <class<`call`>, class<`name`>> => class<`call`> | <class<`call`>, class<`name`>> => class<`call`>;
type `op.type` <expression> => list<character> | <class<`call`>> => character | <class<`<-`> | class<`call`> | class<`formula`> | expression> => (character | list<character>) | <class<`formula`>> => character | <class<`<-`>> => character;
type `rhs` <class<`formula`>, ...> => (class<`call`> | class<`name`>) | <class<`<-`>, ...> => class<`name`> | <class<`call`>, ...> => class<`call`> | <class<`call`> | class<`formula`> | class<`<-`> | expression, ...> => (class<`call`> | class<`name`> | expression) | <expression, ...> => expression;
type `rhs<-` <class<`formula`>, class<`call`>> => class<`formula`> | <class<`formula`>, class<`call`>> => class<`formula`>;
type `split_terms` <class<`call`> | class<`name`> | double, logical> => expression;
type `split_terms.default` <class<`call`> | double | class<`name`>, logical> => expression;
type `split_terms.name` <class<`call`> | double | class<`name`>, logical> => expression;
type `terms.call` <class<`call`>, ...> => character[];
type `toggle.sign` <class<`name`> | class<`call`> | expression | integer[]> => (class<`call`> | class<`name`> | expression | integer[]);
type `toggle.sign.call` <class<`call`> | class<`name`>> => (class<`name`> | class<`call`>);
type `toggle.sign.default` <integer[]> => integer[];
type `toggle.sign.expression` <expression> => expression;
type `toggle.sign.name` <class<`call`> | class<`name`>> => (class<`name`> | class<`call`>);
