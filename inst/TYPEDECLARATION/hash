type `[` <class<`hash`>, character[], any, ..., logical> => class<`hash`>;
type `[<-` <class<`hash`>, character[], any, ..., integer[]> => class<`hash`> | <class<`hash`>, character[], any, ..., character[]> => class<`hash`>;
type `[[<-` <class<`hash`>, character, any, ..., double> => class<`hash`> | <class<`hash`>, character, any, ..., character[]> => class<`hash`>;
type `$<-` <class<`hash`>, character, null> => class<`hash`>;
type `as.list.hash` <class<`hash`>, logical, ...> => list<double>;
type `clear` <class<`hash`>> => null | <class<`hash`>> => null;
type `copy` <class<`hash`>, ...> => class<`hash`> | <class<`hash`>, ...> => class<`hash`>;
type `del` <character, class<`hash`>> => null | <character, class<`hash`>> => null;
type `filter` <character[]> => logical[];
type `fun` <character, character> => null;
type `hash` <...> => class<`hash`>;
type `has.key` <character[], class<`hash`>, ...> => logical[] | <character[], class<`hash`>, ...> => logical[];
type `invert` <class<`hash`>> => class<`hash`> | <class<`hash`>> => class<`hash`>;
type `inverted.hash` <...> => class<`hash`>;
type `is.empty` <class<`hash`>> => logical;
type `is.hash` <class<`hash`>> => logical;
type `keys` <class<`hash`>> => character[] | <class<`hash`>> => character[];
type `length` <any> => integer;
type `.local` <class<`hash`>, null | double[], ...> => (character[] | integer[] | list<integer>) | <class<`hash`>, character, character[] | double> => class<`hash`>;
type `make.keys` <character[] | double[]> => character[];
type `names.hash` <class<`hash`>> => character[];
type `.set` <class<`hash`>, ...> => null;
type `values` <class<`hash`>, ...> => (character[] | integer[] | list<integer>) | <class<`hash`>, ...> => (character[] | integer[] | list<integer>);
type `values<-` <class<`hash`>, ..., character[] | integer[]> => class<`hash`> | <class<`hash`>, ..., character[] | integer[]> => class<`hash`>;
