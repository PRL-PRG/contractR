type `::` <double[], double[], double[], double[], double[], double, double, character, character, double[], character, character, double, character> => struct<`z`:^double[], `zx`:^double[], `zy`:^double[], `zxy`:^double[], `zxx`:^double[], `zyy`:^double[], `zxxy`:^double[], `zxyy`:^double[], `zxxx`:^double[], `zyyy`:^double[], `x`:double[], `y`:double[]>;
type `arcs` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>> => ^integer[];
type `area` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>> => double[];
type `circles` <double[], double[], double[], null> => null;
type `convex.hull` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, logical, logical, character> => struct<`x`:double[], `y`:double[], `i`:integer[]>;
type `dummy.node` <double, double, double, double, double, double, double> => struct<`x`:double, `y`:double>;
type `filter` <character[]> => logical[];
type `franke.data` <double, double, struct<`ds1`:struct<`x`:double[], `y`:double[]>, `ds2`:struct<`x`:double[], `y`:double[]>, `ds3`:struct<`x`:double[], `y`:double[]>>> => struct<`x`:double[], `y`:double[], `z`:double[]>;
type `franke.fn` <double[], double[], double> => double[];
type `FUN` <^double[]> => double[];
type `in.convex.hull` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, ^double[], ^double[], double> => logical[];
type `inHull` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, ^double[], ^double[], double> => logical[];
type `interp` <double[], double[], double[], double[], double[], language | symbol, logical | symbol, character | symbol, null | symbol, double | symbol, double, character, character, character, character> => struct<`x`:double[], `y`:double[], `z`:^double[]>;
type `interpp` <double[], double[], double[], double[], double[], logical, logical, character, null, character> => struct<`x`:double[], `y`:double[], `z`:^double[]>;
type `interpShull` <double[], double[], double[], double[], double[], logical, character, character> => struct<`x`:double[], `y`:double[], `z`:^double[]>;
type `left` <double, double, double, double, double, double, double> => logical;
type `locpoly` <double[], double[], ^double[], double[], double[], double, double, character, character, double[], character, character, double, character> => struct<`z`:^double[], `zx`:^double[], `zy`:^double[], `zxy`:^double[], `zxx`:^double[], `zyy`:^double[], `zxxy`:^double[], `zxyy`:^double[], `zxxx`:^double[], `zyyy`:^double[], `x`:double[], `y`:double[]>;
type `locpoly.partderiv.grid` <double[], double[], ^double[], ^double[], ^double[], character, double[], character, double, logical, logical, integer> => struct<`z`:^double[], `zx`:^double[], `zy`:^double[], `zxy`:^double[], `zxx`:^double[], `zyy`:^double[], `zxxy`:^double[], `zxyy`:^double[], `zxxx`:^double[], `zyyy`:^double[]>;
type `nearest.neighbours` <double[], double[]> => struct<`index`:^integer[], `dist`:^double[]>;
type `on` <double, double, double, double, double, double, double> => logical;
type `on.convex.hull` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, double[], double[], double> => logical[];
type `onHull` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, double[], double[], double> => logical[];
type `outer.convhull` <double[], double[], double[], double[], any => any, character, null> => ^double[];
type `plot.triSht` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, logical, language, language, logical, logical, logical, logical, character, character, null> => null;
type `plot.voronoi` <struct<`x`:double[], `y`:double[], `node`:logical[], `area`:double[], `ratio`:double[], `radius`:double[], `n1`:integer[], `n2`:double[], `n3`:double[], `p1`:integer[], `p2`:integer[], `p3`:integer[], `tri`:struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, `dummy.x`:double[], `dummy.y`:double[], `call`:language>, logical, double[], double[], logical, logical, character, language | character, logical, null> => null;
type `plot.voronoi.polygons` <list<null | ^double[]>, double[] | null, logical, logical, null> => null;
type `shull.deltri` <double[], double[]> => struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nch`:integer, `ch`:integer[], `na`:integer, `a1`:integer[], `a2`:integer[]>;
type `summary.triSht` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, null> => struct<`n`:integer, `na`:integer, `nb`:integer, `nt`:integer, `call`:language>;
type `summary.voronoi` <struct<`x`:double[], `y`:double[], `node`:logical[], `area`:double[], `ratio`:double[], `radius`:double[], `n1`:integer[], `n2`:double[], `n3`:double[], `p1`:integer[], `p2`:integer[], `p3`:integer[], `tri`:struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, `dummy.x`:double[], `dummy.y`:double[], `call`:language>, null> => struct<`nn`:integer, `nd`:integer, `call`:language>;
type `tri.find` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, double, double> => struct<`i1`:double, `i2`:double, `i3`:double, `tr`:double, `bc`:^double[]>;
type `tri.mesh` <struct<`x`:double[], `y`:double[]> | double[], null | double[], character> => struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>;
type `triangles` <struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>> => ^integer[];
type `triFind` <integer, double[], double[], integer[], integer[], integer[], double, double> => struct<`i1`:double, `i2`:double, `i3`:double, `tr`:double, `bc`:^double[]>;
type `voronoi.area` <struct<`x`:double[], `y`:double[], `node`:logical[], `area`:double[], `ratio`:double[], `radius`:double[], `n1`:integer[], `n2`:double[], `n3`:double[], `p1`:integer[], `p2`:integer[], `p3`:integer[], `tri`:struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, `dummy.x`:double[], `dummy.y`:double[], `call`:language>> => ^double[];
type `voronoi.findvertices` <integer, struct<`x`:double[], `y`:double[], `node`:logical[], `area`:double[], `ratio`:double[], `radius`:double[], `n1`:integer[], `n2`:double[], `n3`:double[], `p1`:integer[], `p2`:integer[], `p3`:integer[], `tri`:struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, `dummy.x`:double[], `dummy.y`:double[], `call`:language>> => integer[];
type `voronoi.mosaic` <double[] | struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, null | double[], character> => struct<`x`:double[], `y`:double[], `node`:logical[], `area`:double[], `ratio`:double[], `radius`:double[], `n1`:integer[], `n2`:double[], `n3`:double[], `p1`:integer[], `p2`:integer[], `p3`:integer[], `tri`:struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, `dummy.x`:double[], `dummy.y`:double[], `call`:language>;
type `voronoi.polyarea` <double[], double[]> => double;
type `voronoi.polygons` <struct<`x`:double[], `y`:double[], `node`:logical[], `area`:double[], `ratio`:double[], `radius`:double[], `n1`:integer[], `n2`:double[], `n3`:double[], `p1`:integer[], `p2`:integer[], `p3`:integer[], `tri`:struct<`n`:integer, `x`:double[], `y`:double[], `nt`:integer, `trlist`:^integer[], `cclist`:^double[], `nchull`:integer, `chull`:integer[], `narcs`:integer, `arcs`:^integer[], `call`:language>, `dummy.x`:double[], `dummy.y`:double[], `call`:language>> => list<null | ^double[]>;
