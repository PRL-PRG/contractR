type `:::` <class<`git_repository`>, null | character[], any, null | list<logical>> => any;
type `add` <class<`git_repository`>, character[], logical> => null;
type `add_session_info` <character> => character;
type `ahead_behind` <class<`git_branch`> | class<`git_commit`> | class<`git_tag`>, class<`git_commit`> | class<`git_branch`> | class<`git_tag`>> => integer[];
type `as.character.git_time` <class<`git_time`>, ...> => character;
type `as.data.frame.git_commit` <class<`git_commit`>, ...> => class<`data.frame`>;
type `as.data.frame.git_repository` <class<`git_repository`>, ...> => class<`data.frame`>;
type `as.data.frame.git_tree` <class<`git_tree`>, ...> => class<`data.frame`>;
type `as.list.git_tree` <class<`git_tree`>, ...> => list<class<`git_blob`>>;
type `as.POSIXct.git_time` <class<`git_time`>, ...> => class<`POSIXct`, `POSIXt`>;
type `blame` <class<`git_repository`>, character> => class<`git_blame`>;
type `blob_create` <class<`git_repository`>, character[], logical> => list<class<`git_blob`>>;
type `branch_create` <class<`git_commit`>, character, logical> => any;
type `branch_delete` <class<`git_branch`>> => null;
type `branches` <class<`git_repository`> | character, character[]> => list<any>;
type `branch_get_upstream` <class<`git_branch`>> => (class<`git_branch`> | null);
type `branch_remote_name` <class<`git_branch`>> => character;
type `branch_remote_url` <class<`git_branch`>> => character;
type `branch_rename` <class<`git_branch`>, character, logical> => any;
type `branch_set_upstream` <class<`git_branch`> | null, any> => any;
type `branch_target` <class<`git_branch`>> => character;
type `bundle_r_package` <class<`git_repository`>> => any;
type `checkout` <class<`git_repository`> | class<`git_branch`> | class<`git_commit`> | class<`git_tag`>, character[] | null | logical, logical, logical, null | character, ...> => any;
type `checkout_branch` <class<`git_branch`>, logical> => null;
type `checkout_commit` <class<`git_commit`>, logical> => null;
type `checkout_git_object` <any, any> => any;
type `checkout_tag` <class<`git_tag`>, logical> => null;
type `clone` <character, character, character | double | logical[], character | null, character | double | logical[], null, logical> => any;
type `commit` <class<`git_repository`>, character, logical, logical, null, null> => any;
type `commits` <any, logical, logical, logical, character | double | integer[] | null, null | character, null | character> => any;
type `config` <class<`git_repository`> | null, logical, any, any, ...> => any;
type `content` <class<`git_blob`>, logical> => (character[] | null);
type `contributions` <class<`git_repository`>, character[], character[]> => class<`data.frame`>;
type `cred_env` <character[], character[]> => class<`cred_env`>;
type `cred_token` <character[]> => class<`cred_token`>;
type `cred_user_pass` <character[], character[]> => class<`cred_user_pass`>;
type `default_signature` <class<`git_repository`>> => class<`git_signature`>;
type `descendant_of` <class<`git_branch`> | class<`git_commit`> | class<`git_tag`>, class<`git_commit`> | class<`git_branch`> | class<`git_tag`>> => logical;
type `diff.git_repository` <class<`git_repository`>, logical, logical, null | character, double, double, character, character, null, null, null, ...> => (character | class<`git_diff`> | null);
type `diff.git_tree` <class<`git_tree`>, class<`git_tree`> | null, logical, logical, null, double, double, character, character, null, null, null> => class<`git_diff`>;
type `discover_repository` <character, double | null> => any;
type `fetch` <class<`git_repository`>, character, null, logical, null> => class<`git_transfer_progress`>;
type `fetch_heads` <class<`git_repository`>> => list<class<`git_fetch_head`>>;
type `filter` <character[]> => logical[];
type `format.git_blob` <class<`git_blob`>, ...> => character;
type `format.git_commit` <class<`git_commit`>, ...> => character;
type `format.git_merge_result` <class<`git_merge_result`>, ...> => character;
type `format.git_note` <class<`git_note`>, ...> => character;
type `format.git_reference` <class<`git_reference`>, ...> => character;
type `format.git_signature` <class<`git_signature`>, ...> => character;
type `format.git_stash` <class<`git_commit`, `git_stash`>, ...> => character;
type `format.git_tag` <class<`git_tag`>, ...> => character;
type `FUN` <class<`git_branch`>> => character | <class<`git_commit`>> => null | <list<character | double>> => double | <list<character | double>> => character | <character, character> => character | <class<`git_reference`>> => (character | null) | <class<`git_diff_file`>> => integer | <list<character | double>> => double | <character> => list<null> | <list<character>> => list<character> | <class<`git_commit`> | null> => logical | <integer> => class<`git_blob`> | <class<`git_diff_file`>> => list<character | double> | <character> => null | <class<`git_branch`>> => (character | null) | <character> => null | <character> => class<`git_blob`> | <class<`git_branch`>> => character;
type `get_refspec` <class<`git_repository`>, null | character[], any, null | list<logical>> => any;
type `get_upstream_name` <class<`git_branch`>> => any;
type `git_config_files` <character | class<`git_repository`> | double | null> => class<`data.frame`>;
type `[.git_tree` <class<`git_tree`>, character | integer | class<`data.frame`>> => any;
type `hash` <^character[]> => ^character[];
type `hashfile` <^character[]> => any;
type `home_dir` < > => character;
type `hunks_per_file` <class<`git_diff`>> => double;
type `index_remove_bypath` <class<`git_repository`>, character> => null;
type `init` <character, logical> => any;
type `in_repository` <character> => logical;
type `is_bare` <any> => any;
type `is_binary` <class<`git_blob`>> => logical;
type `is_blob` <class<`git_blob`> | class<`git_commit`> | class<`git_tree`> | double> => logical;
type `is_branch` <any> => any;
type `is_commit` <class<`git_blob`> | class<`git_commit`> | class<`git_repository`> | class<`git_tag`> | class<`git_tree`> | double> => logical;
type `is_detached` <character | class<`git_repository`>> => logical;
type `is_empty` <any> => any;
type `is_head` <class<`git_branch`>> => logical;
type `is_local` <double | class<`git_branch`>> => any;
type `is_merge` <class<`git_commit`>> => logical;
type `is_shallow` <character | class<`git_repository`>> => logical;
type `is_tag` <character | class<`git_repository`> | class<`git_tag`>> => logical;
type `is_tree` <class<`git_blob`> | class<`git_commit`> | class<`git_tree`> | double> => logical;
type `last_commit` <character | class<`git_repository`>> => class<`git_commit`>;
type `length.git_blob` <class<`git_blob`>> => integer;
type `length.git_diff` <class<`git_diff`>> => integer;
type `length.git_tree` <class<`git_tree`>> => integer;
type `libgit2_features` < > => list<logical>;
type `libgit2_version` < > => list<integer>;
type `lines_per_file` <class<`git_diff`>> => list<list<character | double>>;
type `lookup` <class<`git_repository`>, character> => any;
type `lookup_commit` <class<`git_branch`> | class<`git_commit`> | class<`git_reference`> | class<`git_tag`>> => class<`git_commit`>;
type `lookup_commit.git_branch` <class<`git_branch`>> => class<`git_commit`>;
type `lookup_commit.git_commit` <class<`git_commit`>> => class<`git_commit`>;
type `lookup_commit.git_reference` <class<`git_reference`>> => class<`git_commit`>;
type `lookup_commit.git_tag` <class<`git_tag`>> => class<`git_commit`>;
type `lookup_repository` <any> => any;
type `ls_tree` <character | null, class<`git_repository`> | character, logical> => class<`data.frame`>;
type `merge_base` <class<`git_commit`>, class<`git_commit`>> => class<`git_commit`>;
type `merge.character` <character, character, logical, null, logical, ...> => class<`git_merge_result`>;
type `merge.git_branch` <class<`git_branch`>, null, logical, class<`git_signature`> | null, logical, ...> => class<`git_merge_result`>;
type `merge.git_repository` <class<`git_repository`>, character | null, logical, null | class<`git_signature`>, logical, ...> => any;
type `note_create` <class<`git_blob`> | class<`git_commit`> | class<`git_tree`> | double | null, character, null | character, null, null, logical> => any;
type `note_default_ref` <class<`git_repository`>> => character;
type `note_remove` <double | class<`git_note`>, null, null> => any;
type `notes` <class<`git_repository`>, character | null> => list<any>;
type `odb_blobs` <class<`git_repository`>> => class<`data.frame`>;
type `odb_objects` <class<`git_repository`>> => class<`data.frame`>;
type `parents` <class<`git_commit`>> => list<any>;
type `plot.git_repository` <class<`git_repository`>, character[], null, ...> => class<`matrix`>;
type `previous_branch_name` <class<`git_repository`>> => character;
type `print.git_blob` <class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>, ...> => (class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>);
type `print.git_branch` <class<`git_branch`>, ...> => class<`git_branch`>;
type `print.git_commit` <class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>, ...> => (class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>);
type `print.git_config` <class<`git_config`>, ...> => class<`git_config`>;
type `print.git_diff` <class<`git_diff`>, ...> => class<`git_diff`>;
type `print.git_merge_result` <class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>, ...> => (class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>);
type `print.git_note` <class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>, ...> => (class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>);
type `print.git_reference` <class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>, ...> => (class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>);
type `print.git_reflog` <class<`git_reflog`>, ...> => class<`git_reflog`>;
type `print.git_reflog_entry` <class<`git_reflog_entry`>, ...> => class<`git_reflog_entry`>;
type `print.git_repository` <class<`git_repository`>, ...> => class<`git_repository`>;
type `print.git_signature` <class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>, ...> => (class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>);
type `print.git_stash` <class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>, ...> => (class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>);
type `print.git_status` <class<`git_status`>, ...> => class<`git_status`>;
type `print.git_tag` <class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>, ...> => (class<`git_blob`> | class<`git_commit`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_signature`> | class<`git_commit`, `git_stash`> | class<`git_tag`>);
type `print.git_time` <class<`git_time`>, ...> => class<`git_time`>;
type `print.git_tree` <class<`git_tree`>, ...> => class<`git_tree`>;
type `print_lines_per_file` <class<`git_diff`>> => character;
type `pull` <class<`git_repository`>, null, null> => any;
type `punch_card` <class<`git_repository`>, null, ...> => null;
type `push` <class<`git_branch`> | class<`git_repository`>, null | character[], null | ^character[], logical, null, logical> => any;
type `references` <class<`git_repository`> | character> => list<any>;
type `reflog` <class<`git_repository`>, character> => class<`git_reflog`>;
type `remote_add` <class<`git_repository`>, character, character> => null;
type `remote_ls` <character, null, null> => any;
type `remote_remove` <class<`git_repository`>, character> => null;
type `remote_rename` <class<`git_repository`>, character, character> => null;
type `remotes` <class<`git_repository`>> => character[];
type `remote_set_url` <class<`git_repository`>, character, character> => null;
type `remote_url` <class<`git_repository`>, character | null> => character;
type `repository` <character, logical> => any;
type `repository_head` <class<`git_repository`>> => (class<`git_branch`> | class<`git_commit`> | null);
type `reset` <class<`git_commit`> | class<`git_repository`>, any, null | character> => null;
type `revparse_single` <class<`git_repository`>, character> => any;
type `rm_file` <class<`git_repository`>, character[]> => any;
type `sanitize_path` <character, character> => character;
type `sha` <class<`git_blob`> | class<`git_branch`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_blob` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_branch` <class<`git_branch`>> => character;
type `sha.git_commit` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_fetch_head` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_merge_result` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_note` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_reference` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_reflog_entry` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_tag` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `sha.git_tree` <class<`git_blob`> | class<`git_commit`> | class<`git_fetch_head`> | class<`git_merge_result`> | class<`git_note`> | class<`git_reference`> | class<`git_reflog_entry`> | class<`git_tag`> | class<`git_tree`>> => (character | null);
type `ssh_path` <character> => character;
type `ssl_cert_locations` <null, null> => any;
type `stash` <class<`git_repository`>, character, logical, logical, logical, null> => (class<`git_commit`, `git_stash`> | null);
type `stash_apply` <class<`git_repository`>, double> => null;
type `stash_drop` <class<`git_repository`> | class<`git_commit`, `git_stash`>, double> => any;
type `stash_index` <class<`git_commit`, `git_stash`> | class<`git_repository`>, any> => any;
type `stash_list` <class<`git_repository`> | character> => list<any>;
type `stash_object` <class<`git_commit`, `git_stash`> | class<`git_repository`>> => class<`git_repository`>;
type `stash_pop` <class<`git_repository`>, double> => null;
type `status` <class<`git_repository`>, logical, logical, logical, logical, logical> => class<`git_status`>;
type `strip_trailing_slash` <character | null> => (character | null);
type `summary.git_commit` <class<`git_commit`>, ...> => null;
type `summary.git_diff` <class<`git_diff`>, ...> => null;
type `summary.git_repository` <class<`git_repository`>, ...> => null;
type `summary.git_stash` <class<`git_commit`, `git_stash`>, ...> => null;
type `summary.git_tag` <class<`git_tag`>, ...> => null;
type `summary.git_tree` <class<`git_tree`>, ...> => class<`data.frame`>;
type `tag` <class<`git_repository`>, character, character, logical, null, logical> => class<`git_tag`>;
type `tag_delete` <character | class<`git_tag`>, character | null> => null;
type `tags` <character | class<`git_repository`>> => list<any>;
type `tree` <class<`git_commit`> | class<`git_commit`, `git_stash`>> => class<`git_tree`>;
type `when` <class<`git_commit`> | class<`git_signature`> | class<`git_tag`> | class<`git_time`>> => character;
type `workdir` <character | class<`git_repository`>> => (character | null);
