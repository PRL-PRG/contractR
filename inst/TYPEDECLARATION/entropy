type `chi2.Dirichlet` <double[], double[], double, double, character[]> => double;
type `chi2.empirical` <double[], double[], character[]> => double;
type `chi2indep.Dirichlet` <class<`matrix`>, double, character[]> => double;
type `chi2indep.empirical` <class<`matrix`>, character[]> => double;
type `chi2indep.plugin` <class<`matrix`>, character[]> => double;
type `chi2indep.shrink` <class<`matrix`>, any, character[], logical> => double;
type `chi2.plugin` <class<`matrix`> | double[], class<`matrix`> | double[], character[]> => double;
type `chi2.shrink` <double[], double[], any, any, character[], logical> => double;
type `discretize` <double[], double, double[]> => class<`table`>;
type `discretize2d` <double[], double[], double, double, double[], double[]> => class<`table`>;
type `entropy` <class<`table`> | double[], any, character[], character[], logical, ...> => double;
type `entropy.ChaoShen` <double[], character[]> => double;
type `entropy.Dirichlet` <double[], double, character[]> => double;
type `entropy.empirical` <class<`table`> | double[], character[]> => double;
type `entropy.MillerMadow` <double[], character[]> => double;
type `entropy.plugin` <class<`matrix`> | class<`table`> | double[], character[]> => double;
type `entropy.shrink` <double[], any, character[], logical> => double;
type `freqs.Dirichlet` <class<`matrix`> | double[], double> => (class<`matrix`> | double[]);
type `freqs.empirical` <class<`matrix`> | class<`table`> | double[]> => (class<`matrix`> | class<`table`> | double[]);
type `freqs.shrink` <class<`matrix`> | double[], any, logical> => (class<`matrix`> | double[]);
type `get.lambda.shrink` <double, class<`matrix`> | double[], double, logical> => double;
type `KL.Dirichlet` <double[], double[], double, double, character[]> => double;
type `KL.empirical` <double[], double[], character[]> => double;
type `KL.plugin` <class<`matrix`> | class<`table`> | double[], class<`matrix`> | double[], character[]> => double;
type `KL.shrink` <double[], double[], any, any, character[], logical> => double;
type `mi.Dirichlet` <class<`matrix`>, double, character[]> => double;
type `mi.empirical` <class<`matrix`> | class<`table`>, character[]> => double;
type `mi.plugin` <class<`matrix`> | class<`table`>, character[]> => double;
type `mi.shrink` <class<`matrix`>, any, character[], logical> => double;
