type `as_list` <class<`matrix`> | class<`data.frame`>, character[]> => list<character[]>;
type `change_index` <class<`factor`, `ordered`> | double[], ...> => double[];
type `cluster_matrix` <class<`data.frame`>, character, character, ...> => class<`data.frame`>;
type `column_to_rownames` <class<`data.frame`>, character | double> => class<`data.frame`>;
type `combine` <class<`data.frame`, `data.table`> | list<character[]>, ...> => (character[] | class<`data.frame`, `data.table`>);
type `combine.data.frame` <class<`data.frame`, `data.table`>, logical, ...> => class<`data.frame`, `data.table`>;
type `combine.default` <list<character[]>, logical, ...> => character[];
type `detect_text_column` <any, character | logical> => character;
type `duration` <integer[] | character[] | class<`data.frame`> | class<`data.frame`, `qdap_df`, `sent_split`, `sent_split_text_var:dialogue`>, ...> => (class<`data.frame`> | class<`data.frame`, `data.table`>);
type `duration.data.frame` <class<`data.frame`> | class<`data.frame`, `qdap_df`, `sent_split`, `sent_split_text_var:dialogue`>, character | logical, ...> => class<`data.frame`, `data.table`>;
type `duration.default` <character[], character[] | null | list<character[]>, ...> => class<`data.frame`, `data.table`>;
type `duration.numeric` <integer[], ...> => class<`data.frame`>;
type `ends` <integer[], ...> => integer[];
type `fix_names` <character[] | null | list<any>> => (character[] | null | list<any>);
type `flatten` <list<character | list<character[] | list<character[]> | character[] | list<character | list<character>> | null>>, character, ...> => list<null | character[]>;
type `flatten_h` <list<any>> => list<character[] | null>;
type `from_to` <class<`data.frame`> | class<`data.frame`, `data.table`> | class<`factor`>, ...> => (class<`data.frame`, `data.table`> | class<`factor`>);
type `from_to.data.frame` <class<`data.frame`> | class<`data.frame`, `data.table`>, character, character, ...> => class<`data.frame`, `data.table`>;
type `from_to.factor` <class<`factor`>, character, ...> => class<`factor`>;
type `from_to_summarize` <class<`data.frame`>, character, character[] | null, logical, ...> => class<`data.frame`, `data.table`>;
type `FUN` <character[] | null | list<any>> => (character[] | null | list<any>);
type `get_sents2` <character[]> => list<character[]>;
type `is.Integer` <double, double> => logical;
type `is_numeric_doc_names` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>, ...> => logical;
type `is_numeric_doc_names.DocumentTermMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>, ...> => logical;
type `mtabulate` <class<`data.frame`> | class<`factor`, `ordered`> | double[] | list<double[] | character[]>> => class<`data.frame`>;
type `name_len_check` <any, character[] | null> => (character[] | null);
type `paste2` <list<character[] | class<`factor`> | integer[]>, character, logical, logical> => character[];
type `sapply2` <list<any>, class<`function`>, ...> => (character[] | integer[] | null);
type `split_index` <character[] | class<`data.frame`> | class<`factor`, `ordered`> | class<`matrix`> | integer[] | list<character>, double[] | null, null | character[], ...> => list<any>;
type `split_index.character` <character[], double[], null | character[], ...> => list<character[]>;
type `split_index.data.frame` <class<`data.frame`> | class<`matrix`>, double[], null, ...> => list<class<`data.frame`> | class<`matrix`>>;
type `split_index.factor` <class<`factor`, `ordered`> | integer[], double[], null, ...> => list<class<`factor`, `ordered`> | integer[]>;
type `split_index.list` <list<character>, double[], null, ...> => list<list<character>>;
type `split_index_mat` <class<`data.frame`> | class<`matrix`>, double[], null, ...> => list<class<`data.frame`> | class<`matrix`>>;
type `split_index.matrix` <class<`data.frame`> | class<`matrix`>, double[], null, ...> => list<class<`data.frame`> | class<`matrix`>>;
type `split_index.numeric` <class<`factor`, `ordered`> | integer[], double[], null, ...> => list<class<`factor`, `ordered`> | integer[]>;
type `split_index_vector` <character[] | class<`factor`, `ordered`> | integer[] | list<character>, double[]> => list<any>;
type `split_match` <character[] | integer[], character[] | double, double, logical, ...> => list<character[] | integer[]>;
type `split_portion` <^character[], character[] | class<`factor`> | null | list<character[] | class<`factor`> | integer[]>, any, any, logical, logical, logical, ...> => (class<`data.frame`, `data.table`> | list<list<character[]>>);
type `split_run` <class<`data.frame`> | ^character[], ...> => (class<`data.frame`, `data.table`> | list<character[] | null>);
type `split_run.data.frame` <class<`data.frame`>, character, ...> => class<`data.frame`, `data.table`>;
type `split_run.default` <^character[], ...> => list<character[] | null>;
type `split_sentence` <class<`data.frame`> | character[], ...> => (class<`data.frame`, `data.table`> | list<character[]>);
type `split_sentence.data.frame` <class<`data.frame`>, logical, ...> => class<`data.frame`, `data.table`>;
type `split_sentence.default` <character[], ...> => list<character[]>;
type `split_sentence_token` <character[] | class<`data.frame`>, ...> => class<`data.frame`, `data.table`>;
type `split_sentence_token.data.frame` <class<`data.frame`>, logical, logical, ...> => class<`data.frame`, `data.table`>;
type `split_sentence_token.default` <character[], logical, ...> => class<`data.frame`, `data.table`>;
type `split_token` <class<`data.frame`> | class<`data.frame`, `qdap_df`, `sent_split`, `sent_split_text_var:dialogue`> | character[], ...> => (class<`data.frame`, `data.table`> | list<character[]>);
type `split_token.data.frame` <class<`data.frame`> | class<`data.frame`, `qdap_df`, `sent_split`, `sent_split_text_var:dialogue`>, logical, logical, ...> => class<`data.frame`, `data.table`>;
type `split_token.default` <^character[], logical, ...> => list<character[] | null | character[]>;
type `split_transcript` <character[], character, character[], double, ...> => class<`data.frame`, `data.table`>;
type `split_word` <class<`data.frame`> | class<`data.frame`, `qdap_df`, `sent_split`, `sent_split_text_var:dialogue`> | character[], ...> => (class<`data.frame`, `data.table`> | list<character[]>);
type `split_word.data.frame` <class<`data.frame`> | class<`data.frame`, `qdap_df`, `sent_split`, `sent_split_text_var:dialogue`>, logical, logical, ...> => class<`data.frame`, `data.table`>;
type `split_word.default` <^character[], logical, ...> => list<character[] | null | character[]>;
type `starts` <integer[], ...> => double[];
type `tidy_colo_dtm` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>, ...> => class<`data.frame`, `data.table`>;
type `tidy_dtm` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>, ...> => class<`data.frame`, `data.table`>;
type `tidy_list` <list<any>, character, character, character, ...> => class<`data.frame`, `data.table`>;
type `tidy_list_df` <list<class<`data.frame`, `data.table`> | class<`data.frame`>>, character> => class<`data.frame`, `data.table`>;
type `tidy_list_vector` <list<double[] | integer[] | character[]>, character, any, character> => class<`data.frame`, `data.table`>;
type `tidy_matrix` <class<`matrix`> | class<`DocumentTermMatrix`, `simple_triplet_matrix`>, character, character, character, ...> => any;
type `tidy_table` <class<`table`>, character, character, ...> => class<`data.frame`, `data.table`>;
type `tidy_vector` <character[], character, character, ...> => class<`data.frame`, `data.table`>;
type `unique_pairs` <class<`data.frame`> | class<`data.frame`, `data.table`>, character, character, ...> => (class<`data.frame`> | class<`data.frame`, `data.table`>);
type `unique_pairs.data.table` <class<`data.frame`, `data.table`>, character, character, ...> => class<`data.frame`, `data.table`>;
type `unique_pairs.default` <class<`data.frame`>, character, character, ...> => class<`data.frame`>;
type `unnest_text` <class<`data.frame`> | class<`data.frame`, `data.table`>, any, logical, ...> => (class<`data.frame`> | class<`data.frame`, `data.table`>);
