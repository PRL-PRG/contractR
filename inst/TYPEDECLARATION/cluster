type `agnes` <class<`data.frame`> | class<`dissimilarity`, `dist`> | class<`dist`>, logical, character, logical, character, any, logical, any, double> => any;
type `as.dendrogram.twins` <class<`agnes`, `twins`> | class<`diana`, `twins`>, ...> => class<`dendrogram`>;
type `bannerplot` <class<`agnes`, `twins`> | class<`diana`, `twins`> | list<integer[] | character[]>, double[], logical, character, character | null, character, double, double[], double, logical, logical, any, double, character[] | null, double, any, logical, any, any, ...> => null;
type `clara` <class<`data.frame`> | class<`matrix`>, double, character[], logical, double, double, double, logical, logical, logical, logical, logical> => any;
type `clusGap` <class<`data.frame`> | class<`matrix`>, class<`function`>, double, double, double, character[], logical, ...> => class<`clusGap`>;
type `clusplot` <class<`clara`, `partition`> | class<`data.frame`> | class<`dissimilarity`, `dist`> | class<`fanny`, `partition`> | class<`pam`, `partition`>, ...> => list<class<`matrix`> | double[]>;
type `clusplot.default` <class<`data.frame`> | class<`dissimilarity`, `dist`> | class<`dist`> | class<`matrix`>, integer[], logical, list<class<`matrix`> | double | integer[] | class<`matrix`> | character[] | null | class<`matrix`> | double | character[]>, logical, double, logical, logical, double, logical, character | double[], any, character | double[], double, any, logical, logical, null | double[], null | double[], character> => list<class<`matrix`> | double[]>;
type `clusplot.partition` <class<`clara`, `partition`> | class<`fanny`, `partition`> | class<`pam`, `partition`>, null, null, ...> => list<class<`matrix`> | double[]>;
type `coef.hclust` <class<`hclust`>, ...> => double;
type `coefHier` <class<`agnes`, `twins`>> => double;
type `coef.twins` <class<`agnes`, `twins`>, ...> => double;
type `daisy` <class<`data.frame`> | class<`matrix`>, any, logical, list<any>, double[], logical, any, any, logical> => class<`dissimilarity`, `dist`>;
type `diana` <class<`data.frame`> | class<`dissimilarity`, `dist`> | class<`dist`> | class<`matrix`>, logical, character, logical, logical, logical, logical, double> => class<`diana`, `twins`>;
type `ellipsoidhull` <class<`matrix`>, double, double, logical, logical, logical> => class<`ellipsoid`>;
type `ellipsoidPoints` <class<`matrix`>, double, double[], double> => class<`matrix`>;
type `fanny` <class<`data.frame`> | class<`matrix`>, double, logical, double, character[], logical, null | class<`matrix`>, logical, logical, logical, double, double, double> => class<`fanny`, `partition`>;
type `lower.to.upper.tri.inds` <double> => integer[];
type `maxSE` <double[], double[], character, double> => integer;
type `mkCheckX` <class<`dissimilarity`, `dist`> | class<`dist`> | class<`matrix`>, logical> => list<class<`matrix`> | double | character[] | class<`matrix`> | double | integer[]>;
type `mona` <class<`data.frame`> | class<`matrix`>, double> => any;
type `pam` <class<`data.frame`> | class<`dissimilarity`, `dist`> | class<`dist`> | class<`matrix`> | double[], double, logical, any, null | double[], logical, logical, logical, logical, any, double, double> => (class<`pam`, `partition`> | integer[]);
type `plot.agnes` <class<`agnes`, `twins`>, logical, double | null, null, character, double, double, double, logical, ...> => null;
type `plot.clusGap` <class<`clusGap`>, character, character, expression, character | null, logical, list<character | double>, ...> => null;
type `plot.diana` <class<`diana`, `twins`>, logical, double | null, null, character, double, double, double, logical, ...> => null;
type `plot.mona` <class<`mona`>, character, null, character, double[], logical, double, double, double, ...> => null;
type `plot.partition` <class<`clara`, `partition`> | class<`fanny`, `partition`> | class<`pam`, `partition`>, logical, null | double, double, double, any, null | class<`dist`>, logical, double, logical, logical, double, logical, logical, null, null, null, ...> => null;
type `plot.silhouette` <class<`silhouette`>, double, any, null | character, null, expression, character[] | double[], logical, double, any, logical, logical, ...> => null;
type `pltree` <class<`agnes`, `twins`> | class<`diana`, `twins`>, ...> => null;
type `pltree.twins` <class<`agnes`, `twins`> | class<`diana`, `twins`>, character, character[] | null, character, ...> => null;
type `predict.ellipsoid` <class<`ellipsoid`>, double, ...> => class<`matrix`>;
type `print.agnes` <class<`agnes`, `twins`>, ...> => class<`agnes`, `twins`>;
type `print.diana` <class<`diana`, `twins`>, ...> => class<`diana`, `twins`>;
type `print.dissimilarity` <class<`dissimilarity`, `dist`>, null, null, any, character, logical, ...> => class<`dissimilarity`, `dist`>;
type `print.ellipsoid` <class<`ellipsoid`>, double, ...> => class<`ellipsoid`>;
type `print.mona` <class<`mona`>, ...> => class<`mona`>;
type `print.summary.silhouette` <class<`summary.silhouette`>, ...> => class<`summary.silhouette`>;
type `silhouette` <double[] | class<`clara`, `partition`> | class<`fanny`, `partition`> | class<`pam`, `partition`>, ...> => class<`silhouette`>;
type `silhouette.clara` <class<`clara`, `partition`>, logical, ...> => class<`silhouette`>;
type `silhouette.default` <double[], class<`dist`> | class<`dissimilarity`, `dist`>, any, ...> => class<`silhouette`>;
type `silhouette.partition` <class<`clara`, `partition`> | class<`fanny`, `partition`> | class<`pam`, `partition`>, ...> => class<`silhouette`>;
type `sizeDiss` <class<`dist`> | integer[]> => (double | null);
type `sortSilhouette` <class<`silhouette`>, ...> => class<`silhouette`>;
type `summary.agnes` <class<`agnes`, `twins`>, ...> => class<`summary.agnes`>;
type `summary.clara` <class<`clara`, `partition`>, ...> => class<`summary.clara`>;
type `summary.diana` <class<`diana`, `twins`>, ...> => class<`summary.diana`>;
type `summary.dissimilarity` <class<`dissimilarity`, `dist`>, double, ...> => class<`summary.dissimilarity`>;
type `summary.fanny` <class<`fanny`, `partition`>, ...> => class<`summary.fanny`>;
type `summary.pam` <class<`pam`, `partition`>, ...> => class<`summary.pam`>;
type `summary.silhouette` <class<`silhouette`>, class<`function`>, ...> => class<`summary.silhouette`>;
type `upper.to.lower.tri.inds` <double> => integer[];
type `volume` <class<`ellipsoid`>, ...> => double;
type `volume.ellipsoid` <class<`ellipsoid`>, logical, ...> => double;
