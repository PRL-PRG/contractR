type `akj` <class<`matrix`> | double[], double[], double[], double, double, double, double> => list<double[]>;
type `anova.rq` <class<`dynrq`, `rq`> | class<`rq`>, ..., character, logical, character, character, logical, double, null> => class<`anova.rq`>;
type `anova.rqlist` <list<class<`dynrq`, `rq`> | class<`rq`>>, ..., character, any, any, character, any, double, any> => class<`anova.rq`>;
type `bandwidth.rq` <double, integer, logical, double> => double;
type `boot.crq` <class<`matrix`>, double[], double[], double[], character, character, double, any, character, ...> => list<class<`array`> | double | character>;
type `boot.rq` <class<`matrix`>, double[], double, double, character, any, null, null, null, ...> => list<class<`matrix`>>;
type `boot.rq.pwy` <class<`matrix`>, class<`matrix`>, double[], double, double> => class<`matrix`>;
type `boot.rq.xy` <class<`matrix`>, double[], class<`matrix`>, double, double> => class<`matrix`>;
type `coef.crq` <class<`crq`>, double[], ...> => class<`matrix`>;
type `combos` <double, double> => class<`matrix`>;
type `crq` <class<`formula`>, any, any, any, any, any, character, null, ...> => class<`crq`>;
type `crq.fit.por` <class<`matrix`>, double[], double[], double[] | null, any, character> => class<`crq`>;
type `crq.fit.pow` <class<`matrix`>, double[], double[], double, null, any, logical, double> => list<double[] | class<`matrix`>>;
type `Curv` <double[], double[], character[]> => class<`Surv`>;
type `dither` <integer[], character, double> => double[];
type `dynformula` <class<`formula`>> => class<`dynformula`, `formula`>;
type `dynrq` <class<`formula`>, double[], any, any, any, any, character, null, double[] | null, double[] | null, ...> => (class<`dynrq`, `rq`> | class<`dynrqs`, `rqs`>);
type `filter` <character[]> => logical[];
type `formula.rq` <class<`dynrq`, `rq`> | class<`rq`>, ...> => class<`formula`>;
type `FUN` <class<`dynrq`, `rq`> | class<`rq`>> => integer | <class<`call`>> => character | <class<`call`>> => character | <class<`dynrq`, `rq`> | class<`rq`>> => class<`summary.rq`> | <class<`summary.rq`>> => class<`matrix`> | <class<`dynrq`, `rq`> | class<`rq`>> => class<`name`> | <class<`dynrq`, `rq`> | class<`rq`>> => double | <character> => list<any> | <class<`dynrq`, `rq`> | class<`rq`>> => character[] | <double> => class<`ts`> | <double[]> => logical | <class<`summary.rq`>> => class<`matrix`> | <class<`dynrq`, `rq`> | class<`rq`>> => class<`formula`> | <class<`summary.rq`>> => double[];
type `gdot` <class<`matrix`>, double[], double> => class<`matrix`>;
type `is.zoofactor` <class<`zoo`> | class<`zoo`, `zooreg`>> => logical;
type `KhmaladzeTest` <class<`formula`>, class<`data.frame`>, double[], character, double[], double, ...> => class<`KhmaladzeTest`>;
type `kselect` <double[], double[]> => double[];
type `kuantile` <double[], double[], logical, logical, double, ...> => class<`kuantile`>;
type `kunique` <double[], logical[]> => list<double[]>;
type `L` <class<`ts`> | class<`zoo`>, double[]> => (class<`matrix`, `mts`, `ts`> | class<`ts`> | class<`zoo`>);
type `lm.fit.recursive` <double[], double[], logical> => class<`matrix`>;
type `lprq` <double[], double[], double, double, double> => list<double[]>;
type `makeD` <integer> => class<`matrix.csr`>;
type `model.frame.dynformula` <class<`dynformula`, `formula`>, null, null, any, logical, null, ...> => class<`data.frame`>;
type `plot.KhmaladzeTest` <class<`KhmaladzeTest`>, ...> => any;
type `plot.qss1` <class<`matrix`>, logical, logical, logical, ...> => double[];
type `plot.rqss` <class<`rqss`>, logical, logical, null, double, logical, logical, null, double, null, null, ...> => null;
type `qss` <double[], character, double, double, null, any> => list<any>;
type `qss1` <double[], character, double, any, any, any> => list<any>;
type `Rho` <double[], double> => double | <class<`ts`> | class<`zoo`>, double> => (class<`ts`> | class<`zoo`>) | <class<`matrix`>, double> => class<`matrix`>;
type `rq` <class<`formula`>, double[], any, any, any, any, character, logical, null, ...> => (class<`rq`> | class<`rq.process`> | class<`rqs`>);
type `rq.fit` <class<`matrix`>, double[] | class<`ts`> | class<`zoo`>, double, character, ...> => list<any>;
type `rq.fit.br` <class<`matrix`>, class<`ts`> | double[] | class<`zoo`>, double, double, logical, logical, logical, logical> => list<any>;
type `rq.fit.fnb` <class<`matrix`>, double[] | class<`ts`>, double, double[], double, double> => list<double[] | class<`matrix`> | double[] | class<`ts`> | double | class<`ts`>>;
type `rq.fit.sfn` <class<`matrix.csr`>, double[], double, class<`matrix`>, list<double>> => list<double[] | class<`matrix`> | list<double>>;
type `rqProcess` <class<`formula`>, class<`data.frame`>, double[], character, ...> => class<`rqProcess`>;
type `rqss` <class<`formula`>, double, environment, any, any, character, null, null, double, list<null | double>, ...> => class<`rqss`>;
type `rqss.fit` <class<`matrix.csr`>, double[], any, character, class<`matrix`>, list<double>, ...> => list<double[] | class<`matrix`> | list<double>>;
type `rq.wfit` <class<`matrix`>, double[], double, double[], character, ...> => list<double[] | class<`matrix`>>;
type `season` <class<`ts`>, null> => class<`zoo`, `zooreg`>;
type `SetLayout` <integer, double> => list<character | double[] | null>;
type `sfn.control` <null, null, null, double, double, double, logical> => list<null | double>;
type `summary.crq` <class<`crq`>, double[], double, character, logical, ...> => class<`summary.crqs`>;
type `summary.dynrqs` <class<`dynrqs`, `rqs`>, null, null, ...> => class<`summary.dynrqs`, `summary.rqs`>;
type `summary.rq` <class<`dynrq`, `rq`> | class<`rq`>, character | null, logical, logical, any, double, ...> => class<`summary.rq`>;
type `summary.rqs` <class<`dynrqs`, `rqs`> | class<`rqs`>, ...> => (class<`summary.dynrqs`, `summary.rqs`> | class<`summary.rqs`>);
type `untangle.specials` <class<`formula`, `terms`>, character, double> => list<character | integer>;
