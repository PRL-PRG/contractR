type `filter` <character[]> => logical[];
type `nls.lm` <double[] | struct<`a`:double, `b`:double> | struct<`Asym`:double, `xmid`:double, `scal`:double> | struct<`Vm`:double, `K`:double>, ? symbol | any => any, ? symbol | any => any, any => any, ? any => any, struct<`ftol`:double, `ptol`:double, `gtol`:double, `diag`:tuple<>, `epsfcn`:double, `factor`:double, `maxfev`:integer[], `maxiter`:double, `nprint`:double> | struct<`maxiter`:double, `tol`:double, `minFactor`:double, `printEval`:logical, `warnOnly`:logical>, ??? | any => any | double[]> => struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:tuple<double, double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:list<double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`gmax`:double, `eff`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`K`:double, `r`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`k1`:double, `k2`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`a`:double, `b`:double, `c`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`Asym`:double, `xmid`:double, `scal`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`tau`:double, `N0`:double, `a`:double, `f0`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:struct<`a`:double, `b`:double>, `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`a`:double, `b`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:struct<`Asym`:double, `xmid`:double, `scal`:double>, `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`Asym`:double, `xmid`:double, `scal`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:struct<`Vm`:double, `K`:double>, `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`Vm`:double, `K`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double>;
type `nls.lm.control` <double, double, double, tuple<>, double, double, integer[], double, double> => struct<`ftol`:double, `ptol`:double, `gtol`:double, `diag`:tuple<>, `epsfcn`:double, `factor`:double, `maxfev`:integer[], `maxiter`:double, `nprint`:double>;
type `$` <logical[]> => language | ^double[];
type `coef.nls.lm` <struct<`par`:struct<`a`:double, `b`:double, `c`:double>, `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`a`:double, `b`:double, `c`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`tau`:double, `N0`:double, `a`:double, `f0`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double>, ???> => double[];
type `deviance.nls.lm` <struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`tau`:double, `N0`:double, `a`:double, `f0`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:struct<`a`:double, `b`:double, `c`:double>, `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`a`:double, `b`:double, `c`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double>, ???> => double;
type `fn` <double[] | struct<`a`:double, `b`:double> | struct<`Asym`:double, `xmid`:double, `scal`:double> | struct<`Vm`:double, `K`:double>> => double[];
type `FUN` <character> => integer;
type `getPars` < > => double[];
type `getRHS` < > => double[];
type `getRHS.noVarying` < > => double[];
type `nlsLM` <language, environment | struct<>, double[] | struct<`a`:double, `b`:double> | ??? | struct<`Asym`:double, `xmid`:double, `scal`:double> | struct<`Vm`:double, `K`:double>, null, character, struct<`ftol`:double, `ptol`:double, `gtol`:double, `diag`:tuple<>, `epsfcn`:double, `factor`:double, `maxfev`:integer[], `maxiter`:double, `nprint`:double> | struct<`maxiter`:double, `tol`:double, `minFactor`:double, `printEval`:logical, `warnOnly`:logical>, null, null, logical, ???, ??? | language, ???, logical, ???> => struct<`m`:struct<`resid`:any => any, `fitted`:any => any, `formula`:any => any, `deviance`:any => any, `lhs`:any => any, `gradient`:any => any, `conv`:any => any, `incr`:any => any, `setVarying`:any => any, `setPars`:any => any, `getPars`:any => any, `getAllPars`:any => any, `getEnv`:any => any, `trace`:any => any, `Rmat`:any => any, `predict`:any => any>, `convInfo`:struct<`isConv`:logical, `finIter`:integer, `finTol`:double, `stopCode`:integer, `stopMessage`:character>, `data`:language, `call`:language, `control`:struct<`ftol`:double, `ptol`:double, `gtol`:double, `diag`:tuple<>, `epsfcn`:double, `factor`:double, `maxfev`:integer[], `maxiter`:double, `nprint`:double>> | struct<`m`:struct<`resid`:any => any, `fitted`:any => any, `formula`:any => any, `deviance`:any => any, `lhs`:any => any, `gradient`:any => any, `conv`:any => any, `incr`:any => any, `setVarying`:any => any, `setPars`:any => any, `getPars`:any => any, `getAllPars`:any => any, `getEnv`:any => any, `trace`:any => any, `Rmat`:any => any, `predict`:any => any>, `convInfo`:struct<`isConv`:logical, `finIter`:integer, `finTol`:double, `stopCode`:integer, `stopMessage`:character>, `data`:symbol, `call`:language, `control`:struct<`ftol`:double, `ptol`:double, `gtol`:double, `diag`:tuple<>, `epsfcn`:double, `factor`:double, `maxfev`:integer[], `maxiter`:double, `nprint`:double>> | struct<`m`:struct<`resid`:any => any, `fitted`:any => any, `formula`:any => any, `deviance`:any => any, `lhs`:any => any, `gradient`:any => any, `conv`:any => any, `incr`:any => any, `setVarying`:any => any, `setPars`:any => any, `getPars`:any => any, `getAllPars`:any => any, `getEnv`:any => any, `trace`:any => any, `Rmat`:any => any, `predict`:any => any>, `convInfo`:struct<`isConv`:logical, `finIter`:integer, `finTol`:double, `stopCode`:integer, `stopMessage`:character>, `data`:symbol, `call`:language, `control`:struct<`maxiter`:double, `tol`:double, `minFactor`:double, `printEval`:logical, `warnOnly`:logical>> | struct<`m`:struct<`resid`:any => any, `fitted`:any => any, `formula`:any => any, `deviance`:any => any, `lhs`:any => any, `gradient`:any => any, `conv`:any => any, `incr`:any => any, `setVarying`:any => any, `setPars`:any => any, `getPars`:any => any, `getAllPars`:any => any, `getEnv`:any => any, `trace`:any => any, `Rmat`:any => any, `predict`:any => any>, `convInfo`:struct<`isConv`:logical, `finIter`:integer, `finTol`:double, `stopCode`:integer, `stopMessage`:character>, `data`:symbol, `call`:language, `weights`:double[], `control`:struct<`ftol`:double, `ptol`:double, `gtol`:double, `diag`:tuple<>, `epsfcn`:double, `factor`:double, `maxfev`:integer[], `maxiter`:double, `nprint`:double>>;
type `nlsModel` <language, struct<`density`:double[], `conc`:double[], `Asym`:double, `xmid`:double, `scal`:double> | struct<`N`:double[], `TT`:double[], `tau`:double, `N0`:double, `a`:double, `f0`:double> | struct<`rate`:double[], `conc`:double[], `(weights)`:double[], `Vm`:double, `K`:double> | struct<`simDNoisy`:double[], `x`:double[], `a`:double, `b`:double, `c`:double> | struct<`y`:double[], `x`:integer[], `a`:double, `b`:double>, double[] | struct<`Asym`:double, `xmid`:double, `scal`:double> | struct<`Vm`:double, `K`:double> | struct<`a`:double, `b`:double>, double[], null> => struct<`resid`:any => any, `fitted`:any => any, `formula`:any => any, `deviance`:any => any, `lhs`:any => any, `gradient`:any => any, `conv`:any => any, `incr`:any => any, `setVarying`:any => any, `setPars`:any => any, `getPars`:any => any, `getAllPars`:any => any, `getEnv`:any => any, `trace`:any => any, `Rmat`:any => any, `predict`:any => any>;
type `setPars` <double[]> => null;
type `summary.nls.lm` <struct<`par`:double[], `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`tau`:double, `N0`:double, `a`:double, `f0`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double> | struct<`par`:struct<`a`:double, `b`:double, `c`:double>, `hessian`:^double[], `fvec`:double[], `info`:integer, `message`:character, `diag`:struct<`a`:double, `b`:double, `c`:double>, `niter`:integer, `rsstrace`:double[], `deviance`:double>, ???> => struct<`residuals`:double[], `sigma`:double, `df`:integer[], `cov.unscaled`:^double[], `info`:integer, `niter`:integer, `stopmess`:character, `coefficients`:^double[]>;
