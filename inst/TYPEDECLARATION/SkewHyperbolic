type `filter` <character[]> => logical[];
type `skewhypCheckPars` <double[] | struct<>> => struct<`case`:character, `errMessage`:character>;
type `ddskewhyp` <double[], double, double, double, double, double[], logical, double> => double[];
type `f` <double[], double[], double> => double[];
type `fn` <double[]> => double;
type `FUN` <double> => integer;
type `logskewhypDens` <double[]> => double[];
type `plot.skewhypFit` <struct<`param`:double[], `maxLik`:double, `hessian`:^double[], `method`:character, `conv`:double[], `iter`:double, `x`:^double[], `xName`:character, `paramStart`:double[], `svName`:character, `startValues`:character, `breaks`:double[], `midpoints`:double[], `empDens`:double[]>, integer[], character[], logical, ???> => null;
type `ppskewhyp` <^double[], logical, environment, character, logical, double[], character, character, character, logical, logical, ???> => struct<`x`:double[], `y`:double[]>;
type `print.skewhypFit` <struct<`param`:double[], `maxLik`:double, `hessian`:^double[], `method`:character, `conv`:double[], `iter`:double, `x`:^double[], `xName`:character, `paramStart`:double[], `svName`:character, `startValues`:character, `breaks`:double[], `midpoints`:double[], `empDens`:double[]>, double, ???> => struct<`param`:double[], `maxLik`:double, `hessian`:^double[], `method`:character, `conv`:double[], `iter`:double, `x`:^double[], `xName`:character, `paramStart`:double[], `svName`:character, `startValues`:character, `breaks`:double[], `midpoints`:double[], `empDens`:double[]>;
type `qqskewhyp` <^double[], environment | pairlist | integer, pairlist | integer, ? integer, environment | integer, double[], character, character, character, logical, logical, ???> => struct<`x`:double[], `y`:^double[]>;
type `skewhypDens` <double[]> => double[];
type `skewhypFitStart` <^double[], null, character, ? double[], ???> => struct<`paramStart`:double[], `breaks`:double[], `midpoints`:double[], `empDens`:double[], `svName`:character>;
type `skewhypTailPlotLine` <double[], character | double[] | symbol, double[], struct<`error`:any => any> | pairlist | double[], any => any | double[] | character, double[], tuple<any => any> | character | double | pairlist, ??? | character> => null;
