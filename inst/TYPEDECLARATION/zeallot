type `%<-%` <any, character[] | class<`data.frame`> | class<`summaryDefault`, `table`> | class<`summary.lm`> | double[] | list<any>> => any;
type `%->%` <list<character | double | character>, any> => list<character | double | character>;
type `add_defaults` <list<character>, list<character>, environment> => list<character | null>;
type `assert_destruction` <character | class<`Date`>> => null;
type `calls` <character | class<`name`> | null | list<any>> => (character[] | null);
type `car` <list<any>> => (character[] | class<`call`> | class<`name`> | double[] | null | list<any>);
type `cdr` <list<any>> => list<any>;
type `check_extract_calls` <character | list<any>, any> => null;
type `collect` <list<character>, list<character | double[] | class<`formula`, `terms`> | double[] | class<`matrix`>>> => list<character | list<character> | double[] | class<`matrix`> | list<class<`formula`, `terms`> | double[] | class<`matrix`>> | list<character | double[]>>;
type `condition` <character[], character, class<`call`>, ...> => class<`condition`, `error`, `invalid_rhs`>;
type `destructure` <character | class<`shape`> | class<`Date`> | class<`summary.lm`> | class<`data.frame`>> => list<any>;
type `destructure.character` <character> => list<character>;
type `destructure.data.frame` <class<`data.frame`>> => list<double[]>;
type `destructure.Date` <class<`Date`>> => list<double>;
type `destructure.summary.lm` <class<`summary.lm`>> => list<any>;
type `FUN` <character | class<`name`> | null | list<any>> => (character[] | null) | <character | list<any>, any> => null | <character> => null | <character | list<character | character | list<character | list<character>> | character | list<character>>> => logical | <class<`name`> | list<any>> => (character | list<any>);
type `get_default` <character> => null;
type `has_collector` <list<character>> => logical;
type `has_default` <list<character>> => logical[];
type `incorrect_number_of_values` < > => character;
type `is_collector` <character | list<character | character | list<character | list<character>> | character | list<character>>> => logical;
type `is_extract_op` <class<`name`>> => logical;
type `is_list` <character[] | class<`data.frame`> | class<`name`> | class<`summaryDefault`, `table`> | class<`summary.lm`> | double[] | null | list<any>> => logical;
type `is_valid_call` <class<`name`>> => logical;
type `multi_assign` <class<`call`>, character[] | class<`data.frame`> | class<`summaryDefault`, `table`> | class<`summary.lm`> | double[] | list<any>, any> => any;
type `names2` <class<`call`>> => character;
type `pair_off` <character | list<any>, any, any> => any;
type `stop_invalid_rhs` <character, class<`call`>, ...> => any;
type `tree` <class<`name`> | class<`call`>> => (class<`name`> | list<any>);
type `variables` <class<`name`> | list<any>> => (character | list<any>);
