type `%??%` <character[] | class<`function`> | double | null, any> => (character[] | class<`function`> | double);
type `allMissing` <class<`data.frame`> | class<`factor`> | ^double[]> => logical;
type `%and%` <character | logical, any> => (character | logical);
type `anyInfinite` <class<`data.frame`> | double[]> => logical;
type `anyMissing` <class<`data.frame`> | ^double[] | list<double | null> | null> => logical;
type `anyNaN` <class<`data.frame`> | double[]> => logical;
type `asCount` <double, logical, logical, double, any> => integer;
type `asInt` <double, logical, double, double, double, any> => integer;
type `asInteger` <double[], double, double, double, logical, logical, null, null> => integer[];
type `assert` <..., character, null> => logical;
type `assertCharacter` <character[], double | null, null, null, logical, logical, logical, null | integer> => character[];
type `assertChoice` <character, character[], logical, logical, any, any> => character;
type `assertClass` <class<`AssertCollection`>, character, logical, logical, character, null> => class<`AssertCollection`>;
type `assertCount` <double, logical, logical, double, logical, logical, any, null> => double;
type `assertFlag` <logical, logical, logical, any, null> => logical;
type `assertInt` <double, logical, double, double, double, logical, logical, any> => double;
type `assertInteger` <integer[], double, double, logical, logical, null, null, null> => integer[];
type `assertIntegerish` <double[], double, double, double, logical, logical, null, null> => double[];
type `assertNames` <character[], character, null, null, character[], null, null, character> => character[];
type `assertNumeric` <character | double[], double, double, logical, logical, logical, null | double, null> => (character | double[]);
type `checkAccess` <character, character> => logical;
type `checkArray` <class<`array`>, null, logical, double, null, null, logical> => logical;
type `checkCharacter` <character[], double | null, any, any, any, logical, logical, null | integer> => (character | logical);
type `checkCharacterPattern` <character[], null | character, null, any> => logical;
type `checkChoice` <class<`factor`> | double | character, character[] | integer, logical, any> => (character | logical);
type `checkClass` <class<`bar`, `foo`> | class<`AssertCollection`> | class<`Bar`, `R6`>, character[], logical, logical> => (character | logical);
type `checkDataFrame` <class<`data.frame`> | class<`data.frame`, `data.table`> | class<`data.frame`, `tbl`, `tbl_df`>, any, logical, logical, null | double, null, null, null> => (character | logical);
type `checkDataTable` <class<`data.frame`, `data.table`>, character | null, character | null, character[], logical, logical, null, null> => logical;
type `checkDataTableProps` <any, null | character, null | character> => logical;
type `checkDirectoryExists` <character, character> => logical;
type `checkDisjunct` <character[] | class<`factor`> | double, character[] | integer, logical> => (character | logical);
type `checkEnvironment` <environment, character[], logical> => logical;
type `checkFactor` <class<`factor`>, null, null, logical, logical, logical, null, null> => (character | logical);
type `checkFactorLevels` <class<`factor`>, null, null, logical, any, any, any> => (character | logical);
type `checkFALSE` <logical, logical> => (character | logical);
type `checkFileExists` <character, character, null> => logical;
type `checkFileExtension` <any, null> => logical;
type `checkFormula` <class<`formula`>, logical> => logical;
type `checkFunction` <class<`function`>, character | null, any, null, logical> => logical;
type `checkInteger` <integer[], double, double, logical, logical, null, null, null> => logical;
type `checkList` <list<any>, any, logical, logical, null, null, null, logical> => (character | logical);
type `checkListTypes` <class<`data.frame`> | class<`data.frame`, `data.table`> | class<`data.frame`, `tbl`, `tbl_df`> | list<any>, any> => logical;
type `checkMatrix` <class<`matrix`>, character | null, logical, logical, null, null, null, null> => (character | logical);
type `checkMultiClass` <class<`bar`>, character[], logical> => (character | logical);
type `checkNames` <integer[] | character[], character, any, any, any, any, any, character> => (character | logical);
type `checkNamesCmp` <character[], null, null, character[], null, null> => logical;
type `checkNull` <double | integer[] | null> => (character | logical);
type `checkOS` <character> => logical;
type `checkPathForOutput` <character, logical, null> => logical;
type `checkR6` <class<`Bar`, `R6`>, character, logical, logical, character, null, logical> => logical;
type `checkR6Props` <class<`Bar`, `R6`>, logical, character, null> => logical;
type `checkScalarNA` <double | ^logical[] | null, logical> => (character | logical);
type `checkSetEqual` <class<`factor`> | double | integer[] | character[], integer[] | character[], logical, logical> => (character | logical);
type `checkString` <character[], logical, null, any, any, any, logical> => (character | logical);
type `checkSubset` <class<`factor`> | double | character[], character[] | integer, logical, logical> => (character | logical);
type `checkTibble` <class<`data.frame`, `tbl`, `tbl_df`>, character[], logical, logical, null, null, null, null> => logical;
type `checkTRUE` <logical, logical> => (character | logical);
type `isSameType` <character[] | class<`factor`> | double | integer[], character[] | integer[]> => logical;
type `makeAssertCollection` < > => class<`AssertCollection`>;
type `makeAssertion` <character[] | class<`AssertCollection`> | double[], logical | character, any, any> => (character[] | class<`AssertCollection`> | double[]);
type `makeAssertionFunction` <class<`function`>, null, logical, logical, environment> => class<`function`>;
type `makeExpectationFunction` <class<`function`>, null, logical, environment> => class<`function`>;
type `makeTestFunction` <class<`function`>, null, environment> => class<`function`>;
type `matchArg` <character, character[], logical, any, null> => character;
type `%nin%` <character, character[]> => logical;
type `qassert` <character[] | class<`factor`> | double[] | null, character, any> => (character[] | class<`factor`> | double[] | null);
type `qtest` <character | class<`data.frame`> | class<`factor`> | double[] | null, character[]> => logical;
type `qtestr` <class<`data.frame`> | list<integer> | list<integer[] | double | character[]>, character[], integer> => logical;
type `register_tinytest` < > => list<null>;
type `set_collapse` <character[] | class<`factor`> | double | integer[]> => character;
type `testAccess` <character, character> => logical;
type `testAtomic` <character[], logical, logical, null, integer, null, logical, null> => logical;
type `testAtomicVector` <character[], logical, logical, null, integer, null, logical, null> => logical;
type `testCharacter` <character[], double | null, null | character, null, logical, logical, logical, null> => logical;
type `testChoice` <character | class<`factor`> | double, character[] | integer, logical, logical> => logical;
type `testClass` <class<`bar`, `foo`>, character[], logical, logical> => logical;
type `testComplex` <complex, logical, logical, null, null, null, logical, null> => logical;
type `testCount` <double, logical, logical, double, logical> => logical;
type `testDataFrame` <class<`data.frame`>, any, logical, logical, double | null, null, null, null> => logical;
type `testDataTable` <class<`data.frame`, `data.table`>, character | null, character | null, character[], logical, logical, null, null> => logical;
type `testDirectory` <character, character> => logical;
type `testDisjunct` <character[] | class<`factor`> | double, character[] | integer, logical> => logical;
type `testDouble` <double, double, double, logical, logical, logical, null, double | null> => logical;
type `testEnvironment` <environment, character[], logical> => logical;
type `testFactor` <class<`factor`>, null, null, logical, logical, logical, null, null> => logical;
type `testFALSE` <logical, logical> => logical;
type `testFileExists` <character, character, null> => logical;
type `testFlag` <double, logical, logical> => logical;
type `testFunction` <class<`function`>, character | null, logical, null, logical> => logical;
type `testInt` <double, logical, double, double, double, logical> => logical;
type `testInteger` <double | integer[], double, double, logical, logical, null, null, null> => logical;
type `testIntegerish` <double | integer[], double, double, double, logical, logical, null, null> => logical;
type `testList` <list<any>, any, logical, logical, null, null, null, logical> => logical;
type `testLogical` <logical, logical, logical, null, double | null, null, logical, null> => logical;
type `testMatrix` <class<`matrix`>, null, logical, logical, null, null, double, null> => logical;
type `testNamed` <integer[], character> => logical;
type `testNames` <integer[], character, null, null, null, null, null, character> => logical;
type `testNull` <double | null> => logical;
type `testNumber` <double | integer[], logical, double, double, logical, logical> => logical;
type `testNumeric` <double, double, double, logical, logical, logical, null, double | null> => logical;
type `testOS` <character> => logical;
type `testPathForOutput` <character, logical, null> => logical;
type `testRaw` <raw, null, integer, null, null, logical> => logical;
type `testScalar` <double | integer[], logical, logical> => logical;
type `testScalarNA` <double | ^logical[] | null, logical> => logical;
type `testSetEqual` <character[] | class<`factor`> | double | integer[], character[] | integer[], logical, logical> => logical;
type `testString` <character[], logical, null, null, null, logical, logical> => logical;
type `testSubset` <character[] | class<`factor`> | double, character[] | integer, logical, logical> => logical;
type `testTibble` <class<`data.frame`, `tbl`, `tbl_df`>, character[], logical, logical, null, null, null, null> => logical;
type `testTRUE` <logical, logical> => logical;
type `testVector` <character[], logical, logical, logical, null, integer, null, logical> => logical;
type `vname` <any> => character;
type `wf` <logical[] | null, logical> => integer[];
type `wl` <logical[], logical> => integer[];
