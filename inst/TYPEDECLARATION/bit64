type `:` <class<`integer64`> | double, double> => (class<`integer64`> | integer[]);
type `A` <double> => (class<`integer64`> | double[]);
type `abs.integer64` <class<`integer64`>> => class<`integer64`>;
type `all.integer64` <..., logical> => (logical | null);
type `any.integer64` <..., logical> => (logical | null);
type `as.bitstring` <class<`integer64`>, ...> => character[];
type `as.bitstring.integer64` <class<`integer64`>, ...> => character[];
type `as.character.integer64` <class<`AsIs`, `integer64`> | class<`integer64`>, ...> => ^character[];
type `as.data.frame.integer64` <class<`integer64`>, ...> => class<`data.frame`>;
type `as.double.integer64` <class<`integer64`>, logical, ...> => ^double[];
type `as.integer64` <character[] | class<`factor`> | class<`integer64`> | ^double[] | null, ...> => class<`integer64`>;
type `as.integer64.character` <character[], ...> => class<`integer64`>;
type `as.integer64.double` <^double[] | null, logical, ...> => class<`integer64`>;
type `as.integer64.factor` <class<`factor`>, ...> => class<`integer64`>;
type `as.integer64.integer` <^integer[] | null, ...> => class<`integer64`>;
type `as.integer64.integer64` <class<`integer64`>, ...> => class<`integer64`>;
type `as.integer64.logical` <^integer[] | null, ...> => class<`integer64`>;
type `as.integer.integer64` <class<`integer64`>, ...> => ^integer[];
type `as.logical.integer64` <class<`integer64`>, ...> => ^logical[];
type `asMethod` <character[], character, logical> => class<`integer64`>;
type `benchmark64` <double, double, class<`function`>> => class<`matrix`>;
type `binattr` <double[] | class<`integer64`>, class<`integer64`> | double[]> => (null | list<character>);
type `cache` <class<`integer64`>> => (class<`cache`, `cache_integer64`, `environment`> | null);
type `cbind` <...> => class<`integer64`>;
type `ceiling.integer64` <class<`integer64`>> => class<`integer64`>;
type `c.integer64` <..., logical> => class<`integer64`>;
type `cummax.integer64` <class<`integer64`>> => class<`integer64`>;
type `cummin.integer64` <class<`integer64`>> => class<`integer64`>;
type `cumprod.integer64` <class<`integer64`>> => class<`integer64`>;
type `cumsum.integer64` <class<`integer64`>> => class<`integer64`>;
type `:.default` <double, double> => integer[];
type `diff.integer64` <class<`integer64`>, double, double, ...> => class<`integer64`>;
type `duplicated.integer64` <class<`integer64`>, logical, null, null, ...> => logical[];
type `filter` <character[]> => logical[];
type `floor.integer64` <class<`integer64`>> => class<`integer64`>;
type `format.integer64` <class<`integer64`>, character, ...> => character[];
type `fun` <any, any> => null | <any, any> => null;
type `FUN` <double | null | class<`integer64`>> => (class<`integer64`> | double) | <class<`call`> | class<`name`>> => character | <class<`integer64`> | null> => (logical | null) | <double | null | class<`integer64`>> => (class<`integer64`> | double) | <double | null | class<`integer64`>> => (class<`integer64`> | double) | <double | null | class<`integer64`>> => (class<`integer64`> | double) | <class<`integer64`> | null> => (logical | null) | <double | null | class<`integer64`>> => (class<`integer64`> | double[]);
type `getcache` <class<`integer64`>, character> => (double | null);
type `hashcache` <class<`integer64`>, null, ...> => class<`cache`, `cache_integer64`, `environment`>;
type `hashdup` <class<`cache`, `cache_integer64`, `environment`>, ...> => logical[];
type `hashdup.cache_integer64` <class<`cache`, `cache_integer64`, `environment`>, ...> => logical[];
type `hashfin` <class<`cache`, `cache_integer64`, `environment`>, ...> => logical[];
type `hashfin.cache_integer64` <class<`cache`, `cache_integer64`, `environment`>, class<`integer64`>, ...> => logical[];
type `hashfun` <class<`integer64`>, ...> => integer[];
type `hashfun.integer64` <class<`integer64`>, double, null, ...> => integer[];
type `hashmap` <class<`integer64`>, ...> => class<`cache`, `cache_integer64`, `environment`>;
type `hashmap.integer64` <class<`integer64`>, integer | null, double, null | integer, null | class<`cache`, `cache_integer64`, `environment`>, ...> => class<`cache`, `cache_integer64`, `environment`>;
type `hashmaptab` <class<`integer64`>, ...> => list<class<`integer64`> | integer[]>;
type `hashmaptab.integer64` <class<`integer64`>, null, double, null, ...> => list<class<`integer64`> | integer[]>;
type `hashmapuni` <class<`integer64`>, ...> => class<`integer64`>;
type `hashmapuni.integer64` <class<`integer64`>, null | integer, double, null, ...> => class<`integer64`>;
type `hashmapupo` <class<`integer64`>, ...> => integer[];
type `hashmapupo.integer64` <class<`integer64`>, null, double, null, ...> => integer[];
type `hashpos` <class<`cache`, `cache_integer64`, `environment`>, ...> => ^integer[];
type `hashpos.cache_integer64` <class<`cache`, `cache_integer64`, `environment`>, class<`integer64`>, null | integer, ...> => ^integer[];
type `hashrev` <class<`cache`, `cache_integer64`, `environment`>, ...> => ^integer[];
type `hashrev.cache_integer64` <class<`cache`, `cache_integer64`, `environment`>, class<`integer64`>, null, ...> => ^integer[];
type `hashrin` <class<`cache`, `cache_integer64`, `environment`>, ...> => logical[];
type `hashrin.cache_integer64` <class<`cache`, `cache_integer64`, `environment`>, class<`integer64`>, ...> => logical[];
type `hashtab` <class<`cache`, `cache_integer64`, `environment`>, ...> => list<class<`integer64`> | integer[]>;
type `hashtab.cache_integer64` <class<`cache`, `cache_integer64`, `environment`>, ...> => list<class<`integer64`> | integer[]>;
type `hashuni` <class<`cache`, `cache_integer64`, `environment`>, ...> => class<`integer64`>;
type `hashuni.cache_integer64` <class<`cache`, `cache_integer64`, `environment`>, logical, ...> => class<`integer64`>;
type `hashupo` <class<`cache`, `cache_integer64`, `environment`>, ...> => integer[];
type `hashupo.cache_integer64` <class<`cache`, `cache_integer64`, `environment`>, logical, ...> => integer[];
type `identical.integer64` <character[] | class<`data.frame`> | class<`integer64`> | ^logical[] | null, character[] | class<`data.frame`> | class<`integer64`> | ^logical[], logical, logical, logical, logical> => logical;
type `%in%` <^integer[] | character | class<`integer64`> | double, ^integer[] | character[] | class<`integer64`>> => logical[];
type `%in%.default` <^integer[] | character | double, ^integer[] | character[]> => logical[];
type `%in%.integer64` <class<`integer64`>, class<`integer64`>, ...> => logical[];
type `integer64` <double> => class<`integer64`>;
type `^.integer64` <class<`integer64`>, double[]> => class<`integer64`>;
type `<=.integer64` <class<`integer64`>, class<`integer64`>> => ^logical[];
type `<.integer64` <class<`integer64`>, class<`integer64`>> => ^logical[];
type `==.integer64` <class<`integer64`>, class<`integer64`> | integer> => ^logical[];
type `>=.integer64` <class<`integer64`>, class<`integer64`>> => ^logical[];
type `>.integer64` <class<`integer64`>, class<`integer64`>> => ^logical[];
type `|.integer64` <class<`integer64`>, class<`integer64`>> => ^logical[];
type `-.integer64` <class<`integer64`> | double, any> => class<`integer64`>;
type `:.integer64` <class<`integer64`>, double> => class<`integer64`>;
type `!=.integer64` <class<`integer64`>, class<`integer64`>> => ^logical[];
type `!.integer64` <class<`integer64`>> => ^logical[];
type `/.integer64` <class<`integer64`>, double> => double[];
type `[<-.integer64` <class<`integer64`>, ..., class<`integer64`> | double | integer[] | null> => class<`integer64`>;
type `[.integer64` <class<`AsIs`, `integer64`> | class<`integer64`>, ...> => (class<`AsIs`, `integer64`> | class<`integer64`>);
type `[[<-.integer64` <class<`integer64`>, ..., class<`integer64`> | double | integer[] | null> => class<`integer64`>;
type `[[.integer64` <class<`integer64`>, ...> => class<`integer64`>;
type `*.integer64` <class<`integer64`> | double[], class<`integer64`> | double | integer[]> => class<`integer64`>;
type `&.integer64` <class<`integer64`>, class<`integer64`>> => ^logical[];
type `%/%.integer64` <class<`integer64`>, class<`integer64`> | double> => class<`integer64`>;
type `+.integer64` <class<`integer64`> | integer[], class<`integer64`> | double | integer[]> => class<`integer64`>;
type `is.double` <class<`integer64`> | double[]> => logical;
type `is.double.default` <double[]> => logical;
type `is.double.integer64` <class<`integer64`>> => logical;
type `is.integer64` <character[] | class<`integer64`> | double[] | null> => logical;
type `is.na.integer64` <class<`integer64`>> => logical[];
type `is.sorted.integer64` <class<`integer64`>, ...> => logical;
type `jamcache` <class<`integer64`>> => class<`cache`, `cache_integer64`, `environment`>;
type `keypos` <class<`integer64`>, ...> => integer[];
type `keypos.integer64` <class<`integer64`>, null, ...> => integer[];
type `length<-.integer64` <class<`integer64`>, double> => class<`integer64`>;
type `lim.integer64` < > => class<`integer64`>;
type `list.names` <...> => character[];
type `log10.integer64` <class<`integer64`>> => double[];
type `log2.integer64` <class<`integer64`>> => double[];
type `log.integer64` <class<`integer64`>, double> => double[];
type `match` <^integer[] | class<`integer64`> | double, ^integer[] | class<`integer64`>, ...> => ^integer[];
type `match.default` <^integer[] | double, ^integer[], ...> => ^integer[];
type `match.integer64` <class<`integer64`>, class<`integer64`>, null | integer, null, null, ...> => ^integer[];
type `max.integer64` <..., logical> => class<`integer64`>;
type `mean.integer64` <class<`integer64`>, logical, ...> => class<`integer64`>;
type `median.integer64` <class<`integer64`>, logical, ...> => class<`integer64`>;
type `mergeorder.integer64` <class<`integer64`>, integer[], logical, logical, logical, ...> => integer;
type `mergesort.integer64` <class<`integer64`>, logical, logical, logical, ...> => integer;
type `mergesortorder.integer64` <class<`integer64`>, integer[], logical, logical, logical, ...> => integer;
type `min.integer64` <..., logical> => class<`integer64`>;
type `minusclass` <character[], character> => character[];
type `na.count.integer64` <class<`integer64`>, ...> => integer;
type `newcache` <class<`integer64`>> => class<`cache`, `cache_integer64`, `environment`>;
type `nties.integer64` <class<`integer64`>, ...> => integer;
type `nunique.integer64` <class<`integer64`>, ...> => integer;
type `nvalid.integer64` <class<`integer64`>, ...> => integer;
type `optimizer64` <double, double, class<`function`>, character[], character[], character[], logical> => class<`matrix`>;
type `order` <...> => integer[];
type `ordercache` <class<`integer64`>, null, null, character> => class<`integer64`>;
type `order.default` <...> => integer[];
type `orderdup` <class<`integer64`>, integer[], ...> => logical[];
type `orderdup.integer64` <class<`integer64`>, integer[], double | null, ...> => logical[];
type `orderfin` <class<`integer64`>, integer[], class<`integer64`>, ...> => logical[];
type `orderfin.integer64` <class<`integer64`>, integer[], class<`integer64`>, null, ...> => logical[];
type `order.integer64` <..., logical, logical, logical, logical, any, logical> => integer[];
type `ordernut` <class<`integer64`>, integer[], ...> => integer[];
type `ordernut.integer64` <class<`integer64`>, integer[], ...> => integer[];
type `orderpos` <class<`integer64`>, integer[], class<`integer64`>, ...> => ^integer[];
type `orderpos.integer64` <class<`integer64`>, integer[], class<`integer64`>, null, double | null, ...> => ^integer[];
type `orderqtl` <class<`integer64`>, integer[], integer, double[], ...> => class<`integer64`>;
type `orderqtl.integer64` <class<`integer64`>, integer[], integer, double[], ...> => class<`integer64`>;
type `orderrnk` <class<`integer64`>, integer[], integer, ...> => ^double[];
type `orderrnk.integer64` <class<`integer64`>, integer[], integer, ...> => ^double[];
type `ordertab` <class<`integer64`>, integer[], any, ...> => integer[];
type `ordertab.integer64` <class<`integer64`>, integer[], any, logical, logical, ...> => integer[];
type `orderuni` <class<`integer64`>, integer[], integer, ...> => class<`integer64`>;
type `orderuni.integer64` <class<`integer64`>, integer[], integer, logical, ...> => class<`integer64`>;
type `orderupo` <class<`integer64`>, integer[], integer, ...> => integer[];
type `orderupo.integer64` <class<`integer64`>, integer[], integer, logical, ...> => integer[];
type `plusclass` <character | null, character> => character[];
type `prank` <class<`integer64`>, ...> => ^double[];
type `prank.integer64` <class<`integer64`>, null, ...> => ^double[];
type `prod.integer64` <..., logical> => class<`integer64`>;
type `qtile` <class<`integer64`>, double[], ...> => class<`integer64`>;
type `qtile.integer64` <class<`integer64`>, double[], logical, null, ...> => class<`integer64`>;
type `quantile.integer64` <class<`integer64`>, double[], logical, logical, integer, ...> => class<`integer64`>;
type `radixsort.integer64` <class<`integer64`>, logical, logical, logical, integer, ...> => integer;
type `radixsortorder.integer64` <class<`integer64`>, integer[], logical, logical, logical, integer, ...> => integer;
type `ramorder.integer64` <class<`integer64`>, integer[], logical, logical, logical, logical, character[], logical, ...> => integer;
type `ramsort.integer64` <class<`integer64`>, logical, logical, logical, any, character[], logical, ...> => integer;
type `ramsortorder.integer64` <class<`integer64`>, integer[], logical, logical, logical, logical, character[], logical, ...> => integer;
type `range.integer64` <..., logical> => class<`integer64`>;
type `rank` <^integer[] | class<`integer64`> | double[], ...> => ^double[];
type `rank.default` <^integer[] | double[], ...> => ^double[];
type `rank.integer64` <class<`integer64`>, null, ...> => ^double[];
type `rbind` <...> => class<`integer64`>;
type `remcache` <class<`AsIs`, `integer64`> | class<`integer64`> | integer[]> => null;
type `rep.integer64` <class<`integer64`>, ...> => class<`integer64`>;
type `seq.integer64` <class<`integer64`> | null | double, double | null | class<`integer64`>, null | double, null | double, null | class<`integer64`> | integer[], ...> => class<`integer64`>;
type `setcache` <class<`integer64`>, character, class<`integer64`> | double | integer[]> => class<`cache`, `cache_integer64`, `environment`>;
type `signif.integer64` <class<`integer64`>, double> => class<`integer64`>;
type `sign.integer64` <class<`integer64`>> => class<`integer64`>;
type `sortcache` <class<`integer64`>, null> => class<`integer64`>;
type `sortfin` <class<`integer64`>, class<`integer64`>, ...> => logical[];
type `sortfin.integer64` <class<`integer64`>, class<`integer64`>, null, ...> => logical[];
type `sort.integer64` <class<`integer64`>, logical, logical, logical | null, logical, any, logical, ...> => class<`integer64`>;
type `sortnut` <class<`integer64`>, ...> => integer[];
type `sortnut.integer64` <class<`integer64`>, ...> => integer[];
type `sortordercache` <class<`integer64`>, null, null> => class<`integer64`>;
type `sortorderdup` <class<`integer64`>, integer[], ...> => logical[];
type `sortorderdup.integer64` <class<`integer64`>, integer[], double | null, ...> => logical[];
type `sortorderkey` <class<`integer64`>, integer[], integer, ...> => integer[];
type `sortorderkey.integer64` <class<`integer64`>, integer[], integer, ...> => integer[];
type `sortorderpos` <class<`integer64`>, integer[], class<`integer64`>, ...> => ^integer[];
type `sortorderpos.integer64` <class<`integer64`>, integer[], class<`integer64`>, null, null, ...> => ^integer[];
type `sortorderrnk` <class<`integer64`>, integer[], integer, ...> => ^double[];
type `sortorderrnk.integer64` <class<`integer64`>, integer[], integer, ...> => ^double[];
type `sortordertab` <class<`integer64`>, integer[], ...> => integer[];
type `sortordertab.integer64` <class<`integer64`>, integer[], logical, ...> => integer[];
type `sortordertie` <class<`integer64`>, integer[], integer, ...> => integer[];
type `sortordertie.integer64` <class<`integer64`>, integer[], integer, ...> => integer[];
type `sortorderuni` <class<`integer64`>, class<`integer64`>, integer[], integer, ...> => class<`integer64`>;
type `sortorderuni.integer64` <class<`integer64`>, class<`integer64`>, integer[], integer, ...> => class<`integer64`>;
type `sortorderupo` <class<`integer64`>, integer[], integer, logical, ...> => integer[];
type `sortorderupo.integer64` <class<`integer64`>, integer[], integer, logical, ...> => integer[];
type `sortp` <list<class<`integer64`> | integer[]>> => list<class<`integer64`> | integer[]>;
type `sortqtl` <class<`integer64`>, integer, double[], ...> => class<`integer64`>;
type `sortqtl.integer64` <class<`integer64`>, integer, double[], ...> => class<`integer64`>;
type `sorttab` <class<`integer64`>, integer, ...> => integer[];
type `sorttab.integer64` <class<`integer64`>, integer, ...> => integer[];
type `sortuni` <class<`integer64`>, integer, ...> => class<`integer64`>;
type `sortuni.integer64` <class<`integer64`>, integer, ...> => class<`integer64`>;
type `sqrt.integer64` <class<`integer64`>> => double[];
type `still.identical` <class<`integer64`>, class<`integer64`>> => logical;
type `str.integer64` <class<`AsIs`, `integer64`> | class<`integer64`>, integer, logical, logical, ...> => null;
type `sum.integer64` <..., logical> => class<`integer64`>;
type `summary.integer64` <class<`integer64`>, ...> => class<`integer64`>;
type `table.integer64` <..., character[], character[], null, null, character[], double> => (class<`data.frame`> | class<`table`> | list<class<`integer64`> | integer[]>);
type `tiepos` <class<`integer64`>, ...> => integer[];
type `tiepos.integer64` <class<`integer64`>, null, null, ...> => integer[];
type `trunc.integer64` <class<`integer64`>, ...> => class<`integer64`>;
type `unipos` <class<`integer64`>, logical, any, ...> => integer[];
type `unipos.integer64` <class<`integer64`>, logical, character[], null, null, ...> => integer[];
type `unique.integer64` <class<`integer64`>, logical, character[], null, null, ...> => class<`integer64`>;
type `xor.integer64` <class<`integer64`>, class<`integer64`>> => ^logical[];
