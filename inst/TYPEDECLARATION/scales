type `%||%` <null | double | integer[], any> => double[];
type `alpha` <character[], double[]> => character[];
type `area_pal` <double[]> => class<`function`>;
type `asn_trans` < > => class<`trans`>;
type `as.trans` <character | class<`trans`>> => class<`trans`>;
type `atanh_trans` < > => class<`trans`>;
type `boxcox_trans` <double, double> => class<`trans`>;
type `breaks_extended` <double, ...> => class<`function`>;
type `breaks_log` <double, double> => class<`function`>;
type `breaks_pretty` <double, ...> => class<`function`>;
type `breaks_width` <character | double, double> => class<`function`>;
type `brewer_pal` <double> => ^character[] | <character, character | double, double> => class<`function`>;
type `calcLevels` <character[] | class<`factor`> | integer[], any> => (character[] | integer[]);
type `cbreaks` <double[], class<`function`> | double[], class<`function`> | double[] | expression> => list<double[] | character[] | double[] | expression | double[] | list<class<`name`>>>;
type `censor` <^double[], double[], logical> => ^double[];
type `clevels` <class<`factor`>, logical, logical> => character[];
type `col2hcl` <character[], double[] | null, null | double[], null | double[], null | double[]> => character[];
type `col_bin` <double[]> => character[] | <character, integer[] | null, double, logical, character, logical, logical, logical> => class<`function`>;
type `col_factor` <character, any, null | character[], logical, character, any, any> => class<`function`> | <character[] | class<`factor`> | integer[]> => character[];
type `col_numeric` <character, null, character, logical, logical> => class<`function`> | <double[]> => character[];
type `colorFunc` <character[] | class<`factor`> | integer[]> => character[];
type `colour_ramp` <character[], null, logical> => class<`function`>;
type `col_quantile` <double[]> => character[] | <character, null, double, double[], character, logical, logical, logical> => class<`function`>;
type `comma_format` <null, double, character, character, character, character, logical, any, ...> => class<`function`>;
type `cscale` <double[], class<`function`>, null, class<`trans`>> => (character[] | double[]);
type `date_breaks` <character> => class<`function`>;
type `date_format` <character, character> => class<`function`>;
type `date_trans` < > => class<`trans`>;
type `demo_continuous` <double[], ...> => class<`gg`, `ggplot`>;
type `demo_datetime` <class<`POSIXct`, `POSIXt`>, ...> => class<`gg`, `ggplot`>;
type `demo_discrete` <character[], ...> => class<`gg`, `ggplot`>;
type `demo_ggplot` <character[] | class<`POSIXct`, `POSIXt`> | double[], character, ...> => class<`gg`, `ggplot`>;
type `demo_log10` <double[], ...> => class<`gg`, `ggplot`>;
type `dichromat_pal` <character> => class<`function`> | <double> => character[];
type `discrete_range` <null, class<`factor`>, logical, logical> => character[];
type `div_gradient_pal` <double[]> => character[] | <character, character, character, character> => class<`function`>;
type `dollar` <double[], null, double, character, character, character, character, logical, double, logical, ...> => character[];
type `dollar_format` <null, double, character, character, character, character, logical, double, logical, ...> => class<`function`>;
type `dscale` <class<`factor`>, class<`function`>, null> => character[];
type `extended_breaks` <double, ...> => class<`function`> | <double[], double> => double[];
type `filterNA` <class<`function`>, any> => class<`function`>;
type `filterRange` <class<`function`>> => class<`function`>;
type `filterRGB` <class<`function`>> => class<`function`>;
type `filterZeroLength` <class<`function`>> => class<`function`>;
type `force_all` <...> => list<any>;
type `format_format` <...> => class<`function`>;
type `getBins` <integer[] | null, any, double[], any> => double[];
type `getLevels` <any, any, character[] | null | integer[], any> => (character[] | integer[] | null);
type `gradient_n_pal` <double[]> => character[] | <character[], null, character> => class<`function`>;
type `grey_pal` <double> => character[] | <double, double> => class<`function`>;
type `hms_trans` < > => class<`trans`>;
type `hue_pal` <double[], double, double, double, double> => class<`function`> | <double> => character[];
type `identity_trans` < > => class<`trans`>;
type `is.discrete` <class<`factor`>> => logical;
type `is.trans` <character | class<`trans`>> => logical;
type `label_bytes` <character, double, ...> => class<`function`>;
type `label_comma` <null, double, character, character, character, character, logical, any, ...> => class<`function`>;
type `label_date_short` <character[], character> => class<`function`>;
type `label_dollar` <null, double, character, character, character, character, logical, double, logical, ...> => class<`function`>;
type `label_math` <any, any> => class<`function`>;
type `label_number` <null, double, character, character, character, character, logical, ...> => class<`function`>;
type `label_number_auto` < > => class<`function`>;
type `label_number_si` <double, character | null, null, ...> => class<`function`>;
type `label_ordinal` <character, character, character, list<character>, ...> => class<`function`>;
type `label_parse` < > => class<`function`>;
type `label_percent` <null, double, character, character, character, character, logical, ...> => class<`function`>;
type `label_pvalue` <double, character, any, logical> => class<`function`>;
type `label_scientific` <double, double, character, character, character, logical, ...> => class<`function`>;
type `label_wrap` <double> => class<`function`>;
type `lines.trans` <class<`trans`>, ..., double[]> => null;
type `log10_trans` < > => class<`trans`>;
type `log1p_trans` < > => class<`trans`>;
type `log2_trans` < > => class<`trans`>;
type `log_breaks` <double, double> => class<`function`>;
type `logit_trans` < > => class<`trans`>;
type `log_trans` <double> => class<`trans`>;
type `map_continuous` <class<`function`>, double[], double[], any, class<`function`>> => (character[] | double[]);
type `map_discrete` <class<`function`>, class<`factor`>, character[], any> => character[];
type `math_format` <any, any> => class<`function`>;
type `modulus_trans` <double, double> => class<`trans`>;
type `muted` <character, double, double> => character;
type `needs_cents` <double[], double> => logical;
type `number` <double[], double | null, double, character, character, character, character, logical, ...> => character[];
type `number_format` <null, double, character, character, character, character, logical, ...> => class<`function`>;
type `ordinal_english` < > => list<character>;
type `ordinal_french` < > => list<character>;
type `pal` <double[]> => character[];
type `pal_name` <character | double, any> => character;
type `percent_format` <null, double, character, character, character, character, logical, ...> => class<`function`>;
type `plot.trans` <class<`trans`>, any, ..., double[], null> => null;
type `precision` <double[]> => double;
type `probability_trans` <character, ...> => class<`trans`>;
type `probit_trans` < > => class<`trans`>;
type `pseudo_log_trans` <double, any> => class<`trans`>;
type `reciprocal_trans` < > => class<`trans`>;
type `regular_minor_breaks` <double[], double[], double> => double[] | <logical> => class<`function`>;
type `rescale` <double[], any, any, ...> => double[];
type `rescale_max` <double[], double[], double[]> => double[];
type `rescale_mid` <double[], any, any, any, ...> => double[];
type `rescale_mid.numeric` <double[], double[], double[], double, ...> => double[];
type `rescale_none` <integer[], ...> => integer[];
type `rescale.numeric` <double[], double[], double[], ...> => double[];
type `rescale_pal` <double[]> => class<`function`>;
type `reverse_trans` < > => class<`trans`>;
type `round_any` <double[], double, any> => double[];
type `round_any.numeric` <double[], double, class<`function`>> => double[];
type `safePaletteFunc` <character, any, logical, double | null> => class<`function`>;
type `scientific` <double[], double, double, character, character, character, logical, ...> => character[];
type `scientific_format` <double, double, character, character, character, logical, ...> => class<`function`>;
type `seq_gradient_pal` <double[]> => character[] | <character, character, character> => class<`function`>;
type `show_col` <^character[], logical, null, double> => null;
type `sqrt_trans` < > => class<`trans`>;
type `squish` <^double[], double[], logical> => ^double[];
type `squish_infinite` <double[], double[]> => double[];
type `time_breaks` <double> => class<`function`>;
type `time_trans` <null> => class<`trans`>;
type `toPaletteFunc` <character, logical, double | null> => class<`function`>;
type `toPaletteFunc.character` <character, logical, double | null> => class<`function`>;
type `train_continuous` <double[], null> => double[];
type `train_discrete` <class<`factor`>, null, logical, logical> => character[];
type `trans_breaks` <double[], double> => double[] | <character | class<`function`>, class<`function`>, double, ...> => class<`function`>;
type `trans_format` <character, class<`function`>> => class<`function`>;
type `trans_new` <character, character | class<`function`>, character | class<`function`>, class<`function`>, class<`function`>, class<`function`>, double[]> => class<`trans`>;
type `trans_two_sided` <double[], class<`function`>, class<`function`>> => double[];
type `unit_format` <null, double, character, character, character, character, character, character, logical, ...> => class<`function`>;
type `viridis_pal` <double, double, double, double, character> => class<`function`> | <double> => character[];
type `withColorAttr` <character, list<double[] | character | double | character | character>, class<`function`>> => class<`function`>;
type `yj_trans` <double> => class<`trans`>;
type `zero_range` <^double[], any> => (logical | null);
