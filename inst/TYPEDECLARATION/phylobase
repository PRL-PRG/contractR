type `addData` <class<`phylo4d`>, ...> => class<`phylo4d`> | <class<`phylo4d`>, ...> => class<`phylo4d`>;
type `ancestor` <class<`phylo4`> | class<`phylo4d`>, integer[] | character | double> => ^integer[];
type `ancestors` <class<`phylo4d`> | class<`phylo4`>, character | double, character[]> => integer[];
type `as_phylo4vcov` <class<`phylo4`>, ...> => class<`phylo4vcov`>;
type `.bubLegendGrob` <class<`data.frame`>, class<`matrix`>> => class<`bubLegend`, `gDesc`, `grob`>;
type `checkPhylo4` <class<`phylo4`> | class<`phylo4d`>> => (character | logical);
type `checkPhylo4Data` <class<`phylo4d`>> => logical;
type `checkTree` <class<`phylo4`> | class<`phylo4d`>> => (character | logical);
type `checkTreeCpp` <class<`phylo4`> | class<`phylo4d`>, list<character>> => list<character>;
type `children` <class<`phylo4d`>, character | double> => integer[];
type `.createEdge` <null | ^character[] | ^double[], class<`matrix`>, character, any> => (^character[] | ^double[]);
type `.createLabels` <any, integer, any, any, character> => any;
type `depthTips` <class<`phylo4`>> => double[] | <class<`phylo4`>> => double[];
type `descendants` <class<`phylo4d`> | class<`phylo4`>, double | character, character[]> => (integer[] | list<any>);
type `edgeId` <class<`phylo4d`>, character[]> => character[] | <class<`phylo4`>, character[]> => character[] | <class<`phylo4`> | class<`phylo4d`>, character[]> => character[];
type `edgeLabels` <class<`phylo4`>> => ^character[] | <class<`phylo4`>> => ^character[];
type `edgeLabels<-` <class<`phylo4`>, ..., ^character[]> => class<`phylo4`> | <class<`phylo4`>, ..., ^character[]> => class<`phylo4`>;
type `edgeLength` <class<`phylo4`>, ...> => (^double[] | null) | <class<`phylo4d`>, ...> => (^double[] | null) | <class<`phylo4`> | class<`phylo4d`>, ...> => (^double[] | null);
type `edgeLength<-` <class<`phylo4`> | class<`phylo4d`>, double, ..., ^double[] | null> => (class<`phylo4`> | class<`phylo4d`>) | <class<`phylo4`>, logical, ..., double[]> => class<`phylo4`> | <class<`phylo4d`>, double, ..., ^double[] | null> => class<`phylo4d`>;
type `edgeOrder` <class<`phylo4`> | class<`phylo4d`>, ...> => character | <class<`phylo4`>, ...> => character | <class<`phylo4d`>, ...> => character;
type `edges` <class<`phylo4`> | class<`phylo4d`>, ...> => class<`matrix`> | <class<`phylo4`>, ...> => class<`matrix`> | <class<`phylo4d`>, ...> => class<`matrix`>;
type `extractTree` <class<`phylo4d`>> => class<`phylo4`>;
type `formatData` <class<`phylo4`> | class<`phylo4d`>, class<`data.frame`> | null | integer[], character, logical, logical, any, double, any> => any;
type `.genlab` <character, integer> => character[];
type `getAllNodesFast` <class<`matrix`>> => integer[];
type `getEdge` <class<`phylo4d`>, any, character[], character[]> => character[] | <class<`phylo4`> | class<`phylo4d`>, any, character[], character[]> => character[] | <class<`phylo4`>, double, character[], character[]> => character[];
type `getNode` <class<`phylo4`> | class<`phylo4d`>, any, character[], character[]> => (^integer[] | null) | <class<`phylo4d`>, any, character[], character[]> => (^integer[] | null) | <class<`phylo4`>, character[] | double[], character[], character[]> => (^integer[] | null);
type `hasDuplicatedLabels` <class<`phylo4`> | class<`phylo4d`>, any> => logical | <class<`phylo4d`>, any> => logical | <class<`phylo4`>, any> => logical;
type `hasDuplicatedLabelsCpp` <^character[]> => logical;
type `hasEdgeLabels` <class<`phylo4`>> => logical | <class<`phylo4`> | class<`phylo4d`>> => logical | <class<`phylo4d`>> => logical;
type `hasEdgeLength` <class<`phylo4`> | class<`phylo4d`>> => logical | <class<`phylo4`>> => logical | <class<`phylo4d`>> => logical;
type `hasNodeData` <class<`phylo4d`>> => logical | <class<`phylo4d`>> => logical;
type `hasNodeLabels` <class<`phylo4`> | class<`phylo4d`>> => logical | <class<`phylo4`>> => logical | <class<`phylo4d`>> => logical;
type `hasPoly` <class<`phylo4d`>> => logical | <class<`phylo4`> | class<`phylo4d`>> => logical | <class<`phylo4`>> => logical;
type `hasRetic` <class<`phylo4d`>> => logical | <class<`phylo4`>> => logical | <class<`phylo4`> | class<`phylo4d`>> => logical;
type `hasSingle` <class<`phylo4d`>> => logical | <class<`phylo4`> | class<`phylo4d`>> => logical | <class<`phylo4`>> => logical;
type `hasTipData` <class<`phylo4d`>> => logical | <class<`phylo4d`>> => logical;
type `head` <class<`phylo4`>, ...> => class<`data.frame`>;
type `internalEdges` <class<`phylo4d`>> => logical[] | <class<`phylo4d`>> => logical[];
type `isRooted` <class<`phylo4`>> => logical | <class<`phylo4d`>> => logical | <class<`phylo4`> | class<`phylo4d`>> => logical;
type `isUltrametric` <class<`phylo4d`>, double> => logical | <class<`phylo4`> | class<`phylo4d`>, double> => logical | <class<`phylo4`>, double> => logical;
type `labels` <class<`phylo4d`>, ...> => ^character[] | <class<`phylo4`>, ...> => ^character[];
type `labels<-` <class<`phylo4`>, character, any, ..., character[]> => class<`phylo4`> | <class<`phylo4`> | class<`phylo4d`>, character, any, ..., character[]> => (class<`phylo4`> | class<`phylo4d`>) | <class<`phylo4d`>, character, any, ..., character[]> => class<`phylo4d`>;
type `MRCA` <class<`phylo4d`>, ...> => integer | <class<`phylo`> | class<`phylo4d`> | class<`phylo4`>, ...> => integer | <class<`phylo4`>, ...> => integer | <class<`phylo`>, ...> => integer;
type `nData` <class<`phylo4d`>> => integer | <class<`phylo4d`>> => integer;
type `nEdges` <class<`phylo4d`>> => integer | <class<`phylo4`>> => integer | <class<`phylo4`> | class<`phylo4d`>> => integer;
type `nNodes` <class<`phylo4`> | class<`phylo4d`>> => integer | <class<`phylo4d`>> => integer | <class<`phylo4`>> => integer;
type `nodeDepth` <class<`phylo4`>, integer[] | double> => double[] | <class<`phylo4`>, integer[] | double> => double[];
type `nodeHeight` <class<`phylo4d`>, integer[], character> => double[] | <class<`phylo4d`> | class<`phylo4`>, integer[], character> => double[] | <class<`phylo4`>, integer[], character> => double[];
type `nodeId` <class<`phylo4d`>, character> => integer[] | <class<`phylo4`> | class<`phylo4d`>, character> => integer[] | <class<`phylo4`>, character> => integer[];
type `nodeLabels` <class<`phylo4`>> => ^character[] | <class<`phylo4`> | class<`phylo4d`>> => ^character[] | <class<`phylo4d`>> => ^character[];
type `nodeLabels<-` <class<`phylo4`> | class<`phylo4d`>, ..., character[]> => (class<`phylo4`> | class<`phylo4d`>) | <class<`phylo4`>, ..., character[]> => class<`phylo4`> | <class<`phylo4d`>, ..., character[]> => class<`phylo4d`>;
type `nodeType` <class<`phylo4`>> => character[] | <class<`phylo4`> | class<`phylo4d`>> => character[] | <class<`phylo4d`>> => character[];
type `nTips` <class<`phylo4`>> => integer | <class<`phylo`> | class<`phylo4`> | class<`phylo4d`>> => integer | <class<`phylo4d`>> => integer | <class<`phylo`>> => integer;
type `nTipsFastCpp` <integer[]> => integer;
type `orderIndex` <class<`phylo4`> | class<`phylo4d`>, character> => ^integer[];
type `phylo4` <class<`phylo`>, ...> => class<`phylo4`> | <class<`matrix`>, ...> => any | <class<`matrix`> | class<`phylo`>, ...> => any;
type `phylo4d` <class<`phylo`> | class<`phylo4`>, ...> => any | <class<`phylo`>, ...> => any | <class<`phylo4`>, ...> => any;
type `.phylo4Data` <class<`phylo4`> | class<`phylo4d`>, class<`data.frame`> | null, class<`data.frame`> | null, class<`data.frame`> | null, logical> => class<`data.frame`>;
type `.phylo4ToDataFrame` <class<`phylo4d`> | class<`phylo4`>, character[]> => class<`data.frame`>;
type `phylobase.options` <...> => list<character>;
type `phylobubbles` <character, character, logical, double, character, character, any, double> => class<`path`, `vpPath`>;
type `phyloXXYY` <class<`phylo4d`> | class<`phylo4`>, null> => (list<double[] | class<`phylo4d`> | list<^double[]>> | list<double[] | class<`phylo4`> | list<^double[]>>);
type `plot` <class<`phylo4`>, any, ...> => any | <class<`phylo4d`>, any, ...> => class<`path`, `vpPath`>;
type `plotOneTree` <list<double[] | class<`phylo4d`> | list<^double[]>> | list<double[] | class<`phylo4`> | list<^double[]>>, character, logical, logical, character, character, any, double> => class<`path`, `vpPath`>;
type `print` <class<`phylo4d`>, ...> => class<`data.frame`> | <class<`phylo4`>, ...> => class<`data.frame`>;
type `prune` <class<`phylo4d`>, ...> => class<`phylo4d`> | <class<`phylo4`> | class<`phylo4d`>, ...> => (class<`phylo4`> | class<`phylo4d`>) | <class<`phylo4`>, ...> => class<`phylo4`>;
type `reorder` <class<`phylo4`>, ...> => class<`phylo4`> | <class<`phylo4d`>, ...> => class<`phylo4d`>;
type `rootNode` <class<`phylo4d`>> => integer | <class<`phylo4`>> => integer | <class<`phylo4`> | class<`phylo4d`>> => integer;
type `shortestPath` <class<`phylo4d`>, character | double, character> => integer[] | <class<`phylo4d`>, character | double, character> => integer[];
type `.shortestPathInt` <class<`phylo4d`>, character | double, character> => integer[];
type `siblings` <class<`phylo4d`>, double, logical> => integer[];
type `subset` <class<`phylo4d`>, ...> => class<`phylo4d`> | <class<`phylo4`>, ...> => class<`phylo4`>;
type `sumEdgeLength` <class<`phylo4d`>, integer[]> => double | <class<`phylo4`>, integer[]> => double | <class<`phylo4`> | class<`phylo4d`>, integer[]> => double;
type `summary` <class<`phylo4`>, ...> => (list<^integer[] | character[]> | list<character | double | class<`summaryDefault`, `table`>>) | <class<`phylo4d`>, ...> => list<any>;
type `tabulateTips` <integer[]> => integer[];
type `tdata` <class<`phylo4d`>, ...> => class<`data.frame`> | <class<`phylo4d`>, ...> => class<`data.frame`>;
type `tdata<-` <class<`phylo4d`>, ..., class<`data.frame`> | integer[]> => class<`phylo4d`> | <class<`phylo4d`>, ..., class<`data.frame`> | integer[]> => class<`phylo4d`>;
type `terminalEdges` <class<`phylo4d`>> => logical[] | <class<`phylo4d`>> => logical[];
type `tipData` <class<`phylo4d`>, ...> => class<`data.frame`> | <class<`phylo4d`>, ...> => class<`data.frame`>;
type `tipData<-` <class<`phylo4d`>, ..., class<`data.frame`> | integer[]> => class<`phylo4d`> | <class<`phylo4d`>, ..., class<`data.frame`> | integer[]> => class<`phylo4d`>;
type `tip.data.plot` <list<double[] | class<`phylo4d`> | list<^double[]>>, character, logical, logical, double, class<`function`>, character, character> => class<`path`, `vpPath`>;
type `tipLabels` <class<`phylo4d`>> => character[] | <class<`phylo4`> | class<`phylo4d`>> => character[] | <class<`phylo4`>> => character[];
type `tipLabels<-` <class<`phylo4`>, ..., character[]> => class<`phylo4`> | <class<`phylo4d`>, ..., character[]> => class<`phylo4d`> | <class<`phylo4`> | class<`phylo4d`>, ..., character[]> => (class<`phylo4`> | class<`phylo4d`>);
type `tipsFast` <integer[]> => integer[];
type `treePlot` <class<`phylo4`> | class<`phylo4d`>, any, logical, logical, null, any, double, character | class<`function`>> => any;
