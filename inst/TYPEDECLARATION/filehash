type `[` <class<`filehashDB1`>, character[], any, ..., logical> => list<double[]>;
type `[[` <class<`filehashDB1`>, character, any, ...> => double[] | <class<`filehashDB1`>, double, any, ...> => any | <class<`condition`, `simpleWarning`, `warning`>> => class<`condition`, `simpleWarning`, `warning`>;
type `$` < > => double | <double> => double | <class<`filehashDB1`>, character> => double[] | <environment> => environment | < > => (environment | null);
type `$<-` <class<`filehashDB1`>, character, character[] | double[]> => class<`filehashDB1`>;
type `asMethod` <class<`filehashDB1`>, character, logical> => class<`filehash`> | <class<`filehashRDS`>, character, logical> => class<`filehash`> | <class<`filehashDB1`>, character, logical> => list<double[]>;
type `checkMap` <class<`filehashDB1`>, ...> => class<`filehashDB1`> | <class<`filehashDB1`>, ...> => class<`filehashDB1`>;
type `createLockFile` <character> => logical;
type `createQ` <character> => class<`queue`>;
type `db2env` <class<`filehashDB1`> | class<`filehashRDS`>> => environment;
type `dbCreate` <character, ...> => logical | <character, ...> => logical;
type `dbDelete` <class<`filehashDB1`>, character, ...> => null | <class<`filehashRDS`>, character, ...> => logical | <class<`filehashRDS`> | class<`filehashDB1`>, character, ...> => (logical | null);
type `dbExists` <class<`filehashRDS`>, character, ...> => logical | <class<`filehashDB1`>, character, ...> => logical | <class<`filehashDB1`> | class<`filehashRDS`>, character, ...> => logical;
type `dbFetch` <class<`filehashDB1`>, character, ...> => (character[] | double[] | null | list<any>) | <class<`filehashDB1`> | class<`filehashRDS`>, character, ...> => any | <class<`filehashRDS`>, character, ...> => any;
type `dbInit` <character, ...> => (class<`filehashDB1`> | class<`filehashRDS`>) | <character, ...> => (class<`filehashDB1`> | class<`filehashRDS`>);
type `dbInsert` <class<`filehashRDS`> | class<`filehashDB1`>, character, double[] | character[] | null | list<double | character | double | null>, ...> => (logical | null) | <class<`filehashRDS`>, character, character | double[], ...> => logical | <class<`filehashDB1`>, character, character[] | double[] | null | list<double | character | double | null>, ...> => null;
type `dbLazyLoad` <class<`filehashDB1`>, ...> => character[] | <class<`filehashDB1`>, ...> => character[];
type `dbList` <class<`filehashDB1`>, ...> => character[] | <class<`filehashRDS`>, ...> => character[] | <class<`filehashDB1`> | class<`filehashRDS`>, ...> => character[];
type `dbLoad` <class<`filehashDB1`>, ...> => character[] | <class<`filehashRDS`>, ...> => character[] | <class<`filehashDB1`> | class<`filehashRDS`>, ...> => character[];
type `dbMultiFetch` <class<`filehashDB1`>, character[], ...> => list<double[]> | <class<`filehashDB1`>, character[], ...> => list<double[]>;
type `dbReorganize` <class<`filehashDB1`>, ...> => logical | <class<`filehashDB1`>, ...> => logical;
type `dbStartup` <character, character, character> => (class<`filehashDB1`> | class<`filehashRDS`> | logical);
type `dbUnlink` <class<`filehashDB1`>, ...> => logical | <class<`filehashDB1`>, ...> => logical;
type `deleteLockFile` <character> => logical;
type `doFUN` <character> => class<`filehashRDS`> | <character> => logical | <character> => logical | <character> => class<`filehashDB1`>;
type `dumpDF` <class<`data.frame`>, character, null> => class<`filehashDB1`>;
type `dumpList` <list<double[]>, character, null> => class<`filehashDB1`>;
type `filehashFormats` <...> => list<list<class<`function`>>>;
type `filehashOption` <...> => list<character>;
type `filesize` <class<`connection`, `file`>> => double;
type `filter` <character[]> => logical[];
type `fun` <character, character> => null | <any, any> => null;
type `FUN` <character> => double[] | <character> => logical;
type `getMap` <class<`filehashDB1`>> => (environment | null) | <class<`filehashDB1`>> => (environment | null);
type `gotoEndPos` <class<`connection`, `file`>> => double;
type `hasWorkingFtell` < > => logical;
type `isEmpty` <class<`queue`>, ...> => logical | <class<`queue`>, ...> => logical;
type `lapply` <class<`filehashDB1`>, class<`function`>, ...> => list<double>;
type `.local` <any, any, any> => any | <class<`filehashDB1`>, character[], any, any> => list<double[]> | <class<`filehashDB1`>, class<`connection`, `file`>, ...> => class<`filehashDB1`> | <character, character | null, ...> => logical | <class<`filehashDB1`>, environment, null, ...> => character[] | <class<`filehashDB1`>, character, any> => double[] | <class<`filehashRDS`>, character, character | double[], logical, ...> => logical | <class<`filehashDB1`>, class<`function`>, ..., logical> => list<double> | <class<`filehashDB1`> | class<`filehashRDS`>, environment, null, ...> => character[] | <class<`queue`>> => logical | <character, character | null, ...> => (class<`filehashDB1`> | class<`filehashRDS`>);
type `lockFile` <class<`connection`, `file`>, ...> => character | <class<`connection`, `file`> | class<`queue`>, ...> => character | <class<`queue`>, ...> => character;
type `make.f` <character> => class<`function`>;
type `makeMetaEnv` <character> => list<class<`function`>>;
type `mangleName` <character> => character;
type `objectFile` <class<`filehashRDS`>, character> => character | <class<`filehashRDS`>, character> => character;
type `openDBConn` <character, character> => class<`connection`, `file`>;
type `pop` <class<`queue`>, ...> => double | <class<`queue`>, ...> => double;
type `push` <class<`queue`>, double, ...> => null | <class<`queue`>, double, ...> => null;
type `readKeyMap` <class<`connection`, `file`>, environment | null, double> => environment;
type `readKeys` <class<`connection`, `file`>, environment, character[]> => list<double[]>;
type `readSingleKey` <any, environment, character> => any;
type `sha1` <list<double | null>, integer> => character;
type `show` <class<`filehashRDS`>> => null;
type `top` <class<`queue`>, ...> => double | <class<`queue`>, ...> => double;
type `unMangleName` <character[]> => character[];
type `validityMethod` <class<`filehash`>> => logical | <class<`filehashDB1`>> => logical | <class<`filehashRDS`>> => logical;
type `with` <class<`filehashDB1`>, any, ...> => (class<`lm`> | double[]);
type `wrap` <character, environment> => null;
type `writeKeyValue` <class<`connection`, `file`>, character, character[] | double[] | null | list<double | character | double | null>> => null;
type `writeNullKeyValue` <class<`connection`, `file`>, character> => null;
