type `bindev` <double, double, double, double, double, double, ???> => double;
type `binom.bayes` <double[], double[], double, character[], double, double, double, double, ???> => struct<`method`:integer[], `x`:double[], `n`:double[], `shape1`:double[], `shape2`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `sig`:double[]>;
type `binom.bayes.densityplot` <struct<`method`:integer[], `x`:integer[], `n`:double[], `shape1`:double[], `shape2`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `sig`:double[]>, double, character, character, character, double, ???> => struct<`data`:struct<`xx`:double[], `yy`:double[], `method`:integer[], `x`:integer[], `n`:double[], `shape1`:double[], `shape2`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `sig`:double[], `label`:integer[]>, `layers`:tuple<environment, environment, environment>, `scales`:environment, `mapping`:struct<`x`:language, `y`:language>, `theme`:struct<`line`:struct<`colour`:character, `size`:double, `linetype`:double, `lineend`:character, `arrow`:logical, `inherit.blank`:logical>, `rect`:struct<`fill`:character, `colour`:character, `size`:double, `linetype`:double, `inherit.blank`:logical>, `text`:struct<`family`:character, `face`:character, `colour`:character, `size`:double, `hjust`:double, `vjust`:double, `angle`:double, `lineheight`:double, `margin`:double[], `debug`:logical, `inherit.blank`:logical>, `axis.title.x`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:null, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `axis.title.x.top`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:null, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `axis.title.y`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:null, `vjust`:double, `angle`:double, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `axis.title.y.right`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:null, `vjust`:double, `angle`:double, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `axis.text`:struct<`family`:null, `face`:null, `colour`:character, `size`:double, `hjust`:null, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `axis.text.x`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:null, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `axis.text.x.top`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:null, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `axis.text.y`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:double, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `axis.text.y.right`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:double, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `axis.ticks`:struct<`colour`:character, `size`:null, `linetype`:null, `lineend`:null, `arrow`:logical, `inherit.blank`:logical>, `axis.ticks.length`:double, `axis.ticks.length.x`:null, `axis.ticks.length.x.top`:null, `axis.ticks.length.x.bottom`:null, `axis.ticks.length.y`:null, `axis.ticks.length.y.left`:null, `axis.ticks.length.y.right`:null, `axis.line`:tuple<>, `axis.line.x`:null, `axis.line.y`:null, `legend.background`:struct<`fill`:null, `colour`:null, `size`:null, `linetype`:null, `inherit.blank`:logical>, `legend.margin`:double[], `legend.spacing`:double, `legend.spacing.x`:null, `legend.spacing.y`:null, `legend.key`:struct<`fill`:character, `colour`:null, `size`:null, `linetype`:null, `inherit.blank`:logical>, `legend.key.size`:double, `legend.key.height`:null, `legend.key.width`:null, `legend.text`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:null, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `legend.text.align`:null, `legend.title`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:double, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `legend.title.align`:null, `legend.position`:character, `legend.direction`:null, `legend.justification`:character, `legend.box`:null, `legend.box.margin`:double[], `legend.box.background`:tuple<>, `legend.box.spacing`:double, `panel.background`:struct<`fill`:character, `colour`:null, `size`:null, `linetype`:null, `inherit.blank`:logical>, `panel.border`:struct<`fill`:null, `colour`:character, `size`:null, `linetype`:null, `inherit.blank`:logical>, `panel.spacing`:double, `panel.spacing.x`:null, `panel.spacing.y`:null, `panel.grid`:struct<`colour`:character, `size`:null, `linetype`:null, `lineend`:null, `arrow`:logical, `inherit.blank`:logical>, `panel.grid.minor`:struct<`colour`:null, `size`:double, `linetype`:null, `lineend`:null, `arrow`:logical, `inherit.blank`:logical>, `panel.ontop`:logical, `plot.background`:struct<`fill`:null, `colour`:character, `size`:null, `linetype`:null, `inherit.blank`:logical>, `plot.title`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:double, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `plot.subtitle`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:double, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `plot.caption`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:double, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `plot.tag`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:double, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `plot.tag.position`:character, `plot.margin`:double[], `strip.background`:struct<`fill`:character, `colour`:character, `size`:null, `linetype`:null, `inherit.blank`:logical>, `strip.placement`:character, `strip.text`:struct<`family`:null, `face`:null, `colour`:character, `size`:double, `hjust`:null, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `strip.text.x`:null, `strip.text.y`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:null, `vjust`:null, `angle`:double, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `strip.switch.pad.grid`:double, `strip.switch.pad.wrap`:double>, `coordinates`:environment, `facet`:environment, `plot_env`:environment, `labels`:struct<`y`:character, `x`:null>>;
type `binom.cloglog` <integer[], double, double, ???> => struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[]>;
type `binom.confint` <double[], double[], double[], character, ??? | double> => struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[]>;
type `binom.coverage` <double, double, double, character, ???> => struct<`method`:integer[], `p`:double[], `n`:double[], `coverage`:double[]>;
type `binom.lchoose` <double, double> => double;
type `binom.length` <double, double, double, character, ???> => struct<`method`:integer[], `n`:double[], `p`:double[], `length`:double[]>;
type `binom.logit` <integer[], double, double, ???> => struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[]>;
type `binom.lrt` <double[], double[], double, logical, logical, logical, double | ???> => struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[]>;
type `binom.optim` <double, double, any => any, double, double, logical, logical, double, null, ???> => struct<`par`:double[], `value`:double, `counts`:integer[], `convergence`:integer, `message`:character, `confint`:struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `conf.level`:double[]>>;
type `binom.plot` <double[], any => any, double, double, double | symbol, character, double, ???> => struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:null, `panel`:any => any, `page`:null, `layout`:null, `skip`:logical, `strip`:character, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:expression, `xlab.default`:character, `ylab.default`:character, `xlab.top`:null, `ylab.right`:null, `main`:null, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer[]>, `perm.cond`:integer, `condlevels`:struct<`n`:character[]>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`n`:double[], `breaks`:struct<`n`:double[], `lower`:double[], `upper`:double[]>, `conf.level`:double, `actual`:double>, `panel.args`:tuple<struct<`x`:double[], `y`:double[], `subscripts`:integer[]>, struct<`x`:double[], `y`:double[], `subscripts`:integer[]>, struct<`x`:double[], `y`:double[], `subscripts`:integer[]>, struct<`x`:double[], `y`:double[], `subscripts`:integer[]>>, `packet.sizes`:double[], `x.limits`:double[], `y.limits`:double[], `x.used.at`:null, `y.used.at`:null, `x.num.limit`:null, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null> | struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:struct<`right`:struct<`fun`:character, `args`:struct<`key`:struct<`at`:double[], `space`:character, `col`:character[]>, `draw`:logical>>>, `panel`:any => any, `page`:null, `layout`:null, `skip`:logical, `strip`:character, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:character, `xlab.default`:character, `ylab.default`:character, `xlab.top`:null, `ylab.right`:null, `main`:null, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer>, `perm.cond`:integer, `condlevels`:struct<`n`:character>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:integer[], `labels`:integer[], `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`x`:double[], `y`:double[], `z`:double[], `at`:double[], `region`:logical, `breaks`:struct<`x`:double[], `n`:double[], `lower`:double[], `upper`:double[]>, `col.regions`:character[]>, `panel.args`:tuple<struct<`subscripts`:integer[]>>, `packet.sizes`:double, `x.limits`:double[], `y.limits`:double[], `x.used.at`:null, `y.used.at`:null, `x.num.limit`:null, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null>;
type `binom.power` <double, double, double, double, double, character, character[]> => double;
type `binom.probit` <integer[], double, double, ???> => struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[]>;
type `binom.profile` <double[], double[], double, double, double, logical, logical, double | ???> => struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[]>;
type `binom.sim` <double, double, double, double, character, ???> => struct<`mean`:double, `lower`:double, `upper`:double, `width`:double>;
type `ci.method` <integer[], double, double[], logical | ???, logical, logical, ???> => struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[]>;
type `cloglog.sample.size` <double | ???, ? double, double, double, double, character[], logical, logical, double> => struct<`p.null`:double, `p.alt`:double, `delta`:double, `alpha`:double, `power`:double, `n`:double, `phi`:double>;
type `compute.delta` <double, double, double, double, character, double, null> => double;
type `compute.power` <double, double, double, double, double, character, double, ???> => double;
type `compute.sample.size` <double, double, double, double, double, logical, double, double> => double;
type `E.pn` <double[], double[], double[], double[], double[]> => double[];
type `f` <double, double, double, double, double, character | double, double | ???> => double;
type `filter` <character[]> => logical[];
type `fn` <double[], double, double, double, any => any, double, any => any, logical, ???> => double;
type `fun` <character, character> => struct<`name`:character, `path`:character, `dynamicLookup`:logical, `handle`:null, `info`:null>;
type `FUN` <struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `width`:double[]> | integer, double[], struct<> | double, double> => double[] | struct<`lower`:struct<`xx`:double[], `yy`:double[], `method`:integer[], `x`:integer[], `n`:double[], `shape1`:double[], `shape2`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `sig`:double[], `label`:integer[]>, `upper`:struct<`xx`:double[], `yy`:double[], `method`:integer[], `x`:integer[], `n`:double[], `shape1`:double[], `shape2`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `sig`:double[], `label`:integer[]>, `central`:struct<`xx`:double[], `yy`:double[], `method`:integer[], `x`:integer[], `n`:double[], `shape1`:double[], `shape2`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `sig`:double[], `label`:integer[]>>;
type `integrate.poly` <double[], double, double, double, double, character> => double;
type `ldbinom` <double, double, double, logical> => double;
type `method` <integer[], double[], double[], logical | ???, logical, logical, ???> => struct<`method`:integer[], `x`:double[], `n`:double[], `mean`:double[], `lower`:double[], `upper`:double[]>;
type `pbeta2` <double[], double[], double[], double[]> => double[];
type `rbind.zero` <struct<`xx`:double[], `yy`:double[], `method`:integer[], `x`:integer[], `n`:double[], `shape1`:double[], `shape2`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `sig`:double[], `label`:integer[]>, character, logical> => struct<`xx`:double[], `yy`:double[], `method`:integer[], `x`:integer[], `n`:double[], `shape1`:double[], `shape2`:double[], `mean`:double[], `lower`:double[], `upper`:double[], `sig`:double[], `label`:integer[]>;
type `var.cloglog` <double[], double[]> => double[];
type `var.logit` <double[], double[]> => double[];
type `var.probit` <double[], double[]> => double[];
type `varfun` <double, double> => double;
