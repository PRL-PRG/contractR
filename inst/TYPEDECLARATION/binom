type `binom.bayes` <double[], double[], double, character[], double, double, double, double, ...> => class<`data.frame`>;
type `binom.bayes.densityplot` <class<`data.frame`>, double, character, character, character, double, ...> => class<`gg`, `ggplot`>;
type `binom.cloglog` <integer[], double, double, ...> => class<`data.frame`>;
type `binom.confint` <double[], double[], double[], character, ...> => class<`data.frame`>;
type `binom.coverage` <double, double, double, character, ...> => class<`data.frame`>;
type `binom.lchoose` <double, double> => double;
type `binom.length` <double, double, double, character, ...> => class<`data.frame`>;
type `binom.logit` <integer[], double, double, ...> => class<`data.frame`>;
type `binom.lrt` <double[], double[], double, logical, logical, logical, ...> => class<`data.frame`>;
type `binom.optim` <double, double, class<`function`>, double, double, logical, logical, double, null, ...> => list<any>;
type `binom.plot` <double[], class<`function`>, double, double, any, character, double, ...> => class<`trellis`>;
type `binom.power` <double, double, double, double, double, character, character[]> => double;
type `binom.probit` <integer[], double, double, ...> => class<`data.frame`>;
type `binom.profile` <double[], double[], double, double, double, logical, logical, ...> => class<`data.frame`>;
type `binom.sim` <double, double, double, double, character, ...> => class<`data.frame`>;
type `cloglog.sample.size` <any, null | double, double, double, double, character[], logical, logical, double> => class<`data.frame`>;
type `integrate.poly` <double[], double, double, double, double, character> => double;
type `ldbinom` <double, double, double, logical> => double;
type `rbind.zero` <class<`data.frame`>, character, logical> => class<`data.frame`>;
type `var.cloglog` <double[], double[]> => double[];
type `var.logit` <double[], double[]> => double[];
type `var.probit` <double[], double[]> => double[];
