type `bruto` <class<`data.frame`>, class<`data.frame`>, double[], double, any, double, double, double, double, logical, logical, any> => class<`bruto`>;
type `coef.fda` <class<`fda`> | class<`fda`, `mda`>, ...> => class<`matrix`>;
type `confusion` <class<`factor`> | class<`fda`> | class<`fda`, `mda`>, ...> => class<`table`>;
type `confusion.default` <class<`factor`>, class<`factor`> | double[], ...> => class<`table`>;
type `confusion.fda` <class<`fda`> | class<`fda`, `mda`>, class<`data.frame`>, ...> => class<`table`>;
type `contr.fda` <class<`array`> | double[], class<`matrix`>> => class<`matrix`>;
type `dist` <class<`matrix`>, double[], double> => class<`matrix`>;
type `fda` <any, any, any, any, double, double, class<`function`>, logical, ...> => class<`fda`>;
type `filter` <character[]> => logical[];
type `fun` <any, any> => null;
type `FUN` <class<`matrix`>> => double[] | <double[]> => double[];
type `llmult` <class<`matrix`>, double[]> => double;
type `mars` <class<`data.frame`> | class<`matrix`>, class<`data.frame`> | class<`matrix`>, double[], any, double, double, double, double, logical, logical, logical, null> => class<`mars`>;
type `mda` <any, any, double, null, null, double, any, double, list<class<`matrix`>>, class<`function`>, logical, logical> => class<`fda`, `mda`>;
type `mda.fit` <class<`matrix`>, double[], list<class<`matrix`>>, any, list<integer[]>, integer[], null, null, double, double, class<`function`>, ...> => list<any>;
type `mda.start` <class<`matrix`>, double[] | class<`factor`>, double, logical, character[], double, character[], ...> => list<class<`matrix`>>;
type `method` <class<`data.frame`> | class<`matrix`>, class<`data.frame`> | class<`matrix`>, double[], any, double, double, double, double, logical, logical, logical, null> => class<`mars`> | <class<`matrix`>, class<`matrix`>, double[], double, logical, ...> => class<`polyreg`>;
type `model.matrix.mars` <class<`mars`>, class<`matrix`>, integer[], logical, ...> => class<`matrix`>;
type `mspline` <double[], class<`matrix`>, double[], double, any, double, ...> => class<`mspline`>;
type `nknotl` <integer> => double | <integer> => double;
type `plot.fda` <class<`fda`> | class<`fda`, `mda`>, any, double[], character[], any, any, double[], any, double, double, ...> => null;
type `polybasis` <class<`matrix`>, double, any> => class<`matrix`>;
type `polyreg` <class<`matrix`>, class<`matrix`>, double[], double, logical, ...> => class<`polyreg`>;
type `predict.bruto` <class<`bruto`>, class<`matrix`>, character[], ...> => (class<`matrix`> | list<list<double[] | class<`matrix`>>>);
type `predict.fda` <class<`fda`, `mda`> | class<`fda`> | list<any>, any, character[], any, double, ...> => (class<`matrix`> | class<`factor`>);
type `predict.mars` <class<`mars`>, any, ...> => class<`matrix`>;
type `predict.mda` <class<`fda`, `mda`>, class<`matrix`> | class<`data.frame`>, character[], null, double, any, ...> => (class<`factor`> | class<`matrix`>);
type `predict.polyreg` <class<`polyreg`>, any, ...> => class<`matrix`>;
type `rowmin` <class<`matrix`>> => double[];
type `softmax` <class<`matrix`>, logical> => class<`factor`>;
type `starter` <class<`matrix`>, class<`factor`>, double> => list<class<`matrix`> | class<`factor`> | list<class<`matrix`>>>;
