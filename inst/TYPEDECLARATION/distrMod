type `@` <double[]> => class<`Gammad`> | <class<`ParamWithScaleAndShapeFamParameter`>> => class<`PosDefSymmMatrix`>;
type `addAlphTrsp2col` <character | double, double> => character;
type `asBias` <class<`symmetricBias`>, class<`NormType`>> => class<`asBias`>;
type `asCov` < > => class<`asCov`>;
type `asHampel` <double, class<`symmetricBias`>, class<`NormType`>> => class<`asHampel`>;
type `asMethod` <class<`MLEstimate`>, character, logical> => class<`Estimate`>;
type `asMSE` <class<`symmetricBias`>, class<`NormType`>> => class<`asMSE`>;
type `asSemivar` <double> => class<`asSemivar`>;
type `asUnOvShoot` <double, class<`symmetricBias`>> => class<`asUnOvShoot`>;
type `asvar` <class<`MLEstimate`>> => class<`matrix`> | <class<`MLEstimate`>> => class<`matrix`>;
type `asvar.trfct` <class<`matrix`>, class<`matrix`>, character[]> => class<`matrix`>;
type `asymmetricBias` <character, double[]> => class<`asymmetricBias`>;
type `BetaFamily` <double, double, any, logical> => class<`BetaFamily`>;
type `BinomFamily` <double, double, any> => class<`BinomFamily`>;
type `call.estimate` <class<`Confint`>> => class<`call`> | <class<`Confint`>> => class<`call`>;
type `.callParamFamParameter` <class<`GammaFamily`>, double[], integer[], null, null> => class<`ParamWithScaleAndShapeFamParameter`>;
type `CauchyLocationFamily` <double, double, any> => class<`CauchyLocationFamily`>;
type `CauchyLocationScaleFamily` <double, double, any> => class<`CauchyLocationScaleFamily`>;
type `.checkEstClassForParamFamily` <class<`GammaFamily`>, class<`MLEstimate`>> => class<`MLEstimate`> | <class<`GammaFamily`>, class<`MLEstimate`>> => class<`MLEstimate`>;
type `checkL2deriv` <class<`BetaFamily`>, ...> => list<double[] | class<`matrix`>> | <class<`BetaFamily`> | class<`CauchyLocationScaleFamily`> | class<`BinomFamily`> | class<`CauchyLocationFamily`> | class<`L2ParamFamily`>, ...> => list<double[] | class<`matrix`> | double | class<`matrix`>> | <class<`L2ParamFamily`>, ...> => list<double | class<`matrix`>> | <class<`CauchyLocationScaleFamily`>, ...> => list<double[] | class<`matrix`>> | <class<`BinomFamily`>, ...> => list<double | class<`matrix`>> | <class<`CauchyLocationFamily`>, ...> => list<double | class<`matrix`>>;
type `confint` <class<`MLEstimate`>, any, ...> => class<`Confint`> | <class<`Confint`>, any, ...> => class<`matrix`> | <class<`MLEstimate`> | class<`Confint`>, any, ...> => (class<`Confint`> | class<`matrix`>);
type `.deleteDim` <double[]> => double[];
type `distrModOptions` <...> => list<character>;
type `E` <class<`CauchyLocationFamily`>, class<`EuclRandMatrix`>, any, ...> => class<`matrix`> | <class<`CauchyLocationScaleFamily`>, class<`EuclRandVariable`>, any, ...> => double[] | <class<`CauchyLocationScaleFamily`>, class<`EuclRandMatrix`>, any, ...> => class<`matrix`> | <class<`BinomFamily`>, class<`EuclRandVariable`>, any, ...> => double | <class<`BinomFamily`>, class<`EuclRandMatrix`>, any, ...> => class<`matrix`> | <class<`BetaFamily`>, class<`EuclRandVariable`>, any, ...> => double[] | <class<`L2ParamFamily`>, class<`EuclRandMatrix`>, any, ...> => class<`matrix`> | <class<`L2ParamFamily`>, class<`EuclRandVariable`>, any, ...> => double | <class<`BetaFamily`>, class<`EuclRandMatrix`>, any, ...> => class<`matrix`> | <class<`CauchyLocationFamily`>, class<`EuclRandVariable`>, any, ...> => double;
type `estimate` <class<`MLEstimate`>> => double[] | <class<`MLEstimate`>> => double[];
type `EvenSymmetric` <double> => class<`EvenSymmetric`>;
type `f1` <double> => double | <double> => double | <double> => double | <double> => double | <double> => double;
type `f2` <double> => double | <double> => double;
type `.fillList` <expression, integer> => list<expression>;
type `filter` <character[]> => logical[];
type `FisherInfo` <class<`CauchyLocationFamily`> | class<`CauchyLocationScaleFamily`> | class<`GammaFamily`> | class<`BetaFamily`> | class<`BinomFamily`>, any> => (class<`PosDefSymmMatrix`> | class<`PosSemDefSymmMatrix`>) | <class<`CauchyLocationFamily`>, any> => class<`PosDefSymmMatrix`> | <class<`BetaFamily`>, any> => class<`PosSemDefSymmMatrix`> | <class<`BinomFamily`>, any> => class<`PosSemDefSymmMatrix`> | <class<`GammaFamily`>, class<`ParamWithScaleAndShapeFamParameter`>> => class<`PosDefSymmMatrix`> | <class<`CauchyLocationScaleFamily`>, any> => class<`PosDefSymmMatrix`>;
type `FisherInfo.fct` <class<`ParamWithScaleAndShapeFamParameter`>> => class<`PosDefSymmMatrix`> | <class<`ParamFamParameter`>> => class<`PosDefSymmMatrix`> | <any> => class<`PosDefSymmMatrix`> | <class<`ParamFamParameter`>> => class<`PosDefSymmMatrix`> | <class<`ParamWithScaleFamParameter`>> => class<`PosDefSymmMatrix`>;
type `fixed` <class<`GammaFamily`>, ...> => null | <class<`ParamWithScaleAndShapeFamParameter`>, ...> => null | <class<`GammaFamily`> | class<`MLEstimate`> | class<`ParamWithScaleAndShapeFamParameter`>, ...> => null | <class<`MLEstimate`>, ...> => null;
type `fixed.estimate` <class<`Confint`>, ...> => null | <class<`Confint`>, ...> => null;
type `fn` <double[], double[], class<`GammaFamily`>, class<`function`>, ...> => double;
type `format.perc` <double[], double> => character[];
type `fun` <any, any> => null | <character, any> => null;
type `FunSymmList` <...> => class<`FunSymmList`>;
type `GammaFamily` <double, double, class<`function`>, logical> => class<`GammaFamily`>;
type `get.criterion.fct` <double[], any, any, any, any, ...> => class<`function`>;
type `getdistrModOption` <character> => character;
type `getMethod` <any, ...> => logical;
type `.inArgs` <character, class<`function`>> => logical;
type `.isEqual` <double, double, double> => logical;
type `.isUnitMatrix` <class<`matrix`>> => logical;
type `L2deriv.fct` <class<`ParamFamParameter`>> => list<class<`function`>> | <class<`ParamWithScaleFamParameter`>> => list<class<`function`>> | <class<`ParamFamParameter`>> => class<`function`> | <class<`ParamWithScaleAndShapeFamParameter`>> => list<class<`function`>> | <class<`ParamFamParameter`>> => class<`function`>;
type `L2LocationFamily` <double, character, class<`Cauchy`>, character, class<`function`>, class<`function`>, class<`Arcsine`>, class<`matrix`>, class<`SphericalSymmetry`>, class<`FunSymmList`>, class<`DistrSymmList`>, class<`matrix`>> => class<`CauchyLocationFamily`>;
type `L2LocationScaleFamily` <double, double, character, class<`Cauchy`>, character[], any, class<`function`>, class<`UnivarDistrList`>, class<`matrix`>, class<`SphericalSymmetry`>, class<`FunSymmList`>, class<`DistrSymmList`>> => class<`CauchyLocationScaleFamily`>;
type `L2ParamFamily` <character, class<`Beta`> | class<`Binom`>, class<`NoSymmetry`>, any, any, any, any, class<`ParamFamParameter`>, character[], class<`function`>, class<`function`>, class<`function`>> => (class<`BetaFamily`> | class<`BinomFamily`>);
type `length` <any> => integer | <any> => integer | <any> => integer;
type `.List` <expression> => list<expression>;
type `.local` <any, class<`ParamWithScaleAndShapeFamParameter`> | double[], double> => logical | <class<`Confint`>> => null | <double[], class<`GammaFamily`>, class<`function`>, double[], double, character, null, logical, logical, ...> => list<any> | <class<`BinomFamily`> | class<`CauchyLocationFamily`> | class<`CauchyLocationScaleFamily`>, logical, logical, logical, logical, character, double, double, double, ..., logical, null> => class<`DiagnInfo`, `plotInfo`> | <double[], class<`GammaFamily`>, double[], double, logical, null, logical, ...> => list<any> | <class<`ParamFamParameter`> | class<`ParamWithScaleFamParameter`>, any> => class<`matrix`> | <class<`Confint`>, double, character> => list<character> | <class<`Confint`>, logical> => double | <class<`MLEstimate`> | class<`ParamWithScaleAndShapeFamParameter`>> => null | <any, class<`ParamWithScaleAndShapeFamParameter`> | double[], double> => logical | <class<`BetaFamily`> | class<`BinomFamily`> | class<`CauchyLocationFamily`> | class<`CauchyLocationScaleFamily`> | class<`L2ParamFamily`>, class<`EuclRandMatrix`>, logical, ..., logical> => class<`matrix`> | <class<`CauchyLocationFamily`> | class<`CauchyLocationScaleFamily`> | class<`BetaFamily`> | class<`BinomFamily`>> => (class<`PosDefSymmMatrix`> | class<`PosSemDefSymmMatrix`>) | <class<`GammaFamily`>> => class<`function`> | <class<`BetaFamily`> | class<`CauchyLocationScaleFamily`> | class<`BinomFamily`> | class<`CauchyLocationFamily`> | class<`L2ParamFamily`>, class<`EuclRandVariable`>, logical, ..., logical> => double[] | <class<`BetaFamily`> | class<`CauchyLocationScaleFamily`> | class<`BinomFamily`> | class<`CauchyLocationFamily`> | class<`L2ParamFamily`>, logical> => list<double[] | class<`matrix`> | double | class<`matrix`>> | <class<`Confint`>, any> => class<`matrix`> | <class<`MLEstimate`>, any, double> => class<`Confint`> | <double[]> => integer | <class<`GammaFamily`>> => null;
type `LogDeriv` <double> => double;
type `main` <class<`ParamFamParameter`>> => double[] | <class<`GammaFamily`>> => double[] | <class<`ParamWithScaleAndShapeFamParameter`>> => double[] | <class<`MLEstimate`>> => double[] | <class<`ParamFamParameter`> | class<`ParamWithScaleFamParameter`> | class<`GammaFamily`> | class<`ParamWithScaleAndShapeFamParameter`> | class<`MLEstimate`>> => double[] | <class<`ParamWithScaleFamParameter`>> => double[];
type `mceCalc` <double[], class<`GammaFamily`>, ...> => list<any> | <double[], class<`GammaFamily`>, ...> => list<any>;
type `meRes` <double[], double[], double, class<`ParamWithScaleAndShapeFamParameter`>, class<`function`>, character, character, null, character[], double[], list<double[] | ^integer[] | null>> => list<any>;
type `MLEstimator` <double[], class<`GammaFamily`>, null, any, null, double, logical, logical, ..., logical, logical, character> => class<`MLEstimate`>;
type `name` <class<`CauchyLocationScaleFamily`>> => character | <class<`BinomFamily`>> => character | <class<`CauchyLocationFamily`>> => character | <class<`onesidedBias`>> => character;
type `name.estimate` <class<`Confint`>> => character | <class<`Confint`>> => character;
type `.negLoglikelihood` <double[], class<`Gammad`>, ..., logical> => double;
type `NonSymmetric` < > => class<`NonSymmetric`>;
type `NormType` <character, class<`function`>> => class<`NormType`>;
type `nu` <class<`asymmetricBias`>> => double[] | <class<`asymmetricBias`>> => double[];
type `nu<-` <class<`asymmetricBias`>, double[]> => any | <class<`asymmetricBias`>, double[]> => any;
type `nuisance` <class<`GammaFamily`> | class<`MLEstimate`> | class<`ParamFamParameter`> | class<`ParamWithScaleAndShapeFamParameter`> | class<`ParamWithScaleFamParameter`>> => null | <class<`ParamWithScaleFamParameter`>> => null | <class<`GammaFamily`>> => null | <class<`MLEstimate`>> => null | <class<`ParamWithScaleAndShapeFamParameter`>> => null | <class<`ParamFamParameter`>> => null;
type `nuisance.estimate` <class<`Confint`>> => null | <class<`Confint`>> => null;
type `OddSymmetric` <double> => class<`OddSymmetric`>;
type `param` <class<`GammaFamily`>> => class<`ParamWithScaleAndShapeFamParameter`>;
type `ParamFamParameter` <character[], double[], any, any, any, ..., null | character> => (class<`ParamFamParameter`> | class<`ParamWithScaleAndShapeFamParameter`> | class<`ParamWithScaleFamParameter`>);
type `plot` <class<`CauchyLocationScaleFamily`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`CauchyLocationFamily`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`BinomFamily`>, any, ...> => class<`DiagnInfo`, `plotInfo`>;
type `positiveBias` <character> => class<`onesidedBias`>;
type `print` <class<`Confint`>, ...> => list<character>;
type `print.relMatrix` <class<`matrix`, `relMatrix`>, ...> => null;
type `.process.meCalcRes` <list<any>, class<`GammaFamily`>, null, character, class<`call`>, class<`function`>, logical, ..., character, logical, null, character> => class<`MLEstimate`>;
type `samplesize` <double[], ...> => integer;
type `samplesize.estimate` <class<`Confint`>, ...> => double | <class<`Confint`>, ...> => double;
type `show` <class<`Confint`>> => (class<`matrix`> | null);
type `startPar` <double[], ...> => double[] | <class<`GammaFamily`>, ...> => class<`function`> | <class<`GammaFamily`>, ...> => class<`function`>;
type `symmetricBias` <character> => class<`symmetricBias`>;
type `.toForMat` <class<`matrix`, `relMatrix`>> => class<`matrix`>;
type `trafo` <class<`ParamFamParameter`>, any, ...> => class<`matrix`> | <class<`ParamFamParameter`> | class<`ParamWithScaleFamParameter`>, any, ...> => class<`matrix`> | <class<`ParamWithScaleFamParameter`>, any, ...> => class<`matrix`>;
type `type` <class<`Confint`>> => character;
type `validityMethod` <class<`FunSymmList`>> => logical | <class<`Estimate`>> => logical | <class<`asUnOvShoot`>> => logical | <class<`asHampel`>> => logical;
type `validParameter` <class<`GammaFamily`>, ...> => logical | <class<`GammaFamily`>, ...> => logical;
type `.validTrafo` <class<`function`> | class<`matrix`>, any, any> => logical;
