type `align_2` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`gDesc`, `gTree`, `grob`, `gtable`>, double, character> => list<class<`gDesc`, `gTree`, `grob`, `gtable`>>;
type `arrangeGrob` <..., list<class<`gDesc`, `grob`, `rect`>> | list<class<`gDesc`, `gTree`, `grob`>> | list<class<`gDesc`, `gTree`, `grob`, `gtable`>>, any, null, character, logical, logical, character, double | null, null | double, null, null, null | character, null | character, null | character, null | character> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `cbind_2` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`gDesc`, `gTree`, `grob`, `gtable`>, character> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `col_widths` <class<`matrix`>> => class<`unit`, `unit.list`>;
type `combine_2` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`gDesc`, `gTree`, `grob`, `gtable`>, double, character> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `%contains%` <character[], character[]> => logical;
type `ellipseGrob` <class<`unit`, `unit.arithmetic`>, class<`unit`, `unit.arithmetic`>, double, double[], double, double, class<`gpar`>, ..., character, character> => class<`gDesc`, `grob`, `polygon`>;
type `grid.arrange` <..., logical> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `grid.table` <...> => null;
type `gtable_combine` <..., double, character> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_reindex` <class<`gDesc`, `gTree`, `grob`, `gtable`>, character[], double> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `gtable_table` <character[] | class<`data.frame`> | class<`matrix`>, any, any, class<`function`>, list<character | double> | list<double | character[]>, class<`function`>, list<null> | list<null | double | character> | list<character[] | double[]> | list<character[] | null> | list<character[] | double> | list<character | double>, class<`unit`>, character, null> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `insert.unit` <class<`unit`, `unit.arithmetic`> | class<`unit`, `unit.list`>, class<`unit`, `unit.arithmetic`> | class<`unit`, `unit.list`>, integer> => class<`unit`, `unit.list`>;
type `ngonGrob` <class<`unit`, `unit.arithmetic`>, class<`unit`, `unit.arithmetic`>, double[], double[], double, double[], integer[] | double, class<`gpar`>, ..., character, character> => class<`gDesc`, `grob`, `polygon`>;
type `polygon_regular` <double, double> => class<`matrix`>;
type `rbind_2` <class<`gDesc`, `gTree`, `grob`, `gtable`>, class<`gDesc`, `gTree`, `grob`, `gtable`>, character> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `rep_along` <class<`unit`>, character> => class<`unit`>;
type `row_heights` <class<`matrix`>> => class<`unit`, `unit.list`>;
type `tableGrob` <class<`data.frame`>, character[] | null, character[] | null, list<list<class<`function`> | class<`unit`> | list<double | character[] | character[] | double[]> | class<`function`> | class<`unit`> | list<character | double> | class<`function`> | class<`unit`> | list<character | double | null | double | character>>> | list<list<class<`function`> | class<`unit`> | list<character | double | character[] | null> | class<`function`> | class<`unit`> | list<character | double | null>>> | list<list<class<`function`> | class<`unit`> | list<character | double | character[] | double> | class<`function`> | class<`unit`> | list<character | double> | class<`function`> | class<`unit`> | list<character | double | null | double | character>>> | list<list<class<`function`> | class<`unit`> | list<character | double | null>>>, null, ...> => class<`gDesc`, `gTree`, `grob`, `gtable`>;
type `ttheme_default` <double, character, character, logical, class<`unit`>, ...> => (list<list<class<`function`> | class<`unit`> | list<double | character[] | character[] | double[]> | class<`function`> | class<`unit`> | list<character | double> | class<`function`> | class<`unit`> | list<character | double | null | double | character>>> | list<list<class<`function`> | class<`unit`> | list<character | double | character[] | double> | class<`function`> | class<`unit`> | list<character | double> | class<`function`> | class<`unit`> | list<character | double | null | double | character>>>);
type `ttheme_minimal` <double, character, character, logical, class<`unit`>, ...> => (list<list<class<`function`> | class<`unit`> | list<character | double | character[] | null> | class<`function`> | class<`unit`> | list<character | double | null>>> | list<list<class<`function`> | class<`unit`> | list<character | double | null>>>);
