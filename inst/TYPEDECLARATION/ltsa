type `DHSimulate` <double, double[], logical, any, ...> => double[];
type `DLAcfToAR` <double[], logical, logical> => (class<`matrix`> | logical);
type `DLLoglikelihood` <double[], class<`ts`> | double[], logical> => double;
type `DLResiduals` <double[], class<`ts`> | double[], logical, logical> => double[];
type `DLSimulate` <double, double[], logical, class<`function`>, ...> => double[];
type `exactLoglikelihood` <double[], class<`ts`>, logical> => list<double>;
type `innovationVariance` <class<`ts`>, character[], ...> => double;
type `is.toeplitz` <class<`matrix`> | double> => logical;
type `PredictionVariance` <double[], double, logical> => double[];
type `SimGLP` <double[], double[]> => double[];
type `tacvfARMA` <double[], any, double, double> => any;
type `ToeplitzInverseUpdate` <class<`matrix`>, double[], double> => class<`matrix`>;
type `TrenchForecast` <class<`ts`>, double[], double, double, double, logical> => list<class<`matrix`>>;
type `TrenchInverse` <class<`matrix`>> => class<`matrix`>;
type `TrenchLoglikelihood` <double[], class<`ts`> | double[]> => double;
type `TrenchMean` <double[], double[]> => double;
