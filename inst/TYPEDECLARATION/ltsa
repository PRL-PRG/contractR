type `DHSimulate` <double, double[], logical, any => any, null> => double[];
type `DLAcfToAR` <double[], logical, logical> => ^double[];
type `DLLoglikelihood` <double[], double[], logical> => double;
type `DLResiduals` <double[], double[], logical, logical> => double[];
type `DLSimulate` <double, double[], logical, any => any, null> => double[];
type `exactLoglikelihood` <double[], double[], logical> => struct<`LL`:double, `sigmaSq`:double>;
type `filter` <character[]> => logical[];
type `fun` <character, character> => struct<`name`:character, `path`:character, `dynamicLookup`:logical, `handle`:null, `info`:null>;
type `innovationVariance` <double[], character[], null | double[]> => double;
type `is.toeplitz` <double | ^integer[]> => logical;
type `PredictionVariance` <double[], double, logical> => double[];
type `SimGLP` <double[], double[]> => double[];
type `tacvfARMA` <double[], double[], double, double> => double[];
type `ToeplitzInverseUpdate` <^double[], double[], double> => ^double[];
type `TrenchForecast` <double[], double[], double, double, double, logical> => struct<`Forecasts`:^double[], `SDForecasts`:^double[]>;
type `TrenchInverse` <^double[]> => ^double[];
type `TrenchLoglikelihood` <double[], double[]> => double;
type `TrenchMean` <double[], double[]> => double;
