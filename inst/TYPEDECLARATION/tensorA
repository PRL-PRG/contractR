type `add.tensor` <class<`matrix`, `tensor`> | double | class<`tensor`>, class<`matrix`, `tensor`> | class<`tensor`> | double, character, null> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `as.contravariate` <character[], ...> => character[];
type `as.contravariate.character` <character[], ...> => character[];
type `as.covariate` <character[], ...> => character[];
type `as.covariate.character` <character[], ...> => character[];
type `as.tensor` <class<`matrix`, `tensor`> | class<`matrix`> | class<`tensor`> | double[], ...> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `as.tensor.default` <class<`tensor`> | class<`array`> | complex[] | class<`matrix`>, ..., null> => (class<`tensor`> | class<`matrix`, `tensor`>);
type `as.tensor.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, ...> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `bind.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character | double, class<`matrix`, `tensor`> | class<`tensor`>, double> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `chol.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character[], character[], ..., character> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `contraname` <character[]> => (character[] | logical[]);
type `delta.tensor` <double[], character, null, null> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `diagmul.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character[] | double, class<`matrix`, `tensor`> | class<`tensor`>, character[] | double, null | character> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `diag.tensor` <class<`matrix`, `tensor`>, character, null, character | null> => class<`tensor`>;
type `dimnames<-.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, null | list<any>> => (class<`matrix`, `tensor`> | class<`tensor`> | null);
type `dimnames.tensor` <class<`tensor`> | class<`matrix`, `tensor`>> => list<any>;
type `dim<-.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, double[]> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `drag.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, class<`matrix`, `tensor`>, character[]> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `%e%` <class<`tensor`>, class<`tensor`> | class<`matrix`, `tensor`>> => (class<`matrix`, `tensor`> | class<`tensor`> | complex);
type `einstein.tensor` <..., null | character, character | null> => (class<`matrix`, `tensor`> | class<`tensor`> | complex);
type `%e%.tensor` <class<`tensor`>, class<`tensor`> | class<`matrix`, `tensor`>> => (class<`matrix`, `tensor`> | class<`tensor`> | complex);
type `filter` <character[]> => logical[];
type `ftable.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, ...> => class<`ftable`>;
type `FUN` <integer> => list<double[] | class<`matrix`>> | <integer> => complex[] | <integer> => (class<`matrix`> | complex[]) | <character[] | double[]> => character[] | <list<double[] | class<`matrix`>>> => class<`matrix`> | <integer> => class<`matrix`> | <integer> => class<`matrix`> | <integer> => complex[] | <integer, ...> => class<`matrix`> | <integer> => class<`matrix`> | <integer> => character[] | <list<double[] | class<`matrix`>>> => class<`matrix`> | <list<double[] | class<`matrix`>>> => double[];
type `gsi.debug` <...> => list<any>;
type `gsi.debugn` <...> => null;
type `gsi.debugr` <class<`matrix`, `tensor`> | class<`tensor`> | complex | null> => (class<`matrix`, `tensor`> | class<`tensor`> | complex | null);
type `gsi.fullreorder` <integer[], double[] | null, double[] | null> => double[];
type `gsi.invperm` <double> => double[];
type `gsi.matrify` <class<`matrix`> | class<`matrix`, `tensor`> | class<`tensor`>, double[]> => class<`matrix`>;
type `gsi.namedlist` <character, ...> => list<null>;
type `gsi.namednumber` <character | null, ...> => double;
type `gsi.rest` <integer[], double[]> => double[];
type `gsi.stdnames` <double, character, character[] | null> => character[];
type `gsi.untensornames` <list<character[] | null>, any> => (character[] | null);
type `gsi.vonbis` <double, double> => (integer | null);
type `gsi.weightedndx` <integer[], double[]> => double[];
type `gsi.weights` <integer[]> => double[];
type `gsi.without` <integer[] | list<any>, double[]> => (integer[] | list<any>);
type `inv.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, double | character[], ..., logical, double, null | character> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `is.contravariate` <character[] | class<`tensor`>, ...> => logical[];
type `is.contravariate.character` <character[], ...> => logical[];
type `is.contravariate.tensor` <class<`tensor`>, ...> => logical[];
type `is.covariate` <character[] | class<`matrix`, `tensor`> | class<`tensor`>, ...> => logical[];
type `is.covariate.character` <character[], ...> => logical[];
type `is.covariate.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, ...> => logical[];
type `is.tensor` <character[] | class<`matrix`> | class<`matrix`, `tensor`> | class<`tensor`> | double[] | null> => logical;
type `level.tensor` <double | integer[] | class<`matrix`> | class<`matrix`, `tensor`> | class<`tensor`>, ...> => double;
type `margin.tensor` <class<`tensor`> | class<`matrix`> | class<`matrix`, `tensor`>, null | character[] | double[], null | character[]> => (class<`matrix`, `tensor`> | class<`tensor`> | double);
type `mark` <character[] | class<`matrix`, `tensor`> | class<`tensor`> | double[], any, ...> => (character[] | class<`matrix`, `tensor`> | class<`tensor`> | double[]);
type `mark.character` <character[], character, character | integer[], ..., null> => character[];
type `mark.numeric` <double[], character, integer[] | character, ..., null> => double[];
type `mark.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character[], integer[] | character[], ..., null | double | integer[]> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `mean.tensor` <class<`tensor`>, character, ..., logical> => class<`matrix`, `tensor`>;
type `mul.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, null | character[] | double, class<`matrix`, `tensor`> | class<`tensor`>, null | character[] | logical[] | double, null | character[] | double[]> => (class<`matrix`, `tensor`> | class<`tensor`> | complex);
type `names<-.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character[]> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `names.tensor` <class<`matrix`, `tensor`> | class<`tensor`>> => ^character[];
type `norm` <class<`matrix`, `tensor`>, ...> => (class<`tensor`> | double);
type `norm.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, null | double[] | character[], ..., null | character> => (class<`tensor`> | double);
type `one.tensor` <double[], null | list<any>> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `opnorm` <class<`tensor`> | class<`matrix`, `tensor`>, ...> => (class<`tensor`> | null);
type `opnorm.tensor` <class<`tensor`> | class<`matrix`, `tensor`>, character, ..., character | null> => (class<`tensor`> | null);
type `pos.tensor` <integer[]> => class<`matrix`>;
type `power.tensor` <class<`tensor`>, character[] | double[], character[] | double[], double, character | null> => class<`tensor`>;
type `%r%` <class<`tensor`>, class<`tensor`>> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `reorder.tensor` <class<`matrix`, `tensor`> | class<`tensor`> | class<`matrix`> | class<`array`>, character[] | double[], ..., null> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `reorder.tidx` <integer[], double[], ...> => double[];
type `rep.tensor` <class<`tensor`> | class<`matrix`, `tensor`>, double[], double | character, character | null, ...> => (class<`tensor`> | class<`matrix`, `tensor`>);
type `riemann.tensor` <..., null, null> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `%r%.tensor` <class<`tensor`>, class<`tensor`>> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `slice.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character, double | integer[] | character[], logical> => (class<`tensor`> | null);
type `solve.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, class<`matrix`, `tensor`> | class<`tensor`>, character[], character[], ..., logical, double, character | null> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `svd.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character[] | double[], null | character[] | double[], ..., character, null | character> => list<class<`matrix`, `tensor`> | class<`tensor`> | class<`tensor`> | class<`matrix`, `tensor`> | class<`tensor`>>;
type `^.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, double | character[]> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `|.tensor` <class<`tensor`>, character[]> => class<`tensor`>;
type `-.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, class<`matrix`, `tensor`> | class<`tensor`> | double> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `/.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, class<`matrix`, `tensor`> | class<`tensor`> | double> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `[.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, ..., logical> => class<`tensor`>;
type `[[<-.tensor` <class<`tensor`>, ..., class<`tensor`> | double> => class<`tensor`>;
type `[[.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, ..., logical> => (class<`matrix`, `tensor`> | class<`tensor`> | integer | null);
type `$.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `*.tensor` <class<`matrix`, `tensor`> | class<`tensor`> | double, class<`tensor`> | double | class<`matrix`, `tensor`>> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `+.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, class<`tensor`> | class<`matrix`, `tensor`>> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `to.matrix.tensor` <class<`tensor`>, any, any, character | null> => (class<`array`> | class<`matrix`>);
type `toPos.tensor` <any, character[] | double[] | null, any, any, ..., logical, logical> => (double[] | null);
type `to.tensor` <class<`matrix`> | class<`matrix`, `tensor`> | class<`tensor`> | complex[] | class<`array`>, ...> => (class<`matrix`, `tensor`> | class<`tensor`> | complex);
type `to.tensor.default` <class<`matrix`> | class<`matrix`, `tensor`> | class<`tensor`> | complex[] | class<`array`>, double[] | null | list<character[] | integer[]>, any, integer[] | double | character[], logical | character, ...> => (class<`matrix`, `tensor`> | class<`tensor`> | complex);
type `trace.tensor` <class<`tensor`> | class<`matrix`, `tensor`>, character[], character[]> => (class<`matrix`, `tensor`> | class<`tensor`> | double);
type `tripledelta.tensor` <double[], character, character, null> => class<`tensor`>;
type `undrop.tensor` <class<`matrix`, `tensor`> | class<`tensor`>, character, double> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `untensor` <class<`matrix`> | class<`tensor`>, character[] | double[] | null | list<character[] | double[]>, null | character[], double, null | character[]> => (class<`matrix`, `tensor`> | class<`tensor`>);
type `var.tensor` <class<`tensor`>, class<`tensor`> | null, ..., character, null | character, logical, character> => (class<`matrix`, `tensor`> | class<`tensor`>);
