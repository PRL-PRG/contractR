type `::` <character, character, logical, null, ...> => class<`tinytests`>;
type `:::` <any, any> => (null | list<null>) | <character, ...> => any;
type `[[` <class<`condition`, `error`, `simpleError`>> => character | <class<`condition`, `simpleWarning`, `warning`>> => character | <class<`condition`, `error`, `simpleError`>> => (character | logical) | <class<`condition`, `simpleWarning`, `warning`>> => character | <class<`condition`, `error`, `simpleError`>> => character;
type `$` <class<`tinytest`>> => double | < > => double | < > => double | <logical> => null | < > => double | < > => list<any> | < > => double;
type `add_locally_masked_functions` <environment, any> => class<`function`>;
type `add_RUnit_style` <environment> => null;
type `all_fail` <character | class<`tinytests`>> => any;
type `all_pass` <character | class<`tinytests`>> => any;
type `any_fail` <character | class<`tinytests`>> => any;
type `any_pass` <character | class<`tinytests`>> => any;
type `as.data.frame.tinytests` <class<`tinytests`>, ...> => class<`data.frame`>;
type `at_home` < > => logical;
type `capture` <class<`function`>, any> => class<`function`>;
type `capture_envvar` <any, any> => class<`function`>;
type `capture_exit` <any, any> => class<`function`>;
type `capture_options` <any, any> => class<`function`>;
type `capture_se` <any, any> => class<`function`>;
type `capture_using` <any, any, any> => class<`function`>;
type `catf` <character, ...> => null;
type `envdiff` <class<`Dlist`>, class<`Dlist`>> => class<`tinytest`>;
type `exit_file` <...> => character | <character> => character;
type `expect_equal` <...> => (class<`tinytest`> | null) | <character | double | class<`data.frame`> | list<character[]>, character | double | class<`data.frame`> | list<character[]>, any, null | character, ...> => class<`tinytest`>;
type `expect_equivalent` <...> => (class<`tinytest`> | null) | <double | character, double | character, any, null | character, ...> => class<`tinytest`>;
type `expect_error` <...> => (class<`tinytest`> | null) | <any, character, null | character> => class<`tinytest`>;
type `expect_false` <...> => (class<`tinytest`> | null) | <logical | class<`tinytest`>, character | null> => class<`tinytest`>;
type `expect_identical` <...> => (class<`tinytest`> | null) | <environment | character | double | list<double>, environment | character | double | list<double>, null | character> => class<`tinytest`>;
type `expect_message` <...> => (class<`tinytest`> | null) | <any, character, null | character> => class<`tinytest`>;
type `expect_null` <class<`factor`> | null | double, null | character> => class<`tinytest`>;
type `expect_silent` <any, logical, null | character> => class<`tinytest`>;
type `expect_true` <...> => (class<`tinytest`> | null) | <class<`tinytest`> | logical, null | character> => class<`tinytest`>;
type `expect_warning` <...> => (class<`tinytest`> | null) | <character | double, character, null | character> => class<`tinytest`>;
type `filter` <character[]> => logical[];
type `format.tinytest` <class<`tinytest`>, character[], ...> => character;
type `fun` <any, any> => (null | list<null>) | <character> => character | <...> => (class<`tinytest`> | null) | <character | double | class<`data.frame`> | list<character[]>, character | double | class<`data.frame`> | list<character[]>, any, null | character, ...> => class<`tinytest`> | <double | character, double | character, any, null | character, ...> => class<`tinytest`> | <any, character, null | character> => class<`tinytest`> | <logical | class<`tinytest`>, character | null> => class<`tinytest`> | <environment | character | double | list<double>, environment | character | double | list<double>, null | character> => class<`tinytest`> | <any, character, null | character> => class<`tinytest`> | <class<`factor`> | null | double, null | character> => class<`tinytest`> | <any, logical, null | character> => class<`tinytest`> | <class<`tinytest`> | logical, null | character> => class<`tinytest`> | <character | double, character, null | character> => class<`tinytest`> | <environment> => null | <environment> => (class<`tinytest`> | null) | <environment> => (class<`tinytest`> | null) | <logical, logical, logical, logical> => list<logical>;
type `FUN` <class<`tinytest`>> => character | <integer> => character | <list<any>> => character | <class<`tinytest`> | character[] | logical> => logical | <class<`tinytest`>> => logical | <character, logical, double, any, any, logical | list<logical>, ...> => any | <character> => class<`tinytest`> | <class<`tinytest`>> => logical | <class<`tinytest`> | logical> => logical;
type `ignore` <...> => class<`tinytest`> | <any> => class<`function`>;
type `indent` <character | null, character> => character;
type `is_atomic` <character | double | environment> => logical;
type `isFALSE` <class<`tinytest`> | logical> => logical;
type `is_scalar` <character | double | environment> => logical;
type `isTRUE` <class<`tinytest`> | character[] | logical> => logical;
type `lineformat` <integer | null> => character;
type `locale_sort` <character[], null, ...> => character[];
type `local_report_cwd` <...> => (class<`tinytest`> | null);
type `local_report_envvar` <...> => (class<`tinytest`> | null);
type `local_report_files` <...> => (class<`tinytest`> | null);
type `longdiff` <character | double | environment, character | double | environment, any> => character;
type `na_str` <character | null> => character;
type `oneline` <character> => character;
type `options` <...> => list<double | null>;
type `output` < > => environment;
type `print_status` <character, environment, any> => null;
type `print.tinytest` <class<`tinytest`>, ...> => null;
type `print.tinytests` <class<`tinytests`>, logical, logical, double, double, ...> => null;
type `register_tinytest_extension` <character, character[]> => list<null>;
type `report_side_effects` <logical, logical, logical, logical> => list<logical> | <...> => list<logical>;
type `reset_options` <environment> => list<any>;
type `run_test_dir` <character, character, logical, double, logical, logical, null, null, ...> => class<`tinytests`>;
type `run_test_file` <character, logical, double, any, any, logical | list<logical>, ...> => any;
type `shortdiff` <character | double | environment, character | double | environment, ...> => character;
type `summary.tinytests` <class<`tinytests`>, ...> => class<`table`>;
type `Sys.setenv` <...> => logical;
type `tinytest` <logical | null, class<`call`>, character | null, character | null, character | null, null, null, null, ...> => class<`tinytest`>;
type `[.tinytests` <class<`tinytests`>, double | integer[]> => class<`tinytests`>;
type `unset_envvar` <environment> => (logical[] | null);
