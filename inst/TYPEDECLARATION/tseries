type `adf.test` <double[], character[], double> => class<`htest`>;
type `approx.irts` <class<`irts`>, class<`POSIXct`, `POSIXt`>, ...> => class<`irts`>;
type `arma` <class<`ts`>, double[], null | list<double[] | double[] | null>, null, logical, null, double, ...> => class<`arma`>;
type `as.irts` <class<`matrix`>> => class<`irts`>;
type `as.irts.default` <class<`matrix`>> => class<`irts`>;
type `bds.test` <class<`ts`> | double[], double, double[], logical> => class<`bdstest`>;
type `boot.sample` <integer[], double, double> => double[];
type `daysecond` <class<`irts`>, character> => double[];
type `fftsurr` <class<`ts`>> => double[];
type `garch` <class<`ts`>, double[], null, list<any>, ...> => class<`garch`>;
type `garch.control` <double, logical, null, character[], double, double, double, double, ...> => list<any>;
type `get.hist.quote` <character, any, any, character[], character, null, character, character, character[], logical, logical> => (class<`matrix`, `mts`, `ts`> | class<`zoo`>);
type `irts` <double[], class<`matrix`> | double[]> => class<`irts`>;
type `[.irts` <class<`irts`>, any, any, ...> => class<`irts`>;
type `is.businessday` <class<`irts`>, character> => logical[];
type `is.irts` <class<`irts`>> => logical;
type `is.weekend` <class<`irts`>, character> => logical[];
type `jarque.bera.test` <class<`ts`> | double[]> => class<`htest`>;
type `kpss.test` <double[], character[], logical> => class<`htest`>;
type `lines.irts` <class<`irts`>, character, ...> => class<`irts`>;
type `maxdrawdown` <class<`ts`> | integer[]> => list<double>;
type `na.action` <class<`ts`>, ...> => class<`ts`>;
type `na.remove` <class<`ts`>, ...> => class<`ts`>;
type `na.remove.default` <class<`ts`>, ...> => double[];
type `na.remove.ts` <class<`ts`>, ...> => class<`ts`>;
type `plot.arma` <class<`arma`>, logical, ...> => class<`arma`>;
type `plot.garch` <class<`garch`>, logical, ...> => class<`garch`>;
type `plot.irts` <class<`irts`>, character, any, character, null, null, null, any, ...> => class<`irts`>;
type `plotOHLC` <class<`matrix`, `mts`, `ts`>, null, null, character, character, character, character, logical, logical, logical, character, character[], character, character, ...> => null;
type `points.irts` <class<`irts`>, character, ...> => class<`irts`>;
type `portfolio.optim` <class<`matrix`> | class<`zoo`, `zooreg`>, ...> => list<double[]>;
type `portfolio.optim.default` <class<`matrix`> | class<`zoo`, `zooreg`>, double, logical, logical, double, null, null, class<`matrix`>, ...> => list<double[]>;
type `po.test` <class<`matrix`, `mts`, `ts`>, logical, logical> => class<`htest`>;
type `pp.test` <double[], character[], character[], logical> => class<`htest`>;
type `quadmap` <double, double, double> => class<`ts`>;
type `read.matrix` <character, logical, character, double> => (class<`matrix`> | double[]);
type `read.ts` <character, logical, character, double, ...> => class<`ts`>;
type `residuals.arma` <class<`arma`>, ...> => class<`ts`>;
type `runs.test` <class<`factor`>, character[]> => class<`htest`>;
type `seqplot.ts` <class<`matrix`, `mts`, `ts`>, class<`matrix`, `mts`, `ts`>, character, character, character, character, double, double, character, character, double[], logical, character, any, null> => null;
type `sharpe` <class<`ts`>, double, double> => double;
type `sterling` <class<`ts`>> => double;
type `summary.arma` <class<`arma`>, ...> => class<`summary.arma`>;
type `summary.garch` <class<`garch`>, ...> => class<`summary.garch`>;
type `surrogate` <class<`ts`> | integer[], double, logical, logical, class<`function`> | null, ...> => (class<`resample.statistic`> | integer[]);
type `terasvirta.test` <class<`matrix`> | class<`ts`> | double[], ...> => class<`htest`>;
type `terasvirta.test.default` <class<`matrix`> | double[], double[], character[], logical, ...> => class<`htest`>;
type `terasvirta.test.ts` <class<`ts`>, double, character[], logical, ...> => class<`htest`>;
type `time.irts` <class<`irts`>, ...> => class<`POSIXct`, `POSIXt`>;
type `tsbootstrap` <class<`ts`>, double, class<`function`>, double, null, character[], ...> => class<`resample.statistic`>;
type `value` <class<`irts`>, ...> => (class<`matrix`> | double[]);
type `value.irts` <class<`irts`>, ...> => (class<`matrix`> | double[]);
type `weekday` <class<`irts`>, character> => integer[];
type `white.test` <class<`matrix`> | class<`ts`> | double[], ...> => class<`htest`>;
type `white.test.default` <class<`matrix`> | double[], double[], double, double, double, character[], logical, ...> => class<`htest`>;
type `white.test.ts` <class<`ts`>, double, double, double, double, character[], logical, ...> => class<`htest`>;
