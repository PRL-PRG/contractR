type `$` <class<`environment`, `proto`> | environment, any, environment, ..., any> => class<`environment`, `proto`> | <...> => (character[] | class<`environment`, `proto`> | class<`function`> | double | null | list<double | class<`function`> | class<`function`> | double[] | class<`function`>>);
type `as.proto` <list<double | class<`function`>>, ...> => class<`environment`, `proto`>;
type `as.proto.environment` <class<`environment`, `proto`> | environment, ...> => class<`environment`, `proto`>;
type `as.proto.list` <list<double | class<`function`>>, any, any, logical, ..., class<`environment`, `proto`>, class<`function`>> => class<`environment`, `proto`>;
type `filter` <character[]> => logical[];
type `is.proto` <class<`environment`, `proto`> | environment> => logical;
type `name.proto` <class<`environment`, `proto`>, environment> => character;
type `print.proto` <class<`environment`, `proto`>, ...> => class<`environment`, `proto`>;
type `proto` <class<`environment`, `proto`> | environment, any, environment, ..., any> => class<`environment`, `proto`>;
type `$<-.proto` <class<`environment`, `proto`>, character, class<`function`> | double> => class<`environment`, `proto`>;
type `$.proto` <class<`environment`, `proto`>, character> => (class<`function`> | class<`protoMethod`> | double[]);
type `res` <class<`environment`, `proto`> | environment, any, environment, ..., any> => class<`environment`, `proto`>;
type `SELECT` <any> => logical;
type `str.proto` <class<`environment`, `proto`>, double, double, character, ...> => null;
