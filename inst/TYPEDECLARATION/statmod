type `canonic.digamma` <double[]> => double[];
type `compareGrowthCurves` <class<`factor`>, class<`matrix`>, null, double, class<`function`>, null, logical, character> => class<`data.frame`>;
type `compareTwoGrowthCurves` <character[], class<`matrix`>, double, class<`function`>> => list<double>;
type `cumulant.digamma` <double[]> => double[];
type `d2cumulant.digamma` <double[]> => double[];
type `Digamma` <character> => list<character | class<`function`> | expression>;
type `.dinvgauss` <double[], null, double[], logical> => double[];
type `elda` <double[], double[], double[], double[], logical, double, logical> => class<`limdil`>;
type `eldaOneGroup` <double[], double[], double[], logical, double, double, double, logical> => list<double[]>;
type `fitNBP` <class<`matrix`>, double[], double[], double, double, logical> => list<class<`matrix`> | double>;
type `forward` <double[], class<`matrix`>, null, logical, integer> => double[];
type `fun` <class<`matrix`>, class<`matrix`>> => double;
type `gauss.quad` <double, character, double, double> => list<double[]>;
type `gauss.quad.prob` <double, character, double, double, double, double, double, double> => list<double[]>;
type `glmgam.fit` <class<`matrix`> | double[], double[] | class<`matrix`>, null | double[], double, double, logical> => list<double[]>;
type `glmnb.fit` <class<`matrix`>, double[], double[], null, double[], null, character, double, double, logical> => list<double[] | character>;
type `glm.scoretest` <class<`glm`, `lm`>, double[], null> => double;
type `hommel.test` <double[], double> => logical[];
type `logmdigamma` <double> => double;
type `matvec` <class<`matrix`>, double[]> => class<`matrix`>;
type `meanT` <class<`matrix`>, class<`matrix`>> => double;
type `meanval.digamma` <double[]> => double[];
type `mixedModel2` <any, any, null, logical, any, null, null, double, double, logical> => list<double[]>;
type `mixedModel2Fit` <double[], class<`matrix`>, class<`matrix`>, null, logical, double, double, logical> => list<double[]>;
type `mscale` <double[], logical> => double;
type `permp` <integer[], double, any, any, null | double, character, logical> => double[];
type `pinvgauss` <^double[], ^double[], null, double, logical, logical> => ^double[];
type `.pinvgauss` <double[], double[] | null, double[], logical, logical> => double[];
type `plot.limdil` <class<`limdil`>, null, double, double, character, ...> => list<double[] | class<`factor`>>;
type `power.fisher.test` <double, double, double, double, double, double, character> => double;
type `.psi.hampel` <double[], double, double, double> => double[];
type `qinvgauss` <double[], ^double[], null, double, logical, logical, integer, double, logical> => ^double[];
type `qres.default` <class<`glm`, `lm`>, double | null> => double[];
type `qres.gamma` <class<`glm`, `lm`>, double> => double[];
type `qresiduals` <class<`glm`, `lm`> | class<`glm`, `lm`, `negbin`>, null | double> => double[];
type `qres.nbinom` <class<`glm`, `lm`> | class<`glm`, `lm`, `negbin`>> => double[];
type `qres.pois` <class<`glm`, `lm`>> => double[];
type `remlscore` <double[], class<`matrix`>, class<`matrix`>, logical, double, double> => list<double[] | class<`matrix`>>;
type `remlscoregamma` <double[], class<`matrix`>, class<`matrix`>, character, character, logical, double, double> => list<double[] | class<`matrix`>>;
type `.rho.hampel` <double[], double, double, double> => double[];
type `rinvgauss` <double, ^double[], null, ^double[]> => ^double[];
type `sage.test` <double[], double[], double, double> => double[];
type `tweedie` <double, double> => class<`family`>;
type `unitdeviance.digamma` <double[], double[]> => double[];
type `vecmat` <class<`matrix`> | double[], class<`matrix`>> => class<`matrix`>;
