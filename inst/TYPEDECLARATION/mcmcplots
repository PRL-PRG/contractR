type `.graypr` <logical, logical, logical, logical, logical, logical, double, double, double, double> => null;
type `.to.greek` <character[]> => expression;
type `addBackslash` <character[]> => character[];
type `autplot1` <tuple<^double[]>, double, null, logical, character | language, character[], null, ???> => null;
type `caterpoints` <double[], ???, logical, character> => null;
type `corplot` <^double[], character[], logical, logical, double, double[], double | ???> => null;
type `denoverplot` <tuple<^double[], ^double[], ^double[]>, tuple<^double[], ^double[], ^double[]>, null, null, null, ? double, logical, logical, double[], character[] | double | pairlist, ? integer | any => any, ? character, double | character, logical, character | double | ???, ???> => null;
type `denoverplot1` <double[] | tuple<^double[]>, ? double, ? character[], double[], ? double[], null, character, character, ? expression | character, character[], ? tuple<>> => null;
type `filter` <character[]> => logical[];
type `FUN` <struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical> | ^double[] | struct<`alpha[2]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `alpha[1]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `gamma[1]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `gamma[3]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `gamma[4]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `alpha[3]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>> | character, character[]> => ^double[] | struct<`alpha[2]`:double[], `alpha[1]`:double[], `gamma[1]`:double[], `gamma[3]`:double[], `gamma[4]`:double[], `alpha[3]`:double[]> | character[] | struct<`alpha[2]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `alpha[1]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `gamma[1]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `gamma[3]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `gamma[4]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, `alpha[3]`:struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>>;
type `mcmcplot1` <tuple<^double[]>, character, double, null, null, character[], logical> => null;
type `parcorplot` <^double[], ? character, null, null, character[], double> => null;
type `rmeanplot` <tuple<^double[], ^double[], ^double[]>, ? character, null, null, character, null, logical, double[], null, double, null, null, logical, character[], ???> => character[];
type `rmeanplot1` <tuple<^double[]>, null, double, character, ???> => null;
type `traplot1` <tuple<^double[]>, ? character[], double, character, ? character> => null;
