type `as.character.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, ...> => character[];
type `as.list.VCorpus` <class<`Corpus`, `VCorpus`>, ...> => list<class<`PlainTextDocument`, `TextDocument`>>;
type `as.TermDocumentMatrix.TermDocumentMatrix` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>, ...> => class<`TermDocumentMatrix`, `simple_triplet_matrix`>;
type `as.VCorpus` <list<class<`PlainTextDocument`, `TextDocument`>>> => class<`Corpus`, `VCorpus`>;
type `as.VCorpus.list` <list<class<`PlainTextDocument`, `TextDocument`>>> => class<`Corpus`, `VCorpus`>;
type `Boost_tokenizer` <class<`PlainTextDocument`, `TextDocument`>> => character[];
type `Boost_Tokenizer` <character> => character[];
type `close.SimpleSource` <class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`>, ...> => (class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`>);
type `close.ZipSource` <class<`SimpleSource`, `Source`, `ZipSource`>, ...> => class<`SimpleSource`, `Source`, `ZipSource`>;
type `content<-.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, character> => class<`PlainTextDocument`, `TextDocument`>;
type `content.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`> | class<`Corpus`, `SimpleCorpus`> | class<`TextDocument`, `XMLTextDocument`>> => (character[] | class<`xml_document`, `xml_node`>);
type `content.SimpleCorpus` <class<`PlainTextDocument`, `TextDocument`> | class<`Corpus`, `SimpleCorpus`> | class<`TextDocument`, `XMLTextDocument`>> => (character[] | class<`xml_document`, `xml_node`>);
type `content_transformer` <any> => class<`content_transformer`, `function`> | <class<`PlainTextDocument`, `TextDocument`>, ...> => class<`PlainTextDocument`, `TextDocument`>;
type `content.VCorpus` <class<`Corpus`, `VCorpus`>> => list<class<`PlainTextDocument`, `TextDocument`>>;
type `content<-.XMLTextDocument` <class<`TextDocument`, `XMLTextDocument`>, class<`xml_document`, `xml_node`>> => class<`TextDocument`, `XMLTextDocument`>;
type `content.XMLTextDocument` <class<`PlainTextDocument`, `TextDocument`> | class<`Corpus`, `SimpleCorpus`> | class<`TextDocument`, `XMLTextDocument`>> => (character[] | class<`xml_document`, `xml_node`>);
type `Corpus` <class<`DataframeSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `ZipSource`>, list<class<`function`> | character>> => (class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>);
type `CorpusMeta` <..., null | list<character>> => class<`CorpusMeta`>;
type `c.TermDocumentMatrix` <..., logical> => class<`TermDocumentMatrix`, `simple_triplet_matrix`>;
type `c.TextDocument` <..., logical> => class<`Corpus`, `VCorpus`>;
type `cum_vocabulary_size` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>> => double[];
type `c.VCorpus` <..., logical> => class<`Corpus`, `VCorpus`>;
type `DataframeSource` <class<`data.frame`>> => class<`DataframeSource`, `SimpleSource`, `Source`>;
type `DirSource` <character, character, null, logical, logical, character> => class<`DirSource`, `SimpleSource`, `Source`>;
type `Docs` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => character[];
type `Docs.TermDocumentMatrix` <class<`TermDocumentMatrix`, `simple_triplet_matrix`> | class<`DocumentTermMatrix`, `simple_triplet_matrix`>> => character[];
type `DocumentTermMatrix` <class<`Corpus`, `VCorpus`>, list<any>> => class<`DocumentTermMatrix`, `simple_triplet_matrix`>;
type `[.DocumentTermMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>, any, any, ..., any> => (class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>);
type `DublinCore` <class<`PlainTextDocument`, `TextDocument`>, null> => class<`TextDocumentMeta`>;
type `DublinCore<-` <class<`PlainTextDocument`, `TextDocument`>, character, character> => class<`PlainTextDocument`, `TextDocument`>;
type `eoi` <class<`SimpleSource`, `Source`, `XMLSource`>> => logical;
type `eoi.SimpleSource` <class<`SimpleSource`, `Source`, `XMLSource`>> => logical;
type `filter_global_bounds` <class<`simple_triplet_matrix`>, null> => class<`simple_triplet_matrix`>;
type `findAssocs` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>, character[], double[]> => list<double[]>;
type `findAssocs.DocumentTermMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>, character[], double[]> => list<double[]>;
type `findAssocs.matrix` <class<`matrix`>, character[], double[]> => list<double[]>;
type `findAssocs.TermDocumentMatrix` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>, character[], double[]> => list<double[]>;
type `findFreqTerms` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>, double, double> => character[];
type `findMostFreqTerms` <class<`integer`, `term_frequency`> | class<`DocumentTermMatrix`, `simple_triplet_matrix`>, integer, ...> => (integer[] | list<double[]>);
type `findMostFreqTerms.DocumentTermMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>, integer, null | integer[], ...> => list<double[]>;
type `findMostFreqTerms.term_frequency` <class<`integer`, `term_frequency`>, integer, ...> => integer[];
type `format.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, ...> => character[];
type `format.SimpleCorpus` <class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>, ...> => character[];
type `.format_TextDocument` <class<`PlainTextDocument`, `TextDocument`>, ...> => character[];
type `format.VCorpus` <class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>, ...> => character[];
type `getElem` <class<`SimpleSource`, `Source`, `VectorSource`> | class<`DataframeSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `XMLSource`>> => (list<character | null> | list<class<`data.frame`> | null> | list<class<`xml_node`> | character>);
type `getElem.DataframeSource` <class<`DataframeSource`, `SimpleSource`, `Source`>> => list<class<`data.frame`> | null>;
type `getElem.VectorSource` <class<`SimpleSource`, `Source`, `VectorSource`>> => list<character | null>;
type `getElem.XMLSource` <class<`SimpleSource`, `Source`, `XMLSource`>> => list<class<`xml_node`> | character>;
type `getTokenizers` < > => character[];
type `getTransformations` < > => character[];
type `Heaps_plot` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>, character, ...> => double[];
type `inspect` <class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`> | class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`> | class<`PlainTextDocument`, `TextDocument`>> => (class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`> | class<`matrix`> | class<`PlainTextDocument`, `TextDocument`>);
type `inspect.DocumentTermMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => class<`matrix`>;
type `inspect.SimpleCorpus` <class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>> => (class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>);
type `inspect.TermDocumentMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => class<`matrix`>;
type `inspect.TextDocument` <class<`PlainTextDocument`, `TextDocument`>> => class<`PlainTextDocument`, `TextDocument`>;
type `inspect.VCorpus` <class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>> => (class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>);
type `length.SimpleCorpus` <class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>> => integer;
type `length.SimpleSource` <class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`> | class<`SimpleSource`, `Source`, `ZipSource`>> => integer;
type `length.VCorpus` <class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>> => integer;
type `map_IETF_Snowball` <character> => (character | null);
type `.map_name_index` <any, double | character> => double;
type `materialize` <class<`Corpus`, `VCorpus`>, double> => class<`Corpus`, `VCorpus`>;
type `MC_tokenizer` <class<`PlainTextDocument`, `TextDocument`>> => character[];
type `meta<-.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`> | class<`TextDocument`, `XMLTextDocument`>, character, ..., character[] | class<`POSIXlt`, `POSIXt`> | null> => (class<`PlainTextDocument`, `TextDocument`> | class<`TextDocument`, `XMLTextDocument`>);
type `meta.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`> | class<`TextDocument`, `XMLTextDocument`>, character | null, ...> => (character[] | class<`POSIXlt`, `POSIXt`> | class<`TextDocumentMeta`> | null);
type `meta.SimpleCorpus` <class<`Corpus`, `SimpleCorpus`>, character | null, any, ...> => (character[] | class<`CorpusMeta`> | class<`data.frame`>);
type `meta<-.VCorpus` <class<`Corpus`, `VCorpus`>, character, character[], ..., character[] | integer[]> => class<`Corpus`, `VCorpus`>;
type `meta.VCorpus` <class<`Corpus`, `VCorpus`>, null | character, any, ...> => (class<`CorpusMeta`> | class<`data.frame`> | list<character>);
type `meta<-.XMLTextDocument` <class<`PlainTextDocument`, `TextDocument`> | class<`TextDocument`, `XMLTextDocument`>, character, ..., character[] | class<`POSIXlt`, `POSIXt`> | null> => (class<`PlainTextDocument`, `TextDocument`> | class<`TextDocument`, `XMLTextDocument`>);
type `meta.XMLTextDocument` <class<`PlainTextDocument`, `TextDocument`> | class<`TextDocument`, `XMLTextDocument`>, character | null, ...> => (character[] | class<`POSIXlt`, `POSIXt`> | class<`TextDocumentMeta`> | null);
type `nDocs` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => integer;
type `nDocs.TermDocumentMatrix` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => integer;
type `nTerms` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => integer;
type `nTerms.TermDocumentMatrix` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => integer;
type `open.SimpleSource` <class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`>, ...> => (class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`>);
type `open.ZipSource` <class<`SimpleSource`, `Source`, `ZipSource`>, ...> => class<`SimpleSource`, `Source`, `ZipSource`>;
type `PDF_Date_to_POSIXt` <character> => class<`POSIXlt`, `POSIXt`>;
type `pGetElem` <class<`SimpleSource`, `Source`, `URISource`> | class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `ZipSource`> | class<`SimpleSource`, `Source`, `VectorSource`>> => (list<list<character[]>> | list<list<character | null>> | list<list<null | character>> | list<list<raw[] | character>>);
type `pGetElem.DirSource` <class<`DirSource`, `SimpleSource`, `Source`>> => (list<list<character[]>> | list<list<raw[] | character>>);
type `pGetElem.URISource` <class<`SimpleSource`, `Source`, `URISource`>> => (list<list<character[]>> | list<list<null | character>>);
type `pGetElem.VectorSource` <class<`SimpleSource`, `Source`, `VectorSource`>> => list<list<character | null>>;
type `pGetElem.ZipSource` <class<`SimpleSource`, `Source`, `ZipSource`>> => list<list<character[]>>;
type `PlainTextDocument` <character[], character[] | null, class<`POSIXlt`, `POSIXt`> | class<`POSIXct`, `POSIXt`>, character[] | null, character[] | null, character[], character[], character[]> => class<`PlainTextDocument`, `TextDocument`>;
type `prepareReader` <list<character> | list<class<`function`> | character> | list<class<`function`>>, any, ...> => (list<character | class<`function`>> | list<class<`function`> | character>);
type `print.DocumentTermMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>, ...> => (class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>);
type `print.TermDocumentMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>, ...> => (class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>);
type `processURI` <character> => character;
type `read_all_bytes` <character, any> => raw[];
type `readContent` <any, any, character> => (character[] | null | raw[]);
type `readDataframe` <list<class<`data.frame`> | null>, character, null> => class<`PlainTextDocument`, `TextDocument`>;
type `reader` <list<null | character> | list<character>, character, any> => class<`PlainTextDocument`, `TextDocument`> | <class<`DataframeSource`, `SimpleSource`, `Source`> | class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`> | class<`SimpleSource`, `Source`, `ZipSource`>> => class<`function`>;
type `reader.SimpleSource` <class<`DataframeSource`, `SimpleSource`, `Source`> | class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`> | class<`SimpleSource`, `Source`, `ZipSource`>> => class<`function`>;
type `readPDF` <character, list<null>> => class<`function`>;
type `readPlain` <list<character | null>, character, character> => class<`PlainTextDocument`, `TextDocument`>;
type `readRCV1` <list<raw[]>, character, character> => class<`TextDocument`, `XMLTextDocument`>;
type `readTagged` <...> => class<`function`> | <list<character | null>, character, character> => class<`TaggedTextDocument`, `TextDocument`>;
type `readXML` <list<list<character | character | class<`function`>>>, class<`PlainTextDocument`, `TextDocument`>> => class<`function`>;
type `removeNumbers` <class<`PlainTextDocument`, `TextDocument`>, ...> => class<`PlainTextDocument`, `TextDocument`>;
type `removeNumbers.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, ...> => class<`PlainTextDocument`, `TextDocument`>;
type `removePunctuation` <class<`PlainTextDocument`, `TextDocument`>, ...> => class<`PlainTextDocument`, `TextDocument`>;
type `removePunctuation.character` <character[], logical, logical, logical, ...> => character[];
type `removePunctuation.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, ...> => class<`PlainTextDocument`, `TextDocument`>;
type `removeSparseTerms` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>, double> => (class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>);
type `removeWords` <class<`PlainTextDocument`, `TextDocument`>, character[]> => class<`PlainTextDocument`, `TextDocument`>;
type `removeWords.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, ...> => class<`PlainTextDocument`, `TextDocument`>;
type `sample.TermDocumentMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>, double> => (class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>);
type `scan_tokenizer` <character | class<`PlainTextDocument`, `TextDocument`>> => character[];
type `SimpleCorpus` <class<`DataframeSource`, `SimpleSource`, `Source`> | class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `VectorSource`>, list<class<`function`> | character> | list<character>> => class<`Corpus`, `SimpleCorpus`>;
type `[[.SimpleCorpus` <class<`Corpus`, `SimpleCorpus`>, double> => class<`PlainTextDocument`, `TextDocument`>;
type `SimpleSource` <character, double, double, class<`function`>, ..., character> => (class<`DataframeSource`, `SimpleSource`, `Source`> | class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`> | class<`SimpleSource`, `Source`, `ZipSource`>);
type `.SimpleTripletMatrix` <double[], double[], double[], character[], class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>> => class<`simple_triplet_matrix`>;
type `stemCompletion` <character[], class<`Corpus`, `VCorpus`>, character[]> => character[];
type `stemDocument` <class<`PlainTextDocument`, `TextDocument`>, character> => class<`PlainTextDocument`, `TextDocument`>;
type `stemDocument.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, character> => class<`PlainTextDocument`, `TextDocument`>;
type `stepNext` <class<`DataframeSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`>> => (class<`DataframeSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`>);
type `stepNext.SimpleSource` <class<`DataframeSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`>> => (class<`DataframeSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`>);
type `stopwords` <character> => character[];
type `stripWhitespace` <class<`PlainTextDocument`, `TextDocument`>> => class<`PlainTextDocument`, `TextDocument`>;
type `stripWhitespace.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, ...> => class<`PlainTextDocument`, `TextDocument`>;
type `.table` <character[]> => integer[];
type `tdm` <character[], logical, logical, character[], character[], integer, integer, integer> => list<double[] | character[]>;
type `t.DocumentTermMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => (class<`TermDocumentMatrix`, `simple_triplet_matrix`> | class<`DocumentTermMatrix`, `simple_triplet_matrix`>);
type `TermDocumentMatrix` <class<`Corpus`, `SimpleCorpus`> | class<`Corpus`, `VCorpus`>, any> => class<`TermDocumentMatrix`, `simple_triplet_matrix`>;
type `.TermDocumentMatrix` <class<`simple_triplet_matrix`>, character[] | class<`function`> | null> => class<`TermDocumentMatrix`, `simple_triplet_matrix`>;
type `[.TermDocumentMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>, any, any, ..., any> => (class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>);
type `TermDocumentMatrix.SimpleCorpus` <class<`Corpus`, `SimpleCorpus`>, list<logical>> => class<`TermDocumentMatrix`, `simple_triplet_matrix`>;
type `TermDocumentMatrix.VCorpus` <class<`Corpus`, `VCorpus`>, list<any>> => class<`TermDocumentMatrix`, `simple_triplet_matrix`>;
type `termFreq` <class<`PlainTextDocument`, `TextDocument`>, list<any>> => class<`integer`, `term_frequency`>;
type `Terms` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => character[];
type `Terms.DocumentTermMatrix` <class<`TermDocumentMatrix`, `simple_triplet_matrix`> | class<`DocumentTermMatrix`, `simple_triplet_matrix`>> => character[];
type `Terms.TermDocumentMatrix` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => character[];
type `TextDocumentMeta` <character[] | null, class<`POSIXlt`, `POSIXt`> | class<`POSIXct`, `POSIXt`>, character[] | null, character[] | null, character[], character[], character[], ...> => class<`TextDocumentMeta`>;
type `tm_filter` <class<`Corpus`, `VCorpus`>, class<`function`>, ...> => class<`Corpus`, `VCorpus`>;
type `tm_filter.VCorpus` <class<`Corpus`, `VCorpus`>, class<`function`>, ...> => class<`Corpus`, `VCorpus`>;
type `tm_index` <class<`Corpus`, `VCorpus`>, class<`function`>, ...> => logical[];
type `tm_index.VCorpus` <class<`Corpus`, `VCorpus`>, class<`function`>, ...> => logical[];
type `tm_map` <class<`Corpus`, `VCorpus`>, any, ...> => class<`Corpus`, `VCorpus`>;
type `tm_map.VCorpus` <class<`Corpus`, `VCorpus`>, any, ..., logical> => class<`Corpus`, `VCorpus`>;
type `tm_parLapply` <list<class<`PlainTextDocument`, `TextDocument`>>, class<`function`> | class<`content_transformer`, `function`>, ...> => (list<class<`integer`, `term_frequency`>> | list<class<`PlainTextDocument`, `TextDocument`>> | list<logical>);
type `tm_parLapply_engine` <any> => null;
type `tm_reduce` <class<`PlainTextDocument`, `TextDocument`>, list<class<`function`>>, ...> => class<`PlainTextDocument`, `TextDocument`>;
type `tm_term_score` <class<`integer`, `term_frequency`> | class<`PlainTextDocument`, `TextDocument`>, character[], any> => integer;
type `tm_term_score.PlainTextDocument` <class<`PlainTextDocument`, `TextDocument`>, character[], class<`function`>> => integer;
type `tm_term_score.term_frequency` <class<`integer`, `term_frequency`>, character[], class<`function`>> => integer;
type `t.TermDocumentMatrix` <class<`DocumentTermMatrix`, `simple_triplet_matrix`> | class<`TermDocumentMatrix`, `simple_triplet_matrix`>> => (class<`TermDocumentMatrix`, `simple_triplet_matrix`> | class<`DocumentTermMatrix`, `simple_triplet_matrix`>);
type `URISource` <character[], character, character> => class<`SimpleSource`, `Source`, `URISource`>;
type `VCorpus` <class<`DirSource`, `SimpleSource`, `Source`> | class<`SimpleSource`, `Source`, `URISource`> | class<`SimpleSource`, `Source`, `VectorSource`> | class<`SimpleSource`, `Source`, `XMLSource`> | class<`SimpleSource`, `Source`, `ZipSource`>, list<character> | list<class<`function`>> | list<class<`function`> | character>> => class<`Corpus`, `VCorpus`>;
type `[.VCorpus` <class<`Corpus`, `VCorpus`>, integer[]> => class<`Corpus`, `VCorpus`>;
type `[[<-.VCorpus` <class<`Corpus`, `VCorpus`>, double, class<`PlainTextDocument`, `TextDocument`>> => class<`Corpus`, `VCorpus`>;
type `[[.VCorpus` <class<`Corpus`, `VCorpus`>, character | double> => class<`PlainTextDocument`, `TextDocument`>;
type `VectorSource` <character[]> => class<`SimpleSource`, `Source`, `VectorSource`>;
type `WeightFunction` <class<`function`>, character, character> => class<`WeightFunction`, `function`>;
type `weightSMART` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>, character, list<any>> => class<`TermDocumentMatrix`, `simple_triplet_matrix`>;
type `weightTfIdf` <class<`TermDocumentMatrix`, `simple_triplet_matrix`>, logical> => class<`TermDocumentMatrix`, `simple_triplet_matrix`>;
type `words.character` <character | class<`PlainTextDocument`, `TextDocument`>, ...> => character[];
type `words.PlainTextDocument` <character | class<`PlainTextDocument`, `TextDocument`>, ...> => character[];
type `.xml_content` <any, list<character> | list<character | class<`function`>>> => (character[] | class<`POSIXlt`, `POSIXt`>);
type `XMLSource` <character, class<`function`>, class<`function`>> => class<`SimpleSource`, `Source`, `XMLSource`>;
type `XMLTextDocument` <class<`xml_document`, `xml_node`>, character[], class<`POSIXlt`, `POSIXt`>, character[], character, character, character, character[]> => class<`TextDocument`, `XMLTextDocument`>;
type `Zipf_plot` <class<`DocumentTermMatrix`, `simple_triplet_matrix`>, character, ...> => double[];
type `ZipSource` <character, null, logical, logical, character> => class<`SimpleSource`, `Source`, `ZipSource`>;
