type `bjtestII` <double[], double[], class<`matrix`>, double[]> => list<double[] | class<`matrix`>>;
type `cumsumsurv` <double[]> => double[];
type `DnR` <double[], double[], double[], double[]> => list<double[]>;
type `el.cen.EM` <double[], double[], double[], class<`function`>, double, double, double, ...> => list<double[]>;
type `el.cen.EM2` <double[], double[], integer[], class<`function`>, double[], double, double, ...> => list<double[]>;
type `el.cen.test` <double[], double[], class<`function`>, double, double, double> => list<double[]>;
type `el.ltrc.EM` <double[], double[], double[], class<`function`>, double, double, double> => list<double[]>;
type `el.test` <class<`matrix`> | double[], double[], any, double, double, double, logical> => (list<double[] | class<`matrix`>> | list<class<`matrix`> | double[]>);
type `el.test.wt` <double[], double[], double, logical> => list<double[]>;
type `el.test.wt2` <class<`matrix`> | double[], double[], double[], double, double, logical, double, logical> => list<double[] | null>;
type `eltestwtinC` <double[], double[], double> => list<double[]>;
type `el.trun.test` <double[], double[], class<`function`>, double, double, double> => list<double[]>;
type `emplikH1.test` <double[], double[], double, double, class<`function`>, double> => list<double[] | null>;
type `emplikH2.test` <double[], double[], double, double, class<`function`>, double, ...> => (list<double[] | class<`matrix`> | null> | list<double[] | null>);
type `emplikH.disc` <double[], double[], double[], double, class<`function`>, double, double> => list<double[]>;
type `emplikH.disc2` <double[], double[], double[], double[], double[], double[], double, class<`function`>> => list<double[]>;
type `emplikHs.disc2` <double[], double[], double[], double[], double[], double[], double[], class<`function`>> => list<double[]>;
type `emplikHs.test2` <double[], double[], double[], double[], double[], double[], double[], class<`function`>> => list<double[]>;
type `emplikHs.test22` <double[], double[], double, integer[], double[], double, double, class<`function`>> => list<double>;
type `findUL` <double, double, class<`function`>, double, double, ...> => list<double>;
type `findUL2` <double, double, class<`function`>, double, double, double, ...> => list<double>;
type `findULold` <double, double, class<`function`>, double, double, ...> => list<double>;
type `gradf` <class<`matrix`>, double[], double[]> => double[];
type `gradf2` <double[], class<`matrix`>, double[], double[], class<`matrix`>, double[], double[], double[]> => double[];
type `gradf3` <double[], class<`matrix`>, double[], double[], class<`matrix`>, double[], double[], double[]> => double[];
type `llog` <class<`matrix`> | double[], double> => (class<`matrix`> | double[]);
type `llogp` <class<`matrix`> | double[], double> => (class<`matrix`> | double[]);
type `llogpp` <class<`matrix`> | double[], double> => (class<`matrix`> | double[]);
type `logelr` <class<`matrix`>, double[], double[]> => double;
type `LTRC` <double[], double[], double[], double[]> => list<double[]>;
type `RankRegTest` <double[], double[], double[], double, character> => list<double[]>;
type `RankRegTestH` <double[], double[], double[], double, character> => list<double>;
type `redistF` <double[], double[], double[]> => list<double[] | class<`matrix`>>;
type `ROCnp` <double[], double[], double[], double[], double, double> => list<double>;
type `solve3.QP` <class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`>, double[], double, logical> => list<class<`matrix`>>;
type `Wdataclean2` <double[], double[], double[]> => list<double[]>;
type `Wdataclean3` <double[], double[], double[], double[]> => list<double[]>;
type `Wdataclean5` <double[], double[], integer[], double[], class<`matrix`>> => list<double[] | class<`matrix`>>;
type `WKM` <double[], double[], double[], double[]> => list<double[]>;
type `WRegEst` <class<`matrix`>, double[], integer[], logical, double> => double[];
