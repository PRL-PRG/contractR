type `.check_control_parameters` <tuple<> | struct<`verbose`:logical, `canonicalize_status`:logical>> => struct<`verbose`:integer, `presolve`:integer, `tm_limit`:integer, `canonicalize_status`:logical>;
type `as.glp_bounds.list` <tuple<> | struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, integer> => struct<`type`:integer[], `lower`:double[], `upper`:double[]>;
type `filter` <character[]> => logical[];
type `fun` <symbol, character> => null | tuple<>;
type `glp_bounds` <tuple<> | struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, integer> => struct<`type`:integer[], `lower`:double[], `upper`:double[]>;
type `glp_bounds_check_sanity` <struct<`ind`:integer[], `val`:double[]>, integer> => null;
type `glp_call_interface` <double[], integer, integer[], integer[], double[], integer, double[], integer[], integer, logical, logical[], logical[], integer, integer[], double[], double[], integer, integer, integer> => struct<`lp_direction_of_optimization`:integer, `lp_n_of_constraints`:integer, `lp_direction_of_constraints`:integer[], `lp_right_hand_side`:double[], `lp_n_of_objective_vars`:integer, `lp_objective_coefficients`:double[], `lp_objective_var_is_integer`:integer[], `lp_objective_var_is_binary`:integer[], `lp_is_integer`:integer, `lp_n_of_values_in_constraint_matrix`:integer, `lp_constraint_matrix_i`:integer[], `lp_constraint_matrix_j`:integer[], `lp_constraint_matrix_values`:double[], `lp_bounds_type`:integer[], `lp_bounds_lower`:double[], `lp_bounds_upper`:double[], `lp_optimum`:double, `lp_objective_stat`:integer[], `lp_objective_vars_values`:double[], `lp_objective_dual_values`:double[], `lp_row_stat`:integer[], `lp_row_prim_aux`:double[], `lp_row_dual_aux`:double[], `lp_verbosity`:integer, `lp_presolve`:integer, `lp_time_limit`:integer, `lp_status`:integer, `write_fmt`:integer, `fname`:character, `write_sensitivity_report`:integer, `fname_sensitivity_report`:character>;
type `glp_fix_bound_type` <struct<`type`:integer[], `lower`:double[], `upper`:double[]>> => struct<`type`:integer[], `lower`:double[], `upper`:double[]>;
type `glp_get_meta_data_from_file` <struct<`file`:character, `type`:integer>, logical> => struct<`file`:character, `type`:integer, `direction_of_optimization`:integer, `n_constraints`:integer, `n_objective_vars`:integer, `n_values_in_constraint_matrix`:integer, `n_integer_vars`:integer, `n_binary_vars`:integer, `problem_name`:character, `objective_name`:character, `verbosity`:integer>;
type `glp_merge_MP_data` <struct<`file`:character, `type`:integer, `direction_of_optimization`:integer, `n_constraints`:integer, `n_objective_vars`:integer, `n_values_in_constraint_matrix`:integer, `n_integer_vars`:integer, `n_binary_vars`:integer, `problem_name`:character, `objective_name`:character, `verbosity`:integer>, struct<`file`:character, `type`:integer, `n_constraints`:integer, `n_objective_vars`:integer, `objective_coefficients`:double[], `constraint_matrix_i`:integer[], `constraint_matrix_j`:integer[], `constraint_matrix_values`:double[], `direction_of_constraints`:integer[], `right_hand_side`:double[], `left_hand_side`:double[], `objective_var_is_integer`:integer[], `objective_var_is_binary`:integer[], `bounds_type`:integer[], `bounds_lower`:double[], `bounds_upper`:double[], `lp_ignore_first_row`:integer, `verbosity`:integer, `constraint_names`:character[], `objective_vars_names`:character[]>> => struct<`objective_coefficients`:double[], `constraint_matrix`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, `direction_of_constraints`:integer[], `right_hand_side`:double[], `left_hand_side`:double[], `objective_var_is_integer`:logical[], `objective_var_is_binary`:logical[], `maximize`:logical, `bounds`:struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, `n_objective_vars`:integer, `n_integer_vars`:integer, `n_binary_vars`:integer, `n_constraints`:integer, `n_values_in_constraint_matrix`:integer, `file`:character, `type`:integer, `problem_name`:character, `objective_name`:character, `constraint_names`:character[], `objective_vars_names`:character[]>;
type `glp_retrieve_MP_from_file` <struct<`file`:character, `type`:integer, `direction_of_optimization`:integer, `n_constraints`:integer, `n_objective_vars`:integer, `n_values_in_constraint_matrix`:integer, `n_integer_vars`:integer, `n_binary_vars`:integer, `problem_name`:character, `objective_name`:character, `verbosity`:integer>, logical, logical> => struct<`file`:character, `type`:integer, `n_constraints`:integer, `n_objective_vars`:integer, `objective_coefficients`:double[], `constraint_matrix_i`:integer[], `constraint_matrix_j`:integer[], `constraint_matrix_values`:double[], `direction_of_constraints`:integer[], `right_hand_side`:double[], `left_hand_side`:double[], `objective_var_is_integer`:integer[], `objective_var_is_binary`:integer[], `bounds_type`:integer[], `bounds_lower`:double[], `bounds_upper`:double[], `lp_ignore_first_row`:integer, `verbosity`:integer, `constraint_names`:character[], `objective_vars_names`:character[]>;
type `MILP` <double[], tuple<struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>>, character[], double[]> | tuple<struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, character[], double[]>, struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, character[], logical> => struct<`objective`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, `constraints`:tuple<struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>>, character[], double[]>, `bounds`:struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, `types`:character[], `maximum`:logical> | struct<`objective`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, `constraints`:tuple<struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, character[], double[]>, `bounds`:struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, `types`:character[], `maximum`:logical>;
type `Rglpk_call` <double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, ^double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, character[], double[], null | struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, null | character[], logical, logical, integer, integer, integer, character, integer, logical> => struct<`optimum`:double, `solution`:double[], `status`:integer, `solution_dual`:double[], `auxiliary`:struct<`primal`:double[], `dual`:double[]>, `sensitivity_report`:null> | struct<`optimum`:double, `solution`:double[], `status`:integer, `solution_dual`:null, `auxiliary`:struct<`primal`:double[], `dual`:null>, `sensitivity_report`:null>;
type `Rglpk_read_file` <character, character, logical, logical> => struct<`objective`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, `constraints`:tuple<struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>>, character[], double[]>, `bounds`:struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, `types`:character[], `maximum`:logical> | struct<`objective`:struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, `constraints`:tuple<struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, character[], double[]>, `bounds`:struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, `types`:character[], `maximum`:logical>;
type `Rglpk_solve_LP` <double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, ^double[] | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:tuple<null, null>> | struct<`i`:integer[], `j`:integer[], `v`:double[], `nrow`:integer, `ncol`:integer, `dimnames`:null>, character[], double[], null | struct<`lower`:struct<`ind`:integer[], `val`:double[]>, `upper`:struct<`ind`:integer[], `val`:double[]>>, null | character[], logical, tuple<> | struct<`verbose`:logical, `canonicalize_status`:logical>, null> => struct<`optimum`:double, `solution`:double[], `status`:integer, `solution_dual`:double[], `auxiliary`:struct<`primal`:double[], `dual`:double[]>, `sensitivity_report`:null> | struct<`optimum`:double, `solution`:double[], `status`:integer, `solution_dual`:null, `auxiliary`:struct<`primal`:double[], `dual`:null>, `sensitivity_report`:null>;
