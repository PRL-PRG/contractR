type `:::` <class<`matrix`> | class<`crossdist`>, class<`stepPattern`>, class<`function`>, logical, null | class<`matrix`>, ...> => list<class<`matrix`> | class<`stepPattern`>>;
type `backtrack` <list<any>> => list<double[]>;
type `.canonicalizeWindowFunction` <character | class<`function`>> => class<`function`>;
type `countPaths` <class<`dtw`>, logical> => double;
type `dtw` <class<`crossdist`> | class<`matrix`> | class<`ts`> | double[], null | class<`matrix`> | class<`ts`> | double[], character, class<`stepPattern`>, character | class<`function`>, logical, logical, logical, logical, ...> => class<`dtw`>;
type `dtwPlot` <class<`dtw`>, character, ...> => (null | list<character | double[] | null>);
type `dtwPlotAlignment` <class<`dtw`>, character, character, character, ...> => null;
type `dtwPlotDensity` <class<`dtw`>, logical, character, character, ...> => null;
type `dtwPlotThreeWay` <class<`dtw`>, null, null, character, character, integer[] | null, double, double, double, character, character, character> => list<character | double[] | null>;
type `dtwPlotTwoWay` <class<`dtw`>, null, null, double, character, double, double | integer[] | null, character, double, character, character, ...> => list<character | double[] | null>;
type `dtwWindow.plot` <class<`function`>, double, double, ...> => null;
type `.extractpattern` <class<`matrix`> | class<`stepPattern`>, integer> => class<`matrix`>;
type `filter` <character[]> => logical[];
type `fun` <class<`matrix`>, class<`matrix`>, double, double, double, ...> => class<`matrix`> | <class<`matrix`>, class<`matrix`>, double, ...> => class<`matrix`> | <any, any> => character | <class<`matrix`>, class<`matrix`>, double, double, ...> => class<`matrix`>;
type `globalCostMatrix` <class<`matrix`> | class<`crossdist`>, class<`stepPattern`>, class<`function`>, logical, null | class<`matrix`>, ...> => list<class<`matrix`> | class<`stepPattern`>>;
type `is.dtw` <class<`dtw`>> => logical;
type `is.stepPattern` <class<`stepPattern`>> => logical;
type `.mkDirDeltas` <class<`stepPattern`>> => class<`matrix`>;
type `mvmStepPattern` <double> => class<`stepPattern`>;
type `.Pend` <list<double[] | character>, any, any> => list<double[] | character>;
type `plot.dtw` <class<`dtw`>, character, ...> => (null | list<character | double[] | null>);
type `plot.stepPattern` <class<`stepPattern`>, ...> => null;
type `.Pnew` <double, character, logical> => list<double | character>;
type `print.stepPattern` <class<`stepPattern`>, ...> => null;
type `.Pstep` <list<double[] | character | double | character>, double, double> => list<double[] | character>;
type `.PtoMx` <list<double[] | character>> => class<`matrix`>;
type `rabinerJuangStepPattern` <double, character, logical> => class<`stepPattern`>;
type `.RJtypeIV` <character, logical> => class<`matrix`>;
type `stepPattern` <double[] | class<`matrix`>, null> => class<`stepPattern`>;
type `warp` <class<`dtw`>, logical> => double[];
type `warpArea` <class<`dtw`>> => double;
type `window.function` <class<`matrix`>, class<`matrix`>, double, ...> => class<`matrix`> | <class<`matrix`>, class<`matrix`>, double, double, ...> => class<`matrix`> | <any, any, ...> => logical;
