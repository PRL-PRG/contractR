type `.add_effects_component_column` <struct<`Parameter`:character[], `BF`:double[]>> => struct<`Parameter`:character[], `BF`:double[], `Effects`:^logical[], `Component`:^logical[]>;
type `.check_ci_argument` <double[], double, symbol> => null;
type `.check_test_values` <character[]> => character[];
type `.compact_list` <struct<`Difference`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>> | struct<`X1`:struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>, `X2`:struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>, `X3`:struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>, `X4`:struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>> | struct<`X1`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `ROPE_Equivalence`:character, `HDI_low`:double, `HDI_high`:double>, `X2`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `ROPE_Equivalence`:character, `HDI_low`:double, `HDI_high`:double>, `X3`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `ROPE_Equivalence`:character, `HDI_low`:double, `HDI_high`:double>, `X4`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `ROPE_Equivalence`:character, `HDI_low`:double, `HDI_high`:double>> | struct<`(Intercept)`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Speciesversicolor`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Speciesvirginica`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Petal.Width`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Speciesversicolor:Petal.Width`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Speciesvirginica:Petal.Width`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>> | struct<`(Intercept)`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `wt`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `cyl`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>>> => struct<`Difference`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>> | struct<`X1`:struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>, `X2`:struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>, `X3`:struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>, `X4`:struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>> | struct<`X1`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `ROPE_Equivalence`:character, `HDI_low`:double, `HDI_high`:double>, `X2`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `ROPE_Equivalence`:character, `HDI_low`:double, `HDI_high`:double>, `X3`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `ROPE_Equivalence`:character, `HDI_low`:double, `HDI_high`:double>, `X4`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `ROPE_Equivalence`:character, `HDI_low`:double, `HDI_high`:double>> | struct<`(Intercept)`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Speciesversicolor`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Speciesvirginica`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Petal.Width`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Speciesversicolor:Petal.Width`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `Speciesvirginica:Petal.Width`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>> | struct<`(Intercept)`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `wt`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `cyl`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>>;
type `.compute_interval_dataframe` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, double[], symbol, character> => struct<`Parameter`:character[], `CI`:double[], `CI_low`:double[], `CI_high`:double[]>;
type `.describe_posterior` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]> | double[], character, logical, double[], character, ? character[], character | symbol, double | symbol, ? symbol, ???> => struct<`Parameter`:character[], `Median`:double[], `CI`:double[], `CI_low`:double[], `CI_high`:double[], `pd`:double[], `ROPE_CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[]>;
type `.eti` <double[], double, symbol> => struct<`CI`:double, `CI_low`:double, `CI_high`:double>;
type `.get_direction` <character> => double;
type `.get_model_table` <struct<`Model`:character[], `BF`:double[]>, null, ???> => struct<`Modelnames`:character[], `priorProbs`:double[], `postProbs`:double[], `group`:logical[], `ID`:logical[]>;
type `.hdi` <double[], double, symbol> => struct<`CI`:double, `CI_low`:double, `CI_high`:double>;
type `.make_BF_plot_data` <struct<`X`:double[]>, struct<`X`:double[]>, double, double> => struct<`plot_data`:struct<`x`:double[], `y`:double[], `ind`:integer[], `Distribution`:character[]>, `d_points`:struct<`x`:double[], `y`:double[], `ind`:integer[], `Distribution`:character[]>>;
type `.merge_and_sort` <struct<`Parameter`:character, `Median`:double, `CI`:double, `CI_low`:double, `CI_high`:double, `pd`:double, `ROPE_CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `BF`:double>, struct<`Parameter`:character, `Prior_Distribution`:character, `Prior_Location`:double, `Prior_Scale`:double>, character, logical> => struct<`Parameter`:character, `Median`:double, `CI`:double, `CI_low`:double, `CI_high`:double, `pd`:double, `ROPE_CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `BF`:double, `Prior_Distribution`:character, `Prior_Location`:double, `Prior_Scale`:double>;
type `.prepare_rope_df` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character, double, character, symbol> => struct<`tmp`:struct<`CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[]>, `HDI_area`:struct<`X1`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `X2`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `X3`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>, `X4`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>>> | struct<`tmp`:struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double>, `HDI_area`:struct<`Difference`:struct<`CI`:double, `CI_low`:double, `CI_high`:double>>>;
type `.remove_column` <struct<`Parameter`:character[], `Effects`:^logical[], `Component`:^logical[], `Median`:double[], `.rowid`:integer[], `CI`:double[], `CI_low`:double[], `CI_high`:double[], `pd`:double[], `ROPE_CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[]>, character[]> => struct<`Parameter`:character[], `Median`:double[], `CI`:double[], `CI_low`:double[], `CI_high`:double[], `pd`:double[], `ROPE_CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[]>;
type `.rope` <double[], double[], double, character, symbol | logical> => struct<`CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double>;
type `.safe_deparse` <language | symbol> => character;
type `.select_nums` <struct<`Difference`:double[]>> => struct<`Difference`:double[]>;
type `.select_threshold_ps` <symbol, null, character | double> => double;
type `area_under_curve` <double[], double[], character, ???> => double;
type `as.data.frame.density` <struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, ???> => struct<`x`:double[], `y`:double[]>;
type `as.double.map_estimate` <double, ???> => double;
type `bayesfactor` <double[] | struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`extra`:double[]>> | struct<>, ? double[], character, double, null, language, logical, double, logical, null> => struct<`BF`:double>;
type `bayesfactor_models.BFBayesFactor` <logical> => struct<`Model`:character[], `BF`:double[]>;
type `bayesfactor_models.default` <struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `contrasts`:struct<`Species`:character>, `xlevels`:struct<`Species`:character[]>, `call`:language, `terms`:language, `model`:struct<`Sepal.Length`:double[], `Species`:integer[]>> | struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`extra`:double[]>> | struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`Sepal.Length`:double[]>>, struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`Sepal.Length`:double[]>> | double, logical> => struct<`Model`:character[], `BF`:double[]>;
type `bayesfactor_parameters.data.frame` <struct<`X`:double[]>, ? struct<`X`:double[]>, character, double, logical, ??? | symbol> => struct<`Parameter`:character, `BF`:double>;
type `bayesfactor_parameters.numeric` <double[], ? double[], character, double, logical | symbol, ??? | symbol> => struct<`BF`:double>;
type `bayesfactor_restricted.data.frame` <struct<`X`:double[], `X1`:double[], `X3`:double[]>, character[], struct<`X`:double[], `X1`:double[], `X3`:double[]>, ???> => struct<`Hypothesis`:integer[], `Prior_prob`:double[], `Posterior_prob`:double[], `BF`:double[]>;
type `ci.BFBayesFactor` <double, character, logical, ???> => struct<`Parameter`:character, `CI`:double, `CI_low`:double, `CI_high`:double>;
type `ci.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, double[], character, logical, ???> => struct<`Parameter`:character[], `CI`:double[], `CI_low`:double[], `CI_high`:double[]>;
type `ci.numeric` <double[], double[], character, logical | symbol, ???> => struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>;
type `density_at` <double[], double[], double, character, ???> => ? double[];
type `describe_posterior.BFBayesFactor` <character, logical, double, character, character[], character, double, logical, ???> => struct<`Parameter`:character, `Median`:double, `CI`:double, `CI_low`:double, `CI_high`:double, `pd`:double, `ROPE_CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double, `BF`:double, `Prior_Distribution`:character, `Prior_Location`:double, `Prior_Scale`:double>;
type `describe_posterior.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character, logical, double[], character, ? character[], character, double, null, ???> => struct<`Parameter`:character[], `Median`:double[], `CI`:double[], `CI_low`:double[], `CI_high`:double[], `pd`:double[], `ROPE_CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[]>;
type `describe_posterior.double` <double[], character, logical, double[], character, ? character[], character, double, null, ???> => struct<`Parameter`:integer[], `Median`:double[], `CI`:double[], `CI_low`:double[], `CI_high`:double[], `pd`:double[], `ROPE_CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[]>;
type `describe_prior.BFBayesFactor` <???> => struct<`Parameter`:character, `Prior_Distribution`:character, `Prior_Location`:double, `Prior_Scale`:double>;
type `distribution` <character, double> => double[];
type `distribution_beta` <double, double, double, double, logical, ???> => double[];
type `distribution_binomial` <double, double, double[], double, ???> => integer[];
type `distribution_normal` <double, double, double, logical, ???> => double[];
type `equivalence_test.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character, double, symbol, ???> => struct<`Parameter`:character[], `CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[], `ROPE_Equivalence`:character[], `HDI_low`:double[], `HDI_high`:double[]>;
type `equivalence_test.numeric` <double[], character | double[], double[], logical | symbol, ???> => struct<`CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[], `ROPE_Equivalence`:character[], `HDI_low`:double[], `HDI_high`:double[]>;
type `estimate_density.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character, double, logical, double, character, ???> => struct<`Parameter`:character[], `x`:double[], `y`:double[]>;
type `estimate_density.numeric` <double[], character, double, logical, double | symbol, character, ???> => struct<`x`:double[], `y`:double[]>;
type `estimate_samples_density` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>> => tuple<struct<`x`:double[], `y`:double[], `ind`:integer[], `Distribution`:character[]>, struct<`x`:double[], `y`:double[], `ind`:integer[], `Distribution`:character[]>>;
type `eti.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, double[], logical | symbol, ??? | symbol> => struct<`Parameter`:character[], `CI`:double[], `CI_low`:double[], `CI_high`:double[]>;
type `eti.numeric` <double[], double[], logical | symbol, ??? | symbol> => struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>;
type `filter` <character[]> => logical[];
type `FUN` <character | double[] | tuple<struct<`x`:double[], `y`:double[], `ind`:integer[]>, struct<`x`:double, `y`:double, `ind`:integer>> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `contrasts`:struct<`group`:character>, `xlevels`:struct<`group`:character[]>, `call`:language, `terms`:language, `model`:struct<`extra`:double[], `group`:integer[]>> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `contrasts`:struct<`Species`:character>, `xlevels`:struct<`Species`:character[]>, `call`:language, `terms`:language, `model`:struct<`Sepal.Length`:double[], `Species`:integer[]>> | struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`extra`:double[]>> | struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`Sepal.Length`:double[]>> | symbol | struct<> | language, struct<>> => struct<`CI`:double, `CI_low`:double, `CI_high`:double> | double | character | tuple<struct<`x`:double[], `y`:double[], `ind`:integer[]>, struct<`x`:double, `y`:double, `ind`:integer>>;
type `hdi.BFBayesFactor` <double, symbol, symbol> => struct<`Parameter`:character, `CI`:double, `CI_low`:double, `CI_high`:double>;
type `hdi.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, double[], logical | symbol, ??? | symbol> => struct<`Parameter`:character[], `CI`:double[], `CI_low`:double[], `CI_high`:double[]>;
type `hdi.numeric` <double[], double[], logical | symbol, ??? | symbol> => struct<`CI`:double[], `CI_low`:double[], `CI_high`:double[]>;
type `map_estimate.numeric` <double[], double, character, ???> => double;
type `overlap` <double[], double[], character, character, double, logical, double, ???> => double;
type `p_direction.BFBayesFactor` <character, ???> => struct<`Parameter`:character, `pd`:double>;
type `p_direction.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character, ???> => struct<`Parameter`:character[], `pd`:double[]>;
type `p_direction.numeric` <double[], character, ???> => double;
type `p_map.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, double, character, ???> => struct<`Parameter`:character[], `p_MAP`:double[]>;
type `p_map.numeric` <double[], double, character, ???> => double;
type `p_rope.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character, double, ???> => struct<`Parameter`:character[], `p_ROPE`:double[]>;
type `p_rope.numeric` <double[], character | double[], double, ???> => double;
type `p_significance.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character, ???> => struct<`Parameter`:character[], `ps`:double[]>;
type `p_significance.numeric` <double[], character | double, ???> => double;
type `pd_to_p` <double, character, ???> => double;
type `plot.bayesfactor_models` <struct<`Model`:character[], `BF`:double[]>, ???> => struct<`data`:struct<`Model`:integer[], `BF`:double[], `PostProb`:double[], `pos_txt`:double[], `label`:character[]>, `layers`:tuple<environment, environment>, `scales`:environment, `mapping`:struct<`x`:character, `y`:language, `fill`:language>, `theme`:struct<`line`:tuple<>, `rect`:tuple<>, `text`:struct<`family`:character, `face`:character, `colour`:character, `size`:double, `hjust`:double, `vjust`:double, `angle`:double, `lineheight`:double, `margin`:double[], `debug`:logical, `inherit.blank`:logical>, `axis.title`:tuple<>, `axis.text`:tuple<>, `axis.ticks.length`:double, `axis.ticks.length.x`:null, `axis.ticks.length.x.top`:null, `axis.ticks.length.x.bottom`:null, `axis.ticks.length.y`:null, `axis.ticks.length.y.left`:null, `axis.ticks.length.y.right`:null, `legend.key.size`:double, `legend.text`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:null, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `legend.title`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:double, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `legend.position`:character, `legend.box`:null, `panel.spacing`:double, `panel.ontop`:logical, `plot.title`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:double, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `plot.subtitle`:struct<`family`:null, `face`:null, `colour`:null, `size`:null, `hjust`:double, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `plot.caption`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:double, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:double[], `debug`:null, `inherit.blank`:logical>, `plot.tag`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:double, `vjust`:double, `angle`:null, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `plot.tag.position`:character, `plot.margin`:double[], `strip.text`:struct<`family`:null, `face`:null, `colour`:null, `size`:double, `hjust`:null, `vjust`:null, `angle`:null, `lineheight`:null, `margin`:null, `debug`:null, `inherit.blank`:logical>, `strip.switch.pad.grid`:double, `strip.switch.pad.wrap`:double>, `coordinates`:environment, `facet`:environment, `plot_env`:environment, `labels`:struct<`caption`:character, `x`:character, `y`:character, `fill`:character, `label`:character>>;
type `plot.overlap` <double, ???> => null;
type `point_estimate.BFBayesFactor` <character, logical, ???> => struct<`Parameter`:character, `Median`:double>;
type `point_estimate.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character[], logical, ???> => struct<`Parameter`:character[], `Median`:double[]>;
type `point_estimate.numeric` <double[], character[], logical, ???> => struct<`Median`:double>;
type `print.equivalence_test` <struct<`CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[], `ROPE_Equivalence`:character[], `HDI_low`:double[], `HDI_high`:double[]>, double, ???> => null;
type `relative_density` <double[]> => double;
type `reshape_ci` <struct<`Parameter`:character[], `CI`:double[], `CI_low`:double[], `CI_high`:double[]>> => struct<`Parameter`:character[], `CI_low_68`:double[], `CI_high_68`:double[], `CI_low_89`:double[], `CI_high_89`:double[], `CI_low_95`:double[], `CI_high_95`:double[]>;
type `rope.BFBayesFactor` <character, double, logical, ???> => struct<`Parameter`:character, `CI`:double, `ROPE_low`:double, `ROPE_high`:double, `ROPE_Percentage`:double>;
type `rope.data.frame` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>, character, double, character, logical | symbol, ???> => struct<`Parameter`:character[], `CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:double[]>;
type `rope.numeric` <double[], double[] | character, double[], character, logical | symbol, ???> => struct<`CI`:double[], `ROPE_low`:double[], `ROPE_high`:double[], `ROPE_Percentage`:^double[]>;
type `simulate_correlation` <double, ^double[], double[], double[], ? character[], ???> => struct<`V1`:double[], `V2`:double[]>;
type `simulate_ttest` <double, double, null, ???> => struct<`V0`:integer[], `V1`:double[]>;
type `.rope_range` <symbol, struct<`is_binomial`:logical, `is_count`:logical, `is_poisson`:logical, `is_negbin`:logical, `is_beta`:logical, `is_betabinomial`:logical, `is_exponential`:logical, `is_logit`:logical, `is_probit`:logical, `is_censored`:logical, `is_truncated`:logical, `is_survival`:logical, `is_linear`:logical, `is_tweedie`:logical, `is_zeroinf`:logical, `is_zero_inflated`:logical, `is_hurdle`:logical, `is_ordinal`:logical, `is_categorical`:logical, `is_mixed`:logical, `is_multivariate`:logical, `is_trial`:logical, `is_bayesian`:logical, `is_anova`:logical, `is_ttest`:logical, `is_correlation`:logical, `is_meta`:logical, `link_function`:character, `family`:character, `n_obs`:integer, `model_terms`:struct<`response`:character, `conditional`:character[]>>, double[]> => double[];
type `rope_range.lm` <struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`mpg`:double[], `gear`:double[], `wt`:double[], `cyl`:double[], `hp`:double[]>>, ???> => double[];
