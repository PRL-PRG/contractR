type `additive.capacity` <double[]> => class<`Mobius.capacity`>;
type `as.capacity` <class<`set.func`>, ...> => class<`capacity`> | <class<`game`>, ...> => class<`capacity`> | <class<`card.capacity`>, ...> => class<`capacity`> | <class<`card.capacity`> | class<`game`> | class<`set.func`>, ...> => class<`capacity`>;
type `as.card.capacity` <class<`capacity`>, ...> => class<`card.capacity`> | <class<`card.set.func`>, ...> => class<`card.capacity`> | <class<`capacity`> | class<`card.set.func`>, ...> => class<`card.capacity`>;
type `as.card.game` <class<`card.set.func`>, ...> => class<`card.game`> | <class<`game`>, ...> => class<`card.game`> | <class<`card.set.func`> | class<`game`>, ...> => class<`card.game`>;
type `as.card.set.func` <class<`set.func`>, ...> => class<`card.set.func`> | <class<`set.func`>, ...> => class<`card.set.func`>;
type `as.card.set.func.internal` <class<`capacity`> | class<`game`> | class<`set.func`>> => list<double[]>;
type `as.game` <class<`set.func`>, ...> => class<`game`> | <class<`capacity`>, ...> => class<`game`> | <class<`capacity`> | class<`card.game`> | class<`set.func`>, ...> => class<`game`> | <class<`card.game`>, ...> => class<`game`>;
type `as.Mobius.capacity` <class<`Mobius.set.func`>, ...> => class<`Mobius.capacity`> | <class<`Mobius.set.func`>, ...> => class<`Mobius.capacity`>;
type `as.Mobius.card.set.func` <class<`Mobius.set.func`>, ...> => class<`Mobius.card.set.func`> | <class<`Mobius.set.func`>, ...> => class<`Mobius.card.set.func`>;
type `as.Mobius.game` <class<`Mobius.set.func`>, ...> => class<`Mobius.game`> | <class<`Mobius.set.func`>, ...> => class<`Mobius.game`>;
type `as.Mobius.set.func` <class<`Mobius.card.set.func`>, ...> => class<`Mobius.set.func`> | <class<`Mobius.card.set.func`>, ...> => class<`Mobius.set.func`>;
type `as.set.func` <class<`card.set.func`>, ...> => class<`set.func`> | <class<`card.capacity`>, ...> => class<`set.func`> | <class<`Mobius.card.set.func`>, ...> => class<`set.func`> | <class<`card.capacity`> | class<`card.set.func`> | class<`Mobius.card.set.func`>, ...> => class<`set.func`>;
type `as.set.func.internal` <class<`card.capacity`> | class<`card.game`> | class<`card.set.func`> | class<`Mobius.card.set.func`>> => list<double[]>;
type `binary2subset` <integer, double> => integer[];
type `binom.sum` <double, double> => double;
type `capacity` <double[]> => class<`capacity`>;
type `card.capacity` <double[]> => class<`card.capacity`>;
type `card.game` <double[]> => class<`card.game`>;
type `card.set.func` <double[]> => class<`card.set.func`>;
type `cdf.Choquet.unif` <class<`capacity`>, double, ...> => double | <class<`capacity`>, double, ...> => double;
type `Choquet.integral` <class<`capacity`> | class<`card.capacity`> | class<`card.game`> | class<`game`> | class<`Mobius.capacity`> | class<`Mobius.game`>, double[], ...> => double | <class<`card.game`>, double[], ...> => double | <class<`capacity`>, double[], ...> => double | <class<`Mobius.capacity`>, double[], ...> => double | <class<`Mobius.game`>, double[], ...> => double | <class<`game`>, double[], ...> => double | <class<`card.capacity`>, double[], ...> => double;
type `Choquet.preorder.constraint` <double, double, integer[], double[], double[], double> => list<double[]>;
type `conjugate` <class<`card.set.func`>, ...> => class<`card.game`> | <class<`card.capacity`>, ...> => class<`card.capacity`> | <class<`capacity`>, ...> => class<`capacity`> | <class<`set.func`>, ...> => class<`game`> | <class<`capacity`> | class<`card.capacity`> | class<`card.game`> | class<`card.set.func`> | class<`game`> | class<`set.func`>, ...> => (class<`capacity`> | class<`card.capacity`> | class<`card.game`> | class<`game`>) | <class<`card.game`>, ...> => class<`card.game`> | <class<`game`>, ...> => class<`game`>;
type `conjugate.internal` <class<`capacity`> | class<`game`> | class<`set.func`>> => list<double[]>;
type `entropy` <class<`card.capacity`>, ...> => double | <class<`capacity`>, ...> => double | <class<`Mobius.capacity`>, ...> => double | <class<`capacity`> | class<`card.capacity`> | class<`Mobius.capacity`>, ...> => double;
type `entropy.capa.ident` <class<`data.frame`>, character, double> => class<`capacity`>;
type `expect.Choquet.norm` <class<`capacity`> | class<`Mobius.capacity`>, ...> => double | <class<`capacity`>, ...> => double | <class<`Mobius.capacity`>, ...> => double;
type `expect.Choquet.unif` <class<`capacity`>, ...> => double | <class<`capacity`>, ...> => double;
type `favor` <class<`Mobius.capacity`>, ...> => double[] | <class<`capacity`>, ...> => double[] | <class<`capacity`> | class<`Mobius.capacity`> | class<`card.capacity`>, ...> => double[] | <class<`card.capacity`>, ...> => double;
type `game` <double[]> => class<`game`>;
type `heuristic.ls.capa.ident` <double, class<`capacity`>, class<`matrix`>, double[], character, double, double, double> => list<class<`capacity`> | double[]>;
type `interaction.indices` <class<`Mobius.set.func`>, ...> => class<`matrix`> | <class<`capacity`>, ...> => class<`matrix`> | <class<`set.func`>, ...> => class<`matrix`> | <class<`Mobius.capacity`>, ...> => class<`matrix`> | <class<`card.set.func`>, ...> => class<`matrix`> | <class<`capacity`> | class<`card.capacity`> | class<`card.set.func`> | class<`Mobius.capacity`> | class<`Mobius.set.func`> | class<`set.func`>, ...> => class<`matrix`> | <class<`card.capacity`>, ...> => class<`matrix`>;
type `interaction.interval.constraint` <double, double, integer[], double, double, double, double> => list<double[]>;
type `interaction.preorder.constraint` <double, double, integer[], double, double, double, double, double> => list<double[]>;
type `inter.additive.partition.constraint` <double, double, integer[], double[]> => list<class<`matrix`> | double[]>;
type `is.cardinal` <class<`card.set.func`>, ...> => logical | <class<`card.capacity`>, ...> => logical | <class<`capacity`>, ...> => logical | <class<`Mobius.game`>, ...> => logical | <class<`set.func`>, ...> => logical | <class<`capacity`> | class<`card.capacity`> | class<`card.set.func`> | class<`game`> | class<`Mobius.game`> | class<`Mobius.set.func`> | class<`set.func`>, ...> => logical | <class<`Mobius.set.func`>, ...> => logical | <class<`game`>, ...> => logical;
type `is.kadditive` <class<`card.set.func`> | class<`Mobius.set.func`> | class<`set.func`>, double, ...> => logical | <class<`Mobius.set.func`>, double, ...> => logical | <class<`set.func`>, double, ...> => logical | <class<`card.set.func`>, double, ...> => logical;
type `is.monotone` <class<`game`>, ...> => logical | <class<`Mobius.capacity`>, ...> => logical | <class<`card.set.func`>, ...> => logical | <class<`set.func`>, ...> => logical | <class<`card.capacity`>, ...> => logical | <class<`Mobius.set.func`>, ...> => logical | <class<`capacity`>, ...> => logical | <class<`capacity`> | class<`card.capacity`> | class<`card.set.func`> | class<`game`> | class<`Mobius.capacity`> | class<`Mobius.set.func`> | class<`set.func`>, ...> => logical;
type `is.normalized` <class<`Mobius.capacity`>, ...> => logical | <class<`capacity`>, ...> => logical | <class<`card.capacity`>, ...> => logical | <class<`capacity`> | class<`card.capacity`> | class<`Mobius.capacity`>, ...> => logical;
type `is.positive` <double[]> => logical;
type `k.truncate.Mobius` <class<`Mobius.set.func`> | class<`set.func`>, double, ...> => class<`Mobius.set.func`> | <class<`Mobius.set.func`>, double, ...> => class<`Mobius.set.func`> | <class<`set.func`>, double, ...> => class<`Mobius.set.func`>;
type `k.truncate.Mobius.internal` <class<`capacity`> | class<`game`> | class<`set.func`>, double> => list<double[]>;
type `least.squares.capa.ident` <double, double, class<`matrix`>, double[], character, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, double[] | null, double, double, double> => list<class<`Mobius.capacity`> | double[] | character>;
type `lin.prog.capa.ident` <double, double, class<`matrix`>, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, null, double> => list<class<`Mobius.capacity`> | double | class<`lp`>>;
type `lower.capacity` <double> => class<`card.capacity`>;
type `ls.ranking.capa.ident` <double, double, class<`matrix`>, class<`matrix`>, double, null, null, null, null, null, double, double, double> => list<any>;
type `ls.sorting.capa.ident` <double, double, class<`matrix`>, double[], double, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, double[] | null, double, double, double> => list<class<`Mobius.capacity`> | double[] | character>;
type `ls.sorting.treatment` <class<`matrix`>, double[], class<`Mobius.capacity`>, class<`matrix`>, double[]> => list<class<`matrix`> | double[]>;
type `mini.dist.capa.ident` <class<`Mobius.capacity`>, double, character, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, null, double> => list<class<`Mobius.capacity`> | double | integer[]>;
type `mini.var.capa.ident` <double, double, class<`matrix`>, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, class<`matrix`> | null, null, double> => list<class<`Mobius.capacity`> | double | integer[]>;
type `Mobius` <class<`capacity`> | class<`card.capacity`> | class<`card.set.func`> | class<`game`> | class<`set.func`>, ...> => (class<`Mobius.capacity`> | class<`Mobius.card.set.func`> | class<`Mobius.game`> | class<`Mobius.set.func`>) | <class<`set.func`>, ...> => class<`Mobius.set.func`> | <class<`game`>, ...> => class<`Mobius.game`> | <class<`capacity`>, ...> => class<`Mobius.capacity`> | <class<`card.capacity`>, ...> => class<`Mobius.card.set.func`> | <class<`card.set.func`>, ...> => class<`Mobius.card.set.func`>;
type `Mobius.capacity` <double[], double, double> => class<`Mobius.capacity`>;
type `Mobius.card.set.func` <double[]> => class<`Mobius.card.set.func`>;
type `Mobius.game` <double[], double, double> => class<`Mobius.game`>;
type `Mobius.set.func` <double[], double, double> => class<`Mobius.set.func`>;
type `Mobius.set.func.internal` <double[], double, double> => (list<double[]> | list<integer[] | double>);
type `normalize` <class<`card.capacity`>, ...> => class<`card.capacity`> | <class<`Mobius.capacity`>, ...> => class<`Mobius.capacity`> | <class<`capacity`> | class<`card.capacity`> | class<`Mobius.capacity`>, ...> => (class<`capacity`> | class<`card.capacity`> | class<`Mobius.capacity`>) | <class<`capacity`>, ...> => class<`capacity`>;
type `orness` <class<`capacity`> | class<`card.capacity`> | class<`Mobius.capacity`>, ...> => double | <class<`card.capacity`>, ...> => double | <class<`capacity`>, ...> => double | <class<`Mobius.capacity`>, ...> => double;
type `rnd` <class<`card.capacity`>, double> => class<`card.capacity`> | <class<`set.func`>, double> => class<`set.func`> | <class<`Mobius.capacity`>, double> => class<`Mobius.capacity`> | <class<`capacity`> | class<`card.capacity`> | class<`Mobius.capacity`> | class<`set.func`>, double> => (class<`capacity`> | class<`card.capacity`> | class<`Mobius.capacity`> | class<`set.func`>) | <class<`capacity`>, double> => class<`capacity`>;
type `sd.Choquet.norm` <class<`capacity`>, ...> => double | <class<`capacity`>, ...> => double;
type `sd.Choquet.unif` <class<`capacity`>, ...> => double | <class<`capacity`>, ...> => double;
type `set.func` <double[]> => class<`set.func`>;
type `set.func.internal` <double[]> => list<double[]>;
type `Shapley.interval.constraint` <double, double, integer[], double, double, double> => list<double[]>;
type `Shapley.preorder.constraint` <double, double, integer[], double, double, double> => list<double[]>;
type `Shapley.value` <class<`Mobius.capacity`>, ...> => double[] | <class<`card.set.func`>, ...> => double | <class<`capacity`>, ...> => double[] | <class<`set.func`>, ...> => double[] | <class<`set.func`> | class<`Mobius.capacity`> | class<`Mobius.set.func`> | class<`capacity`> | class<`card.capacity`> | class<`card.set.func`>, ...> => double[] | <class<`Mobius.set.func`>, ...> => double[] | <class<`card.capacity`>, ...> => double;
type `Sipos.integral` <class<`Mobius.capacity`>, double[], ...> => double | <class<`game`>, double[], ...> => double | <class<`capacity`> | class<`card.capacity`> | class<`card.game`> | class<`game`> | class<`Mobius.capacity`> | class<`Mobius.game`>, double[], ...> => double | <class<`Mobius.game`>, double[], ...> => double | <class<`card.game`>, double[], ...> => double | <class<`card.capacity`>, double[], ...> => double | <class<`capacity`>, double[], ...> => double;
type `Sugeno.integral` <class<`Mobius.capacity`>, double[], ...> => double | <class<`capacity`>, double[], ...> => double | <class<`Mobius.game`>, double[], ...> => double | <class<`game`>, double[], ...> => double | <class<`capacity`> | class<`card.capacity`> | class<`card.game`> | class<`game`> | class<`Mobius.capacity`> | class<`Mobius.game`>, double[], ...> => double | <class<`card.game`>, double[], ...> => double | <class<`card.capacity`>, double[], ...> => double;
type `summary` <class<`Mobius.set.func`>, ...> => class<`summary.superclass.set.func`> | <class<`card.capacity`>, ...> => class<`summary.superclass.capacity`> | <class<`Mobius.capacity`>, ...> => class<`summary.superclass.capacity`> | <class<`capacity`>, ...> => class<`summary.superclass.capacity`> | <class<`card.set.func`>, ...> => class<`summary.superclass.set.func`> | <class<`set.func`>, ...> => class<`summary.superclass.set.func`>;
type `to.data.frame` <class<`card.capacity`>, ...> => class<`data.frame`> | <class<`set.func`>, ...> => class<`data.frame`> | <class<`Mobius.set.func`>, ...> => class<`data.frame`> | <class<`Mobius.set.func`> | class<`set.func`> | class<`card.capacity`> | class<`card.set.func`>, ...> => class<`data.frame`> | <class<`card.set.func`>, ...> => class<`data.frame`>;
type `uniform.capacity` <double> => class<`card.capacity`>;
type `upper.capacity` <double> => class<`card.capacity`>;
type `variance` <class<`capacity`>, ...> => double | <class<`Mobius.capacity`>, ...> => double | <class<`card.capacity`>, ...> => double | <class<`capacity`> | class<`card.capacity`> | class<`Mobius.capacity`>, ...> => double;
type `veto` <class<`Mobius.capacity`>, ...> => double[] | <class<`capacity`> | class<`Mobius.capacity`> | class<`card.capacity`>, ...> => double[] | <class<`capacity`>, ...> => double[] | <class<`card.capacity`>, ...> => double;
type `zeta` <class<`Mobius.game`>, ...> => class<`game`> | <class<`Mobius.card.set.func`>, ...> => class<`card.set.func`> | <class<`Mobius.capacity`>, ...> => class<`capacity`> | <class<`Mobius.capacity`> | class<`Mobius.card.set.func`> | class<`Mobius.game`> | class<`Mobius.set.func`>, ...> => (class<`capacity`> | class<`card.set.func`> | class<`game`> | class<`set.func`>) | <class<`Mobius.set.func`>, ...> => class<`set.func`>;
type `zeta.internal` <class<`Mobius.capacity`> | class<`Mobius.game`> | class<`Mobius.set.func`>> => list<double[]>;
