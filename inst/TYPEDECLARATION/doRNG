type `%||%` <? double | integer[] | tuple<integer[], integer[], integer[], integer[], integer[]>, ^double[] | language | tuple<double[], double[], double[], double[], double[]> | struct<``:double, `normal.kind`:character>> => ^double[] | tuple<double[], double[], double[], double[], double[]> | struct<``:double, `normal.kind`:character>;
type `%dorng%` <struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:null, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:tuple<>, `verbose`:logical> | struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:tuple<>, `verbose`:logical> | struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:struct<`RNG`:^double[]>, `verbose`:logical> | struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:struct<`RNG`:double>, `verbose`:logical> | struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:struct<`RNG`:integer[]>, `verbose`:logical> | struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:struct<`RNG`:tuple<double[], double[], double[], double[], double[]>>, `verbose`:logical> | struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:struct<`RNG`:struct<``:double, `normal.kind`:character>>, `verbose`:logical>, language> => ^double[] | tuple<double[], double[], double[], double[], double[]> | list<double[]> | tuple<double, double, double> | list<null>;
type `$` <language | struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:tuple<>, `verbose`:logical> | struct<`args`:language, `argnames`:character, `evalenv`:environment, `specified`:character[], `combineInfo`:struct<`fun`:any => any, `in.order`:logical, `has.init`:logical, `init`:language, `final`:null, `multi.combine`:logical, `max.combine`:double>, `errorHandling`:character, `packages`:null, `export`:null, `noexport`:null, `options`:struct<`RNG`:double>, `verbose`:logical>, character | language, environment, struct<`seed`:null, `once`:logical, `nseed`:double, `backend`:struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>> | struct<`seed`:double, `once`:logical, `nseed`:double, `backend`:struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>> | language> => character | tuple<double[], double[], double[], double[], double[]> | tuple<double, double, double, double>;
type `checkRNGversion` <character> => double;
type `doRNGseq` <integer, ? ^double[] | tuple<double[], double[], double[], double[], double[]>, logical> => tuple<integer[], integer[], integer[]> | list<integer[]>;
type `doRNGversion` <? character> => character;
type `filter` <character[]> => logical[];
type `getDoBackend` < > => struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any> | struct<`fun`:any => any, `data`:struct<`seed`:double, `once`:logical, `nseed`:double, `backend`:struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>>, `info`:any => any> | struct<`fun`:any => any, `data`:struct<`seed`:null, `once`:logical, `nseed`:double, `backend`:struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>>, `info`:any => any>;
type `message` <character> => null;
type `registerDoRNG` <? double, logical> => any => any;
type `setDoBackend` <struct<`fun`:any => any, `data`:struct<`seed`:double, `once`:logical, `nseed`:double, `backend`:struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>>, `info`:any => any> | struct<`fun`:any => any, `data`:struct<`seed`:null, `once`:logical, `nseed`:double, `backend`:struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>>, `info`:any => any> | struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>> => struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any> | struct<`fun`:any => any, `data`:struct<`seed`:double, `once`:logical, `nseed`:double, `backend`:struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>>, `info`:any => any> | struct<`fun`:any => any, `data`:struct<`seed`:null, `once`:logical, `nseed`:double, `backend`:struct<`fun`:any => any, `data`:tuple<struct<`con`:integer, `host`:character, `rank`:integer>, struct<`con`:integer, `host`:character, `rank`:integer>>, `info`:any => any>>, `info`:any => any>;
