type `agreementplot` <class<`matrix`> | class<`table`>, ...> => (list<class<`matrix`> | double[]> | list<class<`matrix`> | double>);
type `agreementplot.default` <class<`matrix`> | class<`table`>, logical, character | null, double[], double[], logical, logical, character> => (list<class<`matrix`> | double[]> | list<class<`matrix`> | double>);
type `array3d` <class<`table`>, character> => (class<`array`> | class<`table`>);
type `as.array.loddsratio` <class<`loddsratio`>, logical, ...> => (class<`matrix`> | double[]);
type `as.data.frame.loddsratio` <class<`loddsratio`>, null, any, logical, ...> => class<`data.frame`>;
type `as_matrix_ftable` <class<`ftable`, `structable`>, character, ...> => class<`matrix`>;
type `as.matrix.structable` <class<`ftable`, `structable`>, character, ...> => class<`matrix`>;
type `assoc` <class<`formula`> | class<`ftable`, `structable`> | class<`loglm`> | class<`table`> | class<`table`, `xtabs`>, ...> => class<`ftable`, `structable`>;
type `assoc.default` <class<`ftable`, `structable`> | class<`table`> | class<`table`, `xtabs`>, null, null, logical, null, null | double[], class<`function`>, any> => class<`ftable`, `structable`>;
type `assoc.formula` <class<`formula`>, class<`ftable`, `structable`> | class<`table`>, ..., null, null, null, null> => class<`ftable`, `structable`>;
type `assoc.loglm` <class<`loglm`>, ...> => class<`ftable`, `structable`>;
type `assocstats` <class<`table`, `xtabs`> | class<`table`> | class<`matrix`>> => (class<`assocstats`> | list<class<`assocstats`>>);
type `as.table.structable` <class<`ftable`, `structable`>, ...> => class<`table`>;
type `as.vector.structable` <class<`ftable`, `structable`>, ...> => double[];
type `binreg_plot` <class<`glm`, `lm`>, character | null, null | character, null | character, null | double[], null, null, character[]> => null;
type `cd_plot` <class<`formula`> | integer[], ...> => list<class<`function`>>;
type `cd_plot.default` <integer[], class<`factor`> | class<`factor`, `ordered`>, logical, any, double | character, double, null, null> => list<class<`function`>>;
type `cd_plot.formula` <class<`formula`>, class<`data.frame`>, logical, double, double | character, double, null, null> => list<class<`function`>>;
type `coef.lodds` <class<`lodds`> | class<`loddsratio`>, logical, ...> => double[];
type `coef.loddsratio` <class<`lodds`> | class<`loddsratio`>, logical, ...> => double[];
type `coindep_test` <class<`matrix`> | class<`table`> | class<`table`, `xtabs`>, null | character | double[], double, class<`function`>, class<`function`>, character[], logical> => class<`coindep_test`, `htest`>;
type `confint.Kappa` <class<`Kappa`>, any, double, ...> => class<`matrix`>;
type `confint.lodds` <class<`lodds`> | class<`loddsratio`>, any, double, logical, ...> => class<`matrix`>;
type `confint.loddsratio` <class<`lodds`> | class<`loddsratio`>, any, double, logical, ...> => class<`matrix`>;
type `cotab_coindep` <class<`table`>, character, character[], null, double, any, null, null> => class<`function`>;
type `co_table` <class<`table`> | class<`table`, `xtabs`> | class<`array`> | class<`matrix`>, character[] | double[], character> => list<class<`table`>>;
type `cotabplot` <class<`array`> | class<`formula`> | class<`table`> | class<`table`, `xtabs`>, ...> => (class<`table`> | class<`table`, `xtabs`>);
type `cotabplot.default` <class<`array`> | class<`table`> | class<`table`, `xtabs`>, null | character[], class<`grapcon_generator`> | class<`function`>, any, double[], null, class<`gpar`>, class<`gpar`>> => (class<`table`> | class<`table`, `xtabs`>);
type `cotabplot.formula` <class<`formula`>, class<`ftable`, `structable`> | class<`table`> | class<`data.frame`> | class<`table`, `xtabs`>, ...> => (class<`table`> | class<`table`, `xtabs`>);
type `dim.loddsratio` <class<`loddsratio`>, ...> => integer[];
type `dimnames.loddsratio` <class<`loddsratio`>, ...> => list<character[]>;
type `dimnames.structable` <class<`ftable`, `structable`>> => list<character[]>;
type `dim.structable` <class<`ftable`, `structable`>> => integer[];
type `distplot` <class<`table`> | class<`table`, `xtabs`> | integer[], character[], double | null, null | double, logical, null, null, logical> => class<`data.frame`>;
type `doubledecker` <class<`formula`> | class<`table`>, ...> => class<`ftable`, `structable`>;
type `doubledecker.default` <class<`table`> | class<`table`, `xtabs`>, integer | character, double[], class<`gpar`>, class<`grapcon_generator`>, class<`grapcon_generator`>, null, logical> => class<`ftable`, `structable`>;
type `doubledecker.formula` <class<`formula`>, class<`table`> | class<`table`, `xtabs`>, ..., null> => class<`ftable`, `structable`>;
type `fitted.goodfit` <class<`goodfit`>, ...> => double[];
type `fourfold` <class<`table`>, character[], double, character[], any, double, null, null> => null;
type `goodfit` <class<`table`> | class<`table`, `xtabs`> | integer[], character[], character[], null | list<double>> => class<`goodfit`>;
type `grid_barplot` <double[], double, double[], character[] | integer[], null, double[] | null, character, character> => integer[];
type `grid_legend` <character | class<`unit`> | double, any, ^double[] | null | character[], double[] | character[], character[], logical, class<`unit`>, class<`unit`>> => class<`frame`, `gDesc`, `gTree`, `grob`>;
type `hcl2hex` <double[], double[], double[], logical> => character[];
type `hls` <double, double, double> => character;
type `image.loddsratio` <class<`loddsratio`>, null, class<`grapcon_generator`>, any, null, class<`function`>, null, ...> => class<`ftable`, `structable`>;
type `independence_table` <class<`array`> | class<`table`>, character[]> => (class<`array`> | class<`matrix`>);
type `is.structable` <character[] | class<`array`> | class<`data.frame`> | class<`ftable`, `structable`> | class<`matrix`> | class<`table`> | class<`table`, `xtabs`> | double[] | null | list<character[]>> => logical;
type `Kappa` <class<`table`>, character[]> => class<`Kappa`>;
type `labeling_border` <list<character[]>, logical[], any, character> => class<`path`, `vpPath`> | <any, any, null | list<character[]>, character[] | null, any, logical, any, any> => class<`function`>;
type `labeling_cboxed` <logical, logical, logical, character, ...> => class<`function`>;
type `labeling_cells` <any, logical, logical, logical, any, character, character, character> => class<`function`> | <list<character[]> | class<`table`>, any, any, character> => class<`path`, `vpPath`>;
type `labeling_conditional` <...> => class<`function`>;
type `labeling_lboxed` <logical, logical, logical, character, character, logical, ...> => class<`function`>;
type `labeling_left` <logical, character, character, character, ...> => class<`function`>;
type `labeling_list` <any, character, character, character, character, any, logical, double> => class<`function`>;
type `labeling_values` <character, double, double, logical, ...> => class<`function`>;
type `length.structable` <class<`ftable`, `structable`>> => integer;
type `lodds` <class<`matrix`>, ...> => class<`lodds`>;
type `lodds.default` <class<`matrix`>, null, null, logical, null, logical, ...> => class<`lodds`>;
type `loddsratio` <class<`formula`> | class<`matrix`> | class<`table`> | class<`table`, `xtabs`>, ...> => class<`loddsratio`>;
type `loddsratio.default` <class<`table`, `xtabs`> | class<`matrix`> | class<`table`>, null, logical, null | double | integer[], logical, ...> => class<`loddsratio`>;
type `loddsratio.formula` <class<`formula`>, class<`data.frame`>, ..., null, null> => class<`loddsratio`>;
type `make_header` <class<`loddsratio`>> => character[];
type `mar_table` <class<`table`>> => class<`matrix`>;
type `.massage_args` <...> => (list<character[]> | list<character[] | class<`name`>> | list<character | class<`name`>> | list<class<`name`> | character> | list<class<`name`> | double> | list<class<`name`> | integer> | list<double | class<`name`>> | list<double[]> | list<double | integer[]>);
type `mosaic` <class<`formula`> | class<`ftable`, `structable`> | class<`table`> | class<`table`, `xtabs`> | class<`matrix`>, ...> => class<`ftable`, `structable`>;
type `mosaic.default` <class<`table`> | class<`table`, `xtabs`> | class<`ftable`, `structable`> | class<`matrix`>, null | character | double[], null | logical[], null | character[], null | class<`function`> | class<`grapcon_generator`> | list<class<`unit`>>, any, null | class<`gpar`> | class<`grapcon_generator`> | character[] | class<`function`>, null | class<`formula`> | class<`array`> | list<double[]>> => class<`ftable`, `structable`>;
type `mosaic.formula` <class<`formula`>, class<`data.frame`> | class<`ftable`, `structable`> | class<`table`> | class<`table`, `xtabs`>, null, ..., null | character, null, any, null> => class<`ftable`, `structable`>;
type `mplot` <..., list<any>, null, null, character | null, any, null, any> => null;
type `odds` <class<`table`> | class<`array`> | class<`matrix`>> => list<double[]>;
type `Ord_estimate` <double[], null, double> => list<double | character>;
type `Ord_plot` <class<`table`> | class<`table`, `xtabs`> | integer[], logical, logical, double, null, null, null, character> => double[];
type `pairs_diagonal_text` <logical, any, any, any, character[], character[], double, ...> => class<`function`>;
type `pairs_mosaic` <...> => class<`function`>;
type `pairs_strucplot` <any, character[], logical, any, null, ...> => class<`function`>;
type `pairs.structable` <class<`ftable`, `structable`>, ...> => class<`table`>;
type `pairs.table` <class<`table`> | class<`table`, `xtabs`>, class<`grapcon_generator`>, list<any>, class<`function`> | class<`grapcon_generator`>, any, class<`grapcon_generator`> | class<`function`>, any, null> => (class<`table`> | class<`table`, `xtabs`>);
type `pexpand` <character[] | double[] | null | list<class<`gpar`>> | list<character[]>, double, any, character[], null | character[]> => (character[] | double[] | list<class<`gpar`>> | list<character[]>);
type `plot.goodfit` <class<`goodfit`>, ...> => null;
type `plot.loddsratio` <class<`loddsratio`>, logical, class<`gpar`>, logical, double, logical, double, double> => null;
type `plot.loglm` <class<`loglm`>, class<`function`>, character[], character[], class<`grapcon_generator`>, list<any>, ...> => class<`ftable`, `structable`>;
type `predict.goodfit` <class<`goodfit`>, integer[], character[], ...> => double[];
type `print.Kappa` <class<`Kappa`>, double, logical, double, ...> => class<`Kappa`>;
type `remove_trailing_comma` <character> => character;
type `rootogram` <class<`goodfit`> | class<`table`>, ...> => null;
type `rootogram.default` <double[] | class<`table`>, double[], integer[] | null, character[], character[], logical, logical, any> => null;
type `rootogram.goodfit` <class<`goodfit`>, ...> => null;
type `shading_binary` <null, null, null, null, double[]> => class<`function`>;
type `shading_diagonal` <class<`table`, `xtabs`>, null> => class<`gpar`>;
type `shading_Friendly` <null, null, null, null, double[], double, double[], null> => class<`function`>;
type `shading_hcl` <class<`table`> | class<`table`, `xtabs`> | null, class<`table`> | class<`table`, `xtabs`> | null, class<`array`> | class<`table`> | class<`table`, `xtabs`> | null, double | null, null | double[], null | double[], null | double[], double[] | class<`function`>> => class<`function`>;
type `shading_hsv` <class<`table`> | class<`table`, `xtabs`> | null, class<`table`> | class<`table`, `xtabs`> | null, class<`table`> | class<`table`, `xtabs`> | null, double | null, double[], double[], double[], double[]> => class<`function`>;
type `shading_Marimekko` <class<`table`>, null, logical> => class<`gpar`>;
type `shading_sieve` <null, null, null, null, double[], character[], double, double> => class<`function`>;
type `sieve` <class<`formula`> | class<`table`> | class<`table`, `xtabs`>, ...> => class<`ftable`, `structable`>;
type `sieve.default` <class<`table`> | class<`table`, `xtabs`>, null, null, null | logical, logical, null, null, class<`function`> | null> => class<`ftable`, `structable`>;
type `sieve.formula` <class<`formula`>, class<`data.frame`> | class<`ftable`, `structable`>, ..., character | null, null, logical[] | null> => class<`ftable`, `structable`>;
type `spacing_conditional` <class<`unit`> | double, class<`unit`>, double> => class<`function`>;
type `spacing_dimequal` <integer[], any> => (list<class<`unit`>> | list<class<`unit`, `unit.arithmetic`>>) | <class<`unit`> | class<`unit`, `unit.arithmetic`> | double[]> => class<`function`>;
type `spacing_equal` <integer[], any> => list<class<`unit`>> | <class<`unit`> | double> => class<`function`>;
type `spacing_increase` <class<`unit`> | double, any> => class<`function`> | <integer[], any> => list<class<`unit`, `unit.arithmetic`>>;
type `spine` <class<`factor`> | class<`formula`> | integer[], ...> => class<`table`>;
type `spine.default` <class<`factor`> | integer[], class<`factor`, `ordered`> | class<`factor`>, any, double, any, character, character, character> => class<`table`>;
type `spine.formula` <class<`formula`>, class<`data.frame`>, character | double[] | null, double, null, character, null, null> => class<`table`>;
type `struc_assoc` <any, any, any, any, any, any> => class<`function`>;
type `struc_mosaic` <any, class<`matrix`> | class<`table`, `xtabs`> | class<`array`>, any, list<class<`unit`>> | list<class<`unit`, `unit.arithmetic`> | class<`unit`>>, class<`gpar`>, logical[], character> => null | <any, any, any, any, any> => class<`function`>;
type `strucplot` <class<`table`> | class<`table`, `xtabs`> | class<`matrix`>, class<`table`> | null | class<`matrix`>, class<`array`> | null | class<`formula`> | list<double[]>, any, null | logical, character[], character | null, null> => class<`ftable`, `structable`>;
type `struc_sieve` <character, any, any> => class<`function`>;
type `structable` <class<`formula`> | class<`table`> | class<`table`, `xtabs`> | class<`array`> | class<`matrix`>, ...> => class<`ftable`, `structable`>;
type `[<-.structable` <class<`ftable`, `structable`>, ..., class<`ftable`, `structable`>> => class<`ftable`, `structable`>;
type `[.structable` <class<`ftable`, `structable`>, ...> => class<`ftable`, `structable`>;
type `[[.structable` <class<`ftable`, `structable`> | class<`structable`>, ...> => (class<`ftable`, `structable`> | class<`structable`>);
type `structable.default` <..., character[] | null, logical[]> => class<`ftable`, `structable`>;
type `structable.formula` <class<`formula`>, class<`data.frame`> | class<`ftable`, `structable`> | class<`table`> | class<`table`, `xtabs`>, null, logical | null, ..., any, any> => class<`ftable`, `structable`>;
type `summary.assocstats` <class<`assocstats`>, logical, ...> => class<`summary.assocstats`>;
type `summary.goodfit` <class<`goodfit`>, ...> => class<`matrix`>;
type `summary.Kappa` <class<`Kappa`>, ...> => class<`summary.Kappa`>;
type `summary.lodds` <class<`lodds`> | class<`loddsratio`>, ...> => class<`coeftest`>;
type `summary.loddsratio` <class<`lodds`> | class<`loddsratio`>, ...> => class<`coeftest`>;
type `table2d_summary` <class<`table`>, logical, logical, character[], logical, ...> => class<`table2d_summary`>;
type `ternaryplot` <class<`data.frame`> | class<`matrix`> | class<`table`, `xtabs`>, double, character[] | null, character[], character, any, ^character[] | null, character> => null;
type `tile` <class<`loddsratio`> | class<`matrix`> | class<`table`>, ...> => class<`ftable`, `structable`>;
type `tile.default` <class<`matrix`> | class<`table`>, character[], character[], character[], null, logical, class<`function`>, null> => class<`ftable`, `structable`>;
type `tile.loddsratio` <class<`loddsratio`>, null, class<`grapcon_generator`>, any, null, class<`function`>, character, character> => class<`ftable`, `structable`>;
type `t.structable` <class<`ftable`, `structable`>> => class<`ftable`, `structable`>;
type `vcdViewport` <class<`unit`> | class<`unit`, `unit.arithmetic`> | double[], class<`unit`> | null | double, null, logical, logical, logical, logical, character> => class<`viewport`, `vpTree`>;
type `vcov.lodds` <class<`lodds`> | class<`loddsratio`>, logical, ...> => class<`matrix`>;
type `vcov.loddsratio` <class<`lodds`> | class<`loddsratio`>, logical, ...> => class<`matrix`>;
type `woolf_test` <class<`table`>> => class<`htest`>;
