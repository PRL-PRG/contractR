type `are_same_length` <double[], list<double | integer[]>, any, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `assert_are_same_length` <double[], list<double | integer[]>, character> => any;
type `assert_has_all_attributes` <double, character[], character> => any;
type `assert_has_any_attributes` <double, character[], character> => double;
type `assert_has_colnames` <class<`data.frame`>, character> => class<`data.frame`>;
type `assert_has_cols` <class<`matrix`>, character> => class<`matrix`>;
type `assert_has_dimnames` <class<`data.frame`>, character> => class<`data.frame`>;
type `assert_has_duplicates` <integer[], character> => integer[];
type `assert_has_elements` <class<`data.frame`> | integer[] | list<integer[] | list<integer[]>>, double, character> => (class<`data.frame`> | integer[] | list<integer[] | list<integer[]>>);
type `assert_has_names` <double[], character> => double[];
type `assert_has_rownames` <class<`data.frame`>, character> => class<`data.frame`>;
type `assert_has_rows` <class<`data.frame`>, character> => class<`data.frame`>;
type `assert_is_atomic` <character[] | class<`array`> | class<`factor`> | class<`matrix`> | complex[] | null | raw[], character> => (character[] | class<`array`> | class<`factor`> | class<`matrix`> | complex[] | null | raw[]);
type `assert_is_monotonic_decreasing` <double[], logical, character> => any;
type `assert_is_monotonic_increasing` <double[], logical, character> => any;
type `assert_is_nested` <list<double | list<integer[]>>, character> => list<double | list<integer[]>>;
type `assert_is_non_nested` <double | list<integer[]>, character> => (double | list<integer[]>);
type `assert_is_not_null` <null, any> => null;
type `assert_is_null` <double | null, character> => any;
type `assert_is_of_length` <class<`data.frame`> | integer[] | expression | list<integer[] | list<integer[]>>, double, character> => any;
type `assert_is_recursive` <class<`call`> | class<`data.frame`> | class<`formula`> | class<`function`> | expression | list<any>, character> => (class<`call`> | class<`data.frame`> | class<`formula`> | class<`function`> | expression | list<any>);
type `assert_is_unsorted` <double[], logical, logical, character> => any;
type `assert_is_vector` <character[] | complex[] | expression | raw[] | list<any>, character> => (character[] | complex[] | expression | raw[] | list<any>);
type `check_n` <double> => null;
type `DIM` <class<`data.frame`> | class<`factor`> | double[] | null | list<integer[]>> => integer[];
type `filter` <character[]> => logical[];
type `FUN` <class<`factor`> | double[] | class<`data.frame`> | expression | null | list<integer[] | list<integer[]> | integer[] | integer[] | list<integer[] | list<integer[]>>>> => integer | <character> => (class<`logical`, `scalar_with_cause`> | logical);
type `get_dim_string` <integer[] | null> => character;
type `get_metric` <character> => class<`function`>;
type `has_any_attributes` <class<`matrix`>, any> => logical;
type `has_attributes` <class<`data.frame`> | double, character[], any> => (class<`logical`, `vector_with_cause`> | logical[]);
type `has_elements` <integer[] | class<`data.frame`> | list<integer[] | list<integer[]>>, double, any> => logical;
type `has_no_attributes` <class<`data.frame`>, character> => class<`logical`, `scalar_with_cause`>;
type `has_no_duplicates` <integer[], character> => class<`logical`, `scalar_with_cause`>;
type `has_slot` <class<`numbers`> | integer[], character, any> => (class<`logical`, `scalar_with_cause`> | logical);
type `have_same_dims` <integer[] | class<`matrix`>, class<`matrix`> | class<`data.frame`>, any, any> => (class<`logical`, `scalar_with_cause`> | logical);
type `is_atomic` <class<`name`> | character[] | class<`array`> | class<`factor`> | class<`matrix`> | complex[] | null | raw[], character> => (class<`logical`, `scalar_with_cause`> | logical);
type `is_empty` <character[] | list<integer[]>, character[], character> => class<`logical`, `scalar_with_cause`>;
type `is_monotonic_decreasing` <double[], logical, character> => class<`logical`, `scalar_with_cause`>;
type `is_monotonic_increasing` <class<`POSIXct`, `POSIXt`> | double[], logical, character> => class<`logical`, `scalar_with_cause`>;
type `is_non_empty` <integer[], character[], any> => logical;
type `is_not_null` <null | character[] | double[], any> => (class<`logical`, `scalar_with_cause`> | logical);
type `is_null` <double[] | null, any> => (class<`logical`, `scalar_with_cause`> | logical);
type `is_of_length` <integer[] | character[] | expression | class<`data.frame`> | list<integer[] | integer[] | list<integer[]>>, double, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_recursive` <class<`name`> | class<`call`> | class<`data.frame`> | class<`formula`> | class<`function`> | expression | list<any>, any> => (class<`logical`, `scalar_with_cause`> | logical);
type `metric_fn` <integer[] | character[] | expression | class<`data.frame`> | list<integer[] | integer[] | list<integer[]>>, double, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `n_elements` <class<`factor`> | double[] | class<`data.frame`> | expression | null | list<integer[] | list<integer[]> | integer[] | integer[] | list<integer[] | list<integer[]>>>> => integer;
type `predicate` <double[], list<double | integer[]>, any, any> => (logical | class<`logical`, `scalar_with_cause`>) | <class<`data.frame`> | double, character[], any> => (class<`logical`, `vector_with_cause`> | logical[]) | <integer[] | class<`data.frame`> | list<integer[] | list<integer[]>>, double, any> => logical | <class<`name`> | character[] | class<`array`> | class<`factor`> | class<`matrix`> | complex[] | null | raw[], character> => (class<`logical`, `scalar_with_cause`> | logical) | <double[], logical, character> => class<`logical`, `scalar_with_cause`> | <class<`POSIXct`, `POSIXt`> | double[], logical, character> => class<`logical`, `scalar_with_cause`> | <null | character[] | double[], any> => (class<`logical`, `scalar_with_cause`> | logical) | <double[] | null, any> => (class<`logical`, `scalar_with_cause`> | logical) | <integer[] | character[] | expression | class<`data.frame`> | list<integer[] | integer[] | list<integer[]>>, double, any> => (logical | class<`logical`, `scalar_with_cause`>) | <class<`name`> | class<`call`> | class<`data.frame`> | class<`formula`> | class<`function`> | expression | list<any>, any> => (class<`logical`, `scalar_with_cause`> | logical) | <class<`data.frame`>, character> => logical | <class<`data.frame`>, character> => logical | <character[] | complex[] | expression | raw[] | list<any>, character> => logical | <double[], character> => logical | <class<`data.frame`>, character> => logical | <integer[], character> => logical | <list<double | list<integer[]>>, character> => logical | <double | list<integer[]>, character> => logical | <class<`matrix`>, character> => logical | <double[], logical, logical, character> => (class<`logical`, `scalar_with_cause`> | logical) | <class<`data.frame`>, character> => logical;
