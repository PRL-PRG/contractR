type `$` <character> => double | < > => logical | < > => character | <..., character | null> => class<`shiny.tag`> | <any> => (character | null);
type `as.character.html` <class<`character`, `html`>, ...> => character;
type `as.character.shiny.tag` <class<`shiny.tag`>, ...> => character;
type `as.tags` <null, ...> => class<`list`, `shiny.tag.list`>;
type `as.tags.default` <null, ...> => class<`list`, `shiny.tag.list`>;
type `attachDependencies` <class<`shiny.tag`>, class<`html_dependency`>, logical> => class<`shiny.tag`>;
type `concat8` <...> => character;
type `css` <..., character> => character;
type `div` <..., character | null> => class<`shiny.tag`>;
type `doRenderTags` <class<`shiny.tag`> | list<any>, any> => class<`character`, `html`>;
type `dropNullsOrEmpty` <character[] | list<any>> => (character[] | list<any>);
type `extractPreserveChunks` <character> => list<character>;
type `filter` <character[]> => logical[];
type `findDependencies` <class<`shiny.tag`> | character | class<`character`, `html`>, logical> => null;
type `flattenTags` <class<`list`, `shiny.tag.list`> | character[] | class<`character`, `html`> | class<`shiny.tag`> | null | list<any>> => list<any>;
type `fun` <...> => list<null>;
type `FUN` <class<`shiny.tag`> | character | class<`character`, `html`>, logical> => null | <class<`list`, `shiny.tag.list`> | character[] | class<`character`, `html`> | class<`shiny.tag`> | null | list<any>> => list<any> | <character[] | class<`character`, `html`> | class<`shiny.tag`> | null> => logical | <character[]> => null | <character | class<`character`, `html`> | class<`shiny.tag`>, class<`function`>, logical> => (character | class<`character`, `html`> | class<`shiny.tag`> | null) | <character> => logical | <class<`shiny.tag`> | character | list<any>, any, any, character> => (character | null);
type `func` <character | class<`character`, `html`> | class<`shiny.tag`>> => (character | class<`character`, `html`> | class<`shiny.tag`> | null) | <character | class<`character`, `html`> | class<`shiny.tag`>> => (character | class<`character`, `html`> | class<`shiny.tag`>) | <character | class<`character`, `html`> | class<`shiny.tag`>> => (character | class<`character`, `html`> | class<`shiny.tag`>);
type `h1` <..., character | null> => class<`shiny.tag`>;
type `h3` <..., character | null> => class<`shiny.tag`>;
type `HTML` <character, ...> => class<`character`, `html`>;
type `htmlDependencies` <character | class<`character`, `html`> | class<`shiny.tag`>> => null;
type `htmlDependencies<-` <class<`shiny.tag`>, class<`html_dependency`>> => class<`shiny.tag`>;
type `htmlDependency` <character, character, character, null, character | null, null | character, null, null, null, logical> => class<`html_dependency`>;
type `htmlEscape` <character, logical> => character;
type `htmlPreserve` <character> => character;
type `is.singleton` <character | class<`character`, `html`> | class<`shiny.tag`>> => logical;
type `isTag` <character[] | class<`character`, `html`> | class<`list`, `shiny.tag.list`> | class<`shiny.tag`> | null | list<any>> => logical;
type `isTagList` <character[] | class<`character`, `html`> | class<`list`, `shiny.tag.list`> | null | list<any>> => logical;
type `normalizeText` <character | class<`character`, `html`>> => (character | class<`character`, `html`>);
type `p` <..., character | null> => class<`shiny.tag`>;
type `paste8` <..., character, character> => character;
type `registerMethods` <list<character[]>> => list<null>;
type `renderTags` <class<`shiny.tag`>, character[], double> => list<class<`character`, `html`> | character[] | list<any>>;
type `resolveDependencies` <null, logical> => list<any>;
type `restorePreserveChunks` <character, character> => character;
type `rewriteTags` <character | class<`character`, `html`> | class<`shiny.tag`>, class<`function`>, logical> => (character | class<`character`, `html`> | class<`shiny.tag`> | null);
type `strong` <..., character | null> => class<`shiny.tag`>;
type `tag` <character, character | class<`shiny.tag`> | list<any>, character | null> => class<`shiny.tag`>;
type `tagify` <class<`shiny.tag`>> => class<`shiny.tag`>;
type `tagList` <...> => class<`list`, `shiny.tag.list`>;
type `tagWrite` <class<`shiny.tag`> | character | list<any>, any, any, character> => (character | null);
type `takeHeads` <class<`shiny.tag`>> => list<class<`shiny.tag`> | list<any> | class<`shiny.tag`> | list<class<`shiny.tag`>>>;
type `takeSingletons` <class<`shiny.tag`>, character[], logical> => list<class<`shiny.tag`> | character[]>;
type `validateCssUnit` <character | double> => character;
type `validateNoWS` <character | null> => null;
type `validateScalarName` <character, any> => null;
type `withPrivateSeed` <character> => character;
type `withTags` <any> => class<`shiny.tag`>;
type `withTemporary` <environment, character, any, character, logical> => character;
type `writeImpl` <character> => character;
type `WSTextWriter` <double> => list<class<`function`>>;
