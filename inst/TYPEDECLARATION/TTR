type `filter` <character[]> => logical[];
type `ADX` <struct<`High`:double[], `Low`:double[], `Close`:double[]> | ^double[], double, null | character, null | logical> => ^double[];
type `ALMA` <double[], double, double, double, null> => double[];
type `aroon` <struct<`High`:double[], `Low`:double[]> | ^double[], double> => ^double[];
type `ATR` <struct<`High`:double[], `Low`:double[], `Close`:double[]> | ^double[], double, null | character, null | logical> => ^double[];
type `BBands` <struct<`High`:double[], `Low`:double[], `Close`:double[]> | double[], double, null, double, null> => ^double[];
type `CCI` <^double[] | struct<>, double, null, double, null> => ^double[];
type `chaikinAD` <struct<`High`:double[], `Low`:double[], `Close`:double[]>, double[]> => double[];
type `chaikinVolatility` <struct<`High`:double[], `Low`:double[]> | ^double[], double, null, null> => ^double[];
type `CLV` <^double[] | struct<>> => struct<`clv`:^double[]> | ^double[];
type `CMF` <struct<`High`:double[], `Low`:double[], `Close`:double[]>, ^double[], double> => ^double[];
type `CMO` <^double[], double> => ^double[];
type `DonchianChannel` <struct<`High`:double[], `Low`:double[]>, double, logical> => ^double[];
type `DPO` <^double[], double, null, double, logical, null> => ^double[];
type `DVI` <double[], double, double[], double, double[], double[], double> => ^double[];
type `EMV` <struct<`High`:double[], `Low`:double[]>, double[], double, null, double, null> => ^double[];
type `EVWMA` <^double[], ^double[], double, null> => ^double[];
type `FUN` <double[]> => ^double[];
type `GMMA` <double[], double[], double[], null> => ^double[];
type `HMA` <double[], double, null> => ^double[];
type `MFI` <struct<`High`:double[], `Low`:double[], `Close`:double[]>, ^double[], double> => ^double[];
type `momentum` <^double[], double, logical> => ^double[];
type `naCheck` <^double[], double> => struct<`NAs`:integer, `nonNA`:integer[], `beg`:double>;
type `OBV` <double[], double[]> => double[];
type `PBands` <double[], double, character, double, null, double, logical, logical> => ^double[];
type `ROC` <^double[], double, character[], logical> => struct<`Close`:^double[]>;
type `RSI` <^double[], double, null | character | struct<`maUp`:struct<``:any => any, `ratio`:double>, `maDown`:struct<``:any => any, `wts`:integer[]>>, null | double[]> => ^double[];
type `runCov` <^double[], ^double[], double, character | symbol, logical, logical> => ^double[];
type `runMAD` <^double[], double, null | ^double[], character, double, character, logical> => ^double[];
type `runMax` <^double[], double, logical> => ^double[];
type `runMedian` <^double[], double, character, logical> => ^double[];
type `runMin` <^double[], double, logical> => ^double[];
type `runPercentRank` <^double[], double, logical, double> => ^double[];
type `runSum` <^double[], double, logical> => struct<`x`:^double[]> | ^double[];
type `SAR` <struct<`High`:double[], `Low`:double[]>, double[]> => ^double[];
type `SMI` <struct<`High`:double[], `Low`:double[], `Close`:double[]>, double, double, double, double, tuple<tuple<any => any>, struct<``:any => any, `wilder`:logical>, tuple<any => any>> | null, logical, null> => ^double[];
type `stoch` <struct<`High`:double[], `Low`:double[], `Close`:double[]> | ^double[], double, double, double, tuple<tuple<any => any>, struct<``:any => any, `wilder`:logical>, tuple<any => any>> | null, logical, double, null> => ^double[];
type `TDI` <double[], double, double> => ^double[];
type `ultimateOscillator` <^double[] | struct<>, double[], double[]> => ^double[];
type `VHF` <struct<`High`:double[], `Low`:double[], `Close`:double[]> | double[], double> => ^double[];
type `volatility` <struct<`Open`:double[], `High`:double[], `Low`:double[], `Close`:double[]>, double, character, double, logical, null> => struct<`x`:^double[]> | ^double[];
type `wilderSum` <^double[], double> => ^double[];
type `williamsAD` <struct<`High`:double[], `Low`:double[], `Close`:double[]>> => ^double[];
type `WMA` <^double[], double, ^double[], null> => ^double[];
type `WPR` <struct<`High`:double[], `Low`:double[], `Close`:double[]>, double> => ^double[];
type `ZigZag` <struct<`High`:double[], `Low`:double[]>, double, logical, logical, logical> => ^double[];
type `ZLEMA` <^double[], double, null, null> => ^double[];
