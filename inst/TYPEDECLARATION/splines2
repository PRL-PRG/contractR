type `bSpline` <^double[], null | integer, double[], double, logical, double[], ...> => class<`bSpline2`, `matrix`>;
type `cSpline` <^double[], null, double[], double, logical, double[], logical, ...> => class<`cSpline`, `matrix`>;
type `dbs` <^double[], integer, null, double[], double, logical, double[], ...> => class<`dbs`, `matrix`>;
type `deriv.bSpline2` <class<`bSpline2`, `matrix`>, integer, ...> => class<`dbs`, `matrix`>;
type `deriv.cSpline` <class<`cSpline`, `matrix`>, double, ...> => (class<`iSpline`, `matrix`> | class<`mSpline`, `matrix`>);
type `deriv.ibs` <class<`ibs`, `matrix`>, integer, ...> => (class<`bSpline2`, `matrix`> | class<`dbs`, `matrix`>);
type `deriv.iSpline` <class<`iSpline`, `matrix`>, double, ...> => class<`mSpline`, `matrix`>;
type `deriv.mSpline` <class<`iSpline`, `matrix`> | class<`mSpline`, `matrix`>, integer, ...> => class<`mSpline`, `matrix`>;
type `filter` <character[]> => logical[];
type `FUN` <integer, integer[]> => double[] | <^double[]> => ^double[] | <integer> => double[] | <integer, integer[]> => double[] | <integer> => double[] | <integer, integer[]> => double[] | <integer> => class<`matrix`>;
type `ibs` <^double[], null, double[], double, logical, double[], ...> => class<`ibs`, `matrix`>;
type `iSpline` <^double[], null, double[], double, logical, double[], double, ...> => (class<`iSpline`, `matrix`> | class<`mSpline`, `matrix`>);
type `mSpline` <^double[], null | integer, double[], double, logical, double[], double, ...> => class<`mSpline`, `matrix`>;
type `pieceConst` <any, null, double[], double[], logical> => list<double[]>;
type `predict.bSpline2` <class<`bSpline2`, `matrix`>, double[], ...> => class<`bSpline2`, `matrix`>;
type `predict.cSpline` <class<`cSpline`, `matrix`>, double[], ...> => class<`cSpline`, `matrix`>;
type `predict.dbs` <class<`dbs`, `matrix`>, double[], ...> => class<`dbs`, `matrix`>;
type `predict.ibs` <class<`ibs`, `matrix`>, double[], ...> => class<`ibs`, `matrix`>;
type `predict.iSpline` <class<`iSpline`, `matrix`>, double[], ...> => class<`iSpline`, `matrix`>;
type `predict.mSpline` <class<`mSpline`, `matrix`>, double[], ...> => class<`mSpline`, `matrix`>;
