type `as.Surv` <class<`data.frame`, `response`>> => class<`Surv`>;
type `as.Surv.response` <class<`data.frame`, `response`>> => class<`Surv`>;
type `as.vars.ctm` <class<`ctm`>> => class<`vars`>;
type `bounds.ctm` <class<`ctm`>> => (list<class<`factor`, `ordered`> | double[]> | list<double[] | null> | list<double[]>);
type `.checkR` <class<`data.frame`, `response`>, double[] | null> => logical;
type `.cinterval` <class<`data.frame`, `response`>> => logical[];
type `.cleft` <class<`data.frame`, `response`>> => logical[];
type `coef<-` <class<`ctm`> | class<`mlt`, `mlt_setup`>, double[]> => (class<`ctm`> | class<`mlt`, `mlt_setup`>);
type `coef<-.ctm` <class<`ctm`>, double[]> => class<`ctm`>;
type `coef.ctm` <class<`ctm`>, ...> => ^double[];
type `coef<-.mlt` <class<`mlt`, `mlt_setup`>, double[]> => class<`mlt`, `mlt_setup`>;
type `coef.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`> | class<`mlt`, `mlt_setup`>, logical, ...> => (double[] | ^logical[]);
type `.cright` <class<`data.frame`, `response`>> => logical[];
type `ctm` <class<`basis`, `formula_basis`, `function`> | class<`basis`, `function`, `polynomial_basis`> | class<`Bernstein_basis`, `basis`, `function`> | class<`formula`>, class<`basis`, `formula_basis`, `function`> | null | class<`Bernstein_basis`, `basis`, `function`> | class<`bases`, `box_bases`> | class<`bases`, `cbind_bases`>, null | class<`basis`, `formula_basis`, `function`> | class<`basis`, `function`, `intercept_basis`> | class<`formula`> | class<`Bernstein_basis`, `basis`, `function`>, null | class<`data.frame`>, character[], any, ...> => class<`ctm`>;
type `.dealinf` <class<`matrix`>, any, any, any, double, any> => (class<`matrix`> | double[]);
type `description` <class<`mlt`, `mlt_fit`, `mlt_setup`>> => character;
type `.distr` <character[]> => list<class<`function`> | character>;
type `dmlt` <class<`ctm`>, list<class<`factor`, `ordered`> | integer[]> | list<double[] | class<`factor`>> | class<`data.frame`>, null | class<`factor`, `ordered`>, logical, ...> => (class<`array`> | class<`matrix`>);
type `estfun.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>, class<`matrix`> | double[], null, any, ...> => class<`matrix`>;
type `.exact` <class<`data.frame`, `response`>> => logical[];
type `.exact_subset` <logical[], null | integer[]> => (list<integer[]> | list<integer[] | null> | list<null | integer[]>);
type `.frmt` <class<`factor`, `ordered`> | double[] | class<`factor`>> => character[];
type `Hessian` <class<`mlt`, `mlt_fit`, `mlt_setup`>, ...> => class<`matrix`>;
type `Hessian.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>, double[], ...> => class<`matrix`>;
type `.is.formula` <class<`bases`, `box_bases`> | class<`bases`, `cbind_bases`> | class<`basis`, `formula_basis`, `function`> | class<`basis`, `function`, `intercept_basis`> | class<`basis`, `function`, `polynomial_basis`> | class<`Bernstein_basis`, `basis`, `function`> | class<`formula`> | null> => logical;
type `.is.R` <class<`data.frame`, `response`> | class<`factor`, `ordered`> | double[]> => logical;
type `.is.Surv` <class<`factor`, `ordered`> | double[]> => logical;
type `.log` <class<`matrix`> | double[]> => double[];
type `.Logistic` < > => list<class<`function`> | character>;
type `logLik.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>, class<`matrix`> | double[], null, any, ...> => class<`logLik`>;
type `.MaxExtrVal` < > => list<class<`function`> | character>;
type `.MinExtrVal` < > => list<class<`function`> | character>;
type `mkgrid.ctm` <class<`ctm`>, double, ...> => (list<double[]> | list<class<`factor`, `ordered`> | class<`factor`>> | list<class<`factor`, `ordered`> | double[]> | list<class<`factor`, `ordered`> | double> | list<class<`factor`, `ordered`> | integer[] | double> | list<class<`factor`> | double> | list<double[] | class<`factor`>> | list<double | class<`factor`>> | list<double | integer[]>);
type `mkgrid.mlt` <class<`mlt`, `mlt_setup`> | class<`mlt`, `mlt_fit`, `mlt_setup`>, double, ...> => (list<double[] | class<`factor`>> | list<double[]>);
type `.mkR` <...> => class<`data.frame`, `response`>;
type `mlt` <class<`ctm`>, class<`data.frame`>, null | double[], null | double[], null | double[], null | double[], null, logical> => (class<`mlt`, `mlt_fit`, `mlt_setup`> | class<`mlt`, `mlt_setup`>);
type `.mlt_fit` <class<`mlt`, `mlt_setup`>, double[], integer[] | null, double[], double[], logical, list<class<`function`>>, ...> => class<`mlt`, `mlt_fit`, `mlt_setup`>;
type `.mlt_hessian_exact` <double[]> => class<`matrix`> | <any, any, any, any, any, any> => class<`function`>;
type `..mlt_hessian_interval` <list<class<`function`> | character>, class<`matrix`>, class<`matrix`>, double[], double[], double[]> => class<`matrix`>;
type `.mlt_hessian_interval` <double[]> => class<`matrix`> | <any, any, any, any, null | list<class<`matrix`>>, any> => class<`function`> | <double[]> => class<`matrix`>;
type `.mlt_loglik_exact` <any, any, any, any, null | list<class<`matrix`>>> => class<`function`> | <double[]> => class<`matrix`> | <double[] | class<`matrix`>> => (class<`matrix`> | double[]);
type `..mlt_loglik_interval` <list<class<`function`> | character>, class<`matrix`>, class<`matrix`>, double[], double[]> => double[];
type `.mlt_loglik_interval` <double[]> => double[] | <any, any, any, any, null | list<class<`matrix`>>> => class<`function`> | <double[]> => double[];
type `mltoptim` <list<double>, list<double>, null, logical> => list<class<`function`>>;
type `.mlt_score_exact` <double[] | class<`matrix`>, logical> => class<`matrix`> | <any, any, any, any, any> => class<`function`>;
type `..mlt_score_interval` <list<class<`function`> | character>, class<`matrix`>, class<`matrix`>, double[], double[], logical> => class<`matrix`>;
type `.mlt_score_interval` <any, any, any, any, null | list<class<`matrix`>>> => class<`function`> | <double[], logical> => class<`matrix`> | <double[], logical> => class<`matrix`>;
type `.mlt_setup` <class<`ctm`>, class<`data.frame`>, class<`data.frame`, `response`>, double[], double[] | null> => class<`mlt`, `mlt_setup`>;
type `.mlt_start` <class<`ctm`>, class<`data.frame`>, class<`data.frame`, `response`>, double[], any, null | double[], double[]> => double[];
type `.mm_exact` <any, any, any, class<`data.frame`, `response`>> => (null | list<class<`matrix`> | null | integer[]> | list<class<`matrix`> | integer[] | list<class<`matrix`>>>);
type `.mm_interval` <any, any, any, class<`data.frame`, `response`>> => (null | list<class<`matrix`> | null | integer[]> | list<class<`matrix`> | integer[] | list<class<`matrix`>>>);
type `model` <class<`ctm`> | class<`mlt`, `mlt_fit`, `mlt_setup`>> => list<any>;
type `model.ctm` <class<`ctm`>> => list<any>;
type `model.matrix.ctm` <class<`ctm`>, class<`data.frame`>, ...> => class<`matrix`>;
type `model.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>> => list<any>;
type `.Normal` < > => list<class<`function`> | character>;
type `.one_factor_only` <class<`Bernstein_basis`, `basis`, `function`>> => logical;
type `.p2q` <class<`matrix`>, double[] | class<`factor`, `ordered`>, double[], any, logical, any> => (class<`data.frame`, `response`> | class<`factor`, `ordered`> | double[]);
type `plot.ctm` <class<`ctm`>, class<`data.frame`>, character[], null, any, double, character, double> => class<`matrix`>;
type `plot.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>, ...> => class<`matrix`>;
type `pmlt` <class<`ctm`>, list<class<`factor`, `ordered`> | integer[]> | list<double[] | class<`factor`>> | list<double[]> | class<`data.frame`>, null | double[] | class<`factor`, `ordered`>, ...> => (class<`array`> | class<`matrix`>);
type `predict.ctm` <class<`ctm`>, list<double[]> | list<class<`factor`, `ordered`> | integer[]> | list<double[] | class<`factor`>> | class<`data.frame`>, character[], character[], null | double[] | class<`factor`, `ordered`>, any, double, logical> => (class<`array`> | class<`factor`, `ordered`> | class<`matrix`> | double[]);
type `predict.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`> | class<`mlt`, `mlt_setup`>, list<double[]> | list<class<`factor`, `ordered`> | integer[]> | list<double[] | class<`factor`>> | class<`data.frame`>, ...> => (class<`array`> | class<`factor`, `ordered`> | class<`matrix`> | double[]);
type `qmlt` <class<`ctm`>, list<integer[]> | list<double[] | class<`factor`>> | class<`data.frame`>, double[] | null, double[], any, any, ...> => (class<`array`> | class<`factor`, `ordered`> | class<`matrix`>);
type `R` <any, ...> => class<`data.frame`, `response`>;
type `R.factor` <class<`factor`>, ...> => class<`data.frame`, `response`>;
type `R.list` <list<double[]>, ...> => class<`data.frame`, `response`>;
type `R.logical` <^double[] | null, ^double[] | null, ^double[] | null, null | double[], null | double[], any, ...> => class<`data.frame`, `response`>;
type `R.numeric` <^double[] | null, ^double[] | null, ^double[] | null, null | double[], null | double[], any, ...> => class<`data.frame`, `response`>;
type `R.ordered` <class<`factor`, `ordered`>, null, null, ...> => class<`data.frame`, `response`>;
type `R.response` <class<`data.frame`, `response`>, ...> => class<`data.frame`, `response`>;
type `R.Surv` <class<`Surv`>, ...> => class<`data.frame`, `response`>;
type `simulate.ctm` <class<`ctm`>, double, double | null, class<`data.frame`>, double, null, logical, any> => (class<`data.frame`, `response`> | list<class<`factor`, `ordered`>> | list<double[]>);
type `simulate.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>, double, double | null, class<`data.frame`>, logical, ...> => (class<`data.frame`, `response`> | list<class<`factor`, `ordered`>> | list<double[]>);
type `smlt` <class<`ctm`>, class<`data.frame`>, double[], ...> => class<`matrix`>;
type `summary.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>, ...> => class<`summary.mlt`>;
type `.tinterval` <class<`data.frame`, `response`>> => logical[];
type `.tleft` <class<`data.frame`, `response`>> => logical[];
type `tmlt` <class<`ctm`>, list<double[]> | list<class<`factor`, `ordered`> | integer[]> | list<double[] | class<`factor`>> | class<`data.frame`>, null | double[] | class<`factor`, `ordered`>, ...> => (class<`array`> | class<`matrix`> | double[]);
type `.tright` <class<`data.frame`, `response`>> => logical[];
type `.type_of_response` <class<`factor`, `ordered`> | double[]> => character;
type `update.mlt_fit` <class<`mlt`, `mlt_fit`, `mlt_setup`>, double[], integer[] | null, double[], double[], ...> => class<`mlt`, `mlt_fit`, `mlt_setup`>;
type `variable.names.ctm` <class<`ctm`>, character[], ...> => character[];
type `vcov.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>, double[], logical, ...> => class<`matrix`>;
type `.wecdf` <double[], double[]> => class<`function`>;
type `weights.mlt` <class<`mlt`, `mlt_fit`, `mlt_setup`>, ...> => double[];
type `.xmb` <class<`matrix`>, double[] | class<`matrix`>> => (class<`matrix`> | double[]);
