type `as_factor.character` <character[], null> => integer[];
type `check_factor` <^integer[] | character[]> => ^integer[];
type `check_factor_list` <tuple<integer, integer, integer[]> | struct<``:integer, ``:integer, ``:integer[]>, character> => tuple<integer, integer, integer[]> | struct<``:integer, ``:integer, ``:integer[]>;
type `check_recode_levels` <character | language> => character[];
type `check_weights` <double[], integer> => double[];
type `digits` <integer[]> => integer;
type `f` <character[], integer[]> => character[];
type `fct_anon` <integer[], character> => integer[];
type `fct_c` <language | symbol> => integer[];
type `fct_collapse` <integer[], language, logical> => integer[];
type `fct_count` <integer[], logical, logical> => struct<`f`:integer[], `n`:integer[]>;
type `fct_cross` <integer[], symbol, character, logical> => integer[];
type `fct_drop` <integer[], character | null> => integer[];
type `fct_expand` <^integer[], symbol | character | language> => ^integer[];
type `fct_explicit_na` <^integer[], character> => integer[];
type `fct_infreq` <integer[], null> => integer[];
type `fct_inorder` <character[] | integer[], null | logical> => integer[];
type `fct_inseq` <integer[], null> => integer[];
type `fct_lump` <character[] | integer[], double | null, null | double, null | double[], character, character[]> => integer[];
type `fct_lump_min` <integer[], double, null, character> => integer[];
type `fct_match` <integer[], character[]> => logical[];
type `fct_other` <integer[], character[] | null, null | character[], character> => integer[];
type `fct_recode` <integer[], character | language> => ^integer[];
type `fct_relabel` <integer[], any => any | language, null> => integer[];
type `fct_relevel` <integer[], character[] | any => any | null, double> => integer[];
type `fct_reorder` <integer[] | character[], double[], any => any, null, logical> => integer[];
type `fct_rev` <integer[]> => integer[];
type `fct_shift` <integer[], double> => integer[];
type `fct_shuffle` <integer[]> => integer[];
type `fct_unify` <tuple<integer, integer, integer[]> | struct<``:integer, ``:integer, ``:integer[]>, character[]> => tuple<integer, integer, integer[]> | struct<``:integer, ``:integer, ``:integer[]>;
type `fct_unique` <integer[]> => integer[];
type `filter` <character[]> => logical[];
type `FUN` <integer[] | character[], character[], double> => integer[];
type `in_smallest` <integer[]> => logical[];
type `lvls_expand` <^integer[], character[]> => ^integer[];
type `lvls_reorder` <integer[], double[], null | logical> => integer[];
type `lvls_revalue` <^integer[], character[]> => ^integer[];
type `lvls_seq` <integer[]> => integer[];
type `lvls_union` <tuple<integer, integer, integer[]> | struct<``:integer, ``:integer, ``:integer[]>> => character[];
type `refactor` <^integer[], character[] | double[], null | logical> => ^integer[];
type `shift` <integer, double> => double[];
type `zero_pad` <integer[]> => character[];
type `::` <integer[], double[], any => any, null, logical> => integer[];
