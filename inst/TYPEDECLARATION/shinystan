type `filter` <character[]> => logical[];
type `fun` <symbol, symbol> => null;
type `.drop_parameters` < > => integer[];
type `.set_param_dims` <struct<`mu`:double[], `theta`:double, `tau`:double[], `log-posterior`:double[], `tau_sq`:double[]>, symbol> => struct<`mu`:double[], `theta`:double, `tau`:double[], `log-posterior`:double[], `tau_sq`:double[]>;
type `.sp_check` < > => null;
type `.which_rows` <logical> => integer[];
type `as.shinystan` <character> => double[];
type `drop_parameters` < > => character[];
type `ess_rfun` <^double[]> => double;
type `FUN` <^double[]> => double[];
type `generate_quantity` <character | null, character | any => any, character> => character;
type `grepl_ic` <character, character, logical> => logical;
type `is.shinystan` < > => logical;
type `model_code` < > => character;
type `model_name` < > => character;
type `notes` <logical> => character;
type `retrieve` <character, null | logical | character[]> => ^double[];
type `retrieve_max_treedepth` <logical> => double[];
type `retrieve_mean` <character[]> => double[];
type `retrieve_prop_divergent` <logical> => double[];
type `shinystan` < > => character;
type `shinystan_monitor` <double[], double, double[], double> => ^double[];
type `split_rhat_rfun` <^double[]> => double;
type `sso_check` < > => logical;
type `sso_info` < > => null;
type `sso_version` < > => tuple<integer[]>;
type `validate_model_code` <null | character> => logical;
