type `filter` <character[]> => logical[];
type `fun` <symbol, symbol> => null | list<character | any => any>;
type `register_s3_method` <character, character, character, null> => null;
type `.subset2` <any => any, double> => any => any;
type `[.spec_tbl_df` <struct<`mpg`:character[], `cyl`:character[], `disp`:character[], `hp`:character[], `drat`:character[], `wt`:character[], `qsec`:character[], `vs`:character[], `am`:character[], `gear`:character[], `carb`:character[]>, integer[] | character[]> => struct<`mpg`:character[], `cyl`:character[], `disp`:character[], `hp`:character[], `drat`:character[], `wt`:character[], `qsec`:character[], `vs`:character[], `am`:character[], `gear`:character[], `carb`:character[]>;
type `%||%` <null | character[], language | character[] | logical> => character[] | logical;
type `$` < > => null | tuple<> | list<double[]> | struct<> | double;
type `as_chunk_callback.ChunkCallback` <environment> => environment;
type `as_chunk_callback.function` <any => any> => environment;
type `as.col_spec.character` <character> => struct<`cols`:tuple<tuple<>, tuple<>>, `default`:tuple<>> | struct<`cols`:list<tuple<>>, `default`:tuple<>>;
type `as.col_spec.col_spec` <struct<`cols`:tuple<>, `default`:tuple<>> | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>>> => struct<`cols`:tuple<>, `default`:tuple<>> | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>>;
type `as.col_spec.list` <tuple<tuple<>>> => struct<`cols`:tuple<tuple<>>, `default`:tuple<>>;
type `as.col_spec.NULL` <null> => struct<`cols`:tuple<>, `default`:tuple<>>;
type `check_callback_fun` <any => any, double, null | character> => null;
type `check_guess_max` <double, double> => double;
type `col_character` < > => tuple<>;
type `col_date` <character> => struct<`format`:character>;
type `col_datetime` <character> => struct<`format`:character>;
type `col_double` < > => tuple<>;
type `col_factor` <null | character[], logical, logical> => struct<`levels`:character[], `ordered`:logical, `include_na`:logical> | struct<`levels`:null, `ordered`:logical, `include_na`:logical>;
type `col_guess` < > => tuple<>;
type `col_integer` < > => tuple<>;
type `col_logical` < > => tuple<>;
type `col_number` < > => tuple<>;
type `col_skip` < > => tuple<>;
type `col_spec` <tuple<> | tuple<tuple<>> | list<tuple<>> | struct<`a`:tuple<>> | struct<`column_one`:tuple<>, `column_two`:tuple<>> | struct<`column_three`:tuple<>> | struct<`x`:tuple<>, `y`:struct<`format`:character>>, tuple<>> => struct<`cols`:tuple<>, `default`:tuple<>> | struct<`cols`:tuple<tuple<>>, `default`:tuple<>> | struct<`cols`:list<tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`a`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`column_one`:tuple<>, `column_two`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`column_three`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>>;
type `col_spec_standardise` <character | null | struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, logical | character[], null | struct<`cols`:tuple<>, `default`:tuple<>> | tuple<tuple<>> | character | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>>, null | struct<`mpg`:character, `cyl`:character, `disp`:character, `hp`:character, `drat`:character, `wt`:character, `qsec`:character, `vs`:character, `am`:character, `gear`:character, `carb`:character> | struct<`x`:character>, character, double, logical | symbol, double | symbol, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical> | struct<`begin`:integer[], `end`:^integer[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | language | struct<`begin`:double[], `end`:double[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | tuple<>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character> | language, logical> => struct<`cols`:struct<`a`:tuple<>, `b`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`first`:tuple<>, `last`:tuple<>, `state`:tuple<>, `ssn`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`name`:tuple<>, `ssn`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`UCC`:tuple<>, `PAY`:tuple<>, `LAZ`:tuple<>, `KPK`:tuple<>, `RT`:tuple<>, `COF`:tuple<>, `BIH`:tuple<>, `DII`:tuple<>, `ENG`:tuple<>, `ACU`:tuple<>, `Rank`:tuple<>, `Team`:tuple<>, `Conf`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`x`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`X1`:tuple<>, `X2`:tuple<>, `X3`:tuple<>, `X4`:tuple<>, `X5`:tuple<>, `X6`:tuple<>, `X7`:tuple<>>, `default`:tuple<>, `skip`:double>;
type `col_time` <character> => struct<`format`:character>;
type `collector` <character, null | null | character[]> => tuple<> | struct<`format`:character> | struct<`levels`:character[], `ordered`:logical, `include_na`:logical> | struct<`levels`:null, `ordered`:logical, `include_na`:logical>;
type `collector_find` <character> => tuple<> | struct<`format`:character>;
type `collectorGuess` <^character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => character;
type `cols` <null | character | tuple<>, tuple<>> => struct<`cols`:tuple<>, `default`:tuple<>> | struct<`cols`:struct<`a`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`column_one`:tuple<>, `column_two`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`column_three`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>>;
type `cols_condense` <struct<`cols`:struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>, `skip`:double>> => struct<`cols`:tuple<>, `default`:tuple<>, `skip`:double>;
type `cols_only` <tuple<>> => struct<`cols`:struct<`a`:tuple<>>, `default`:tuple<>>;
type `count_fields` <character, struct<`delim`:character, `quote`:character, `na`:character, `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, double, integer> => integer[];
type `count_fields_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`delim`:character, `quote`:character, `na`:character, `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, integer> => integer[];
type `datasource` <character | struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character> | integer | raw[], double, logical | symbol, character> => struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character> | struct<``:raw[], `skip`:double, `skip_empty_rows`:logical, `comment`:character>;
type `datasource_connection` <integer, double, logical, character> => struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character, `env`:environment>;
type `datasource_file` <character, double, logical, character, null | environment> => struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>;
type `datasource_raw` <raw[], double, logical, character> => struct<``:raw[], `skip`:double, `skip_empty_rows`:logical, `comment`:character>;
type `datasource_string` <character, double, logical, character> => struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>;
type `date_names` <character[], character[], character[], character[], character[]> => struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>;
type `date_names_lang` <character> => struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>;
type `default_locale` < > => struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>;
type `empty_file` <character> => logical;
type `format_csv` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, logical, logical, character> => character;
type `format_delim` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, character, logical | symbol, logical, character> => character;
type `format_tsv` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, logical, logical, character> => character;
type `format.col_spec` <struct<`cols`:struct<`first`:tuple<>, `last`:tuple<>, `state`:tuple<>, `ssn`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`name`:tuple<>, `ssn`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`UCC`:tuple<>, `PAY`:tuple<>, `LAZ`:tuple<>, `KPK`:tuple<>, `RT`:tuple<>, `COF`:tuple<>, `BIH`:tuple<>, `DII`:tuple<>, `ENG`:tuple<>, `ACU`:tuple<>, `Rank`:tuple<>, `Team`:tuple<>, `Conf`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`x`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`X1`:tuple<>, `X2`:tuple<>, `X3`:tuple<>, `X4`:tuple<>, `X5`:tuple<>, `X6`:tuple<>, `X7`:tuple<>>, `default`:tuple<>, `skip`:double>, double, null, logical, null> => character;
type `FUN` <integer | character[] | tuple<> | struct<`format`:character>, null, character> => ^double[] | character | tuple<> | struct<`format`:character>;
type `fwf_col_names` <null | character[], integer> => character[];
type `fwf_cols` <double[]> => struct<`begin`:integer[], `end`:integer[], `col_names`:character[]>;
type `fwf_empty` <character | struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, double, logical | symbol, null | character[], character, double> => struct<`begin`:integer[], `end`:^integer[], `skip`:integer, `col_names`:character[]>;
type `fwf_positions` <double[], double[], character[]> => struct<`begin`:double[], `end`:double[], `col_names`:character[]>;
type `fwf_widths` <double[], character[]> => struct<`begin`:double[], `end`:double[], `col_names`:character[]>;
type `get` <character> => struct<`format`:character> | tuple<>;
type `guess_encoding` <character, double, double> => struct<`encoding`:character[], `confidence`:double[]>;
type `guess_header` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`begin`:integer[], `end`:^integer[], `na`:character, `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical> | tuple<>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>> => struct<`header`:^character[], `skip`:double>;
type `guess_header_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`begin`:integer[], `end`:^integer[], `na`:character, `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical> | tuple<>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>> => struct<`header`:^character[], `skip`:double>;
type `guess_parser` <^character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => character;
type `guess_types` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, tuple<> | struct<`begin`:double[], `end`:double[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`begin`:integer[], `end`:^integer[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, double> => character[];
type `guess_types_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, tuple<> | struct<`begin`:double[], `end`:double[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`begin`:integer[], `end`:^integer[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double> => character[];
type `is_integerish` <double> => logical;
type `is_syntactic` <character> => logical;
type `is_url` <character> => logical;
type `is.collector` <tuple<>> => logical;
type `is.connection` <character | integer | raw[]> => logical;
type `is.date_names` <struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>> => logical;
type `is.locale` <struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>> => logical;
type `locale` <character | struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, character, character, character, character, character, character, logical> => struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>;
type `melt_csv` <character, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, double, logical, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:^character[]>;
type `melt_csv_chunked` <character, environment, double, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, logical, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:character[]>;
type `melt_csv2` <character, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, double, logical, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:character[]>;
type `melt_delim` <character, character, character, logical, logical, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, logical, double, double, logical, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:character[]>;
type `melt_delimited` <character, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, logical, character, double, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:^character[]>;
type `melt_delimited_chunked` <character, environment, double, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, logical, character, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:character[]>;
type `melt_fwf` <character, struct<`begin`:double[], `end`:double[], `col_names`:character[]> | struct<`begin`:integer[], `end`:^integer[], `skip`:integer, `col_names`:character[]>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], character, logical, double, double, logical, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:character[]>;
type `melt_table` <character, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character, double, double, double, logical, character, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:character[]>;
type `melt_tokens` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`begin`:double[], `end`:double[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`begin`:integer[], `end`:^integer[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:^character[]>;
type `melt_tokens_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`begin`:double[], `end`:double[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`begin`:integer[], `end`:^integer[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, struct<`row`:tuple<>, `col`:tuple<>, `data_type`:tuple<>, `value`:tuple<>>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:^character[]>;
type `melt_tokens_chunked_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, environment, double, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, struct<`row`:tuple<>, `col`:tuple<>, `data_type`:tuple<>, `value`:tuple<>>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => null;
type `melt_tsv` <character, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, double, logical, logical> => struct<`row`:double[], `col`:double[], `data_type`:character[], `value`:character[]>;
type `n_problems` <null | character | struct<> | ^double[]> => double;
type `name_problems` <struct<`x`:^double[]>, character[], character> => struct<`x`:^double[]>;
type `new_datasource` <character, character | raw[], double, logical, character, null | environment> => struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character> | struct<``:raw[], `skip`:double, `skip_empty_rows`:logical, `comment`:character>;
type `output_column.default` <integer[]> => character[];
type `output_column.double` <^double[]> => ^double[];
type `output_column.POSIXt` <double> => character;
type `parse_character` <character, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => character;
type `parse_date` <character, character, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => double;
type `parse_datetime` <character[], character, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => null | ^double[];
type `parse_double` <character[], character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => ^double[];
type `parse_factor` <character[], null | character[], logical, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical, logical> => ^integer[];
type `parse_guess` <character[], character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical, logical> => character | double[];
type `parse_integer` <character[], character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => ^integer[];
type `parse_logical` <character[], character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => logical[];
type `parse_number` <character[], character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => double[];
type `parse_time` <character, character, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => double;
type `parse_vector` <^character[], character | tuple<> | struct<`format`:character> | struct<`levels`:character[], `ordered`:logical, `include_na`:logical> | struct<`levels`:null, `ordered`:logical, `include_na`:logical>, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => null | character | ^double[];
type `parse_vector_` <^character[], tuple<> | struct<`format`:character> | struct<`levels`:character[], `ordered`:logical, `include_na`:logical> | struct<`levels`:null, `ordered`:logical, `include_na`:logical>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical> => null | character | ^double[];
type `problems` <struct<`x`:double[], `y`:^logical[]> | ^integer[]> => struct<`row`:integer[], `col`:character[], `expected`:character[], `actual`:character[], `file`:character[]>;
type `probs` <null | struct<`x`:double[], `y`:^logical[]> | ^double[] | character> => null | struct<`row`:integer[], `col`:character[], `expected`:character[], `actual`:character[], `file`:character[]>;
type `read_connection` <integer> => character;
type `read_connection_` <integer, character, double> => character;
type `read_csv` <character, logical, null | struct<`cols`:tuple<>, `default`:tuple<>> | tuple<tuple<>> | character | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, double, double | language, logical, logical> => struct<`a`:double, `b`:double>;
type `read_csv_chunked` <character, environment, double, logical, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, double, logical, logical> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | double | list<double[]>;
type `read_csv2` <character, logical, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, double, double, logical, logical> => struct<`a`:double, `b`:double>;
type `read_delim` <character, character, character, logical, logical, logical, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, logical, double, double, double, logical, logical> => struct<`a`:double, `b`:double>;
type `read_delimited` <character, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical> | tuple<>, logical, null | struct<`cols`:tuple<>, `default`:tuple<>> | tuple<tuple<>> | character | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, logical, character, double, double | symbol, logical> => struct<`a`:double, `b`:double>;
type `read_delimited_chunked` <character, environment, double, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, logical, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, logical, character, double, logical> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | double | list<double[]>;
type `read_file` <character, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>> => character;
type `read_file_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>> => character;
type `read_file_raw` <character> => raw[];
type `read_file_raw_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>> => raw[];
type `read_fwf` <character, struct<`begin`:integer[], `end`:^integer[], `skip`:integer, `col_names`:character[]> | struct<>, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], character, logical, double, double, double, logical, logical> => struct<`first`:character[], `last`:character[], `state`:character[], `ssn`:character[]>;
type `read_lines` <character, double, logical, double, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical> => character[];
type `read_lines_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], double, logical, logical> => character[];
type `read_lines_chunked_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], double, environment, logical, logical> => null;
type `read_lines_raw` <character, double, double, logical> => tuple<raw[]> | list<raw[]>;
type `read_lines_raw_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, double, logical> => tuple<raw[]> | list<raw[]>;
type `read_log` <character, logical, null, double, double, logical> => struct<`X1`:character[], `X2`:^logical[], `X3`:character[], `X4`:character[], `X5`:character[], `X6`:double[], `X7`:double[]>;
type `read_rds` <character> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `read_table` <character, logical, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character, double, double, double, logical, character, logical> => struct<`UCC`:double[], `PAY`:double[], `LAZ`:double[], `KPK`:double[], `RT`:double[], `COF`:double[], `BIH`:double[], `DII`:double[], `ENG`:double[], `ACU`:double[], `Rank`:double[], `Team`:character[], `Conf`:character[]>;
type `read_tokens` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical> | struct<`begin`:integer[], `end`:^integer[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`begin`:double[], `end`:double[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | tuple<>, struct<`a`:tuple<>, `b`:tuple<>> | struct<`first`:tuple<>, `last`:tuple<>, `state`:tuple<>, `ssn`:tuple<>> | struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>> | struct<`name`:tuple<>, `ssn`:tuple<>> | struct<`UCC`:tuple<>, `PAY`:tuple<>, `LAZ`:tuple<>, `KPK`:tuple<>, `RT`:tuple<>, `COF`:tuple<>, `BIH`:tuple<>, `DII`:tuple<>, `ENG`:tuple<>, `ACU`:tuple<>, `Rank`:tuple<>, `Team`:tuple<>, `Conf`:tuple<>> | struct<`x`:tuple<>> | struct<`X1`:tuple<>, `X2`:tuple<>, `X3`:tuple<>, `X4`:tuple<>, `X5`:tuple<>, `X6`:tuple<>, `X7`:tuple<>>, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, logical> => struct<`a`:double, `b`:double>;
type `read_tokens_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical> | struct<`begin`:integer[], `end`:^integer[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`begin`:double[], `end`:double[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | tuple<>, struct<`a`:tuple<>, `b`:tuple<>> | struct<`first`:tuple<>, `last`:tuple<>, `state`:tuple<>, `ssn`:tuple<>> | struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>> | struct<`name`:tuple<>, `ssn`:tuple<>> | struct<`UCC`:tuple<>, `PAY`:tuple<>, `LAZ`:tuple<>, `KPK`:tuple<>, `RT`:tuple<>, `COF`:tuple<>, `BIH`:tuple<>, `DII`:tuple<>, `ENG`:tuple<>, `ACU`:tuple<>, `Rank`:tuple<>, `Team`:tuple<>, `Conf`:tuple<>> | struct<`x`:tuple<>> | struct<`X1`:tuple<>, `X2`:tuple<>, `X3`:tuple<>, `X4`:tuple<>, `X5`:tuple<>, `X6`:tuple<>, `X7`:tuple<>>, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, logical> => struct<`a`:double, `b`:double>;
type `read_tokens_chunked_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, environment, double, struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => null;
type `read_tsv` <character, logical, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, double, double, logical, logical> => struct<`a`:double, `b`:double>;
type `readr_example` <null | character> => character[];
type `show_cols_spec` <struct<`cols`:struct<`first`:tuple<>, `last`:tuple<>, `state`:tuple<>, `ssn`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`name`:tuple<>, `ssn`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`UCC`:tuple<>, `PAY`:tuple<>, `LAZ`:tuple<>, `KPK`:tuple<>, `RT`:tuple<>, `COF`:tuple<>, `BIH`:tuple<>, `DII`:tuple<>, `ENG`:tuple<>, `ACU`:tuple<>, `Rank`:tuple<>, `Team`:tuple<>, `Conf`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`x`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`X1`:tuple<>, `X2`:tuple<>, `X3`:tuple<>, `X4`:tuple<>, `X5`:tuple<>, `X6`:tuple<>, `X7`:tuple<>>, `default`:tuple<>, `skip`:double>, double> => null;
type `show_progress` < > => logical;
type `source_name` <character> => character;
type `spec` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> => struct<`cols`:struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`x`:tuple<>, `y`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>, `skip`:double>;
type `spec_csv` <character, logical, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], logical, character, character, logical, double, double, double, logical, logical> => struct<`cols`:struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`x`:tuple<>, `y`:tuple<>>, `default`:tuple<>, `skip`:double> | struct<`cols`:struct<`x`:tuple<>, `y`:struct<`format`:character>>, `default`:tuple<>, `skip`:double>;
type `standardise_escape` <character> => integer;
type `standardise_path` <character, logical> => character | integer;
type `str.col_spec` <struct<`cols`:struct<`mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>, `skip`:double>, language, character> => null;
type `stream_delim` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, null | character, logical | symbol, logical, character, character> => character;
type `stream_delim_` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, null | integer, character, character, logical, logical, integer> => character;
type `tokenize` <character, struct<`delim`:character, `quote`:character, `na`:character, `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, double, double> => tuple<character[], character[]>;
type `tokenize_` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, struct<`delim`:character, `quote`:character, `na`:character, `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>, double> => tuple<character[], character[]>;
type `tokenizer_csv` <character[], logical, character, character, logical, logical> => struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>;
type `tokenizer_delim` <character, character, character[], logical, character, logical, logical, logical, logical> => struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>;
type `tokenizer_fwf` <double[], double[] | ^integer[], character[], character, logical, logical> => struct<`begin`:double[], `end`:double[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical> | struct<`begin`:integer[], `end`:^integer[], `na`:character[], `comment`:character, `trim_ws`:logical, `skip_empty_rows`:logical>;
type `tokenizer_log` < > => tuple<>;
type `tokenizer_tsv` <character[], logical, character, character, logical, logical> => struct<`delim`:character, `quote`:character, `na`:character[], `quoted_na`:logical, `comment`:character, `trim_ws`:logical, `escape_double`:logical, `escape_backslash`:logical, `skip_empty_rows`:logical>;
type `type_convert` <struct<`mpg`:character[], `cyl`:character[], `disp`:character[], `hp`:character[], `drat`:character[], `wt`:character[], `qsec`:character[], `vs`:character[], `am`:character[], `gear`:character[], `carb`:character[]>, null, character[], logical, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `type_convert_col` <character[], tuple<>, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, integer, character[], logical> => ^double[];
type `warn_problems` <null | struct<`x`:^double[]> | ^double[]> => null | struct<`x`:^double[]> | ^double[];
type `whitespaceColumns` <struct<``:character, `skip`:double, `skip_empty_rows`:logical, `comment`:character>, double, character> => struct<`begin`:integer[], `end`:integer[], `skip`:integer>;
type `write_csv` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, character, logical, logical, character> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `write_delim` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, character, character, logical, logical, character> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `write_file` <character, character, logical> => character;
type `write_file_` <character, integer> => null;
type `write_lines` <^integer[] | character[], character, character, character, logical> => ^character[];
type `write_lines_` <^character[], integer, character, character> => null;
type `write_rds` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, character[], null> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `write_tsv` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, character, logical, logical, character> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `zipfile` <character, character> => integer;
