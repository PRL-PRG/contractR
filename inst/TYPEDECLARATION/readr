type `%||%` <character[] | null, any> => (character[] | logical);
type `as_chunk_callback` <class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`> | class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`> | class<`function`>> => (class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`> | class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`>);
type `as_chunk_callback.ChunkCallback` <class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`> | class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`> | ^double[]> => (class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`> | class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`> | ^double[]);
type `as_chunk_callback.function` <class<`function`>> => class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`>;
type `as.col_spec` <character | class<`col_spec`> | null | list<class<`collector`, `collector_double`> | class<`collector`, `collector_character`> | class<`collector`, `collector_double`>>> => class<`col_spec`>;
type `as.col_spec.character` <character> => class<`col_spec`>;
type `as.col_spec.col_spec` <class<`col_spec`>> => class<`col_spec`>;
type `as.col_spec.list` <list<class<`collector`, `collector_double`> | class<`collector`, `collector_character`> | class<`collector`, `collector_double`>>> => class<`col_spec`>;
type `as.col_spec.NULL` <null> => class<`col_spec`>;
type `check_callback_fun` <class<`function`>, double, character | null> => null;
type `check_encoding` <character> => logical;
type `check_guess_max` <double, double> => double;
type `check_path` <character> => character;
type `check_tz` <character> => logical;
type `col_character` < > => class<`collector`, `collector_character`>;
type `col_date` <character> => class<`collector`, `collector_date`>;
type `col_datetime` <character> => class<`collector`, `collector_datetime`>;
type `col_double` < > => class<`collector`, `collector_double`>;
type `col_factor` <character[] | null, logical, logical> => class<`collector`, `collector_factor`>;
type `col_guess` < > => class<`collector`, `collector_guess`>;
type `col_integer` < > => class<`collector`, `collector_integer`>;
type `collector` <character, ...> => (class<`collector`, `collector_character`> | class<`collector`, `collector_date`> | class<`collector`, `collector_datetime`> | class<`collector`, `collector_double`> | class<`collector`, `collector_factor`> | class<`collector`, `collector_guess`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_logical`> | class<`collector`, `collector_number`> | class<`collector`, `collector_skip`> | class<`collector`, `collector_time`>);
type `collector_find` <character> => (class<`collector`, `collector_character`> | class<`collector`, `collector_date`> | class<`collector`, `collector_double`> | class<`collector`, `collector_logical`> | class<`collector`, `collector_number`>);
type `collectorGuess` <^character[], class<`locale`>, logical> => character;
type `col_logical` < > => class<`collector`, `collector_logical`>;
type `col_number` < > => class<`collector`, `collector_number`>;
type `colourise_cols` <character, logical> => character;
type `cols` <..., class<`collector`, `collector_character`> | class<`collector`, `collector_guess`> | class<`collector`, `collector_skip`>> => class<`col_spec`>;
type `cols_condense` <class<`col_spec`>> => class<`col_spec`>;
type `col_skip` < > => class<`collector`, `collector_skip`>;
type `cols_only` <...> => class<`col_spec`>;
type `col_spec` <list<any>, class<`collector`, `collector_character`> | class<`collector`, `collector_guess`> | class<`collector`, `collector_skip`>> => class<`col_spec`>;
type `col_spec_standardise` <any, character[] | logical, null | character | class<`col_spec`> | list<class<`collector`, `collector_double`> | class<`collector`, `collector_character`> | class<`collector`, `collector_double`>>, null | list<character>, character, double, any, any, any, any, logical> => class<`col_spec`>;
type `col_time` <character> => class<`collector`, `collector_time`>;
type `count_fields` <character, class<`tokenizer_delim`>, double, integer> => integer[];
type `count_fields_` <class<`source`, `source_file`>, class<`tokenizer_delim`>, integer> => integer[];
type `datasource` <character | class<`connection`, `rawConnection`> | class<`source`, `source_file`> | raw[], double, any, character> => (class<`source`, `source_file`> | class<`source`, `source_raw`> | class<`source`, `source_string`>);
type `datasource_connection` <class<`bzfile`, `connection`> | class<`connection`, `rawConnection`> | class<`connection`, `unz`>, double, logical, character> => class<`source`, `source_file`>;
type `datasource_file` <character, double, logical, character, ...> => class<`source`, `source_file`>;
type `datasource_raw` <raw[], double, logical, character> => class<`source`, `source_raw`>;
type `datasource_string` <character, double, logical, character> => class<`source`, `source_string`>;
type `date_names` <character[], character[], character[], character[], character[]> => class<`date_names`>;
type `date_names_lang` <character> => class<`date_names`>;
type `default_locale` < > => class<`locale`>;
type `empty_file` <character> => logical;
type `format.col_spec` <class<`col_spec`>, double, null, logical, ...> => character;
type `format_csv` <class<`data.frame`>, character, logical, logical, character> => character;
type `format_delim` <class<`data.frame`>, character, character, any, logical, character> => character;
type `format_tsv` <class<`data.frame`>, character, logical, logical, character> => character;
type `FUN` <class<`collector`, `collector_character`> | class<`collector`, `collector_date`> | class<`collector`, `collector_double`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_number`> | class<`collector`, `collector_skip`> | class<`collector`, `collector_guess`>> => logical;
type `fwf_col_names` <character[] | null, integer> => character[];
type `fwf_cols` <...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `fwf_empty` <character | class<`source`, `source_file`>, double, any, character[] | null, character, double> => list<^integer[] | character[]>;
type `fwf_positions` <double[], double[], character[]> => class<`data.frame`, `tbl`, `tbl_df`>;
type `fwf_widths` <double[], character[]> => class<`data.frame`, `tbl`, `tbl_df`>;
type `get` < > => class<`collector`, `collector_character`> | <character> => class<`collector`, `collector_date`> | < > => class<`collector`, `collector_double`> | < > => class<`collector`, `collector_logical`>;
type `guess_encoding` <character | raw[] | list<raw[]>, double, double> => class<`data.frame`, `tbl`, `tbl_df`>;
type `guess_header` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`tokenizer_delim`> | class<`tokenizer_fwf`> | class<`tokenizer_log`>, class<`locale`>> => list<character[] | double | character | double | ^character[] | double>;
type `guess_header_` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`tokenizer_delim`> | class<`tokenizer_fwf`> | class<`tokenizer_log`>, class<`locale`>> => list<character[] | double | character | double | ^character[] | double>;
type `guess_parser` <^character[], class<`locale`>, logical> => character;
type `guess_types` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`tokenizer_delim`> | class<`tokenizer_fwf`> | class<`tokenizer_log`>, class<`locale`>, double, double> => character[];
type `guess_types_` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`tokenizer_delim`> | class<`tokenizer_fwf`> | class<`tokenizer_log`>, class<`locale`>, double> => character[];
type `is.collector` <class<`collector`, `collector_character`> | class<`collector`, `collector_date`> | class<`collector`, `collector_double`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_number`> | class<`collector`, `collector_skip`> | class<`collector`, `collector_guess`>> => logical;
type `is.connection` <character | class<`bzfile`, `connection`> | class<`connection`, `rawConnection`> | class<`connection`, `unz`> | raw[]> => logical;
type `is.date_names` <class<`date_names`>> => logical;
type `is_integerish` <double> => logical;
type `is.locale` <class<`locale`>> => logical;
type `is_named` <character> => logical;
type `is_syntactic` <character> => logical;
type `is_url` <character> => logical;
type `keep_character_col_types` <any, null> => null;
type `locale` <character | class<`date_names`>, character, character, character, character, character, character, logical> => class<`locale`>;
type `melt_csv` <character, class<`locale`>, character[], logical, character, character, logical, double, double, logical, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_csv2` <character, class<`locale`>, character[], logical, character, character, logical, double, double, logical, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_csv_chunked` <character, class<`ChunkCallback`, `DataFrameCallback`, `R6`>, double, class<`locale`>, character[], logical, character, character, logical, double, logical, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_delim` <character, character, character, logical, logical, class<`locale`>, character[], logical, character, logical, double, double, logical, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_delimited` <character, class<`tokenizer_delim`>, class<`locale`>, double, logical, character, double, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_delimited_chunked` <character, class<`ChunkCallback`, `DataFrameCallback`, `R6`>, double, class<`tokenizer_delim`>, class<`locale`>, double, logical, character, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_fwf` <character, class<`data.frame`, `tbl`, `tbl_df`> | list<^integer[] | character[]>, class<`locale`>, character[], character, logical, double, double, logical, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_table` <character, class<`locale`>, character, double, double, double, logical, character, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_tokens` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`tokenizer_delim`> | class<`tokenizer_fwf`>, class<`locale`>, double, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_tokens_` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`tokenizer_delim`> | class<`tokenizer_fwf`>, list<class<`collector`, `collector_double`> | class<`collector`, `collector_character`>>, class<`locale`>, double, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_tokens_chunked` <class<`source`, `source_file`>, class<`ChunkCallback`, `DataFrameCallback`, `R6`>, double, class<`tokenizer_delim`>, class<`locale`>, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `melt_tokens_chunked_` <class<`source`, `source_file`>, class<`ChunkCallback`, `DataFrameCallback`, `R6`>, double, class<`tokenizer_delim`>, list<class<`collector`, `collector_double`> | class<`collector`, `collector_character`>>, class<`locale`>, logical> => null;
type `melt_tsv` <character, class<`locale`>, character[], logical, character, character, logical, double, double, logical, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `name_problems` <class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>, any, any> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `new_datasource` <character, character | raw[], double, logical, character, ...> => (class<`source`, `source_file`> | class<`source`, `source_raw`> | class<`source`, `source_string`>);
type `n_problems` <character | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`Date`> | class<`difftime`, `hms`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[]> => double;
type `output_column` <class<`POSIXct`, `POSIXt`>> => character;
type `output_column.default` <class<`factor`>> => character[];
type `output_column.double` <class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`> | class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`> | ^double[]> => (class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`> | class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`> | ^double[]);
type `output_column.POSIXt` <class<`POSIXct`, `POSIXt`>> => character;
type `parse_character` <character, character[], class<`locale`>, logical> => character;
type `parse_date` <character, character, character[], class<`locale`>, logical> => class<`Date`>;
type `parse_datetime` <character[], character, character[], class<`locale`>, logical> => class<`POSIXct`, `POSIXt`>;
type `parse_double` <character[], character[], class<`locale`>, logical> => ^double[];
type `parse_factor` <character[], character[] | null, logical, character[], class<`locale`>, logical, logical> => class<`factor`>;
type `parse_guess` <character[], character[], class<`locale`>, logical, logical> => (character | class<`Date`> | double[]);
type `parse_integer` <character[], character[], class<`locale`>, logical> => ^integer[];
type `parse_logical` <character[], character[], class<`locale`>, logical> => logical[];
type `parse_number` <character[], character[], class<`locale`>, logical> => double[];
type `parse_time` <character, character, character[], class<`locale`>, logical> => class<`difftime`, `hms`>;
type `parse_vector` <character[], character | class<`collector`, `collector_character`> | class<`collector`, `collector_date`> | class<`collector`, `collector_time`> | class<`collector`, `collector_factor`> | class<`collector`, `collector_datetime`> | class<`collector`, `collector_double`> | class<`collector`, `collector_number`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_logical`>, character[], class<`locale`>, logical> => (character | class<`Date`> | class<`difftime`, `hms`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[]);
type `parse_vector_` <character[], class<`collector`, `collector_character`> | class<`collector`, `collector_date`> | class<`collector`, `collector_time`> | class<`collector`, `collector_factor`> | class<`collector`, `collector_datetime`> | class<`collector`, `collector_double`> | class<`collector`, `collector_number`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_logical`>, class<`locale`>, character[], logical> => (character | class<`Date`> | class<`difftime`, `hms`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[]);
type `problems` <class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | ^integer[]> => (class<`data.frame`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `probs` <class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[] | character | class<`data.frame`, `tbl`, `tbl_df`> | class<`Date`> | class<`difftime`, `hms`>> => (class<`data.frame`, `tbl`, `tbl_df`> | null);
type `read_connection` <class<`bzfile`, `connection`> | class<`connection`, `rawConnection`> | class<`connection`, `unz`>> => character;
type `read_connection_` <class<`bzfile`, `connection`> | class<`connection`, `rawConnection`> | class<`connection`, `unz`>, character, double> => character;
type `read_csv` <character, logical, null | character | class<`col_spec`> | list<class<`collector`, `collector_double`> | class<`collector`, `collector_double`> | class<`collector`, `collector_character`>>, class<`locale`>, character[], logical, character, character, logical, double, double, any, logical, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_csv2` <character, logical, null, class<`locale`>, character[], logical, character, character, logical, double, double, double, logical, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_csv_chunked` <character, class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`>, double, logical, null, class<`locale`>, character[], logical, character, character, logical, double, double, logical, logical> => (class<`data.frame`, `tbl`, `tbl_df`> | double | list<double[]>);
type `read_delim` <character, character, character, logical, logical, logical, null, class<`locale`>, character[], logical, character, logical, double, double, double, logical, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_delimited` <character, class<`tokenizer_delim`> | class<`tokenizer_log`>, logical, null | character | class<`col_spec`> | list<class<`collector`, `collector_double`> | class<`collector`, `collector_double`> | class<`collector`, `collector_character`>>, class<`locale`>, double, logical, character, double, any, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_delimited_chunked` <character, class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`>, double, class<`tokenizer_delim`>, logical, null, class<`locale`>, double, logical, character, double, logical> => (class<`data.frame`, `tbl`, `tbl_df`> | double | list<double[]>);
type `read_file` <character, class<`locale`>> => character;
type `read_file_` <class<`source`, `source_file`>, class<`locale`>> => character;
type `read_file_raw` <character> => raw[];
type `read_file_raw_` <class<`source`, `source_file`>> => raw[];
type `read_fwf` <character, class<`data.frame`, `tbl`, `tbl_df`> | list<^integer[] | character[]>, null, class<`locale`>, character[], character, logical, double, double, double, logical, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_lines` <character, double, logical, double, class<`locale`>, character[], logical> => character[];
type `read_lines_` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`locale`>, character[], double, logical, logical> => character[];
type `read_lines_chunked` <character, class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`> | class<`function`>, double, double, class<`locale`>, character[], logical> => null;
type `read_lines_chunked_` <class<`source`, `source_file`>, class<`locale`>, character[], double, class<`ChunkCallback`, `R6`, `SideEffectChunkCallback`>, logical, logical> => null;
type `read_lines_raw` <character, double, double, logical> => list<raw[]>;
type `read_lines_raw_` <class<`source`, `source_string`> | class<`source`, `source_file`>, double, logical> => list<raw[]>;
type `read_log` <character, logical, null, double, double, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_rds` <character> => class<`data.frame`>;
type `readr_example` <null | character> => character[];
type `read_table` <character, logical, null, class<`locale`>, character, double, double, double, logical, character, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_tokens` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`tokenizer_delim`> | class<`tokenizer_fwf`> | class<`tokenizer_log`>, list<any>, character[], class<`locale`>, double, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_tokens_` <class<`source`, `source_file`> | class<`source`, `source_string`>, class<`tokenizer_delim`> | class<`tokenizer_fwf`> | class<`tokenizer_log`>, list<any>, character[], class<`locale`>, double, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `read_tokens_chunked` <class<`source`, `source_file`>, class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`>, double, class<`tokenizer_delim`>, list<class<`collector`, `collector_double`>>, character[], class<`locale`>, logical> => (class<`data.frame`, `tbl`, `tbl_df`> | double | list<double[]>);
type `read_tokens_chunked_` <class<`source`, `source_file`>, class<`AccumulateCallback`, `ChunkCallback`, `R6`> | class<`ChunkCallback`, `DataFrameCallback`, `R6`> | class<`ChunkCallback`, `ListCallback`, `R6`>, double, class<`tokenizer_delim`>, list<class<`collector`, `collector_double`>>, character[], class<`locale`>, logical> => null;
type `read_tsv` <character, logical, null, class<`locale`>, character[], logical, character, character, logical, double, double, double, logical, logical> => class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>;
type `register_s3_method` <character, character, character, null> => null;
type `show_cols_spec` <class<`col_spec`>, double> => null;
type `show_progress` < > => logical;
type `source_name` <character> => character;
type `spec` <class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>> => class<`col_spec`>;
type `spec_csv` <character, logical, null, class<`locale`>, character[], logical, character, character, logical, double, double, double, logical, logical> => class<`col_spec`>;
type `[.spec_tbl_df` <class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `standardise_escape` <character> => integer;
type `standardise_path` <character | null, logical> => (character | class<`bzfile`, `connection`> | class<`connection`, `file`> | class<`connection`, `gzfile`> | class<`connection`, `unz`> | class<`connection`, `xzfile`> | null);
type `str.col_spec` <class<`col_spec`>, ..., character> => null;
type `stream_delim` <class<`data.frame`>, character | null, any, logical, ..., character> => character;
type `stream_delim_` <class<`data.frame`>, class<`bzfile`, `connection`> | class<`connection`, `file`> | class<`connection`, `gzfile`> | class<`connection`, `xzfile`> | null, character, character, logical, logical, integer> => character;
type `tokenize` <character, class<`tokenizer_delim`>, double, double> => list<character[]>;
type `tokenize_` <class<`source`, `source_string`>, class<`tokenizer_delim`>, double> => list<character[]>;
type `tokenizer_csv` <character[], logical, character, character, logical, logical> => class<`tokenizer_delim`>;
type `tokenizer_delim` <character, character, character[], logical, character, logical, logical, logical, logical> => class<`tokenizer_delim`>;
type `tokenizer_fwf` <double[], double[] | ^integer[], character[], character, logical, logical> => class<`tokenizer_fwf`>;
type `tokenizer_log` < > => class<`tokenizer_log`>;
type `tokenizer_tsv` <character[], logical, character, character, logical, logical> => class<`tokenizer_delim`>;
type `type_convert` <class<`data.frame`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>, null, character[], logical, class<`locale`>> => (class<`data.frame`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`>);
type `type_convert_col` <character[], class<`collector`, `collector_double`>, class<`locale`>, integer, character[], logical> => ^double[];
type `warn_problems` <character | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`Date`> | class<`difftime`, `hms`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[]> => (character | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`Date`> | class<`difftime`, `hms`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[]);
type `whitespaceColumns` <class<`source`, `source_file`>, double, character> => list<integer[]>;
type `write_csv` <class<`data.frame`>, character, character, logical, logical, character> => class<`data.frame`>;
type `write_delim` <class<`data.frame`>, character, character, character, logical, logical, character> => class<`data.frame`>;
type `write_file` <character, character, logical> => character;
type `write_file_` <character, class<`connection`, `file`>> => null;
type `write_lines` <^integer[] | character[], character, character, character, logical> => ^character[];
type `write_lines_` <^character[], class<`connection`, `file`>, character, character> => null;
type `write_rds` <class<`data.frame`>, character, character[], ...> => class<`data.frame`>;
type `write_tsv` <class<`data.frame`>, character, character, logical, logical, character> => class<`data.frame`>;
type `zipfile` <character, character> => class<`connection`, `unz`>;
