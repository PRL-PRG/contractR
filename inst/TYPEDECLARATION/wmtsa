type `as.matrix.wavCWT` <class<`wavCWT`>, character, logical, ...> => class<`matrix`>;
type `as.matrix.wavMRD` <class<`wavMRD`>, character, logical, ...> => class<`matrix`>;
type `boxplot.wavTransform` <class<`wavTransform`>, character, character, ...> => null;
type `create.signalSeries` <class<`signalSeries`> | class<`ts`> | double[] | null, any, null | double, null | double, null, null | double> => class<`signalSeries`>;
type `crystal.names` <class<`wavMRD`>, ...> => character[];
type `crystal.names.wavMRD` <class<`wavMRD`>, ...> => character[];
type `D.statistic` <double[]> => double;
type `D.table` <integer[], double[], logical, any, any, any> => class<`matrix`>;
type `eda.plot` <class<`wavTransform`>, ...> => null;
type `eda.plot.wavTransform` <class<`wavTransform`>, logical, null, double, double, null> => null;
type `holderSpectrum` <class<`wavCWTTree`>, double, class<`function`>> => list<double[]>;
type `make.signal` <character, double, double> => class<`signalSeries`>;
type `oceansdf` <double[]> => double[];
type `plot.wavBoundary` <class<`wavBoundary`>, logical, logical, character, logical, null> => double[];
type `plot.wavCWT` <class<`wavCWT`>, null, null, character, double, logical> => null;
type `plot.wavCWTTree` <class<`wavCWTTree`>, logical, character, logical, character, character | null> => null;
type `plot.wavDaubechies` <class<`wavDaubechies`>, character, ...> => null;
type `plot.wavFDP` <class<`wavFDP`>, double | null, character, character, null, character> => null;
type `plot.wavGain` <class<`wavGain`>, double, double, ...> => null;
type `plot.wavMRD` <class<`wavMRD`>, double, double, double, null, logical> => double[];
type `plot.wavTransform` <class<`wavTransform`>, character, logical, logical, logical, double> => null;
type `plot.wavVar` <class<`wavVar`>, character, logical, null, character, null> => null;
type `print.wavCWT` <class<`wavCWT`>, character, character, ...> => class<`wavCWT`>;
type `print.wavCWTTree` <class<`wavCWTTree`>, character, character, ...> => class<`wavCWTTree`>;
type `print.wavFDP` <class<`wavFDP`>, double, character, character, ...> => null;
type `reconstruct` <class<`wavTransform`>, ...> => double[];
type `reconstruct.wavTransform` <class<`wavTransform`>, double, ...> => double[];
type `summary.wavBoundary` <class<`wavBoundary`>, ...> => class<`summary.wavBoundary`>;
type `summary.wavCWTTree` <class<`wavCWTTree`>, ...> => class<`data.frame`, `summary.wavCWTTree`>;
type `summary.wavTransform` <class<`wavTransform`>, ...> => class<`summary.wavTransform`>;
type `wavBestBasis` <double[]> => list<double[] | list<double[]>>;
type `wavBootstrap` <double[], class<`matrix`>, double, character, null> => double[];
type `wavBoundary` <class<`wavTransform`>> => class<`wavBoundary`>;
type `wavCWT` <class<`signalSeries`> | class<`ts`>, double[], double, character, double, double> => class<`wavCWT`>;
type `wavCWTFilters` <character, double[], double, double, null> => complex[];
type `wavCWTPeaks` <class<`wavCWTTree`>, double, null, double, null, character> => list<double[]>;
type `wavCWTTree` <class<`wavCWT`>, double, double, character> => class<`wavCWTTree`>;
type `[.wavCWTTree` <class<`wavCWTTree`>, any, ..., null, null | double[]> => class<`wavCWTTree`>;
type `wavDaubechies` <character, logical> => class<`wavDaubechies`>;
type `wavDictionary` <character, logical, logical, double, null, double> => class<`wavDictionary`>;
type `wavDWPT` <class<`signalSeries`> | class<`ts`> | double[], character, double, any, any, character[]> => class<`wavTransform`>;
type `wavDWPTWhitest` <class<`wavTransform`>, double, character, character, null> => class<`matrix`>;
type `wavDWT` <class<`signalSeries`> | double[], double, character, any, any, character[]> => class<`wavTransform`>;
type `wavDWTMatrix` <character, double, double> => class<`matrix`>;
type `wavEDOF` <class<`wavTransform`> | double[] | class<`signalSeries`>, character, integer[] | null, class<`function`> | null, any, any> => (list<double[]> | list<double[] | ^logical[]>);
type `wavEquivFilter` <character, double, logical, logical> => double[];
type `wavFDP` <character, ^double[], ^double[] | null, ^double[], double[], class<`wavDictionary`>> => class<`wavFDP`>;
type `wavFDPBand` <double, character, logical, double[], any> => double[];
type `wavFDPBlock` <double[], character, integer[], null, character, double> => class<`wavFDP`>;
type `wavFDPSDF` <double[], double, double, null> => double[];
type `wavFDPTime` <double[], character, integer[], logical, character, double> => class<`wavFDP`>;
type `wavGain` <character, double, double, logical> => class<`wavGain`>;
type `wavIndex` <class<`wavTransform`>> => list<list<integer[]>>;
type `wavMaxLevel` <double, double, character> => integer;
type `wavMODWPT` <class<`ts`>, character, double, any, character[], character[]> => class<`wavTransform`>;
type `wavMODWT` <class<`signalSeries`> | class<`ts`> | double[], character, double, any, any, character[]> => class<`wavTransform`>;
type `wavMRD` <class<`wavTransform`>, double[] | null, null> => class<`wavMRD`>;
type `wavMRDSum` <double[], character, integer[], character, logical, logical> => double[];
type `wavPacketBasis` <class<`wavTransform`>, double[]> => list<list<double[]>>;
type `wavPacketIndices` <double[], logical> => list<double[]>;
type `wavShift` <class<`wavBoundary`> | class<`wavTransform`>> => (class<`wavBoundary`> | class<`wavTransform`>);
type `wavShrink` <double[], character, integer, character, character, null> => double[];
type `wavSortCrystals` <character[], logical> => character[];
type `wavStackPlot` <class<`wavTransform`>, ...> => null;
type `wavStackPlot.default` <list<double[]>, logical, logical, character, logical, logical> => double[];
type `wavStackPlot.wavTransform` <class<`wavTransform`>, logical, logical, null, null, double> => null;
type `wavStemPlot` <double[], any, double, character, character, ...> => null;
type `wavTitle` <class<`wavBoundary`> | class<`wavFDP`> | class<`wavTransform`>, character> => character;
type `wavTransform` <list<double[]>, class<`signalSeries`>, integer, class<`wavDictionary`>, logical, character> => class<`wavTransform`>;
type `wavVar` <class<`signalSeries`>, character, character, null, any, any> => class<`wavVar`>;
type `wavVarConfidence` <double[], double[], double> => list<double[]>;
type `wavVarTest` <double[], character, null, double[], logical, double> => class<`wavVarTest`>;
type `wavZeroPhase` <character, double[]> => list<integer[]>;
