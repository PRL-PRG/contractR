type `cc_and` <character[] | double[]> => character;
type `cc_or` <character[]> => character;
type `check_attributes` <class<`Date`> | class<`POSIXct`, `POSIXt`> | double | integer[], null | list<integer[]>, logical, logical, logical, logical, character | class<`name`>, logical> => (class<`Date`> | class<`POSIXct`, `POSIXt`> | double | integer[]);
type `check_character` <character[] | integer[], logical, character | class<`call`>, logical> => (character[] | integer[]);
type `check_chr` <character[] | double, logical, class<`call`> | character | double, logical> => (character[] | double);
type `check_classes` <list<any>, character[], logical, logical, class<`call`>, logical> => list<any>;
type `check_class_internal` <character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | ^integer[], ^character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | ^double[] | null, character, logical> => (character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | ^integer[]);
type `check_colnames` <class<`data.frame`>, character[], logical, logical, character | class<`name`>, logical> => class<`data.frame`>;
type `check_count` <double, logical, double | class<`call`>, logical> => double;
type `check_data` <class<`data.frame`>, null | list<null | double[]>, null | integer, logical, logical, character[], character | class<`name`>, logical> => class<`data.frame`>;
type `check_date` <class<`Date`> | class<`POSIXct`, `POSIXt`>, logical, class<`call`>, logical> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `check_dbl` <double[], logical, class<`call`> | double, logical> => double[];
type `check_dttm` <class<`Date`> | class<`POSIXct`, `POSIXt`>, logical, character, class<`call`>, logical> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `check_environment` <double | environment, double | class<`name`>, logical> => (double | environment);
type `check_flag` <logical, logical, class<`name`>, logical> => logical;
type `check_flag_internal` <logical> => null;
type `check_function` <class<`function`>, integer | null, class<`name`>, logical> => class<`function`>;
type `check_grepl` <character[], character, any, character, logical> => character[];
type `check_homogenous` <integer[] | list<double>, logical, logical, class<`call`>, logical> => (integer[] | list<double>);
type `check_inherits` <class<`data.frame`> | list<any>, character, character | class<`call`>, logical> => (class<`data.frame`> | list<any>);
type `check_int` <double | integer[], logical, double | class<`call`>, logical> => (double | integer[]);
type `check_integer` <double | integer[], logical, double | class<`call`>, logical> => (double | integer[]);
type `check_intersection` <integer[], integer[], logical, class<`name`>, class<`name`>, logical> => integer[];
type `check_join` <class<`data.frame`>, class<`data.frame`>, character | null, logical, class<`name`>, class<`name`>, logical> => class<`data.frame`>;
type `check_key` <class<`data.frame`>, character[], logical, character | class<`name`>, any> => class<`data.frame`>;
type `check_length` <character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | null | list<any>, double | integer[] | null, class<`call`> | character | double | null, logical> => any;
type `check_length1` <double | integer[] | list<any> | null, double | class<`call`> | null, logical> => (double | integer[] | list<any> | null);
type `check_length_internal` <double | integer[] | null> => null;
type `check_levels` <class<`factor`> | double, character[], logical, logical, class<`call`> | double, logical> => (class<`factor`> | double);
type `check_lgl` <double | logical[], logical, double | class<`call`> | character, logical> => (double | logical[]);
type `check_list` <list<any>, null | list<double> | list<integer[]>, null, logical, null, logical, logical, class<`call`> | character> => list<any>;
type `check_logical` <double | logical[], logical, double | class<`call`>, logical> => (double | logical[]);
type `check_missing_colnames` <class<`data.frame`>, character[], class<`name`>, logical> => class<`data.frame`>;
type `check_missing_names` <double[], character[], class<`name`>, logical> => double[];
type `check_n` <any, any, null | double | integer[], any, character, any> => any;
type `check_name` <character[], class<`name`>, logical, logical> => character[];
type `check_named` <double[] | list<double | integer[]> | list<double> | list<integer[]>, any, character, any, logical, double | character | class<`name`>, logical> => (double[] | list<double | integer[]> | list<double> | list<integer[]>);
type `check_names` <double[] | list<double | integer[]> | list<integer>, character[], logical, logical, logical, logical, class<`name`>, logical> => (double[] | list<double | integer[]> | list<integer>);
type `check_nas` <character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | ^integer[], ^character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | ^double[] | null, character, logical> => (character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | ^integer[]);
type `check_nchar` <character[], double | integer[], class<`call`> | character, logical> => character[];
type `check_ncol` <class<`data.frame`>, double, class<`call`>, logical> => class<`data.frame`>;
type `check_neg_dbl` <double, logical, double, logical> => double;
type `check_neg_int` <integer, logical, class<`call`> | integer, logical> => integer;
type `check_nlevels` <class<`factor`>, double, class<`call`>, logical> => class<`factor`>;
type `check_no_attributes` <character[] | double[], logical, logical, character | class<`name`>, logical> => (character[] | double[]);
type `check_noneg_dbl` <double, logical, double, logical> => double;
type `check_noneg_int` <double, logical, character | double, logical> => double;
type `check_nrow` <class<`data.frame`>, double | null, class<`call`> | character, logical> => class<`data.frame`>;
type `check_null` <double | character | null, double | class<`name`> | null, logical> => any;
type `check_numeric` <double | integer[], logical, double | class<`call`>, logical> => (double | integer[]);
type `checkor` <..., logical> => logical;
type `check_pos_dbl` <double, logical, double, logical> => double;
type `check_pos_int` <double | integer[], logical, double | class<`call`>, logical> => (double | integer[]);
type `check_prob` <double[], logical, class<`call`> | double, logical> => double[];
type `check_rbind` <class<`data.frame`>, class<`data.frame`>, logical, logical, class<`call`>, class<`call`>, logical> => class<`data.frame`>;
type `check_scalar` <character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[], character | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | null, logical, logical, logical, character | class<`call`> | double, logical> => (character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[]);
type `check_sorted` <integer[], character | class<`call`>, logical> => integer[];
type `check_string` <character, logical, class<`name`>, logical> => character;
type `check_string_internal` <character> => null;
type `check_tzone` <class<`Date`> | class<`POSIXct`, `POSIXt`>, character, class<`call`> | class<`name`>, logical> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `check_unique` <character[] | double[] | list<any> | null, character | class<`call`> | double | null, logical> => (character[] | double[] | list<any> | null);
type `check_unnamed` <character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[], character | double | class<`name`>, logical> => (character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[]);
type `check_unused` <..., character, logical> => (double | null);
type `check_values` <character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | ^integer[], ^character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | ^double[] | null, any, character, logical> => (character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | ^integer[]);
type `check_vector` <character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | null, ^character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | null | ^double[], null | integer[] | double, logical, logical, logical | null, logical | null, logical> => any;
type `chk_deparse` <character | class<`call`> | class<`name`> | double | null> => character;
type `chk_fail` <..., logical> => any;
type `chk_max_dbl` < > => double;
type `chk_max_int` < > => integer;
type `chk_min_dbl` < > => double;
type `chk_min_int` < > => integer;
type `chk_tiny_dbl` < > => double;
type `co_and` <character[], character, class<`call`> | class<`name`>> => character;
type `err_deparse` <class<`call`> | class<`name`>> => character;
type `is_count` <double | integer[] | null> => logical;
type `is_count_range` <double | integer[] | null> => logical;
type `is_flag` <double | integer[] | null> => logical;
type `is_length` <double | integer[] | null> => logical;
type `is_NA` <double | integer[] | null> => logical;
type `is.POSIXt` <class<`POSIXct`, `POSIXt`>> => logical;
type `is_string` <character | null> => logical;
type `new_duplicated` <class<`data.frame`>, logical, logical, ...> => logical[];
type `tz` <class<`POSIXct`, `POSIXt`>> => character;
