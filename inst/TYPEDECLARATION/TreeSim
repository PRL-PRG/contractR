type `age.nodes` <class<`phylo`>> => double[];
type `age.tips` <class<`phylo`>> => class<`matrix`>;
type `branching.times.complete` <class<`phylo`>> => double[];
type `collapse.singles` <class<`phylo`>> => class<`phylo`>;
type `corsim` <double[], double, double, double, double, double> => double[];
type `cuttree` <class<`phylo`>, double> => class<`phylo`>;
type `filter` <character[]> => logical[];
type `FUN` <integer, double, double[], double[], double[], double[], logical, double, logical> => list<double | list<class<`phylo`>>> | <integer, double, double, double, double, logical, any> => list<double | list<class<`phylo`>>> | <integer, double, double, double, any, logical, logical, double> => class<`phylo`> | <list<double | list<class<`phylo`>>>> => class<`phylo`> | <integer, double, double, double, double, double, logical> => class<`phylo`> | <double, class<`matrix`>, double[], double[], double, logical, double> => class<`phylo`> | <list<double | list<class<`phylo`>>>> => double | <double, double[], double[], double[], double[], double[], double, double, character, double, logical> => list<class<`phylo`> | class<`phylo`> | list<double[]>>;
type `gamStat` <double[], logical> => double;
type `getnumbs` <class<`phylo`>> => class<`matrix`>;
type `gettimelength` <class<`matrix`>, double> => double[];
type `gettimeperiod` <class<`matrix`>, double> => integer[];
type `get.times.polytomy` <class<`phylo`>> => class<`matrix`>;
type `getx` <class<`phylo`>, double> => (class<`matrix`> | double[]);
type `intp1` <double, double, double> => double;
type `LTT.plot` <list<double[] | list<class<`phylo`>>>, double, double, double, double, double, logical> => null;
type `LTT.plot.gen` <list<double[] | list<class<`phylo`>>>, double> => list<class<`matrix`>>;
type `numbspecies` <class<`matrix`>, double[]> => class<`matrix`>;
type `reconstructed.age` <list<class<`phylo`>>, double> => list<class<`phylo`>>;
type `reconstructed.taxa` <list<class<`phylo`>>, double> => list<class<`phylo`>>;
type `reconstructed.taxa.single` <class<`phylo`>, double> => class<`phylo`>;
type `sim2.bd` <double, double, double, double, double> => class<`phylo`>;
type `sim2.bd.age` <double, double, double, double, double> => list<class<`phylo`>>;
type `sim2.bd.fast` <double, double, double, double, double> => list<double | list<class<`phylo`>>>;
type `sim2.bd.fast.age` <double, double, double, double, double, double, logical> => list<class<`phylo`>>;
type `sim2.bd.fast.single` <double, double, double, double> => list<class<`phylo`> | double>;
type `sim2.bd.fast.single.mrca` <double, double, double, double, double> => class<`phylo`>;
type `sim2.bd.fast.single.origin` <double, double, double, double, double> => class<`phylo`>;
type `sim2.bd.origin` <double, double, double, double, double> => class<`phylo`>;
type `sim2.bd.rateshift` <double, double, double[], double[], double[], double[], double, logical> => list<double | list<class<`phylo`>>>;
type `sim2.bd.rateshift.single` <double, double[], double[], double[], double[], double, logical> => list<class<`phylo`> | double>;
type `sim2.bd.reverse` <double, double, double, double> => list<double | list<class<`phylo`>>>;
type `sim2.bd.reverse.single` <double, double, double, double> => list<class<`phylo`> | double>;
type `sim2.gsa` <list<class<`phylo`>>, double, double> => list<class<`phylo`>>;
type `sim.bd.age` <double, double, double, double, double, logical, logical, double> => list<class<`phylo`>>;
type `sim.bd.age.loop` <double, double, double, double, any, logical, logical, double> => list<class<`phylo`>>;
type `sim.bdsky.stt` <double, double[], double[], double[], double[], double[], double, double, character, double, logical> => list<class<`phylo`> | class<`phylo`> | list<double[]>>;
type `sim.bd.taxa` <double, double, double, double, double, logical, logical> => list<class<`phylo`>>;
type `sim.bd.taxa.age` <double, double, double, double, double, double, logical> => list<class<`phylo`>>;
type `sim.bd.taxa.age.loop` <double, double, double, double, double, double, logical> => list<class<`phylo`>>;
type `sim.bd.taxa.loop` <double, double, double, double, double, logical, any> => list<double | list<class<`phylo`>>>;
type `sim.genespeciestree` <double, double, double, double, double, double> => class<`matrix`>;
type `sim.genetree` <double, double> => class<`matrix`>;
type `sim.gsa.taxa` <list<class<`phylo`>>, double, double, double, logical> => list<class<`phylo`>>;
type `sim.rateshift.taxa` <double, double, double[], double[], double[], double[], logical, double, logical> => list<class<`phylo`>>;
type `sim.rateshift.taxa.loop` <double, double, double[], double[], double[], double[], logical, double, logical> => list<double | list<class<`phylo`>>>;
type `stats` <double[], integer, integer, double[]> => double[];
