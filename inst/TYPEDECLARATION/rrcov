type `filter` <character[]> => logical[];
type `fun` <character, character> => null;
type `:::` <^double[], struct<`center`:double[], `cov`:^double[], `n.obs`:integer>, null, double, logical, double, character, character, character, character, language, character[], character[], double[] | null, double[]> => null | double;
type `.biplot` <^double[], ^double[], null, logical, character[] | null, double[], null, null, double, null, null, double, null | character, null, null, null, null> => null;
type `.check_vars_numeric` <struct<`gr`:integer[], `AHFactivity`:double[], `AHFantigen`:double[]>> => logical;
type `.classPC` <^double[], logical, logical, logical, logical, logical> => struct<`rank`:integer, `eigenvalues`:double[], `loadings`:^double[], `scores`:^double[], `center`:double[], `scale`:double[]> | struct<`rank`:integer, `eigenvalues`:double[], `loadings`:^double[], `scores`:null, `center`:double[], `scale`:double[]>;
type `.confusion` <integer[], integer[], null, logical> => ^integer[];
type `.covRobustControl` <null | symbol | integer, null | symbol | integer> => character | symbol;
type `.crit.od` <double[], double, logical, null, logical> => double;
type `.det.a0` <double[], ^double[], integer[], double, double, any => any, double[]> => struct<`alpha`:double[], `alpha0`:double>;
type `.getApprox` <integer, integer> => struct<`d`:double, `q`:double>;
type `.huberM` <double[], double, null, symbol, double, double, language, double> => struct<`mu`:double, `s`:double, `it`:integer>;
type `.iter.bic` <^double[], double[], ^double[], double, double, logical> => struct<`center`:double[], `cov`:^double[], `mah`:double[], `iter`:double, `kp`:double, `cc`:double>;
type `.label` <double[] | language, double[] | symbol, integer, integer[] | symbol> => null;
type `.local` <double | null | symbol | integer[], double | character[], null | double | character, null | logical | character, null, double | null, null | language, double, null | double[]> => null;
type `.myddplot` <double[], double[], double, symbol, character, character, character, integer[], null> => null;
type `.mydistplot` <double[], double, logical, symbol, null | double[], character, character, character, integer[] | language, null> => null;
type `.myellipse` <^double[], struct<`cov`:^double[], `center`:double[], `n.obs`:integer, `wt`:double[]>, null, double, logical, double, character, character, character, character, language, character[], character[], null, null> => null;
type `.mypredictLda` <character[], ^double[], double[], ^double[]> => double[];
type `.mypredictQda` <character[], ^double[], double[], double[], ^double[]> => double[];
type `.myscreeplot` <symbol> => null;
type `.projpp` <^double[], integer[], double, double, any => any> => double[];
type `.qqplot` <double[], integer, double, logical, symbol, expression, expression, character, integer[], null> => null;
type `.rrpairs` <character, character, character, character, null> => null;
type `.signflip` <^double[]> => ^double[];
type `.tolellipse` <double, symbol, symbol, character, character, character, null, double[] | null> => null;
type `.tomatrix` <struct<`AHFactivity`:double[], `AHFantigen`:double[]> | ^double[], logical> => ^double[];
type `.wcov.wt` <^double[], integer[], double[]> => struct<`call`:language, `means`:^double[], `wcov`:^double[], `method`:character>;
type `.wilks` <^double[], integer[], character, double | symbol> => struct<`nk`:integer[], `wilks`:double, `W`:^double[], `T`:^double[], `group.means`:^double[]>;
type `.xpc` <struct<`X1`:double[], `X2`:double[], `X3`:double[]> | ^double[], struct<`cov`:^double[], `center`:double[], `n.obs`:integer>, logical, logical> => struct<`sdev`:double[], `loadings`:^double[], `center`:double[], `scale`:double[], `n.obs`:integer, `scores`:^double[]>;
type `.xydistplot` <double, character, character, character, character, null, null> => struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:null, `panel`:any => any, `page`:null, `layout`:null, `skip`:logical, `strip`:character, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:character, `xlab.default`:character, `ylab.default`:character, `xlab.top`:null, `ylab.right`:null, `main`:character, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer[]>, `perm.cond`:integer, `condlevels`:struct<`gr`:character[]>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`cutoff`:double, `col`:character>, `panel.args`:tuple<struct<`x`:integer[], `y`:double[], `subscripts`:integer[]>, struct<`x`:integer[], `y`:double[], `subscripts`:integer[]>>, `packet.sizes`:double[], `x.limits`:double[], `y.limits`:double[], `x.used.at`:null, `y.used.at`:null, `x.num.limit`:null, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null>;
type `$` <character> => ^double[];
type `arpLim` < > => double[];
type `biplot` <null | character> => null;
type `CovClassic` <logical> => struct<`L-CV`:double[], `L-skewness`:double[], `L-kurtosis`:double[]> | ^double[];
type `CovControlMcd` <double, null, double, null, logical, logical> => double;
type `CovControlMest` <double, double, double> => double;
type `CovControlMMest` <double, double, logical, double> => double;
type `CovControlMrcd` <null, double, null, character[], double, logical> => double;
type `CovControlMve` <double, null, logical> => double;
type `CovControlOgk` <double, null, any => any, character, character> => double;
type `CovControlSde` <double, double, double, double, null, logical, double> => double;
type `CovControlSest` <double, double, double, double, null, logical, double, character> => double;
type `CovMcd` <logical, double, double | character, language, language, null, logical, null, logical, logical, null> => struct<`AHFactivity`:double[], `AHFantigen`:double[]> | ^double[];
type `CovMest` <double, double, double, double, null, null | double[], null | ^double[], null> => struct<`body`:double[], `brain`:double[]> | ^double[];
type `CovMMest` <double | character[], null | double, logical, double | character[], logical | struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, double | symbol, null> => struct<`body`:double[], `brain`:double[]> | ^double[];
type `CovMrcd` <double, null, double, null, logical, null, character, language, logical> => struct<`body`:double[], `brain`:double[]> | ^double[];
type `CovMve` <double, double, null, logical, null> => struct<`body`:double[], `brain`:double[]> | ^double[];
type `covMWcd` <^double[], integer[], double> => struct<`center`:^double[], `wcov`:^double[], `mah`:double[], `wt`:double[]>;
type `CovOgk` <double, double, null> => struct<`body`:double[], `brain`:double[]> | ^double[];
type `CovRobust` <null | character, any => any> => ^double[] | struct<>;
type `CovSde` <null | double, null, double, double, double, null, logical, null> => struct<`body`:double[], `brain`:double[]> | ^double[];
type `CovSest` <double[], double | integer[], double | integer[], null | double, double, null | integer, logical, double, null, double, null, logical, character[] | pairlist, null, null, null, null> => struct<`body`:double[], `brain`:double[]> | ^double[];
type `covw` <^double[], double[]> => struct<`cov`:^double[], `center`:double[], `n.obs`:integer>;
type `csolve` <null, null> => null;
type `diag.panel` <double[], character> => null;
type `ellips` <double[], ^double[]> => ^double[];
type `erho` < > => double;
type `erhoLim` < > => double;
type `erhoLimD` < > => double;
type `fn` <double[], ^double[], integer[], double, double, any => any> => double;
type `FUN` <character | double[], struct<`n.prod`:integer[], `distance`:integer[]> | double, null> => character | double[];
type `getCenter` < > => double[];
type `getCorr` < > => ^double[];
type `getCov` < > => ^double[];
type `getData` < > => ^double[];
type `getDet` < > => double;
type `getDistance` < > => double[];
type `getEigenvalues` < > => double[];
type `getEvals` < > => double[];
type `getLoadings` < > => ^double[];
type `getMeth` < > => character;
type `getPrcomp` < > => struct<`sdev`:double[], `rotation`:^double[], `center`:double[], `scale`:double[], `x`:^double[]>;
type `getScores` < > => ^double[];
type `getSdev` < > => double[];
type `getShape` < > => ^double[];
type `initset` <^double[], any => any, ^double[], double> => integer[];
type `isClassic` < > => logical;
type `isSingular` < > => logical;
type `iterM` <^double[], double[], ^double[], double, double> => struct<`t1`:double[], `s`:^double[], `iter`:double, `wt`:double[], `vt`:double[]>;
type `ksiint` <double, double, integer> => double;
type `label` <integer[], double[], double, double> => null;
type `label.dd` <double[], double[], double, double, double> => null;
type `LdaClassic.formula` <symbol, null, null, null> => language;
type `LdaPP.formula` <symbol, null, null, null> => language;
type `Linda.formula` <symbol, character | logical | null, null, null> => language;
type `loss` <double[], double, double> => double;
type `loss.S` <double[], double, double> => double;
type `lower.panel` <double[], double[], character> => null;
type `mrob` <double[], double, double, double, double> => struct<`mu`:double, `s`:double>;
type `mtxconfusion` <integer[], integer[], null, logical> => ^integer[];
type `myPcaPrint` <logical, null> => logical;
type `myscreeplot` <null> => null;
type `norm` <double[]> => double;
type `obj` <^double[]> => double;
type `pca.ddplot` <double, null, null, null, double, character | null> => double;
type `pca.distances` <integer, double> => ^double[] | struct<>;
type `pca.distplot` <null, double, character | null> => double;
type `pca.scoreplot` <double, double, null, double, null> => null;
type `PcaClassic.formula` <struct<`X1`:double[], `X2`:double[], `X3`:double[]>, null, null, null> => language;
type `PcaCov.formula` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `Y`:double[]>, null, null, null> => language;
type `PcaGrid.formula` <struct<`X1`:double[], `X2`:double[], `X3`:double[]>, null, null, null> => language;
type `PcaHubert.formula` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `Y`:double[]>, null, null, null> => language;
type `PcaLocantore.formula` <struct<`X1`:double[], `X2`:double[], `X3`:double[], `Y`:double[]>, null, null, null> => language;
type `plot` <null, null | character | double> => null;
type `predict` < > => null;
type `psi` <double[]> => double[];
type `psibiweight` <double[], double> => double[];
type `QdaClassic.formula` <symbol, null, null, null> => language;
type `QdaCov.formula` <symbol, character | null, null, null> => language;
type `r6pack` <^double[], double, logical, logical, any => any> => ^integer[];
type `randomset` <integer, double, double> => struct<`seed`:double, `ranset`:double[]>;
type `resdis` <^double[], double[], ^double[]> => double[];
type `restimate` <null> => ^double[];
type `rho` <double[], double> => double[];
type `rhobiweight` <double[], double> => double[];
type `scaledpsi` <double[], double> => double[];
type `scorePlot` <null> => null;
type `screeplot` <character | null> => null;
type `show` <null, null> => null;
type `spatial.median` <^double[], double> => struct<`mu`:double[], `ep`:double>;
type `summary` < > => null;
type `T2.test.formula` <language, null, null, null, null> => struct<`statistic`:double[], `parameter`:double[], `p.value`:double, `conf.int`:null, `estimate`:^double[], `null.value`:null, `alternative`:character, `method`:character, `data.name`:character>;
type `uniran` <double> => struct<`seed`:double, `random`:double>;
type `unsigned.range` <double[]> => double[];
type `upper.panel` <double[], double[], double, character> => null;
type `vt` <double[]> => double[];
type `w.bi` <double[], double> => double[];
type `which.ij` <double[], double[], ^double[]> => struct<`i`:integer, `j`:integer>;
type `Wilks.test.data.frame` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, integer[]> => struct<`statistic`:double, `parameter`:double[], `p.value`:double, `estimate`:^double[], `method`:character, `data.name`:character, `W`:^double[], `T`:^double[], `wilks`:double, `xd`:null, `xq`:null, `xfn`:null, `xwl`:null, `call`:language>;
type `Wilks.test.default` <^double[], integer[], character[], character[], null | double, null | double, null, null, double, logical, null> => struct<`statistic`:double, `parameter`:double[], `p.value`:double, `estimate`:^double[], `method`:character, `data.name`:character, `W`:^double[], `T`:^double[], `wilks`:double, `xd`:double, `xq`:double, `xfn`:null, `xwl`:null, `call`:language> | struct<`statistic`:double, `parameter`:double[], `p.value`:double, `estimate`:^double[], `method`:character, `data.name`:character, `W`:^double[], `T`:^double[], `wilks`:double, `xd`:null, `xq`:null, `xfn`:null, `xwl`:null, `call`:language>;
type `Wilks.test.formula` <language, symbol | language, character | double | null, null, null> => struct<`statistic`:double, `parameter`:double[], `p.value`:double, `estimate`:^double[], `method`:character, `data.name`:character, `W`:^double[], `T`:^double[], `wilks`:double, `xd`:double, `xq`:double, `xfn`:null, `xwl`:null, `call`:language, `terms`:language, `xlevels`:tuple<>> | struct<`statistic`:double, `parameter`:double[], `p.value`:double, `estimate`:^double[], `method`:character, `data.name`:character, `W`:^double[], `T`:^double[], `wilks`:double, `xd`:null, `xq`:null, `xfn`:null, `xwl`:null, `call`:language, `terms`:language, `xlevels`:tuple<>>;
type `Wilks.test.matrix` <^double[], integer[], character, null, null> => struct<`statistic`:double, `parameter`:double[], `p.value`:double, `estimate`:^double[], `method`:character, `data.name`:character, `W`:^double[], `T`:^double[], `wilks`:double, `xd`:double, `xq`:double, `xfn`:null, `xwl`:null, `call`:language> | struct<`statistic`:double, `parameter`:double[], `p.value`:double, `estimate`:^double[], `method`:character, `data.name`:character, `W`:^double[], `T`:^double[], `wilks`:double, `xd`:null, `xq`:null, `xfn`:null, `xwl`:null, `call`:language>;
type `wt` <double[]> => double[];
