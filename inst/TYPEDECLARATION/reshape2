type `%||%` <^character[] | null, any> => (^character[] | integer[]);
type `acast` <class<`data.frame`>, class<`formula`>, null | class<`function`>, ..., null | character | logical, null | class<`quoted`>, null | double, logical, character> => (class<`array`> | class<`matrix`>);
type `add_margins` <class<`data.frame`>, list<character[]>, character[] | logical> => class<`data.frame`>;
type `all_identical` <list<null>> => logical;
type `array_names` <class<`data.frame`>> => character[];
type `cast` <class<`data.frame`>, list<class<`quoted`>>, null | class<`function`>, ..., null | class<`quoted`>, null | double, logical, character, any> => list<class<`array`> | list<class<`data.frame`>> | class<`matrix`> | list<class<`data.frame`>>>;
type `colsplit` <character[], character, character[]> => class<`data.frame`>;
type `dcast` <class<`data.frame`>, class<`formula`>, class<`function`> | null, ..., character[] | logical | null, null | class<`quoted`>, null, logical, character> => class<`data.frame`>;
type `FUN` <class<`data.frame`>> => character[] | <class<`array`> | class<`matrix`> | double | integer[] | null | class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | list<any>, ..., logical, character> => class<`data.frame`>;
type `guess_value` <class<`data.frame`>> => character;
type `is.string` <character> => logical;
type `margins` <list<character[]>, character[] | logical> => list<null | character[]>;
type `melt` <class<`array`> | class<`matrix`> | double | integer[] | null | class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | list<any>, ..., logical, character> => class<`data.frame`>;
type `melt.array` <class<`array`> | class<`matrix`>, character[] | null, ..., logical, logical, character> => class<`data.frame`>;
type `melt_check` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, any, any, character, character> => list<character[]>;
type `melt_dataframe` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, integer[], integer[], character, character, null, logical, logical> => class<`data.frame`>;
type `melt.data.frame` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, any, any, character, ..., logical, character, logical> => class<`data.frame`>;
type `melt.default` <double | integer[] | null, ..., logical, character> => class<`data.frame`>;
type `melt.list` <list<any>, ..., double> => class<`data.frame`>;
type `melt.matrix` <class<`array`> | class<`matrix`>, character[] | null, ..., logical, logical, character> => class<`data.frame`>;
type `normalize_melt_arguments` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, integer[], logical> => list<null | logical>;
type `parse_formula` <class<`formula`> | list<class<`quoted`>>, any, any> => list<class<`quoted`>>;
type `recast` <class<`data.frame`>, class<`formula`>, ..., integer[], any> => class<`data.frame`>;
type `upto` <character, character[]> => character[];
