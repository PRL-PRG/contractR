type `::` <struct<`country`:integer[], `year`:integer[], `refugees`:integer[]>, language, null, null, null, null, null, logical, character> => struct<`country`:integer[], `2003`:integer[], `2004`:integer[], `2005`:integer[], `2006`:integer[], `2007`:integer[], `2008`:integer[], `2009`:integer[], `2010`:integer[], `2011`:integer[], `2012`:integer[], `2013`:integer[]>;
type `all_identical` <list<null> | tuple<null, null, null>> => logical;
type `array_names` <struct<`year`:integer[]>> => character[];
type `cast` <struct<`country`:integer[], `year`:integer[], `refugees`:integer[]>, tuple<tuple<symbol>, tuple<symbol>>, null | any => any, null, null | tuple<language>, null | double, logical, character, null> => struct<`data`:^integer[], `labels`:tuple<struct<`country`:integer[]>, struct<`year`:integer[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`chick`:integer[]>, struct<`time`:double[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`diet`:integer[]>, struct<`time`:double[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`diet`:integer[]>, struct<`variable`:integer>>> | struct<`data`:^double[], `labels`:tuple<struct<`month`:integer[]>, struct<`variable`:integer[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`sex`:integer[]>, struct<`smoker`:integer[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`subject`:integer[]>, struct<`time`:integer[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`time`:double[]>, struct<`variable`:integer>>> | struct<`data`:^double[], `labels`:tuple<struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `variable`:integer[]>, struct<`rep`:double[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`treatment`:integer[]>, struct<`variable`:integer[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`variable`:integer[]>, struct<`month`:integer>>> | struct<`data`:^double[], `labels`:tuple<struct<`variable`:integer>, struct<`month`:integer[]>>> | struct<`data`:^double[], `labels`:tuple<struct<`day`:integer[]>, struct<`month`:integer[]>, struct<`variable`:integer[]>>> | struct<`data`:^integer[], `labels`:tuple<struct<`time`:double[]>, struct<`diet`:integer[]>>> | struct<`data`:^integer[], `labels`:tuple<struct<`time`:integer[]>, struct<`variable`:integer[]>>>;
type `filter` <character[]> => logical[];
type `FUN` <null | character[] | integer[] | struct<> | tuple<character[]> | tuple<>, character[]> => null | struct<> | character[] | double[];
type `is.string` <character> => logical;
type `melt_check` <struct<`age`:integer[], `Rural.Male`:double[], `Rural.Female`:double[], `Urban.Male`:double[], `Urban.Female`:double[]>, character[] | integer[] | symbol, symbol, character, character> => struct<`id`:character[], `measure`:character[]>;
type `melt_dataframe` <struct<`age`:integer[], `Rural.Male`:double[], `Rural.Female`:double[], `Urban.Male`:double[], `Urban.Female`:double[]>, integer[], integer[], character, character, null, logical, logical> => struct<`age`:integer[], `variable`:integer[], `value`:double[]>;
type `normalize_melt_arguments` <struct<`age`:integer[], `Rural.Male`:double[], `Rural.Female`:double[], `Urban.Male`:double[], `Urban.Female`:double[]>, integer[], logical> => struct<`measure.attributes`:null, `factorsAsStrings`:logical>;
type `parse_formula` <language | tuple<tuple<symbol>, tuple<symbol>>, language | character[], symbol | character> => tuple<tuple<symbol>, tuple<symbol>>;
type `melt.array` <double[] | ^integer[], null | character[], null | language, logical, logical, character> => struct<`Iteration`:integer[], `Chain`:integer[], `Parameter`:integer[], `value`:double[]>;
type `melt.matrix` <^double[], null | character[], null | language, logical, logical, character> => struct<`Draw`:integer[], `Parameter`:integer[], `Value`:double[]>;
type `melt.table` <double[], character[], null, logical, logical, character> => struct<`Class`:integer[], `Sex`:integer[], `Age`:integer[], `Survived`:integer[], `value`:double[]>;
type `:::` <character, null | character[], character> => tuple<tuple<symbol>, tuple<symbol, symbol>> | tuple<tuple<symbol, symbol>, tuple<symbol>, tuple<>> | tuple<list<symbol>>;
type `%||%` <null | ^character[], language | character | integer[]> => ^character[] | integer[];
type `acast` <struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, language, null | any => any, null, null | logical | character, null | tuple<language>, null | double, logical, character> => ^double[];
type `add_margins` <struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, tuple<character[], character>, character[] | logical> => struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>;
type `colsplit` <character[], character, character[]> => struct<`trt`:character[], `time`:integer[]>;
type `dcast` <struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>, language, null | any => any, null, null | character[] | logical, null | tuple<language>, null, logical, character> => struct<`diet`:integer[], `chick`:integer[], `0`:double[], `2`:double[], `4`:^double[], `6`:^double[], `8`:^double[], `10`:^double[], `12`:^double[], `14`:^double[], `16`:^double[], `18`:^double[], `20`:^double[], `21`:^double[]>;
type `margins` <tuple<character[], character>, character[] | logical> => tuple<null, character[]>;
type `melt.default` <null | double | integer[], double | language, logical, character> => struct<`value`:double>;
type `melt.list` <tuple<tuple<integer[]>, double, tuple<tuple<integer, integer>, tuple<integer, integer>>> | tuple<integer[]> | tuple<tuple<integer, integer>, tuple<integer, integer>> | struct<`a`:integer, `b`:integer, `c`:integer, `d`:integer, `NA`:null> | tuple<^integer[], ^integer[]>, null, double> => struct<`value`:double[], `L2`:^integer[], `L3`:^integer[], `L1`:integer[]>;
type `recast` <struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `potato`:^double[], `buttery`:^double[], `grassy`:^double[], `rancid`:^double[], `painty`:^double[]>, language, null, integer[], null> => struct<`time`:integer[], `potato`:integer[], `buttery`:integer[], `grassy`:integer[], `rancid`:integer[], `painty`:integer[]>;
type `upto` <character, character[]> => character[];
