type `::` <character[] | null, character | null | logical, character | logical, logical | character, null | character, null, logical, logical, null, null> => character[] | logical[] | struct<>;
type `[.fs_path` <character[], integer[] | double> => character[];
type `%||%` <null | character, character | language> => character;
type `access_` <character, integer> => logical;
type `as_fs_perms.character` <character[], null, double | integer[]> => integer[];
type `assert` <character, logical, character> => null;
type `assert_no_missing` <character[]> => null;
type `dir_delete` <character[]> => character[];
type `dir_ls` <character[], logical, logical, character[], null | character, null, logical, logical, null, null> => character[];
type `dir_map` <character[], any => any, logical, logical, character[], logical> => tuple<> | tuple<character> | list<character> | list<null>;
type `dir_map_` <character[], any => any, logical, integer, double, logical> => tuple<> | tuple<character> | list<character> | list<null>;
type `display_mode_to_symbolic_mode_posix` <character[]> => character;
type `expand_` <character[], logical> => character[];
type `f` <character, character> => character;
type `file_exists` <character[]> => logical[];
type `file_info` <character[], logical> => struct<`path`:character[], `type`:integer[], `size`:double[], `permissions`:integer[], `modification_time`:double[], `user`:character[], `group`:character[], `device_id`:double[], `hard_links`:double[], `special_device_id`:double[], `inode`:double[], `block_size`:double[], `blocks`:double[], `flags`:integer[], `generation`:double[], `access_time`:double[], `change_time`:double[], `birth_time`:double[]>;
type `filter` <character[]> => logical[];
type `fun` <symbol> => null | list<character | any => any>;
type `FUN` <character[] | integer[]> => character[];
type `getmode_` <character, double> => integer;
type `is_absolute_path` <character[]> => logical[];
type `is_dir` <character[]> => logical[];
type `is_link` <character[]> => logical[];
type `is_windows` < > => logical;
type `link_path` <character[]> => character[];
type `mkdir_` <character[], integer> => null;
type `move_` <character, character> => null;
type `new_fs_path` <character[]> => character[];
type `new_fs_perms` <integer[]> => integer[];
type `path` <character[], character> => character[];
type `path_` <tuple<character[]> | character[], character> => character[];
type `path_expand` <character[]> => character[];
type `path_filter` <character[], null | character, null | character, symbol | logical, null> => character[];
type `path_norm` <character[]> => character[];
type `path_split` <character[]> => tuple<> | tuple<character[]> | list<character[]>;
type `path_tidy` <character[] | tuple<> | tuple<character>> => character[];
type `readlink_` <character[]> => character[];
type `register_s3_method` <character, character, character, null> => null;
type `rmdir_` <character[]> => null;
type `stat_` <character[], logical> => struct<`path`:character[], `device_id`:double[], `type`:integer[], `permissions`:integer[], `hard_links`:double[], `user`:character[], `group`:character[], `special_device_id`:double[], `inode`:double[], `size`:double[], `block_size`:double[], `blocks`:double[], `flags`:integer[], `generation`:double[], `access_time`:double[], `modification_time`:double[], `change_time`:double[], `birth_time`:double[]>;
type `tidy_` <character[]> => character[];
type `unlink_` <character[]> => null;
type `&.fs_perms` <integer, character | integer> => integer;
type `==.fs_perms` <integer, character> => logical;
type `as_fs_bytes.default` <character[]> => double[];
type `as_fs_perms.fs_perms` <integer, null> => integer;
type `as_fs_perms.integer` <integer, null> => integer;
type `auto_name` <character> => character;
type `captures` <character[], integer[]> => struct<`1`:character>;
type `chmod_` <character[], integer[]> => null;
type `copyfile_` <character[], character[], logical> => null;
type `create_` <character[], double> => null;
type `dir_copy` <character, character, logical> => character;
type `dir_create` <character[], null, character, logical, null> => character[];
type `dir_exists` <character> => logical;
type `dir_info` <character, logical, logical, character, null, null, logical, null> => struct<`path`:character[], `type`:integer[], `size`:double[], `permissions`:integer[], `modification_time`:double[], `user`:character[], `group`:character[], `device_id`:double[], `hard_links`:double[], `special_device_id`:double[], `inode`:double[], `block_size`:double[], `blocks`:double[], `flags`:integer[], `generation`:double[], `access_time`:double[], `change_time`:double[], `birth_time`:double[]>;
type `dir_walk` <character, any => any, logical, logical, character, logical> => character;
type `file_access` <character, character> => logical;
type `file_chmod` <character[], character[]> => character[];
type `file_copy` <character[], character[], logical> => character[];
type `file_create` <character[], null, character> => character[];
type `file_delete` <character[]> => character[];
type `file_move` <character, character> => character;
type `file_temp` <character, character, character> => character;
type `file_temp_pop` < > => character;
type `file_temp_push` <character[]> => character[];
type `file_touch` <character, character, double> => character;
type `group_ids` < > => struct<`group_id`:integer[], `group_name`:character[]>;
type `groups_` < > => struct<`group_id`:integer[], `group_name`:character[]>;
type `is_file` <character[]> => logical[];
type `link_copy` <character[], character[], logical> => character[];
type `link_create` <character[], character[], logical> => character[];
type `link_create_symbolic_` <character[], character[]> => null;
type `link_delete` <character[]> => character[];
type `link_exists` <character[]> => logical[];
type `new_fs_bytes` <double[]> => double[];
type `Ops.fs_bytes` <double, character> => logical;
type `path_abs` <character[], character> => character[];
type `path_common` <character[]> => character;
type `path_dir` <character> => character;
type `path_expand_r` <character> => character;
type `path_ext` <character> => character;
type `path_ext_remove` <character> => character;
type `path_ext_set` <character, character> => character;
type `path_file` <character[]> => character[];
type `path_home` <character | null> => character;
type `path_home_r` <null> => character;
type `path_join` <tuple<character[]>> => character;
type `path_package` <character, character | null> => character;
type `path_real` <character> => character;
type `path_rel` <character[], character> => character[];
type `path_temp` <character | null> => character;
type `realize_` <character> => character;
type `sum.fs_bytes` <double[], logical> => double;
type `touch_` <character, double, double> => null;
type `user_ids` < > => struct<`user_id`:integer[], `user_name`:character[]>;
type `users_` < > => struct<`user_id`:integer[], `user_name`:character[]>;
type `as_fs_bytes.numeric` <double> => double;
type `as.character.fs_bytes` <double, logical, double, logical, null> => character;
