type `%||%` <null | class<`character`, `fs_path`>, any> => (character | class<`character`, `fs_path`>);
type `access_` <character, integer> => logical;
type `as_fs_bytes` <class<`fs_bytes`, `numeric`> | character[]> => class<`fs_bytes`, `numeric`>;
type `as_fs_bytes.default` <character[]> => class<`fs_bytes`, `numeric`>;
type `as_fs_bytes.fs_bytes` <class<`fs_bytes`, `numeric`>> => class<`fs_bytes`, `numeric`>;
type `as_fs_perms` <character[] | class<`fs_perms`, `integer`> | double[], ...> => class<`fs_perms`, `integer`>;
type `as_fs_perms.character` <character[], ..., class<`fs_perms`> | double> => class<`fs_perms`, `integer`>;
type `as_fs_perms.fs_perms` <class<`fs_perms`, `integer`>, ...> => class<`fs_perms`, `integer`>;
type `as_fs_perms.integer` <integer, ...> => class<`fs_perms`, `integer`>;
type `as_fs_perms.numeric` <double[], ...> => class<`fs_perms`, `integer`>;
type `assert` <character, ..., character> => null;
type `assert_no_missing` <character[] | class<`character`, `fs_path`>> => null;
type `auto_name` <character[]> => character[];
type `captures` <character[], integer[]> => class<`data.frame`>;
type `chmod_` <class<`character`, `fs_path`>, class<`fs_perms`, `integer`>> => null;
type `copyfile_` <class<`character`, `fs_path`>, class<`character`, `fs_path`>, logical> => any;
type `create_` <class<`character`, `fs_path`>, class<`fs_perms`, `integer`> | double> => any;
type `dir_copy` <character, character, logical> => class<`character`, `fs_path`>;
type `dir_create` <character | class<`character`, `fs_path`>, ..., character, logical, any> => any;
type `dir_delete` <character[] | class<`character`, `fs_path`>> => class<`character`, `fs_path`>;
type `dir_exists` <character | class<`character`, `fs_path`>> => logical;
type `dir_info` <character, logical, logical, character, null, null, logical, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `dir_ls` <character | class<`character`, `fs_path`>, logical, logical, character[], null | character, null, logical, logical, ..., any> => class<`character`, `fs_path`>;
type `dir_map` <class<`character`, `fs_path`> | character, class<`function`>, logical, logical, character[], logical> => list<any>;
type `dir_map_` <class<`character`, `fs_path`>, class<`function`>, logical, integer, double, logical> => list<any>;
type `dir_walk` <character, class<`function`>, logical, logical, character, logical> => class<`character`, `fs_path`>;
type `display_mode_to_symbolic_mode_posix` <character[]> => character;
type `expand_` <character[] | class<`character`, `fs_path`>, logical> => character[];
type `f` <..., character> => class<`character`, `fs_path`>;
type `file_access` <character, character> => logical;
type `file_chmod` <character[], character[]> => class<`character`, `fs_path`>;
type `file_copy` <character | class<`character`, `fs_path`>, character | class<`character`, `fs_path`>, logical> => any;
type `file_create` <character[] | class<`character`, `fs_path`>, ..., character> => any;
type `file_delete` <character[] | class<`character`, `fs_path`>> => class<`character`, `fs_path`>;
type `file_exists` <class<`character`, `fs_path`> | character[]> => logical[];
type `file_info` <character[] | class<`character`, `fs_path`>, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `file_move` <character, character> => class<`character`, `fs_path`>;
type `file_temp` <character, character, character> => class<`character`, `fs_path`>;
type `file_temp_pop` < > => (class<`character`, `fs_path`> | null);
type `file_temp_push` <character[]> => class<`character`, `fs_path`>;
type `file_touch` <character, character, class<`POSIXct`, `POSIXt`>> => class<`character`, `fs_path`>;
type `fs_bytes` <class<`fs_bytes`, `numeric`> | character[]> => class<`fs_bytes`, `numeric`>;
type `[.fs_path` <class<`character`, `fs_path`>, double | integer[]> => class<`character`, `fs_path`>;
type `==.fs_perms` <class<`fs_perms`, `integer`>, character> => logical;
type `&.fs_perms` <class<`fs_perms`, `integer`>, character | class<`fs_perms`, `integer`>> => class<`fs_perms`, `integer`>;
type `fs_perms` <character[] | class<`fs_perms`, `integer`> | double[], ...> => class<`fs_perms`, `integer`>;
type `FUN` <character[] | list<character[]>> => class<`character`, `fs_path`>;
type `getmode_` <character, double> => integer;
type `group_ids` < > => class<`data.frame`>;
type `groups_` < > => class<`data.frame`>;
type `is_absolute_path` <character[] | class<`character`, `fs_path`>> => logical[];
type `is_dir` <character | class<`character`, `fs_path`>> => logical[];
type `is_file` <class<`character`, `fs_path`> | character> => logical[];
type `is_link` <class<`character`, `fs_path`> | character> => logical[];
type `is_windows` < > => logical;
type `link_copy` <character | class<`character`, `fs_path`>, character | class<`character`, `fs_path`>, logical> => class<`character`, `fs_path`>;
type `link_create` <character | class<`character`, `fs_path`>, character | class<`character`, `fs_path`>, logical> => class<`character`, `fs_path`>;
type `link_create_symbolic_` <class<`character`, `fs_path`>, class<`character`, `fs_path`>> => null;
type `link_delete` <character[] | class<`character`, `fs_path`>> => class<`character`, `fs_path`>;
type `link_exists` <character | class<`character`, `fs_path`>> => logical[];
type `link_path` <character[] | class<`character`, `fs_path`>> => class<`character`, `fs_path`>;
type `mkdir_` <character[], class<`fs_perms`, `integer`>> => any;
type `move_` <class<`character`, `fs_path`>, class<`character`, `fs_path`>> => null;
type `new_fs_bytes` <double[]> => class<`fs_bytes`, `numeric`>;
type `new_fs_path` <character[]> => class<`character`, `fs_path`>;
type `new_fs_perms` <integer[]> => class<`fs_perms`, `integer`>;
type `Ops.fs_bytes` <class<`fs_bytes`, `numeric`>, character> => logical;
type `path` <..., character> => class<`character`, `fs_path`>;
type `path_` <character[] | list<character[]>, character> => character[];
type `path_abs` <character | class<`character`, `fs_path`>, character> => class<`character`, `fs_path`>;
type `path_common` <character[]> => class<`character`, `fs_path`>;
type `path_dir` <character> => character;
type `path_expand` <character[] | class<`character`, `fs_path`>> => class<`character`, `fs_path`>;
type `path_expand_r` <character> => class<`character`, `fs_path`>;
type `path_ext` <character> => character;
type `path_ext_remove` <character> => character;
type `path_ext_set` <character, character> => class<`character`, `fs_path`>;
type `path_file` <class<`character`, `fs_path`> | character> => character[];
type `path_filter` <character[], character | null, null | character, any, ...> => class<`character`, `fs_path`>;
type `path_home` <...> => class<`character`, `fs_path`>;
type `path_home_r` <...> => class<`character`, `fs_path`>;
type `path_join` <character[] | list<character[]>> => class<`character`, `fs_path`>;
type `path_norm` <character[] | class<`character`, `fs_path`>> => class<`character`, `fs_path`>;
type `path_package` <character, ...> => class<`character`, `fs_path`>;
type `path_real` <character> => class<`character`, `fs_path`>;
type `path_rel` <character | class<`character`, `fs_path`>, character> => class<`character`, `fs_path`>;
type `path_sanitize` <character, character> => character;
type `path_split` <character[] | class<`character`, `fs_path`>> => list<any>;
type `path_temp` <...> => class<`character`, `fs_path`>;
type `path_tidy` <character[] | class<`character`, `fs_path`> | list<any>> => class<`character`, `fs_path`>;
type `readlink_` <class<`character`, `fs_path`>> => character[];
type `realize_` <class<`character`, `fs_path`>> => character;
type `register_s3_method` <character, character, character, null> => null;
type `rmdir_` <character[]> => null;
type `stat_` <class<`character`, `fs_path`>, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `sum.fs_bytes` <class<`fs_bytes`, `numeric`>, ...> => class<`fs_bytes`, `numeric`>;
type `tidy_` <character[]> => character[];
type `touch_` <class<`character`, `fs_path`>, class<`POSIXct`, `POSIXt`>, class<`POSIXct`, `POSIXt`>> => null;
type `unlink_` <class<`character`, `fs_path`>> => null;
type `user_ids` < > => class<`data.frame`>;
type `users_` < > => class<`data.frame`>;
