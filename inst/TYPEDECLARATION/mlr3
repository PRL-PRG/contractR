type `append_log` <class<`data.frame`, `data.table`> | null, character, any, character[]> => class<`data.frame`, `data.table`>;
type `as_benchmark_result` <class<`R6`, `ResampleResult`>, ...> => class<`BenchmarkResult`, `R6`>;
type `as_benchmark_result.ResampleResult` <class<`R6`, `ResampleResult`>, ...> => class<`BenchmarkResult`, `R6`>;
type `as_data_backend` <class<`data.frame`> | class<`data.frame`, `data.table`> | class<`dgCMatrix`>, ...> => (class<`DataBackend`, `DataBackendDataTable`, `R6`> | class<`DataBackend`, `DataBackendMatrix`, `R6`>);
type `as_data_backend.data.frame` <class<`data.frame`> | class<`data.frame`, `data.table`>, null, logical | character, ...> => class<`DataBackend`, `DataBackendDataTable`, `R6`>;
type `as_data_backend.Matrix` <class<`dgCMatrix`>, class<`data.frame`>, character, ...> => class<`DataBackend`, `DataBackendMatrix`, `R6`>;
type `as.data.table.BenchmarkResult` <class<`BenchmarkResult`, `R6`>, ...> => class<`data.frame`, `data.table`>;
type `as.data.table.DictionaryLearner` <class<`Dictionary`, `DictionaryLearner`, `R6`>, ...> => class<`data.frame`, `data.table`>;
type `as.data.table.DictionaryMeasure` <class<`Dictionary`, `DictionaryMeasure`, `R6`>, ...> => class<`data.frame`, `data.table`>;
type `as.data.table.DictionaryResampling` <class<`Dictionary`, `DictionaryResampling`, `R6`>, ...> => class<`data.frame`, `data.table`>;
type `as.data.table.DictionaryTask` <class<`Dictionary`, `DictionaryTask`, `R6`>, ...> => class<`data.frame`, `data.table`>;
type `as.data.table.PredictionClassif` <class<`Prediction`, `PredictionClassif`, `R6`>, ...> => class<`data.frame`, `data.table`>;
type `as.data.table.PredictionRegr` <class<`Prediction`, `PredictionRegr`, `R6`>, ...> => class<`data.frame`, `data.table`>;
type `as_learner` <class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>, logical> => (class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>);
type `as_learner.Learner` <class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>, logical> => (class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>);
type `as_learners` <list<class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>>, logical> => list<class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>>;
type `as_learners.list` <list<class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>>, logical> => list<class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>>;
type `as_measures` <list<any> | class<`Measure`, `MeasureClassif`, `MeasureClassifCosts`, `R6`> | class<`Measure`, `MeasureClassif`, `MeasureClassifSimple`, `R6`> | class<`Measure`, `MeasureDebug`, `R6`> | null, any, logical> => list<any>;
type `as_measures.list` <list<any>, any, logical> => list<any>;
type `as_measures.Measure` <class<`Measure`, `MeasureClassif`, `MeasureClassifCosts`, `R6`> | class<`Measure`, `MeasureClassif`, `MeasureClassifSimple`, `R6`> | class<`Measure`, `MeasureDebug`, `R6`>, any, logical> => (list<class<`Measure`, `MeasureClassif`, `MeasureClassifCosts`, `R6`>> | list<class<`Measure`, `MeasureClassif`, `MeasureClassifSimple`, `R6`>> | list<class<`Measure`, `MeasureDebug`, `R6`>>);
type `as_measures.NULL` <null, character, logical> => list<class<`Measure`, `MeasureClassif`, `MeasureClassifSimple`, `R6`>>;
type `as_resampling` <class<`R6`, `Resampling`, `ResamplingCV`>, logical> => class<`R6`, `Resampling`, `ResamplingCV`>;
type `as_resampling.Resampling` <class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`> | class<`R6`, `Resampling`, `ResamplingSubsampling`> | class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>, logical> => (class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`> | class<`R6`, `Resampling`, `ResamplingSubsampling`> | class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>);
type `as_resamplings` <list<class<`R6`, `Resampling`, `ResamplingCV`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingSubsampling`>> | class<`R6`, `Resampling`, `ResamplingCV`>, logical> => (list<class<`R6`, `Resampling`, `ResamplingCV`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingSubsampling`>>);
type `as_resamplings.list` <list<class<`R6`, `Resampling`, `ResamplingCV`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingSubsampling`>>, logical> => (list<class<`R6`, `Resampling`, `ResamplingCV`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingSubsampling`>>);
type `as_resamplings.Resampling` <class<`R6`, `Resampling`, `ResamplingCV`>, logical> => list<class<`R6`, `Resampling`, `ResamplingCV`>>;
type `assert_backend` <class<`DataBackend`, `DataBackendDataTable`, `R6`>, any> => class<`DataBackend`, `DataBackendDataTable`, `R6`>;
type `assert_benchmark_result` <class<`BenchmarkResult`, `R6`>, any> => class<`BenchmarkResult`, `R6`>;
type `assert_cost_matrix` <class<`matrix`>, class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | null> => class<`matrix`>;
type `assert_learnable` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>, class<`Learner`, `LearnerClassif`, `LearnerClassifDebug`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`> | class<`Learner`, `LearnerRegr`, `LearnerRegrFeatureless`, `R6`>> => null;
type `assert_learner` <class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>, null, character[], any> => (class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>);
type `assert_learners` <list<class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>>, null, character[], any> => list<class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>>;
type `assert_measures` <list<any>, any, any, any> => list<any>;
type `assert_prediction` <class<`Prediction`, `PredictionClassif`, `R6`>, any> => class<`Prediction`, `PredictionClassif`, `R6`>;
type `assert_range` <double[], any> => double[];
type `assert_resampling` <class<`R6`, `Resampling`, `ResamplingCV`>, null, any> => class<`R6`, `Resampling`, `ResamplingCV`>;
type `assert_resamplings` <list<class<`R6`, `Resampling`, `ResamplingCV`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingSubsampling`>>, logical | null, any> => (list<class<`R6`, `Resampling`, `ResamplingCV`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingSubsampling`>>);
type `assert_ro_binding` <any> => null;
type `assert_row_ids` <integer[] | null, logical, any> => (integer[] | null);
type `assert_set` <character[], logical, any> => character[];
type `assert_task` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>, null, null, null, any> => (class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>);
type `assert_tasks` <list<class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>>, null, null, null, any> => list<class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>>;
type `as_task` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>, logical> => (class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>);
type `as_tasks` <list<class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>>, logical> => list<class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>>;
type `as_tasks.list` <list<class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>>, logical> => list<class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>>;
type `as_task.Task` <class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`> | class<`R6`, `Resampling`, `ResamplingSubsampling`> | class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>, logical> => (class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`> | class<`R6`, `Resampling`, `ResamplingSubsampling`> | class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>);
type `benchmark` <class<`data.frame`, `data.table`>, logical> => class<`BenchmarkResult`, `R6`>;
type `benchmark_grid` <list<class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>>, list<class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>>, class<`R6`, `Resampling`, `ResamplingCV`> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingSubsampling`>>> => class<`data.frame`, `data.table`>;
type `col_info` <class<`DataBackend`, `DataBackendDataTable`, `R6`> | class<`data.frame`, `data.table`>, ...> => class<`data.frame`, `data.table`>;
type `col_info.DataBackend` <class<`DataBackend`, `DataBackendDataTable`, `R6`>, ...> => class<`data.frame`, `data.table`>;
type `col_info.data.table` <class<`data.frame`, `data.table`>, character[], ...> => class<`data.frame`, `data.table`>;
type `convert_matching_types` <class<`data.frame`, `data.table`>, class<`data.frame`, `data.table`>> => list<null>;
type `c.PredictionClassif` <..., logical> => class<`Prediction`, `PredictionClassif`, `R6`>;
type `default_measures` <character> => (list<class<`Measure`, `MeasureClassif`, `MeasureClassifSimple`, `R6`>> | list<class<`Measure`, `MeasureRegr`, `MeasureRegrSimple`, `R6`>>);
type `get_progressor` <any, null> => null;
type `hash` <...> => character;
type `hashes` <list<class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>> | list<class<`R6`, `Resampling`, `ResamplingCV`>> | list<class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`>> | list<class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>>> => character[];
type `learner_predict` <class<`Learner`, `LearnerClassif`, `LearnerClassifDebug`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`> | class<`Learner`, `LearnerRegr`, `LearnerRegrFeatureless`, `R6`>, class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>, null | integer[]> => (class<`Prediction`, `PredictionClassif`, `R6`> | class<`Prediction`, `PredictionRegr`, `R6`>);
type `learner_train` <class<`Learner`, `LearnerClassif`, `LearnerClassifDebug`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`> | class<`Learner`, `LearnerRegr`, `LearnerRegrFeatureless`, `R6`>, class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>, null | integer[]> => (class<`Learner`, `LearnerClassif`, `LearnerClassifDebug`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`> | class<`Learner`, `LearnerRegr`, `LearnerRegrFeatureless`, `R6`>);
type `lrn` <character, ...> => (class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifDebug`, `R6`> | class<`Learner`, `LearnerRegr`, `LearnerRegrFeatureless`, `R6`>);
type `measure_score` <class<`Measure`, `MeasureClassif`, `MeasureClassifCosts`, `R6`> | class<`Measure`, `MeasureClassif`, `MeasureClassifSimple`, `R6`> | class<`Measure`, `MeasureDebug`, `R6`>, list<class<`Prediction`, `PredictionClassif`, `R6`>> | class<`Prediction`, `PredictionClassif`, `R6`>, any, any, any> => double;
type `measure_score_data` <class<`Measure`, `MeasureClassif`, `MeasureClassifCosts`, `R6`> | class<`Measure`, `MeasureClassif`, `MeasureClassifSimple`, `R6`> | class<`Measure`, `MeasureDebug`, `R6`>, class<`data.frame`, `data.table`>> => double[];
type `msr` <character, ...> => (class<`Measure`, `MeasureClassif`, `MeasureClassifCosts`, `R6`> | class<`Measure`, `MeasureClassif`, `MeasureClassifSimple`, `R6`> | class<`Measure`, `MeasureDebug`, `R6`> | class<`Measure`, `MeasureRegr`, `MeasureRegrSimple`, `R6`>);
type `predict.Learner` <class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>, class<`data.frame`, `data.table`>, character, ...> => (class<`factor`> | class<`matrix`> | class<`Prediction`, `PredictionClassif`, `R6`>);
type `replace_with` <character[], character, character> => character[];
type `resample` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>, class<`Learner`, `LearnerClassif`, `LearnerClassifFeatureless`, `R6`> | class<`Learner`, `LearnerClassif`, `LearnerClassifRpart`, `R6`>, class<`R6`, `Resampling`, `ResamplingCV`>, logical> => class<`R6`, `ResampleResult`>;
type `rsmp` <character, ...> => (class<`R6`, `Resampling`, `ResamplingBootstrap`> | class<`R6`, `Resampling`, `ResamplingCustom`> | class<`R6`, `Resampling`, `ResamplingCV`> | class<`R6`, `Resampling`, `ResamplingHoldout`> | class<`R6`, `Resampling`, `ResamplingRepeatedCV`> | class<`R6`, `Resampling`, `ResamplingSubsampling`>);
type `task_cbind` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>, class<`data.frame`>> => class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>;
type `task_data` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>, environment, integer[] | null, character[] | null, character, any> => class<`data.frame`, `data.table`>;
type `task_rbind` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>, class<`data.frame`, `data.table`>> => class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`>;
type `task_rm_data` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>> => (class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>);
type `task_set_col_roles` <class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`> | class<`R6`, `Task`, `TaskSupervised`>, environment, list<character[]>> => list<character[]>;
type `tgen` <character, ...> => (class<`R6`, `TaskGenerator`, `TaskGenerator2DNormals`> | class<`R6`, `TaskGenerator`, `TaskGeneratorFriedman1`> | class<`R6`, `TaskGenerator`, `TaskGeneratorSmiley`> | class<`R6`, `TaskGenerator`, `TaskGeneratorXor`>);
type `translate_types` <character[]> => class<`factor`>;
type `tsk` <character, ...> => (class<`R6`, `Task`, `TaskClassif`, `TaskSupervised`> | class<`R6`, `Task`, `TaskRegr`, `TaskSupervised`>);
type `ujoin` <class<`data.frame`, `data.table`>, class<`data.frame`, `data.table`>, character> => class<`data.frame`, `data.table`>;
type `use_future` < > => logical;
