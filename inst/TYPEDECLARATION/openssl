type `aes_any` <raw[], class<`hash`, `sha256`> | raw[], raw[], logical, character> => raw[];
type `aes_cbc_decrypt` <raw[], class<`hash`, `sha256`> | raw[], raw[]> => raw[];
type `aes_cbc_encrypt` <character | raw[], raw[] | class<`hash`, `sha256`>, raw[]> => raw[];
type `aes_decrypt` <raw[], class<`hash`, `sha256`> | raw[], raw[], character> => raw[];
type `aes_encrypt` <character | raw[], raw[] | class<`hash`, `sha256`>, raw[], character> => raw[];
type `as.character.hash` <class<`hash`, `md5`> | class<`hash`, `sha1`>, character, ...> => (class<`hash`, `md5`> | class<`hash`, `sha1`>);
type `as.list.cert` <class<`cert`>, ..., null> => list<any>;
type `as.list.key` <class<`ecdsa`, `key`> | class<`ed25519`, `key`> | class<`key`, `rsa`> | class<`key`, `x25519`>, ...> => list<any>;
type `as.list.pubkey` <class<`ed25519`, `pubkey`> | class<`pubkey`, `x25519`> | class<`ecdsa`, `pubkey`> | class<`pubkey`, `rsa`>, ...> => list<any>;
type `base64_decode` <character> => raw[];
type `base64_encode` <raw[], logical> => character;
type `bignum` <character | integer | class<`bignum`>, logical> => class<`bignum`>;
type `<.bignum` <class<`bignum`>, class<`bignum`>> => logical;
type `==.bignum` <class<`bignum`>, class<`bignum`>> => logical;
type `*.bignum` <class<`bignum`>, class<`bignum`>> => class<`bignum`>;
type `%/%.bignum` <class<`bignum`>, class<`bignum`>> => class<`bignum`>;
type `%%.bignum` <class<`bignum`>, class<`bignum`>> => class<`bignum`>;
type `+.bignum` <class<`bignum`>, class<`bignum`>> => class<`bignum`>;
type `bignum_mod` <class<`bignum`>, class<`bignum`>> => class<`bignum`>;
type `bn` <character | integer | class<`bignum`>, logical> => class<`bignum`>;
type `ca_bundle` < > => list<class<`cert`>>;
type `cert_info` <class<`cert`>, null> => list<any>;
type `cert_pubkey` <class<`cert`>> => class<`pubkey`, `rsa`>;
type `cert_verify` <list<class<`cert`>>, list<class<`cert`>>> => logical;
type `cert_verify_cert` <class<`cert`>, list<class<`cert`>>, list<class<`cert`>>> => logical;
type `connectionhash` <class<`connection`, `file`>, character> => raw[];
type `connectionhmac` <class<`connection`, `file`>, character, raw[]> => raw[];
type `data_sign` <raw[], class<`ed25519`, `key`>> => raw[];
type `data_verify` <raw[], raw[], class<`ed25519`, `pubkey`>> => logical;
type `decompose` <class<`ed25519`, `key`> | class<`ed25519`, `pubkey`> | class<`key`, `x25519`> | class<`pubkey`, `x25519`> | class<`ecdsa`, `pubkey`> | class<`ecdsa`, `key`> | class<`pubkey`, `rsa`> | class<`key`, `rsa`> | class<`dsa`, `pubkey`>, ...> => (raw[] | list<character | class<`bignum`> | class<`bignum`>>);
type `decompose.key` <class<`ed25519`, `key`> | class<`key`, `x25519`> | class<`ecdsa`, `key`> | class<`key`, `rsa`>, ...> => (raw[] | list<character | class<`bignum`> | class<`bignum`>>);
type `decompose.pubkey` <class<`ed25519`, `pubkey`> | class<`pubkey`, `x25519`> | class<`ecdsa`, `pubkey`> | class<`pubkey`, `rsa`> | class<`dsa`, `pubkey`>, ...> => (raw[] | list<character | class<`bignum`> | class<`bignum`>>);
type `decrypt_envelope` <raw[], raw[], raw[], class<`key`, `rsa`>, any> => raw[];
type `default_key` < > => character;
type `derive_pubkey` <class<`dsa`, `key`> | class<`ecdsa`, `key`> | class<`ed25519`, `key`> | raw[] | class<`key`, `rsa`> | class<`key`, `x25519`>> => (class<`dsa`, `pubkey`> | class<`ecdsa`, `pubkey`> | class<`ed25519`, `pubkey`> | class<`NA`, `pubkey`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`>);
type `download_ssl_cert` <character, double, logical> => list<class<`cert`>>;
type `dsa_keygen` <double> => class<`dsa`, `key`>;
type `ec_dh` <class<`key`, `x25519`>, class<`pubkey`, `x25519`>, any> => raw[];
type `ecdsa_parse` <raw[]> => list<class<`bignum`>>;
type `ecdsa_write` <class<`bignum`>, class<`bignum`>> => raw[];
type `ec_keygen` <character[]> => class<`ecdsa`, `key`>;
type `ed25519_keygen` < > => class<`ed25519`, `key`>;
type `ed25519_sign` <raw[], class<`ed25519`, `key`>> => raw[];
type `ed25519_verify` <raw[], raw[], class<`ed25519`, `pubkey`>> => logical;
type `encrypt_envelope` <raw[], class<`pubkey`, `rsa`>> => list<raw[]>;
type `filter` <character[]> => logical[];
type `fingerprint` <class<`dsa`, `key`> | class<`dsa`, `pubkey`> | class<`key`, `rsa`> | class<`pubkey`, `rsa`>, any> => (class<`hash`, `md5`> | class<`hash`, `sha1`> | class<`hash`, `sha256`>);
type `fingerprint.key` <class<`dsa`, `key`> | class<`key`, `rsa`>, class<`function`>> => class<`hash`, `md5`>;
type `fingerprint.pubkey` <class<`dsa`, `pubkey`> | class<`pubkey`, `rsa`>, class<`function`>> => (class<`hash`, `md5`> | class<`hash`, `sha1`> | class<`hash`, `sha256`>);
type `fpdata` <class<`ed25519`, `pubkey`> | class<`pubkey`, `x25519`> | class<`ecdsa`, `pubkey`> | class<`pubkey`, `rsa`> | class<`dsa`, `pubkey`>, ...> => list<raw[]>;
type `fpdata.dsa` <class<`dsa`, `pubkey`>> => list<raw[]>;
type `fpdata.ecdsa` <class<`ecdsa`, `pubkey`>> => list<raw[]>;
type `fpdata.ed25519` <class<`ed25519`, `pubkey`>> => list<raw[]>;
type `fpdata.rsa` <class<`pubkey`, `rsa`>> => list<raw[]>;
type `fpdata.x25519` <class<`pubkey`, `x25519`>> => list<raw[]>;
type `FUN` <character, logical> => class<`cert`> | <class<`bignum`> | raw[]> => raw[];
type `hash` <raw[] | character[], null | character> => (class<`hash`, `sha256`> | class<`hash`, `hmac`, `sha256`>) | <raw[] | character | class<`cert`>, null | character> => (class<`hash`, `sha1`> | class<`hash`, `hmac`, `sha1`>);
type `hashfun` <raw[] | character[], null | character> => (class<`hash`, `sha256`> | class<`hash`, `hmac`, `sha256`>) | <raw[] | character | class<`cert`>, null | character> => (class<`hash`, `sha1`> | class<`hash`, `hmac`, `sha1`>) | <raw[] | class<`connection`, `file`> | character[] | class<`cert`>, null | character> => (class<`hash`, `md5`> | class<`hash`, `hmac`, `md5`>);
type `hash_sign` <class<`hash`, `md5`> | class<`hash`, `sha1`> | class<`hash`, `sha256`>, class<`key`, `rsa`> | class<`ecdsa`, `key`>> => raw[];
type `hash_verify` <class<`hash`, `md5`> | class<`hash`, `sha1`> | class<`hash`, `sha256`>, raw[], class<`pubkey`, `rsa`> | class<`ecdsa`, `pubkey`>> => logical;
type `hmac_feed` <class<`md`>, raw[]> => logical;
type `hmac_final` <class<`md`>> => raw[];
type `hmac_init` <character, raw[]> => class<`md`>;
type `is_positive_integer` <integer> => logical;
type `is_pubkey_str` <character | class<`ecdsa`, `pubkey`> | class<`ed25519`, `pubkey`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`> | raw[]> => logical;
type `is_windows` < > => logical;
type `$.key` <class<`ecdsa`, `key`> | class<`key`, `rsa`> | class<`key`, `x25519`>, character> => (class<`ecdsa`, `pubkey`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`>);
type `md5` <raw[] | class<`connection`, `file`> | character[] | class<`cert`>, null | character> => (class<`hash`, `md5`> | class<`hash`, `hmac`, `md5`>);
type `md_feed` <class<`md`>, raw[]> => logical;
type `md_final` <class<`md`>> => raw[];
type `md_init` <character> => class<`md`>;
type `my_key` < > => class<`key`, `rsa`>;
type `my_pubkey` < > => class<`pubkey`, `rsa`>;
type `normalize_home` <character> => character;
type `openssl_config` < > => list<character | logical>;
type `parse_der_key` <class<`ecdsa`, `key`> | class<`ed25519`, `key`> | class<`key`, `rsa`> | class<`key`, `x25519`>> => raw[];
type `parse_der_pubkey` <class<`ecdsa`, `pubkey`> | class<`ed25519`, `pubkey`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`>> => raw[];
type `parse_hash` <class<`hash`, `md5`>> => class<`hash`, `md5`>;
type `parse_pem` <raw[]> => list<list<character | raw[]>>;
type `parse_pem_cert` <raw[], any> => raw[];
type `parse_pem_key` <raw[], character | class<`function`>> => raw[];
type `path_or_raw` <class<`hash`, `md5`> | character | raw[]> => (class<`hash`, `md5`> | raw[]);
type `pem_export` <class<`cert`> | class<`key`, `rsa`> | class<`pubkey`, `rsa`>, ...> => character;
type `pem_export.cert` <class<`cert`>, ...> => character;
type `pem_export.key` <class<`key`, `rsa`>, character, ...> => character;
type `pem_export.pubkey` <class<`pubkey`, `rsa`>, ...> => character;
type `pem_names` <raw[]> => character;
type `print.cert` <class<`cert`>, ...> => null;
type `print.key` <class<`key`, `rsa`>, ...> => null;
type `print.pubkey` <class<`pubkey`, `rsa`>, ...> => null;
type `priv_decompose.ecdsa` <class<`ecdsa`, `key`>> => list<character | class<`bignum`>>;
type `priv_decompose.ed25519` <class<`ed25519`, `key`> | class<`key`, `x25519`>> => raw[];
type `priv_decompose.rsa` <class<`key`, `rsa`>> => list<class<`bignum`>>;
type `priv_decompose.x25519` <class<`ed25519`, `key`> | class<`key`, `x25519`>> => raw[];
type `pubkey_bitsize` <class<`ecdsa`, `pubkey`> | class<`ed25519`, `pubkey`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`>> => integer;
type `pubkey_decompose.dsa` <class<`dsa`, `pubkey`>> => list<class<`bignum`>>;
type `pubkey_decompose.ecdsa` <class<`ecdsa`, `pubkey`>> => list<character | class<`bignum`>>;
type `pubkey_decompose.ed25519` <class<`ed25519`, `pubkey`> | class<`pubkey`, `x25519`>> => raw[];
type `pubkey_decompose.rsa` <class<`pubkey`, `rsa`>> => list<class<`bignum`>>;
type `pubkey_decompose.x25519` <class<`ed25519`, `pubkey`> | class<`pubkey`, `x25519`>> => raw[];
type `pubkey_type` <class<`ecdsa`, `pubkey`> | class<`NA`, `pubkey`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`> | raw[]> => character;
type `rand_bytes` <double> => raw[];
type `rand_num` <double> => double[];
type `rawhash` <class<`cert`> | raw[], character, null> => raw[];
type `rawstringhash` <class<`connection`, `file`> | character[] | class<`cert`> | raw[], character, character | null> => (class<`hash`, `hmac`, `md5`> | class<`hash`, `hmac`, `sha1`> | class<`hash`, `hmac`, `sha256`> | class<`hash`, `md5`> | class<`hash`, `sha1`> | class<`hash`, `sha256`>);
type `read_cert_bundle` <character> => list<class<`cert`>>;
type `read_ed25519_key` <raw[]> => class<`ed25519`, `key`>;
type `read_ed25519_pubkey` <raw[]> => class<`ed25519`, `pubkey`>;
type `read_input` <class<`ecdsa`, `key`> | class<`ecdsa`, `pubkey`> | class<`ed25519`, `key`> | class<`ed25519`, `pubkey`> | class<`key`, `rsa`> | class<`key`, `x25519`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`> | character> => (class<`ecdsa`, `key`> | class<`ecdsa`, `pubkey`> | class<`ed25519`, `key`> | class<`ed25519`, `pubkey`> | class<`key`, `rsa`> | class<`key`, `x25519`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`> | raw[]);
type `read_key` <class<`ecdsa`, `key`> | class<`ed25519`, `key`> | character | class<`key`, `rsa`> | class<`key`, `x25519`>, any, logical> => (class<`ecdsa`, `key`> | class<`ed25519`, `key`> | class<`key`, `rsa`> | class<`key`, `x25519`>);
type `read_pubkey` <class<`ecdsa`, `pubkey`> | class<`ed25519`, `pubkey`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`>, logical> => (class<`ecdsa`, `pubkey`> | class<`ed25519`, `pubkey`> | class<`pubkey`, `rsa`> | class<`pubkey`, `x25519`>);
type `read_raw_key_ed25519` <raw[]> => raw[];
type `read_raw_pubkey_ed25519` <raw[]> => raw[];
type `rsa_decrypt` <raw[], class<`key`, `rsa`>, any> => raw[];
type `rsa_encrypt` <raw[], class<`pubkey`, `rsa`>> => raw[];
type `rsa_keygen` <double> => class<`key`, `rsa`>;
type `sha1` <raw[] | character | class<`cert`>, null | character> => (class<`hash`, `sha1`> | class<`hash`, `hmac`, `sha1`>);
type `sha256` <raw[] | character[], null | character> => (class<`hash`, `sha256`> | class<`hash`, `hmac`, `sha256`>);
type `signature_create` <character | class<`hash`, `md5`> | raw[], class<`function`> | null, class<`key`, `rsa`> | class<`ecdsa`, `key`>, any> => raw[];
type `signature_verify` <character | class<`hash`, `md5`> | raw[], raw[], class<`function`> | null, class<`pubkey`, `rsa`> | class<`ecdsa`, `pubkey`>> => logical;
type `split_pem` <raw[]> => character[];
type `stopifnot` <...> => null;
type `stringhash` <character[], character, null | raw[]> => character[];
type `write_pem` <class<`cert`> | class<`key`, `rsa`> | class<`pubkey`, `rsa`>, null | character, null | character> => character;
type `write_raw_key` <class<`ed25519`, `key`> | class<`key`, `x25519`>> => raw[];
type `write_raw_pubkey` <class<`ed25519`, `pubkey`> | class<`pubkey`, `x25519`>> => raw[];
type `write_ssh` <class<`pubkey`, `rsa`>, character | null> => character;
type `x25519_diffie_hellman` <class<`key`, `x25519`>, class<`pubkey`, `x25519`>> => raw[];
type `x25519_keygen` < > => class<`key`, `x25519`>;
