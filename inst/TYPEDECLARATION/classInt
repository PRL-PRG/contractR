type `::` <double[], double, character, double, null, character[], null, logical, logical, integer, double, language> => struct<`var`:double[], `brks`:double[]>;
type `filter` <character[]> => logical[];
type `.rbrks` <double[]> => double[];
type `classIntervals` <double[], double | null, character, double, double[] | null | character, character[] | double | symbol, null | double, logical, logical, integer, double, language | character[]> => struct<`var`:double[], `brks`:double[]>;
type `findColours` <struct<`var`:double[], `brks`:double[]>, character[], character, character, character, language, logical> => character[];
type `findCols` <struct<`var`:double[], `brks`:double[]>> => double[];
type `fish` <double[], integer> => ^double[];
type `FUN` <struct<`V1`:double[], `V2`:double[]> | double[]> => double;
type `getBclustClassIntervals` <struct<`var`:double[], `brks`:double[]>, double> => struct<`var`:double[], `brks`:double[]>;
type `getHclustClassIntervals` <struct<`var`:double[], `brks`:double[]>, double> => struct<`var`:double[], `brks`:double[]>;
type `gvf` <double[], integer[]> => double;
type `jenks.tests` <struct<`var`:double[], `brks`:double[]>, double[]> => double[];
type `logLik.classIntervals` <struct<`var`:double[], `brks`:double[]>, null> => double;
type `nPartitions` <struct<`var`:double[], `brks`:double[]>> => double;
type `oai` <double[], integer[], double[]> => double;
type `plot.classIntervals` <struct<`var`:double[], `brks`:double[]>, character[], character> => null;
type `print.classIntervals` <struct<`var`:double[], `brks`:double[]>, integer, null, character, character, character, logical, logical> => integer[];
type `roundEndpoint` <double, character, null | double> => character;
type `sumabs` <double[]> => double;
type `sumabs1` <^double[]> => double;
type `sumsq` <double[]> => double;
type `tableClassIntervals` <double[], double[], symbol | character, symbol | character, symbol | character, symbol, logical, null | character, null | double, logical, symbol | double[] | null> => integer[];
type `tai` <double[], integer[]> => double;
