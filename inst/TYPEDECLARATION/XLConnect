type `:::` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | class<`function`> | character | class<`Date`> | class<`factor`, `ordered`> | class<`POSIXct`, `POSIXt`> | double | list<any>, any> => any;
type `addImage` <class<`workbook`>, character, character, logical> => null | <class<`workbook`>, character, character, logical> => null;
type `appendNamedRegion` <class<`workbook`>, class<`data.frame`>, character, logical, null> => null | <class<`workbook`>, class<`data.frame`>, character, logical, null> => null;
type `appendWorksheet` <class<`workbook`>, class<`data.frame`>, character, logical, null> => null | <class<`workbook`>, class<`data.frame`>, character, logical, null> => null;
type `aref` <character | double[], double[]> => character;
type `aref2idx` <character[]> => class<`matrix`>;
type `classToXlcType` <character[]> => character[];
type `clearNamedRegion` <class<`workbook`>, character[]> => null | <class<`workbook`>, character[]> => null;
type `clearRange` <class<`workbook`>, character, class<`matrix`> | double[]> => null | <class<`workbook`>, character, class<`matrix`> | double[]> => null;
type `clearRangeFromReference` <class<`workbook`>, character[]> => null | <class<`workbook`>, character[]> => null;
type `clearSheet` <class<`workbook`>, double> => null | <class<`workbook`>, character[] | double> => null | <class<`workbook`>, character[]> => null;
type `cloneSheet` <class<`workbook`>, character, character> => null | <class<`workbook`>, character, character> => null;
type `col2idx` <character[]> => double[];
type `createCellStyle` <class<`workbook`>, character> => class<`cellstyle`> | <class<`workbook`>, any> => class<`cellstyle`> | <class<`workbook`>, any> => class<`cellstyle`>;
type `createFreezePane` <class<`workbook`>, character, double, double, double, double> => null | <class<`workbook`>, character, double, double, double, double> => null;
type `createName` <class<`workbook`>, character, character, logical> => any | <class<`workbook`>, character, character, logical> => any;
type `createSheet` <class<`workbook`>, character[]> => any | <class<`workbook`>, character[]> => any;
type `createSplitPane` <class<`workbook`>, character, double, double, double, double> => null | <class<`workbook`>, character, double, double, double, double> => null;
type `cref2idx` <character[]> => class<`matrix`>;
type `existsCellStyle` <class<`workbook`>, character> => logical | <class<`workbook`>, character> => logical;
type `existsName` <class<`workbook`>, character> => logical | <class<`workbook`>, character> => logical;
type `existsSheet` <class<`workbook`>, character> => logical | <class<`workbook`>, character> => logical;
type `extractRownames` <class<`data.frame`> | list<class<`data.frame`>>, null | character | double> => (class<`data.frame`> | list<class<`data.frame`>>);
type `extractSheetName` <any> => any;
type `getActiveSheetIndex` <class<`workbook`>> => integer | <class<`workbook`>> => integer;
type `getActiveSheetName` <class<`workbook`>> => character | <class<`workbook`>> => character;
type `getBoundingBox` <class<`workbook`>, double[], double[], double[], double[], double[], logical, logical> => any | <class<`workbook`>, double[] | character[], double[], double[], double[], double[], logical, logical> => any | <class<`workbook`>, character[], double, double, double, double, logical, logical> => class<`matrix`>;
type `getCellFormula` <class<`workbook`>, character, double, double> => character | <class<`workbook`>, double, double, double> => character | <class<`workbook`>, double | character, double, double> => character;
type `getCellStyle` <class<`workbook`>, character> => class<`cellstyle`> | <class<`workbook`>, character> => class<`cellstyle`>;
type `getCellStyleForType` <class<`workbook`>, character> => class<`cellstyle`> | <class<`workbook`>, character> => class<`cellstyle`>;
type `getColSubset` <any, character[] | double[], double[], double[], double[], double[], logical, double[], character[] | double[] | null | list<double[]>, character[] | null | double[] | list<double[]>> => any;
type `getDefinedNames` <class<`workbook`>, logical> => character[] | <class<`workbook`>, logical> => character[];
type `getForceFormulaRecalculation` <class<`workbook`>, character> => logical | <class<`workbook`>, character> => logical;
type `getLastColumn` <class<`workbook`>, character> => double | <class<`workbook`>, character> => double;
type `getLastRow` <class<`workbook`>, character> => double | <class<`workbook`>, character> => double;
type `getOrCreateCellStyle` <class<`workbook`>, character> => class<`cellstyle`> | <class<`workbook`>, character> => class<`cellstyle`>;
type `getReferenceCoordinatesForName` <class<`workbook`>, character[]> => class<`matrix`> | <class<`workbook`>, character[]> => class<`matrix`>;
type `getReferenceCoordinatesForTable` <class<`workbook`>, double, character> => class<`matrix`> | <class<`workbook`>, character, character> => class<`matrix`> | <class<`workbook`>, character | double, character> => class<`matrix`>;
type `getReferenceFormula` <class<`workbook`>, character[]> => any | <class<`workbook`>, character[]> => any;
type `getSheetPos` <class<`workbook`>, character[]> => double[] | <class<`workbook`>, character[]> => double[];
type `getSheets` <class<`workbook`>> => character[] | <class<`workbook`>> => character[];
type `getTables` <class<`workbook`>, character, logical> => character | <class<`workbook`>, double, logical> => character | <class<`workbook`>, character | double, logical> => character;
type `hideSheet` <class<`workbook`>, character, logical> => null | <class<`workbook`>, character, logical> => null;
type `idx2aref` <class<`matrix`> | double[]> => character[];
type `idx2col` <double[]> => character[];
type `idx2cref` <class<`matrix`> | double[], logical, logical> => character[];
type `includeRownames` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | class<`function`> | character | class<`Date`> | class<`factor`, `ordered`> | class<`POSIXct`, `POSIXt`> | double | list<any>, any> => any;
type `isSheetHidden` <class<`workbook`>, character> => logical | <class<`workbook`>, character> => logical;
type `isSheetVeryHidden` <class<`workbook`>, character> => logical | <class<`workbook`>, character> => logical;
type `isSheetVisible` <class<`workbook`>, character> => logical | <class<`workbook`>, character> => logical;
type `.jseq` <character[] | class<`cellstyle`>> => class<`jobjRef`>;
type `.jsle` <double[]> => class<`jobjRef`>;
type `jTryCatch` <...> => any;
type `loadWorkbook` <character, logical, character | null> => any;
type `mergeCells` <class<`workbook`>, character, character> => null | <class<`workbook`>, character, character> => null;
type `normalizeDataframe` <class<`data.frame`>, logical> => class<`data.frame`>;
type `onErrorCell` <class<`workbook`>, character> => null | <class<`workbook`>, character> => null;
type `print` <class<`workbook`>, ...> => character;
type `readNamedRegion` <class<`workbook`>, character[], logical, null | character, any, logical, any, logical, logical, null | character[] | double[] | list<double[]>, null | character[] | double[] | list<double[]>, logical, character> => any | <class<`workbook`>, character[], logical, null | character, any, logical, any, logical, logical, null | character[] | double[] | list<double[]>, null | character[] | double[] | list<double[]>, logical, character> => any;
type `readNamedRegionFromFile` <character, ...> => (class<`data.frame`> | list<class<`data.frame`>>);
type `readTable` <class<`workbook`>, double, character, logical, null, character[], logical, character, logical, logical, null, null, logical, character> => class<`data.frame`> | <class<`workbook`>, character | double, character, logical, null, any, logical, any, logical, logical, null, null, logical, character> => class<`data.frame`> | <class<`workbook`>, character, character, logical, null, any, logical, any, logical, logical, null, null, logical, character> => class<`data.frame`>;
type `readWorksheet` <class<`workbook`>, double[], any, double[], double[], any, logical, logical, character | null, logical, null | double | character, any, logical, any, logical, any, null | double[] | character[] | list<double[]>, null | character[] | double[] | list<double[]>, logical, character> => any | <class<`workbook`>, character[], double[], double[], double[], double[], logical, logical, character | null, logical, null | character, any, logical, any, logical, logical, null | character[] | double[] | list<double[]>, null | character[] | double[] | list<double[]>, logical, character> => any | <class<`workbook`>, double[] | character[], any, double[], double[], any, logical, logical, character | null, logical, null | character | double, any, logical, any, logical, any, null | character[] | double[] | list<double[]>, null | character[] | double[] | list<double[]>, logical, character> => any;
type `readWorksheetFromFile` <character, ...> => (class<`data.frame`> | list<class<`data.frame`>>);
type `removeName` <class<`workbook`>, character> => null | <class<`workbook`>, character> => null;
type `removePane` <class<`workbook`>, character> => null | <class<`workbook`>, character> => null;
type `removeSheet` <class<`workbook`>, character> => null | <class<`workbook`>, character> => null;
type `renameSheet` <class<`workbook`>, character, character> => any | <class<`workbook`>, double, character> => null | <class<`workbook`>, character | double, character> => any;
type `rg2idx` <character> => class<`matrix`>;
type `saveWorkbook` <class<`workbook`>, any> => null | <class<`workbook`>, any> => null;
type `seqle` <integer[]> => list<double | integer[]>;
type `setActiveSheet` <class<`workbook`>, character> => null | <class<`workbook`>, character> => null;
type `setAutoFilter` <class<`workbook`>, character, character> => null | <class<`workbook`>, character, character> => null;
type `setBorder` <class<`cellstyle`>, character[], double, double[]> => null | <class<`cellstyle`>, character[], double, double[]> => null;
type `setCellFormula` <class<`workbook`>, character, double, double, character> => null | <class<`workbook`>, character, double, double, character> => null;
type `setCellStyle` <class<`workbook`>, any, character, double[], double | integer[], class<`cellstyle`>> => null | <class<`workbook`>, any, character, double[], double | integer[], class<`cellstyle`>> => null;
type `setCellStyleForType` <class<`workbook`>, character, class<`cellstyle`>> => null | <class<`workbook`>, character, class<`cellstyle`>> => null;
type `setColumnWidth` <class<`workbook`>, character, double, double> => null | <class<`workbook`>, character, double, double> => null;
type `setDataFormat` <class<`cellstyle`>, character> => null | <class<`cellstyle`>, character> => null;
type `setDataFormatForType` <class<`workbook`>, character, character> => null | <class<`workbook`>, character, character> => null;
type `setFillBackgroundColor` <class<`cellstyle`>, double> => null | <class<`cellstyle`>, double> => null;
type `setFillForegroundColor` <class<`cellstyle`>, double> => null | <class<`cellstyle`>, double> => null;
type `setFillPattern` <class<`cellstyle`>, double> => null | <class<`cellstyle`>, double> => null;
type `setForceFormulaRecalculation` <class<`workbook`>, character, logical> => null | <class<`workbook`>, double, logical> => null | <class<`workbook`>, character | double, logical> => null;
type `setHyperlink` <class<`workbook`>, any, character, double[], double, character, character[]> => null | <class<`workbook`>, any, character, double[], double, character, character[]> => null;
type `setMissingValue` <class<`workbook`>, character[] | null | list<character | double>> => null | <class<`workbook`>, character[] | null | list<character | double>> => null;
type `setRowHeight` <class<`workbook`>, character, double, double> => null | <class<`workbook`>, character, double, double> => null;
type `setSheetColor` <class<`workbook`>, character, double> => null | <class<`workbook`>, character | double, double> => null | <class<`workbook`>, double, double> => null;
type `setSheetPos` <class<`workbook`>, character[], double[]> => any | <class<`workbook`>, character[], double[]> => any;
type `setStyleAction` <class<`workbook`>, character> => null | <class<`workbook`>, character> => null;
type `setStyleNamePrefix` <class<`workbook`>, character> => null | <class<`workbook`>, character> => null;
type `setWrapText` <class<`cellstyle`>, logical> => null | <class<`cellstyle`>, logical> => null;
type `summary` <class<`workbook`>, ...> => null;
type `unhideSheet` <class<`workbook`>, character> => null | <class<`workbook`>, character> => null;
type `unmergeCells` <class<`workbook`>, character, character> => null | <class<`workbook`>, character, character> => null;
type `with.workbook` <class<`workbook`>, any, ...> => (class<`table`> | logical);
type `wrapList` <class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | class<`data.frame`> | class<`jarrayRef`> | class<`cellstyle`> | list<class<`jarrayRef`> | class<`jobjRef`> | class<`data.frame`>>> => list<any>;
type `writeNamedRegion` <class<`workbook`>, class<`data.frame`> | class<`function`>, character, logical, null | character> => any | <class<`workbook`>, class<`data.frame`> | class<`function`>, character, logical, null | character> => any;
type `writeNamedRegionToFile` <character, class<`data.frame`>, character, character | null, ..., character, logical> => class<`workbook`>;
type `writeWorksheet` <class<`workbook`>, class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, character, double, double, logical, character | null> => null | <class<`workbook`>, class<`data.frame`> | class<`function`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | list<any>, character, double, double, logical, null | character> => any | <class<`workbook`>, class<`function`>, character, double, double, logical, null> => any | <class<`workbook`>, class<`data.frame`>, character, double, double, logical, null | character> => any;
type `writeWorksheetToFile` <character, class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`> | list<any>, character[], ..., character, logical> => class<`workbook`>;
type `xlcCall` <class<`workbook`> | class<`cellstyle`>, character, ..., logical, logical> => any;
type `xlcDump` <character[], ..., character, character, logical> => logical[];
type `xlcFreeMemory` <...> => null;
type `xlcMemoryReport` < > => null;
type `XLConnectSettings` <class<`packageDescription`>> => null;
type `xlcRestore` <character, double, logical> => logical[];
