type `:::` <struct<>, logical | character> => struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>;
type `.jseq` < > => character[];
type `.jsle` < > => double[];
type `.local` <character, ? character, logical> => null;
type `[` <character, ???, ???, logical> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `[[` <character, ???, ???> => struct<`Car`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `[[<-` <character | ???, character | ???, struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> => character;
type `[<-` <???, double | ???, struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> => character;
type `$` <character | struct<> | ???, character> => ? any => any;
type `addImage` <character, character, logical> => null;
type `appendNamedRegion` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, logical, null> => null;
type `appendWorksheet` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, logical, null> => null;
type `aref` <character | double[], double[]> => character;
type `aref2idx` <character[]> => ^double[];
type `classToXlcType` <character[]> => character[];
type `clearNamedRegion` <character[]> => null;
type `clearRange` <character, ^double[]> => null;
type `clearRangeFromReference` <character[]> => null;
type `clearSheet` <double | character[]> => null;
type `cloneSheet` <character, character> => null;
type `col2idx` <character[]> => double[];
type `createCellStyle` < > => character | ???;
type `createFreezePane` <character, double, double, double, double> => null;
type `createName` <character, character, logical> => null;
type `createSheet` <character[]> => null;
type `createSplitPane` <character, double, double, double, double> => null;
type `cref2idx` <character[]> => ^double[];
type `existsCellStyle` <character> => logical;
type `existsName` <character> => logical;
type `existsSheet` <character> => logical;
type `extractRownames` <tuple<struct<>> | tuple<struct<`A`:character[]>> | tuple<struct<`A`:double[]>> | tuple<struct<`A`:^double[], `B`:character[]>> | tuple<struct<`A`:^double[], `C`:^character[]>> | tuple<struct<`AAA`:^double[], `BBB`:^character[], `CCC`:^logical[], `DDD`:^double[]>> | tuple<struct<`B`:^character[], `D`:^double[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`A`:^double[], `D`:^double[]>, struct<`B`:^character[], `D`:^double[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`A`:^double[], `D`:^double[]>, struct<`C`:^character[], `D`:^double[]>, struct<`A`:double[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`C`:^character[], `D`:^double[]>, struct<`C`:^character[], `D`:^double[]>> | tuple<struct<`Col1`:character[], `Col2`:character[]>> | tuple<struct<`Col1`:^double[], `Col2`:^double[]>> | tuple<struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | tuple<struct<`disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[]>> | tuple<struct<`.rownames`:character[], `Fertility`:double[], `Agriculture`:double[], `Examination`:double[], `Education`:double[], `Catholic`:double[], `Infant.Mortality`:double[]>> | tuple<struct<`mpg`:double[], `disp`:double[], `drat`:double[]>> | tuple<struct<`NumericColumn`:^double[]>, struct<`B`:character[]>, struct<`A`:^double[]>> | tuple<struct<`NumericColumn`:^double[], `StringColumn`:^character[], `BooleanColumn`:logical[]>> | tuple<struct<`NumericColumn`:^double[], `StringColumn`:^character[], `BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>> | tuple<struct<`.rownames`:double[], `Ozone`:^double[], `Solar.R`:^double[], `Wind`:double[], `Temp`:double[], `Month`:double[], `Day`:double[]>> | tuple<struct<`.rownames`:double[], `Plant`:character[], `Type`:character[], `Treatment`:character[], `conc`:double[], `uptake`:double[]>> | tuple<struct<`.rownames`:double[], `Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>> | tuple<struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | tuple<struct<`Var1`:double[], `Var2`:character[], `Var3`:^double[], `Var4`:double[]>> | tuple<struct<`.rownames`:double[], `weight`:double[], `group`:character[]>> | tuple<struct<`weight`:double[], `Time`:double[], `Chick`:character[], `Diet`:character[]>> | tuple<struct<`With whitespace`:double[], `And some other funky characters: _=?^~!$@#%ยง`:character[]>> | tuple<struct<`x`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | tuple<struct<`x`:double>> | tuple<struct<`X21`:double[], `X6`:double[], `X160`:double[], `X110`:double[], `X3.9`:double[], `X2.62`:double[], `X16.46`:double[], `X0`:double[], `X1`:double[], `X4`:double[], `X4.1`:double[]>> | tuple<struct<`Year`:double[], `Days`:double[], `Col3`:^logical[], `Pupil`:character[]>, struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>, struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>> | struct<`AA`:struct<`A`:^character[]>> | struct<`AA`:struct<`Col1`:double[], `Col2`:double[], `Col3`:double[]>> | struct<`AAA`:struct<`A`:double[], `B`:character[], `C`:logical[]>, `BBB`:struct<`D`:double[], `E`:character[], `F`:logical[]>> | struct<`AllLocal`:struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | struct<`BB`:struct<`B`:^double[]>> | struct<`BB`:struct<`Col1`:character[], `Col2`:character[], `Col3`:character[], `Col4`:character[], `Col5`:character[]>> | struct<`BodyRemote`:struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | struct<`BothRemote`:struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | struct<`Calendar`:struct<`Year`:double[], `Days`:double[]>> | struct<`CC`:struct<`C`:^double[]>> | struct<`cdf`:struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | struct<`cdfRegion`:struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | struct<`conversion`:struct<`A`:double[], `B`:double[], `C`:logical[]>> | struct<`Conversion`:struct<`BBB`:^character[], `DDD`:^double[]>> | struct<`DD`:struct<`D`:^double[]>> | struct<`EE`:struct<`E`:^character[]>> | struct<`HeadersRemote`:struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | struct<`IQ`:struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>> | struct<`Iris`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>> | struct<`missing`:struct<`A`:character[], `B`:character[]>> | struct<`missing`:struct<`A`:^double[], `B`:^character[]>> | struct<`Missing1`:struct<`A`:^double[], `B`:^character[], `C`:^logical[], `D`:^double[]>> | struct<`Missing2`:struct<`A`:^double[], `B`:^character[], `C`:^logical[], `D`:^double[]>> | struct<`mtcars`:struct<`mpg`:double[], `disp`:double[], `drat`:double[]>> | struct<`mtcars3`:struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | struct<`mtcars4`:struct<`Car`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | struct<`MyData`:struct<`A`:^character[], `B`:^double[], `C`:double[], `D`:^double[], `E`:^character[]>> | struct<`rownames`:struct<`Car`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | struct<`rownames2`:struct<`Car`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | struct<`Simplify1`:struct<`A`:double[]>> | struct<`Simplify2`:struct<`A`:double, `B`:double, `C`:double, `D`:double>> | struct<`Simplify3`:struct<`A`:logical, `B`:logical, `C`:logical, `D`:logical>> | struct<`Simplify4`:struct<`A`:character[]>> | struct<`test`:struct<`A`:character[], `B`:double[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`A`:double[]>, `BBB`:struct<`E`:character[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`A`:double[]>, `BBB`:struct<`F`:logical[]>, `Test`:struct<`NumericColumn`:^double[], `DateTimeColumn`:^double[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`C`:logical[]>, `BBB`:struct<`F`:logical[]>> | struct<`Test`:struct<`NumericColumn`:^double[]>, `AAA`:struct<`C`:logical[]>, `BBB`:struct<`D`:double[]>> | struct<`Test`:struct<`NumericColumn`:^double[], `StringColumn`:^character[], `BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>> | struct<`VariableNames`:struct<`With whitespace`:double[], `And some other funky characters: _=?^~!$@#%ยง`:character[]>> | struct<`womenName`:struct<`height`:double[], `weight`:double[]>>, ? double | character> => tuple<struct<>> | tuple<struct<`A`:character[]>> | tuple<struct<`A`:double[]>> | tuple<struct<`A`:^double[], `B`:character[]>> | tuple<struct<`A`:^double[], `C`:^character[]>> | tuple<struct<`AAA`:^double[], `BBB`:^character[], `CCC`:^logical[], `DDD`:^double[]>> | tuple<struct<`B`:^character[], `D`:^double[]>> | tuple<struct<`B`:double[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`A`:^double[], `D`:^double[]>, struct<`B`:^character[], `D`:^double[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`A`:^double[], `D`:^double[]>, struct<`C`:^character[], `D`:^double[]>, struct<`A`:double[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`C`:^character[], `D`:^double[]>, struct<`C`:^character[], `D`:^double[]>> | tuple<struct<`Col1`:character[], `Col2`:character[]>> | tuple<struct<`Col1`:^double[], `Col2`:^double[]>> | tuple<struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | tuple<struct<`disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[]>> | tuple<struct<`Fertility`:double[], `Agriculture`:double[], `Examination`:double[], `Education`:double[], `Catholic`:double[], `Infant.Mortality`:double[]>> | tuple<struct<`mpg`:double[], `disp`:double[], `drat`:double[]>> | tuple<struct<`NumericColumn`:^double[]>, struct<`B`:character[]>, struct<`A`:^double[]>> | tuple<struct<`NumericColumn`:^double[], `StringColumn`:^character[], `BooleanColumn`:logical[]>> | tuple<struct<`NumericColumn`:^double[], `StringColumn`:^character[], `BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>> | tuple<struct<`Ozone`:^double[], `Solar.R`:^double[], `Wind`:double[], `Temp`:double[], `Month`:double[], `Day`:double[]>> | tuple<struct<`Plant`:character[], `Type`:character[], `Treatment`:character[], `conc`:double[], `uptake`:double[]>> | tuple<struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>> | tuple<struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | tuple<struct<`Var1`:double[], `Var2`:character[], `Var3`:^double[], `Var4`:double[]>> | tuple<struct<`weight`:double[], `group`:character[]>> | tuple<struct<`weight`:double[], `Time`:double[], `Chick`:character[], `Diet`:character[]>> | tuple<struct<`With whitespace`:double[], `And some other funky characters: _=?^~!$@#%ยง`:character[]>> | tuple<struct<`x`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | tuple<struct<`x`:double>> | tuple<struct<`X21`:double[], `X6`:double[], `X160`:double[], `X110`:double[], `X3.9`:double[], `X2.62`:double[], `X16.46`:double[], `X0`:double[], `X1`:double[], `X4`:double[], `X4.1`:double[]>> | tuple<struct<`Year`:double[], `Days`:double[], `Col3`:^logical[], `Pupil`:character[]>, struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>, struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>> | struct<`AA`:struct<`A`:^character[]>> | struct<`AA`:struct<`Col1`:double[], `Col2`:double[], `Col3`:double[]>> | struct<`AAA`:struct<`A`:double[], `B`:character[], `C`:logical[]>, `BBB`:struct<`D`:double[], `E`:character[], `F`:logical[]>> | struct<`AllLocal`:struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | struct<`BB`:struct<`B`:^double[]>> | struct<`BB`:struct<`Col1`:character[], `Col2`:character[], `Col3`:character[], `Col4`:character[], `Col5`:character[]>> | struct<`BodyRemote`:struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | struct<`BothRemote`:struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | struct<`Calendar`:struct<`Year`:double[], `Days`:double[]>> | struct<`CC`:struct<`C`:^double[]>> | struct<`cdf`:struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | struct<`cdfRegion`:struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | struct<`conversion`:struct<`A`:double[], `B`:double[], `C`:logical[]>> | struct<`Conversion`:struct<`BBB`:^character[], `DDD`:^double[]>> | struct<`DD`:struct<`D`:^double[]>> | struct<`EE`:struct<`E`:^character[]>> | struct<`HeadersRemote`:struct<`string`:character, `number`:double, `date`:double, `logical`:logical>> | struct<`IQ`:struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>> | struct<`Iris`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>> | struct<`missing`:struct<`A`:character[], `B`:character[]>> | struct<`missing`:struct<`A`:^double[], `B`:^character[]>> | struct<`Missing1`:struct<`A`:^double[], `B`:^character[], `C`:^logical[], `D`:^double[]>> | struct<`Missing2`:struct<`A`:^double[], `B`:^character[], `C`:^logical[], `D`:^double[]>> | struct<`mtcars`:struct<`mpg`:double[], `disp`:double[], `drat`:double[]>> | struct<`mtcars3`:struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | struct<`mtcars4`:struct<`Car`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | struct<`MyData`:struct<`A`:^character[], `B`:^double[], `C`:double[], `D`:^double[], `E`:^character[]>> | struct<`rownames`:struct<`Car`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | struct<`rownames2`:struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | struct<`Simplify1`:struct<`A`:double[]>> | struct<`Simplify2`:struct<`A`:double, `B`:double, `C`:double, `D`:double>> | struct<`Simplify3`:struct<`A`:logical, `B`:logical, `C`:logical, `D`:logical>> | struct<`Simplify4`:struct<`A`:character[]>> | struct<`test`:struct<`B`:double[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`A`:double[]>, `BBB`:struct<`E`:character[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`A`:double[]>, `BBB`:struct<`F`:logical[]>, `Test`:struct<`NumericColumn`:^double[], `DateTimeColumn`:^double[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`C`:logical[]>, `BBB`:struct<`F`:logical[]>> | struct<`Test`:struct<`NumericColumn`:^double[]>, `AAA`:struct<`C`:logical[]>, `BBB`:struct<`D`:double[]>> | struct<`Test`:struct<`NumericColumn`:^double[], `StringColumn`:^character[], `BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>> | struct<`VariableNames`:struct<`With whitespace`:double[], `And some other funky characters: _=?^~!$@#%ยง`:character[]>> | struct<`womenName`:struct<`height`:double[], `weight`:double[]>>;
type `extractSheetName` <character[]> => character[];
type `filter` <character[]> => logical[];
type `fun` <symbol, character> => null;
type `FUN` <^character[] | ^double[] | struct<> | tuple<> | struct<`1`:null> | struct<`Column.A`:null, `Column.B`:null, `Column.C`:null, `Column.D`:null, `Column.E`:null, `Column.F`:null, `Column.G`:null, `Column.H`:null, `Column.I`:null, `Column.J`:null> | struct<`i1`:null, `i2`:null, `i3`:null> | tuple<character[]> | tuple<double[]> | tuple<null>, logical> => struct<> | ^character[] | ^double[] | tuple<> | struct<`1`:null> | struct<`Column.A`:null, `Column.B`:null, `Column.C`:null, `Column.D`:null, `Column.E`:null, `Column.F`:null, `Column.G`:null, `Column.H`:null, `Column.I`:null, `Column.J`:null> | struct<`i1`:null, `i2`:null, `i3`:null> | tuple<character[]> | tuple<double[]> | tuple<null>;
type `g` <??? | struct<> | character, character, double, double, logical, null> => null;
type `getActiveSheetIndex` < > => integer;
type `getActiveSheetName` < > => character;
type `getBoundingBox` <double[] | character[], double[], double[], double[], double[], logical, logical> => ^double[];
type `getCellFormula` <character | double, double, double> => character;
type `getCellStyle` < > => character;
type `getCellStyleForType` < > => character;
type `getColSubset` <symbol, character[] | double[], double[], double[], double[], double[], logical, double[], ? character[] | double[] | tuple<double[], double[]>, ? character[] | double[] | tuple<double[], double[]>> => tuple<>;
type `getDefinedNames` <logical> => character[];
type `getForceFormulaRecalculation` <character> => logical;
type `getLastColumn` <character> => double;
type `getLastRow` <character> => double;
type `getOrCreateCellStyle` < > => character;
type `getReferenceCoordinatesForName` <character[]> => ^double[];
type `getReferenceCoordinatesForTable` <double | character, character> => ^double[];
type `getReferenceFormula` <character[]> => character[];
type `getSheetPos` <character[]> => double[];
type `getSheets` < > => character[];
type `getTables` <character | double, logical> => character;
type `hideSheet` <character, logical> => null;
type `idx2aref` <^double[]> => character[];
type `idx2col` <double[]> => character[];
type `idx2cref` <^double[], logical, logical> => character[];
type `includeRownames` <struct<> | struct<`Column.A`:double, `Column.B`:double, `Column.C`:character, `Column.D`:double, `Column.E`:logical, `Column.F`:integer, `Column.G`:character, `Column.H`:double, `Column.I`:double, `Column.J`:double> | struct<`i1`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i2`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i3`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>>, ? character> => struct<> | struct<`Column.A`:struct<`x`:double>, `Column.B`:struct<`x`:double>, `Column.C`:struct<`x`:integer>, `Column.D`:struct<`x`:double>, `Column.E`:struct<`x`:logical>, `Column.F`:struct<`x`:integer>, `Column.G`:struct<`x`:integer>, `Column.H`:struct<`x`:double>, `Column.I`:struct<`x`:double>, `Column.J`:struct<`x`:double>> | struct<`i1`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i2`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i3`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>>;
type `initialize` < > => character;
type `isSheetHidden` <character> => logical;
type `isSheetVeryHidden` <character> => logical;
type `isSheetVisible` <character> => logical;
type `jTryCatch` <? character[] | struct<> | ^integer[] | tuple<> | tuple<character> | tuple<null> | struct<`#xlc#`:null> | struct<`AA`:null> | struct<`AAA`:null, `BBB`:null> | struct<`airquality`:null> | struct<`AllLocal`:null> | struct<`aName`:null> | struct<`BB`:null> | struct<`BodyRemote`:null> | struct<`BothRemote`:null> | struct<`Calendar`:null> | struct<`CC`:null> | struct<`cdf`:null> | struct<`cdf`:null> | struct<`cdfRegion`:null> | struct<`cdfRegion`:null> | struct<`cellstyles`:null> | struct<`chickSheet`:null> | struct<`CO2`:null> | struct<`Column.A`:null, `Column.B`:null, `Column.C`:null, `Column.D`:null, `Column.E`:null, `Column.F`:null, `Column.G`:null, `Column.H`:null, `Column.I`:null, `Column.J`:null> | struct<`conversion`:null> | struct<`Conversion`:null> | struct<`currency`:null> | struct<`CurrentlyHere`:null> | struct<`D`:null, `B`:null> | struct<`DD`:null> | struct<`earthquake`:null> | struct<`EE`:null> | struct<`empty`:null> | struct<`empty1`:null> | struct<`empty2`:null> | struct<`Formula`:null> | struct<`graph`:null> | struct<`HeadersRemote`:null> | struct<`HiddenSheet`:null> | struct<`i1`:null, `i2`:null, `i3`:null> | struct<`ImHere`:null> | struct<`IQ`:null> | struct<`Iris`:null> | struct<`IrisData`:null> | struct<`merge`:null> | struct<`missing`:null> | struct<`missing`:null> | struct<`Missing1`:null> | struct<`Missing2`:null> | struct<`mtcars_table`:character> | struct<`mtcars!A5:D6`:null, `mtcars!G5:I7`:null> | struct<`mtcars`:null> | struct<`mtcars`:null> | struct<`mtcars1`:null> | struct<`mtcars2`:null> | struct<`mtcars3`:null> | struct<`mtcars3`:null> | struct<`mtcars4`:null> | struct<`mtcars4`:null> | struct<`My Cars`:null> | struct<`My Sheet`:null> | struct<`MyData`:null> | struct<`nope`:null> | struct<`NUMERIC`:null> | struct<`OldName1`:null> | struct<`OldName2`:null> | struct<`rownames`:null> | struct<`rownames`:null> | struct<`rownames2`:null> | struct<`rownames2`:null> | struct<`Sheet 1`:null, `Sheet 2`:null, `Sheet 3`:null, `Sheet 4`:null> | struct<`Sheet1`:null> | struct<`Sheet2`:null> | struct<`Simplify1`:null> | struct<`Simplify2`:null> | struct<`Simplify3`:null> | struct<`Simplify4`:null> | struct<`SomeName`:null> | struct<`STOP`:null> | struct<`swiss_franc.png`:null> | struct<`Swiss_Franc`:null> | struct<`swiss`:null> | struct<`Test`:null> | struct<`test`:null> | struct<`Test`:null> | struct<`test1`:null> | struct<`VariableNames`:null> | struct<`VeryHiddenSheet`:null> | struct<`VisibleSheet`:null> | struct<`WARN`:null> | struct<`womenData`:null> | struct<`womenName`:null> | struct<`womenName`:null>> => ? character[] | struct<> | ^integer[] | tuple<> | tuple<character> | tuple<null> | struct<`#xlc#`:null> | struct<`AA`:null> | struct<`AAA`:null, `BBB`:null> | struct<`airquality`:null> | struct<`AllLocal`:null> | struct<`aName`:null> | struct<`BB`:null> | struct<`BodyRemote`:null> | struct<`BothRemote`:null> | struct<`Calendar`:null> | struct<`CC`:null> | struct<`cdf`:null> | struct<`cdf`:null> | struct<`cdfRegion`:null> | struct<`cdfRegion`:null> | struct<`cellstyles`:null> | struct<`chickSheet`:null> | struct<`CO2`:null> | struct<`Column.A`:null, `Column.B`:null, `Column.C`:null, `Column.D`:null, `Column.E`:null, `Column.F`:null, `Column.G`:null, `Column.H`:null, `Column.I`:null, `Column.J`:null> | struct<`conversion`:null> | struct<`Conversion`:null> | struct<`currency`:null> | struct<`CurrentlyHere`:null> | struct<`D`:null, `B`:null> | struct<`DD`:null> | struct<`earthquake`:null> | struct<`EE`:null> | struct<`empty`:null> | struct<`empty1`:null> | struct<`empty2`:null> | struct<`Formula`:null> | struct<`graph`:null> | struct<`HeadersRemote`:null> | struct<`HiddenSheet`:null> | struct<`i1`:null, `i2`:null, `i3`:null> | struct<`ImHere`:null> | struct<`IQ`:null> | struct<`Iris`:null> | struct<`IrisData`:null> | struct<`merge`:null> | struct<`missing`:null> | struct<`missing`:null> | struct<`Missing1`:null> | struct<`Missing2`:null> | struct<`mtcars_table`:character> | struct<`mtcars!A5:D6`:null, `mtcars!G5:I7`:null> | struct<`mtcars`:null> | struct<`mtcars`:null> | struct<`mtcars1`:null> | struct<`mtcars2`:null> | struct<`mtcars3`:null> | struct<`mtcars3`:null> | struct<`mtcars4`:null> | struct<`mtcars4`:null> | struct<`My Cars`:null> | struct<`My Sheet`:null> | struct<`MyData`:null> | struct<`nope`:null> | struct<`NUMERIC`:null> | struct<`OldName1`:null> | struct<`OldName2`:null> | struct<`rownames`:null> | struct<`rownames`:null> | struct<`rownames2`:null> | struct<`rownames2`:null> | struct<`Sheet 1`:null, `Sheet 2`:null, `Sheet 3`:null, `Sheet 4`:null> | struct<`Sheet1`:null> | struct<`Sheet2`:null> | struct<`Simplify1`:null> | struct<`Simplify2`:null> | struct<`Simplify3`:null> | struct<`Simplify4`:null> | struct<`SomeName`:null> | struct<`STOP`:null> | struct<`swiss_franc.png`:null> | struct<`Swiss_Franc`:null> | struct<`swiss`:null> | struct<`Test`:null> | struct<`test`:null> | struct<`Test`:null> | struct<`test1`:null> | struct<`VariableNames`:null> | struct<`VeryHiddenSheet`:null> | struct<`VisibleSheet`:null> | struct<`WARN`:null> | struct<`womenData`:null> | struct<`womenName`:null> | struct<`womenName`:null>;
type `loadWorkbook` <logical, ? character> => character;
type `mergeCells` <character, character> => null;
type `nice` <character[]> => character[];
type `normalizeDataframe` <struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^integer[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>, logical> => struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^character[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>;
type `onErrorCell` <character> => null;
type `print` <???> => character;
type `readNamedRegion` <character[], logical, ? character, character[], logical, character, logical, logical, ? character[] | double[] | tuple<double[], double[]>, ? character[] | double[] | tuple<double[], double[]>, logical, character> => character[] | struct<> | double[] | struct<`AAA`:struct<`A`:double[], `B`:character[], `C`:logical[]>, `BBB`:struct<`D`:double[], `E`:character[], `F`:logical[]>> | struct<`Calendar`:struct<`Year`:double[], `Days`:double[]>, `Iris`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>, `IQ`:struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`A`:double[]>, `BBB`:struct<`E`:character[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`A`:double[]>, `BBB`:struct<`F`:logical[]>, `Test`:struct<`NumericColumn`:^double[], `DateTimeColumn`:^double[]>> | struct<`Test`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `AAA`:struct<`C`:logical[]>, `BBB`:struct<`F`:logical[]>> | struct<`Test`:struct<`NumericColumn`:^double[]>, `AAA`:struct<`C`:logical[]>, `BBB`:struct<`D`:double[]>>;
type `readNamedRegionFromFile` <character, character[]> => struct<`B`:double[]> | struct<`Calendar`:struct<`Year`:double[], `Days`:double[]>, `Iris`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>, `IQ`:struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>>;
type `readTable` <double | character, character, logical, null, character[] | language, logical, character | language, logical, logical, null, null, logical, character> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `readWorksheet` <double[] | character[], symbol | double[], double[], double[], symbol | double[], logical, logical, ? character, logical, ? double | character, character[] | language, logical, character | language, logical, logical, ? character[] | double[] | tuple<double[], double[]>, ? character[] | double[] | tuple<double[], double[]>, logical> => struct<> | tuple<struct<`A`:double[], `B`:character[], `C`:logical[]>, struct<`D`:double[], `E`:character[], `F`:logical[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`A`:^double[], `D`:^double[]>, struct<`B`:^character[], `D`:^double[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`A`:^double[], `D`:^double[]>, struct<`C`:^character[], `D`:^double[]>, struct<`A`:double[]>> | tuple<struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, struct<`C`:^character[], `D`:^double[]>, struct<`C`:^character[], `D`:^double[]>> | tuple<struct<`NumericColumn`:^double[]>, struct<`B`:character[]>, struct<`A`:^double[]>> | tuple<struct<`Year`:double[], `Days`:double[], `Col3`:^logical[], `Pupil`:character[]>, struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>, struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>> | struct<`AAA`:struct<`A`:double[], `B`:character[], `C`:logical[]>, `BBB`:struct<`D`:double[], `E`:character[], `F`:logical[]>> | struct<`FirstSheet`:struct<`Year`:double[], `Days`:double[], `Col3`:^logical[], `Pupil`:character[]>, `FirstSheet`:struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>, `SecondSheet`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>> | struct<`Test1`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `Test4`:struct<`A`:^double[], `D`:^double[]>, `Test5`:struct<`B`:^character[], `D`:^double[]>> | struct<`Test1`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `Test4`:struct<`A`:^double[], `D`:^double[]>, `Test5`:struct<`C`:^character[], `D`:^double[]>, `AAA`:struct<`A`:double[]>> | struct<`Test1`:struct<`BooleanColumn`:^logical[], `DateTimeColumn`:^double[]>, `Test4`:struct<`C`:^character[], `D`:^double[]>, `Test5`:struct<`C`:^character[], `D`:^double[]>> | struct<`Test1`:struct<`NumericColumn`:^double[]>, `Test4`:struct<`B`:character[]>, `Test5`:struct<`A`:^double[]>>;
type `readWorksheetFromFile` <character, double | character[]> => struct<`A`:character[]> | struct<`FirstSheet`:struct<`Year`:double[], `Days`:double[], `Col3`:^logical[], `Pupil`:character[]>, `FirstSheet`:struct<`Pupil`:character[], `KABC.II`:double[], `WISC.III`:double[], `WJ.III`:^double[]>, `SecondSheet`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>>;
type `removeName` <character> => null;
type `removePane` <character> => null;
type `removeSheet` <character> => null;
type `renameSheet` <character | double, character> => null;
type `rg2idx` <character> => ^double[];
type `saveWorkbook` <???> => null;
type `seqle` <integer[]> => struct<`lengths`:integer[], `values`:integer[], `increment`:integer> | struct<`lengths`:integer, `values`:integer, `increment`:double>;
type `setActiveSheet` <character> => null;
type `setBorder` <character[], double, double[]> => null;
type `setCellFormula` <character, double, double, character> => null;
type `setCellStyle` <???, character, double[], double | integer[]> => null;
type `setCellStyleForType` <character> => null;
type `setColumnWidth` <character, double, double> => null;
type `setDataFormat` <character> => null;
type `setDataFormatForType` <character, character> => null;
type `setFillBackgroundColor` <double> => null;
type `setFillForegroundColor` <double> => null;
type `setFillPattern` <double> => null;
type `setForceFormulaRecalculation` <character | double, logical> => null;
type `setHyperlink` <???, character, double[], double, character, character[]> => null;
type `setMissingValue` <? character[] | tuple<character, character, character, double>> => null;
type `setRowHeight` <character, double, double> => null;
type `setSheetColor` <character | double, double> => null;
type `setSheetPos` <character[], double[]> => null;
type `setStyleAction` <character> => null;
type `setStyleNamePrefix` <character> => null;
type `setWrapText` <logical> => null;
type `show` < > => character;
type `summary` <???> => null;
type `unhideSheet` <character> => null;
type `unmergeCells` <character, character> => null;
type `with.workbook` <language, ??? | logical> => ^character[] | logical;
type `wrapList` <struct<> | tuple<> | struct<`1`:null> | struct<`Column.A`:struct<`x`:double>, `Column.B`:struct<`x`:double>, `Column.C`:struct<`x`:integer>, `Column.D`:struct<`x`:double>, `Column.E`:struct<`x`:logical>, `Column.F`:struct<`x`:integer>, `Column.G`:struct<`x`:integer>, `Column.H`:struct<`x`:double>, `Column.I`:struct<`x`:double>, `Column.J`:struct<`x`:double>> | struct<`Column.A`:null, `Column.B`:null, `Column.C`:null, `Column.D`:null, `Column.E`:null, `Column.F`:null, `Column.G`:null, `Column.H`:null, `Column.I`:null, `Column.J`:null> | struct<`i1`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i2`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i3`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>> | struct<`i1`:null, `i2`:null, `i3`:null>> => tuple<struct<>> | tuple<struct<`A`:^double[], `B`:^character[]>> | tuple<struct<`a`:integer[], `b`:double[]>> | tuple<struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^integer[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>> | tuple<struct<`Date`:double[], `EUR`:double[], `USD`:double[], `GBP`:double[]>> | tuple<struct<`Fertility`:double[], `Agriculture`:double[], `Examination`:integer[], `Education`:integer[], `Catholic`:double[], `Infant.Mortality`:double[]>> | tuple<struct<`height`:double[], `weight`:double[]>> | tuple<struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | tuple<struct<`Now`:double>> | tuple<struct<`Ozone`:^integer[], `Solar.R`:^integer[], `Wind`:double[], `Temp`:integer[], `Month`:integer[], `Day`:integer[]>> | tuple<struct<`Plant`:integer[], `Type`:integer[], `Treatment`:integer[], `conc`:double[], `uptake`:double[]>> | tuple<struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>> | tuple<struct<`Text`:integer>> | tuple<struct<`weight`:double[], `Time`:double[], `Chick`:integer[], `Diet`:integer[]>> | tuple<> | struct<`1`:null> | struct<`Column.A`:struct<`x`:double>, `Column.B`:struct<`x`:double>, `Column.C`:struct<`x`:integer>, `Column.D`:struct<`x`:double>, `Column.E`:struct<`x`:logical>, `Column.F`:struct<`x`:integer>, `Column.G`:struct<`x`:integer>, `Column.H`:struct<`x`:double>, `Column.I`:struct<`x`:double>, `Column.J`:struct<`x`:double>> | struct<`Column.A`:null, `Column.B`:null, `Column.C`:null, `Column.D`:null, `Column.E`:null, `Column.F`:null, `Column.G`:null, `Column.H`:null, `Column.I`:null, `Column.J`:null> | struct<`i1`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i2`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i3`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>> | struct<`i1`:null, `i2`:null, `i3`:null>;
type `writeNamedRegion` <struct<>, character, logical, ? character> => null;
type `writeNamedRegionToFile` <struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^integer[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]>, character, ? character, ???, character, logical> => character;
type `writeWorksheet` <struct<`Plant`:integer[], `Type`:integer[], `Treatment`:integer[], `conc`:double[], `uptake`:double[]>, character, double, double, logical, ? character> => null;
type `writeWorksheetToFile` <struct<`Column.A`:^double[], `Column.B`:^double[], `Column.C`:^character[], `Column.D`:^double[], `Column.E`:^logical[], `Column.F`:^integer[], `Column.G`:^character[], `Column.H`:^double[], `Column.I`:^double[], `Column.J`:^double[]> | struct<`i1`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i2`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, `i3`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>>, character[], ??? | double[], character, logical> => character;
type `xlcCall` <character, ??? | character[] | integer[] | tuple<> | struct<`Column.A`:null, `Column.B`:null, `Column.C`:null, `Column.D`:null, `Column.E`:null, `Column.F`:null, `Column.G`:null, `Column.H`:null, `Column.I`:null, `Column.J`:null> | struct<`i1`:null, `i2`:null, `i3`:null>, logical, logical> => ? character[] | ^integer[] | tuple<> | tuple<character> | tuple<null> | struct<`#xlc#`:null> | struct<`AA`:null> | struct<`AAA`:null, `BBB`:null> | struct<`airquality`:null> | struct<`AllLocal`:null> | struct<`aName`:null> | struct<`BB`:null> | struct<`BodyRemote`:null> | struct<`BothRemote`:null> | struct<`Calendar`:null> | struct<`CC`:null> | struct<`cdf`:null> | struct<`cdf`:null> | struct<`cdfRegion`:null> | struct<`cdfRegion`:null> | struct<`cellstyles`:null> | struct<`chickSheet`:null> | struct<`CO2`:null> | struct<`Column.A`:null, `Column.B`:null, `Column.C`:null, `Column.D`:null, `Column.E`:null, `Column.F`:null, `Column.G`:null, `Column.H`:null, `Column.I`:null, `Column.J`:null> | struct<`conversion`:null> | struct<`Conversion`:null> | struct<`currency`:null> | struct<`CurrentlyHere`:null> | struct<`D`:null, `B`:null> | struct<`DD`:null> | struct<`earthquake`:null> | struct<`EE`:null> | struct<`empty`:null> | struct<`empty1`:null> | struct<`empty2`:null> | struct<`Formula`:null> | struct<`graph`:null> | struct<`HeadersRemote`:null> | struct<`HiddenSheet`:null> | struct<`i1`:null, `i2`:null, `i3`:null> | struct<`ImHere`:null> | struct<`IQ`:null> | struct<`Iris`:null> | struct<`IrisData`:null> | struct<`merge`:null> | struct<`missing`:null> | struct<`missing`:null> | struct<`Missing1`:null> | struct<`Missing2`:null> | struct<`mtcars_table`:character> | struct<`mtcars!A5:D6`:null, `mtcars!G5:I7`:null> | struct<`mtcars`:null> | struct<`mtcars`:null> | struct<`mtcars1`:null> | struct<`mtcars2`:null> | struct<`mtcars3`:null> | struct<`mtcars3`:null> | struct<`mtcars4`:null> | struct<`mtcars4`:null> | struct<`My Cars`:null> | struct<`My Sheet`:null> | struct<`MyData`:null> | struct<`nope`:null> | struct<`NUMERIC`:null> | struct<`OldName1`:null> | struct<`OldName2`:null> | struct<`rownames`:null> | struct<`rownames`:null> | struct<`rownames2`:null> | struct<`rownames2`:null> | struct<`Sheet 1`:null, `Sheet 2`:null, `Sheet 3`:null, `Sheet 4`:null> | struct<`Sheet1`:null> | struct<`Sheet2`:null> | struct<`Simplify1`:null> | struct<`Simplify2`:null> | struct<`Simplify3`:null> | struct<`Simplify4`:null> | struct<`SomeName`:null> | struct<`STOP`:null> | struct<`swiss_franc.png`:null> | struct<`Swiss_Franc`:null> | struct<`swiss`:null> | struct<`Test`:null> | struct<`test`:null> | struct<`Test`:null> | struct<`test1`:null> | struct<`VariableNames`:null> | struct<`VeryHiddenSheet`:null> | struct<`VisibleSheet`:null> | struct<`WARN`:null> | struct<`womenData`:null> | struct<`womenName`:null> | struct<`womenName`:null>;
type `xlcDump` <character[], ???, character, character, logical> => logical[];
type `xlcFreeMemory` <???> => null;
type `xlcMemoryReport` < > => null;
type `XLConnectSettings` <struct<`Package`:character, `Type`:character, `Title`:character, `Version`:character, `Date`:character, `Authors@R`:character, `URL`:character, `BugReports`:character, `SystemRequirements`:character, `Depends`:character, `Imports`:character, `Suggests`:character, `Description`:character, `License`:character, `Copyright`:character, `LazyData`:character, `NeedsCompilation`:character, `Packaged`:character, `Author`:character, `Maintainer`:character, `Repository`:character, `Date/Publication`:character, `Built`:character>> => null;
type `xlcRestore` <character, double, logical> => logical[];
