type `.onAttach` <symbol, character> => null;
type `.onUnload` <symbol> => ^double[];
type `[[` <symbol> => double;
type `as.character.Matlab` <null, null> => character;
type `asSafeMatlabName` <character> => character;
type `asSafeRName` <character> => character;
type `charConverter` <character> => any => any;
type `charToInt` <character[]> => double[];
type `close.Matlab` <null, null> => null;
type `constructor` <character, double, logical> => null;
type `convertUTF8` <integer[]> => character;
type `crc` <raw[]> => raw[];
type `eatRawBuffer` <double> => null;
type `fillRawBuffer` <integer> => null;
type `filter` <character[]> => logical[];
type `finalize.Matlab` <null, null> => null;
type `fun` <symbol, character> => null;
type `FUN` <integer> => character;
type `getCommandByte` <symbol, character> => integer;
type `getMOPT` <integer[]> => double[];
type `getOption.Matlab` <null, character> => null | double;
type `intToChar` <double[]> => character[];
type `isMat4` <integer[]> => logical;
type `isOpen.default` <integer> => logical;
type `isOpen.Matlab` <null, null> => logical;
type `mat5ReadArrayFlags` <symbol> => struct<`logical`:logical, `global`:logical, `complex`:logical, `class`:character, `classSize`:integer, `nzmax`:integer> | struct<`logical`:logical, `global`:logical, `complex`:logical, `class`:character, `classSize`:null, `nzmax`:integer>;
type `mat5ReadDimensionsArray` <symbol> => struct<`tag`:struct<`type`:character, `signed`:logical, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:double, `padding`:double, `compressed`:logical>, `dim`:integer[]>;
type `mat5ReadFieldNameLength` <symbol> => struct<`tag`:struct<`type`:character, `signed`:logical, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:double, `padding`:double, `compressed`:logical>, `maxLength`:integer>;
type `mat5ReadFieldNames` <symbol, integer> => struct<`tag`:struct<`type`:character, `signed`:logical, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:integer, `padding`:integer, `compressed`:logical>, `names`:character[]>;
type `mat5ReadFields` <symbol, character[]> => struct<`a_b`:^double[], `c_d`:^double[], `e_f_g`:^double[], `x`:^double[]> | struct<`a.b`:^double[], `c_d`:^double[], `e_f.g`:^double[], `x`:^double[]> | struct<`a.b`:^double[], `c.d`:^double[], `e.f.g`:^double[], `x`:^double[]> | struct<`A`:^integer[], `X`:^integer[]> | struct<`title`:^character[], `A`:^double[], `name`:^character[], `id`:^double[], `date`:^character[], `author`:^character[], `ed`:^character[], `kind`:^character[]> | struct<`type`:^character[], `color`:^character[], `x`:^double[]> | struct<`x`:^double[], `y`:tuple<struct<``:^character[]>, struct<``:^character[]>>, `z`:^double[]>;
type `mat5ReadMiMATRIX` <symbol, struct<`type`:character, `signed`:null, `sizeOf`:null, `what`:null, `nbrOfBytes`:integer, `padding`:integer, `compressed`:logical>> => struct<``:^character[]> | struct<``:^double[]> | struct<``:tuple<struct<``:^character[]>, struct<``:^character[]>>> | struct<`a_b`:double> | struct<`a.b`:double> | struct<`A`:^double[]> | struct<`allgenres`:list<struct<``:^character[]>>> | struct<`B`:^double[]> | struct<`c_d`:double> | struct<`c.d`:double> | struct<`C`:^integer[]> | struct<`col.Y`:tuple<null>> | struct<`cyclicalEdges`:^double[]> | struct<`cyclicalEdges`:null> | struct<`D`:^double[]> | struct<`D`:null> | struct<`data`:tuple<^integer[], ^integer[]>> | struct<`e_f_g`:double> | struct<`e_f.g`:double> | struct<`e.f.g`:double> | struct<`e`:list<struct<``:^character[]>>> | struct<`E`:list<struct<``:^character[]>>> | struct<`F`:^complex[]> | struct<`f`:raw[]> | struct<`L`:^logical[]> | struct<`L`:null> | struct<`MCOS`:raw[]> | struct<`mystr`:^character[]> | struct<`Problem`:list<^character[] | ^double[]>> | struct<`s`:list<^character[] | ^double[]>> | struct<`S`:null> | struct<`sparseM`:null> | struct<`value`:double[]> | struct<`x`:^double[]> | struct<`X`:^double[]> | struct<`x`:tuple<^double[], ^double[], ^double[], ^double[]>> | struct<`X`:tuple<^double[], tuple<struct<``:^character[]>, struct<``:^character[]>>, ^double[]>> | struct<`X`:null> | struct<`y`:^double[]> | struct<`Y`:^double[]> | struct<`Y`:null>;
type `mat5ReadName` <symbol> => struct<`tag`:struct<`type`:character, `signed`:logical, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:double, `padding`:double, `compressed`:logical>, `name`:character>;
type `mat5ReadTag` <symbol> => struct<`type`:character, `signed`:logical, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:double, `padding`:double, `compressed`:logical> | struct<`type`:character, `signed`:null, `sizeOf`:integer, `what`:double[], `nbrOfBytes`:integer, `padding`:integer, `compressed`:logical> | struct<`type`:character, `signed`:null, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:double, `padding`:double, `compressed`:logical> | struct<`type`:character, `signed`:null, `sizeOf`:null, `what`:null, `nbrOfBytes`:integer, `padding`:integer, `compressed`:logical>;
type `mat5ReadValues` <symbol, logical> => struct<`tag`:struct<`type`:character, `signed`:logical, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:double, `padding`:double, `compressed`:logical>, `value`:integer> | struct<`tag`:struct<`type`:character, `signed`:logical, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:integer, `padding`:integer, `compressed`:logical>, `value`:integer[]> | struct<`tag`:struct<`type`:character, `signed`:null, `sizeOf`:integer, `what`:double[], `nbrOfBytes`:integer, `padding`:integer, `compressed`:logical>, `value`:double[]> | struct<`tag`:struct<`type`:character, `signed`:null, `sizeOf`:integer, `what`:double[], `nbrOfBytes`:integer, `padding`:integer, `compressed`:logical>, `value`:null> | struct<`tag`:struct<`type`:character, `signed`:null, `sizeOf`:integer, `what`:integer[], `nbrOfBytes`:double, `padding`:double, `compressed`:logical>, `value`:integer[]>;
type `Matlab` <character, double, logical> => null;
type `matToCharArray` <integer[], character> => character[];
type `matToString` <null | integer[], character> => character;
type `moptToString` <double[]> => character;
type `pushBackRawMat` <symbol, raw[]> => null;
type `readBinMat` <symbol, double[] | raw[], double, double, null | logical, character> => double[] | raw[];
type `readCharMat` <symbol, integer> => character;
type `readMat.default` <character | integer | raw[], null, logical, character | pairlist | environment, null | character[], double | character, null> => struct<`A`:^double[]> | struct<`B`:^double[]> | struct<`col.Y`:tuple<null>> | struct<`cyclicalEdges`:^double[]> | struct<`cyclicalEdges`:null> | struct<`data`:tuple<^integer[], ^integer[]>> | struct<`e`:list<struct<``:^character[]>>> | struct<`E`:list<struct<``:^character[]>>> | struct<`F`:^complex[]> | struct<`f`:raw[], `y`:^double[], ``:^integer[]> | struct<`L`:^logical[], `D`:^double[]> | struct<`L`:null, `D`:null> | struct<`MCOS`:raw[], ``:^integer[], ``:^integer[]> | struct<`mystr`:^character[]> | struct<`Problem`:list<^character[] | ^double[]>> | struct<`s`:list<^character[] | ^double[]>> | struct<`S`:null> | struct<`sparseM`:^double[]> | struct<`sparseM`:null> | struct<`value`:double[]> | struct<`x`:^double[]> | struct<`X`:^double[], `allgenres`:list<struct<``:^character[]>>, `Y`:^double[]> | struct<`X`:integer[]> | struct<`x`:tuple<^double[], ^double[], ^double[], ^double[]>> | struct<`X`:tuple<^double[], tuple<struct<``:^character[]>, struct<``:^character[]>>, ^double[]>> | struct<`X`:null, `allgenres`:list<struct<``:^character[]>>, `Y`:null>;
type `readMat4` <symbol, symbol, integer[]> => struct<`L`:null, `D`:null> | struct<`S`:null> | struct<`sparseM`:^double[]> | struct<`sparseM`:null> | struct<`x`:^double[]>;
type `readMat4Data` <symbol, struct<`ocode`:double, `what`:double[], `size`:integer, `signed`:null, `matrixType`:character, `mrows`:integer, `ncols`:integer, `imagf`:integer, `namlen`:integer>> => struct<`D`:null> | struct<`L`:null> | struct<`S`:null> | struct<`sparseM`:^double[]> | struct<`sparseM`:null> | struct<`x`:^double[]>;
type `readMat4Header` <symbol, null | integer[]> => struct<`ocode`:double, `what`:double[], `size`:integer, `signed`:null, `matrixType`:character, `mrows`:integer, `ncols`:integer, `imagf`:integer, `namlen`:integer>;
type `readMat5` <symbol, symbol, integer[]> => struct<`A`:^double[]> | struct<`B`:^double[]> | struct<`col.Y`:tuple<null>> | struct<`cyclicalEdges`:^double[]> | struct<`cyclicalEdges`:null> | struct<`data`:tuple<^integer[], ^integer[]>> | struct<`e`:list<struct<``:^character[]>>> | struct<`E`:list<struct<``:^character[]>>> | struct<`F`:^complex[]> | struct<`f`:raw[], `y`:^double[], ``:^integer[]> | struct<`L`:^logical[], `D`:^double[]> | struct<`L`:null, `D`:null> | struct<`MCOS`:raw[], ``:^integer[], ``:^integer[]> | struct<`mystr`:^character[]> | struct<`Problem`:list<^character[] | ^double[]>> | struct<`s`:list<^character[] | ^double[]>> | struct<`S`:null> | struct<`sparseM`:null> | struct<`value`:double[]> | struct<`x`:^double[]> | struct<`X`:^double[], `allgenres`:list<struct<``:^character[]>>, `Y`:^double[]> | struct<`X`:integer[]> | struct<`x`:tuple<^double[], ^double[], ^double[], ^double[]>> | struct<`X`:tuple<^double[], tuple<struct<``:^character[]>, struct<``:^character[]>>, ^double[]>> | struct<`X`:null, `allgenres`:list<struct<``:^character[]>>, `Y`:null>;
type `readMat5DataElement` <symbol> => struct<``:^character[]> | struct<``:^double[]> | struct<``:tuple<struct<``:^character[]>, struct<``:^character[]>>> | struct<`a_b`:double> | struct<`a.b`:double> | struct<`A`:^double[]> | struct<`allgenres`:list<struct<``:^character[]>>> | struct<`B`:^double[]> | struct<`c_d`:double> | struct<`c.d`:double> | struct<`C`:^integer[]> | struct<`col.Y`:tuple<null>> | struct<`cyclicalEdges`:^double[]> | struct<`cyclicalEdges`:null> | struct<`D`:^double[]> | struct<`D`:null> | struct<`data`:tuple<^integer[], ^integer[]>> | struct<`e_f_g`:double> | struct<`e_f.g`:double> | struct<`e.f.g`:double> | struct<`e`:list<struct<``:^character[]>>> | struct<`E`:list<struct<``:^character[]>>> | struct<`F`:^complex[]> | struct<`f`:raw[]> | struct<`L`:^logical[]> | struct<`L`:null> | struct<`MCOS`:raw[]> | struct<`mystr`:^character[]> | struct<`Problem`:list<^character[] | ^double[]>> | struct<`s`:list<^character[] | ^double[]>> | struct<`S`:null> | struct<`sparseM`:null> | struct<`value`:double[]> | struct<`x`:^double[]> | struct<`X`:^double[]> | struct<`x`:tuple<^double[], ^double[], ^double[], ^double[]>> | struct<`X`:tuple<^double[], tuple<struct<``:^character[]>, struct<``:^character[]>>, ^double[]>> | struct<`X`:null> | struct<`y`:^double[]> | struct<`Y`:^double[]> | struct<`Y`:null>;
type `readMat5or73Header` <symbol, integer[]> => struct<`description`:character, `version`:character, `endian`:character>;
type `readRawBuffer` <double> => raw[];
type `sapply0` <integer[], any => any, null> => character[];
type `setOption.Matlab` <null, character> => null;
type `setVerbose.Matlab` <null, double, null> => double;
type `shortenRawBuffer` < > => null;
type `startServer.Matlab` <null, null, environment, logical, character[], character, null> => integer;
type `stop_if_not` <logical> => null;
type `uncompress` <raw[], character, logical, character[], null> => raw[];
type `uncompressZlib` <raw[], null, logical, double> => raw[];
type `writeAll` <null | integer, struct<`A`:^integer[]> | struct<`data`:struct<`A`:integer[], `X`:integer[]>> | struct<`E`:^character[]> | struct<`e`:character[]> | struct<`F`:^complex[]> | struct<`value`:double[]> | struct<`x`:double> | struct<`X`:integer[]> | struct<`x`:struct<`a.b`:double, `c_d`:double, `e_f.g`:double, `x`:double>>> => double;
type `writeArrayFlags` <character, logical, logical, logical> => double;
type `writeArrayName` <character> => double;
type `writeBinMat` <null | integer, double[], double, logical, character> => double;
type `writeCellArrayDataElement` <character, ^character[]> => double;
type `writeCharArray` <character, character> => double;
type `writeCharMat` <null | integer, character, integer> => integer;
type `writeCharPart` <character> => double;
type `writeDataElement` <null | integer, character | tuple<^double[]> | struct<`a.b`:double> | struct<`A`:^integer[]> | struct<`B`:^integer[]> | struct<`c_d`:double> | struct<`C`:integer[]> | struct<`C`:^logical[]> | struct<`D`:integer[]> | struct<`data`:struct<`A`:integer[], `X`:integer[]>> | struct<`e_f.g`:double> | struct<`E`:^character[]> | struct<`e`:character[]> | struct<`F`:^complex[]> | struct<`value`:double[]> | struct<`x`:double> | struct<`X`:integer[]> | struct<`x`:struct<`a.b`:double, `c_d`:double, `e_f.g`:double, `x`:double>>, null | character | language | double> => double;
type `writeDimensionsArray` <double[]> => double;
type `writeFieldNameLength` <double> => double;
type `writeFieldNames` <character[], double> => double;
type `writeHeader` <null | integer> => double;
type `writeMat.default` <character | integer, ^character[] | ^complex[] | struct<`a.b`:double, `c_d`:double, `e_f.g`:double, `x`:double> | struct<`A`:integer[], `X`:integer[]>, logical, character, null | any => any, double | environment | null> => double;
type `writeMat5` <integer, struct<`A`:^integer[]> | struct<`data`:struct<`A`:integer[], `X`:integer[]>> | struct<`E`:^character[]> | struct<`e`:character[]> | struct<`F`:^complex[]> | struct<`value`:double[]> | struct<`x`:double> | struct<`X`:integer[]> | struct<`x`:struct<`a.b`:double, `c_d`:double, `e_f.g`:double, `x`:double>>, null | any => any, character> => double;
type `writeNumericArray` <character, ^complex[]> => double;
type `writeNumericPart` <^double[]> => double;
type `writePadding` <double, null> => double;
type `writeStructure` <character, struct<`a.b`:double, `c_d`:double, `e_f.g`:double, `x`:double> | struct<`A`:integer[], `X`:integer[]>> => double;
type `writeTag` <character, double, logical> => double;
