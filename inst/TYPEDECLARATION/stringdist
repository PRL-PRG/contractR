type `ain` <character, character[], ...> => logical;
type `all_int` <list<any>> => logical;
type `amatch` <character[] | null, character[] | ^logical[] | null, null | double, logical, character[], logical, double[], double, double, double, double, double> => (^integer[] | null);
type `do_dist` <character[] | list<^integer[]> | null, ^character[] | list<null | integer[]> | list<^integer[] | null> | list<integer[]> | null, character, double[], double, double, double, logical, integer> => (^double[] | null);
type `ensure_int_list` <list<any> | double[]> => list<any>;
type `int2char` <list<integer[] | null> | list<integer[]>> => ^character[];
type `lengths` <character[] | list<^integer[] | null> | list<integer[]>, ...> => integer[];
type `lengths.character` <character[], character, ...> => integer[];
type `lengths.list` <list<^integer[] | null> | list<integer[]>, ...> => integer[];
type `listwarning` <character, character> => character;
type `lower_tri` <^character[] | list<integer[]>, character, logical, double[], double, double, double, character, integer> => class<`dist`>;
type `normalize_dist` <^double[], any, any, character, any, any> => ^double[];
type `phonetic` <^character[], character, logical> => ^character[];
type `printable_ascii` <character[] | null> => logical[];
type `qgrams` <..., null, double, logical, logical> => class<`matrix`>;
type `seq_ain` <list<integer[]>, list<integer[]>, ...> => logical;
type `seq_amatch` <list<^integer[] | null> | list<integer[]> | double[] | list<null>, list<integer[]> | double[], null | double, logical, character[], double[], double, double, double, double, double> => (^integer[] | null);
type `seq_dist` <list<any> | double[], list<any> | double[], character[], double[], double, double, double, double> => any;
type `seq_distmatrix` <double[] | list<double[]>, any, character[], double[], double, double, double, character[], double> => (class<`dist`> | class<`matrix`>);
type `seq_qgrams` <..., null, double> => class<`matrix`>;
type `seq_sim` <list<^integer[] | null> | list<double[]>, list<double[]>, character[], double, ...> => ^double[];
type `setnames` <list<^character[]> | list<list<integer[]>> | list<list<^integer[] | null>> | list<null>> => (list<^character[]> | list<list<integer[]>> | list<list<^integer[] | null>> | list<null>);
type `setNames` <character[] | list<^character[]> | list<list<integer[]>> | list<list<^integer[] | null>> | list<null>, character[]> => (character[] | list<^character[]> | list<list<integer[]>> | list<list<^integer[] | null>> | list<null>);
type `stringdist` <^character[] | list<character> | null, character[] | list<character> | null, any, logical, double[], double, double, double, any> => any;
type `stringdistmatrix` <^character[] | list<character>, any, character[], logical, double[], double, double, double, character[] | logical, double> => (class<`dist`> | class<`matrix`>);
type `stringsim` <character[], character[], character[], logical, double, ...> => double[];
