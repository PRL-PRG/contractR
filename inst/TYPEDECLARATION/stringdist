type `::` <^character[] | null | list<character>, character[] | null | list<character>, any, logical, double[], double, double, double, any> => any | <double[] | list<any>, double[] | list<any>, character[], double[], double, double, double, double> => any;
type `[[` <class<`condition`, `simpleWarning`, `warning`>> => character;
type `ain` <character, character[], ...> => logical;
type `all_int` <list<any>> => logical;
type `amatch` <character[] | null, character[] | ^logical[] | null, null | double, logical, character[], logical, double[], double, double, double, double, double> => (^integer[] | null);
type `do_dist` <character[] | null | list<^integer[]>, ^character[] | null | list<null | integer[] | ^integer[] | null | integer[]>, character, double[], double, double, double, logical, integer> => (^double[] | null);
type `ensure_int_list` <double[] | list<any>> => list<any>;
type `filter` <character[]> => logical[];
type `fun` <any, any> => list<null>;
type `FUN` <character[] | null | list<^integer[]>, ^character[] | null | list<null | integer[] | ^integer[] | null | integer[]>, character, double[], double, double, double, logical, integer> => (^double[] | null) | <integer[]> => character | <^double[] | null> => list<^integer[] | null> | <..., null, double, logical, logical> => class<`matrix`> | <^character[] | null> => list<integer[] | null | integer | null> | <integer[]> => double[];
type `int2char` <list<integer[] | null | integer[]>> => ^character[];
type `lengths` <character[] | list<^integer[] | null | integer[]>, ...> => integer[];
type `lengths.character` <character[], character, ...> => integer[];
type `lengths.list` <list<^integer[] | null | integer[]>, ...> => integer[];
type `listwarning` <character, character> => character;
type `lower_tri` <^character[] | list<integer[]>, character, logical, double[], double, double, double, character, integer> => class<`dist`>;
type `normalize_dist` <^double[], any, any, character, any, any> => ^double[];
type `phonetic` <^character[], character, logical> => ^character[];
type `printable_ascii` <character[] | null> => logical[];
type `qgrams` <..., null, double, logical, logical> => class<`matrix`>;
type `seq_ain` <list<integer[]>, list<integer[]>, ...> => logical;
type `seq_amatch` <double[] | list<^integer[] | null | integer[] | null>, double[] | list<integer[]>, null | double, logical, character[], double[], double, double, double, double, double> => (^integer[] | null);
type `seq_dist` <double[] | list<any>, double[] | list<any>, character[], double[], double, double, double, double> => any;
type `seq_distmatrix` <double[] | list<double[]>, any, character[], double[], double, double, double, character[], double> => (class<`dist`> | class<`matrix`>);
type `seq_qgrams` <..., null, double> => class<`matrix`>;
type `seq_sim` <list<^integer[] | null | double[]>, list<double[]>, character[], double, ...> => ^double[];
type `setnames` <list<^character[] | null | list<integer[] | ^integer[] | null>>> => list<^character[] | null | list<integer[] | ^integer[] | null>>;
type `setNames` <character[] | list<^character[] | null | list<integer[] | ^integer[] | null>>, character[]> => (character[] | list<^character[] | null | list<integer[] | ^integer[] | null>>);
type `stringdist` <^character[] | null | list<character>, character[] | null | list<character>, any, logical, double[], double, double, double, any> => any;
type `stringdistmatrix` <^character[] | list<character>, any, character[], logical, double[], double, double, double, character[] | logical, double> => (class<`dist`> | class<`matrix`>);
type `stringsim` <character[], character[], character[], logical, double, ...> => double[];
