type `add.image` <double, double, class<`matrix`>, double, double, double, null, character[]> => null;
type `arrow.plot` <double[], double[], double[], double[], double, logical, logical, class<`function`>> => list<logical>;
type `as.image` <class<`matrix`> | ^double[], null, null | list<double[]>, class<`matrix`> | class<`data.frame`>, double[], logical, double, double> => list<any>;
type `as.surface` <class<`matrix`> | list<double[]>, class<`matrix`> | double[], null, character> => list<double[] | character | class<`matrix`>>;
type `average.image` <list<double[] | class<`matrix`>>, double> => list<double[] | class<`matrix`>>;
type `bisection.search` <double, double, class<`function`>, double, double, class<`sreg`> | list<double[]> | list<double | list<double[]>> | list<double | list<double[] | class<`matrix`>>> | list<class<`matrix`> | double[]> | list<class<`matrix`> | null | double[]>, double> => list<double>;
type `boxplotVGram` <class<`list`, `vgram`>, double, double[], logical, list<character>, ...> => null;
type `bplot` <class<`matrix`> | list<double[]>, any, double[] | null, double[] | null, logical, double, null | double[], ...> => list<class<`matrix`> | double[] | character[]>;
type `bplot.xy` <double[], double[], double, double[], logical, ...> => double[];
type `cat.matrix` <class<`matrix`> | class<`data.frame`>, double> => integer[];
type `cat.to.list` <double[], integer[]> => list<double[]>;
type `ceiling2` <double> => double;
type `colorbar.plot` <double, double, class<`matrix`>, double, double, class<`matrix`> | null, double, double> => null;
type `color.scale` <double[], character[], null, any, double> => character[];
type `compactToMat` <class<`dist`>, double, logical, logical> => class<`matrix`>;
type `cover.design` <class<`matrix`>, double, double, logical, double, null | integer[], character, any> => class<`spatialDesign`>;
type `crop.image` <list<double[] | class<`matrix`>>, class<`matrix`>, ...> => list<double[] | class<`matrix`>>;
type `crossCoVGram` <class<`matrix`>, class<`matrix`>, ^double[], ^double[], null, null, logical, null> => class<`list`, `vgram`>;
type `describe` <any> => (character[] | double[]);
type `designer.colors` <double, character[], double[], double> => character[];
type `discretize.image` <class<`data.frame`> | class<`matrix`>, any, any, list<double[]> | null, double[], logical, logical> => list<any>;
type `drape.color` <class<`matrix`>, character[], double[], any, any, logical, double> => list<class<`matrix`> | double[]>;
type `drape.plot` <double[], double[], class<`matrix`>, null, character[], double[], double[] | null, logical> => class<`matrix`>;
type `envelopePlot` <double[], double[], double[], double[], character, character, ...> => null;
type `Exp.cov` <class<`matrix`>, class<`matrix`> | null, double, double, null | class<`matrix`> | class<`dist`>, null | double[] | class<`matrix`>, logical, logical> => (class<`matrix`> | double[]);
type `Exp.image.cov` <any, any, any, null, logical, list<double[]>, ...> => list<any>;
type `Exponential` <class<`dist`> | class<`matrix`> | double[], double, double, double> => (class<`dist`> | class<`matrix`> | double[]);
type `ExponentialUpper` <class<`matrix`>, double, double> => class<`matrix`>;
type `fast.1way` <integer[], class<`matrix`> | double[], double[]> => list<class<`matrix`> | double[]>;
type `fastTps` <class<`data.frame`> | class<`matrix`>, double[], double | null, null, double, logical, logical, double> => class<`fastTps`, `mKrig`>;
type `fields.convert.grid` <double[]> => double[];
type `fields.D` <class<`call`> | expression, character, double> => class<`call`>;
type `fields.derivative.poly` <class<`matrix`>, double, double[] | class<`matrix`>> => class<`matrix`>;
type `fields.diagonalize` <class<`matrix`>, class<`matrix`>> => list<class<`matrix`> | double[]>;
type `fields.diagonalize2` <class<`matrix`>, class<`matrix`>, logical> => list<class<`matrix`> | double[]>;
type `fields.duplicated.matrix` <class<`matrix`> | class<`data.frame`>, double> => integer[];
type `fields.evlpoly` <double[], double[]> => double[];
type `fields.evlpoly2` <class<`matrix`>, double[], class<`matrix`>> => double[];
type `fields.mkpoly` <any, double> => (class<`matrix`> | null);
type `fieldsPlotColors` <character[], ...> => null;
type `fields.pochdown` <double, double> => double;
type `fields.pochup` <double, double> => double;
type `fields.rdist.near` <class<`matrix`>, class<`matrix`>, double, double | null, double> => list<class<`matrix`> | double[]>;
type `fields.x.to.grid` <class<`matrix`> | class<`data.frame`>, double, double, double[]> => list<double[]>;
type `find.upcross` <class<`function`>, class<`sreg`> | list<double | list<double[] | class<`matrix`>>> | list<double | list<double[]>> | list<class<`matrix`> | null | double[]>, double, double, double> => double;
type `gcv.Krig` <class<`Krig`, `Tps`> | list<any>, null, double, double, null, logical, double, double> => list<class<`data.frame`> | class<`matrix`>>;
type `gcv.sreg` <class<`sreg`> | list<class<`matrix`> | null | double[]>, null, double, double, null, double, null | double, null | double> => list<class<`data.frame`> | class<`matrix`>>;
type `getVGMean` <class<`list`, `vgram`>, double, double[]> => list<double[] | character>;
type `golden.section.search` <double, double, double, class<`function`>, double, class<`sreg`> | list<double | list<double[] | class<`matrix`>>> | list<double | null | list<double[] | class<`matrix`>>> | list<double | list<double[]>> | list<double | null | list<double[]>> | list<class<`matrix`> | double[]> | list<class<`matrix`> | null | double[]>, double, null> => list<double | class<`matrix`>>;
type `half.image` <list<double[] | class<`matrix`>>> => list<double[] | class<`matrix`>>;
type `image.plot` <..., logical, double[] | null, any, character[] | null, logical, double, double> => null;
type `imagePlotInfo` <..., null | double[], any> => (list<double[]> | list<null | double[]>);
type `imageplot.setup` <any, any, any, double, logical, double, null, double[] | null> => list<double[]>;
type `image.smooth` <class<`matrix`> | list<any>, null | list<any>, any, any, any, double, null, double> => list<double[] | class<`matrix`>>;
type `in.poly` <class<`matrix`>, class<`matrix`>, logical, double> => logical[];
type `in.poly.grid` <list<double[]>, class<`matrix`>, logical, double> => class<`matrix`>;
type `interp.surface` <list<integer[] | class<`matrix`>> | list<double[] | class<`matrix`>>, class<`matrix`> | class<`data.frame`>> => ^double[];
type `interp.surface.grid` <list<integer[] | class<`matrix`>>, list<double[]>> => list<double[] | class<`matrix`>>;
type `Krig` <class<`data.frame`> | class<`matrix`>, class<`matrix`> | ^double[], character | class<`function`>, double | null, null | double, logical, double[] | null | class<`matrix`>, double> => class<`Krig`>;
type `Krig.Amatrix` <class<`Krig`> | class<`Krig`, `Tps`>, class<`matrix`>, double | null, logical, ...> => class<`matrix`>;
type `Krig.check.xY` <class<`data.frame`> | class<`matrix`> | double[], class<`matrix`> | ^double[], double[] | class<`matrix`> | null, null | double[], logical, logical> => (list<class<`matrix`> | double[]> | list<class<`matrix`> | double[] | null> | list<double[] | class<`matrix`>> | list<double[] | class<`matrix`> | null>);
type `Krig.coef` <class<`Krig`> | class<`Krig`, `Tps`> | list<any>, double, double[] | class<`matrix`> | null, null | class<`matrix`> | double[], logical> => (list<class<`matrix`> | double> | list<class<`matrix`> | null | double> | list<double[]> | list<double[] | null>);
type `Krig.df.to.lambda` <double, double[], double, double> => double;
type `Krig.engine.default` <class<`Krig`> | list<any>, logical> => list<any>;
type `Krig.engine.fixed` <list<any>, any, null> => list<any>;
type `Krig.engine.knots` <list<any>, logical> => list<any>;
type `Krig.fgcv` <double, list<double | list<double[] | class<`matrix`>>> | list<double | null | list<double[] | class<`matrix`>>> | list<double | list<double[]>> | list<double | null | list<double[]>> | class<`Krig`>> => double;
type `Krig.fgcv.model` <double, list<double | list<double[] | class<`matrix`>>> | list<double | list<double[]>> | class<`Krig`> | list<double | null | list<double[] | class<`matrix`>>> | list<double | null | list<double[]>>> => (double | null);
type `Krig.fgcv.one` <double, list<double | list<double[] | class<`matrix`>>> | list<double | null | list<double[] | class<`matrix`>>> | list<double | list<double[]>> | list<double | null | list<double[]>> | class<`Krig`>> => double;
type `Krig.flplike` <double, list<double | null | list<double[] | class<`matrix`>>> | list<double | list<double[]>> | list<double | null | list<double[]>> | class<`Krig`> | list<double | list<double[] | class<`matrix`>>>> => double;
type `Krig.fs2hat` <double, list<double | list<double[] | class<`matrix`>>> | list<double | list<double[]>> | list<double | null | list<double[] | class<`matrix`>>> | list<double | null | list<double[]>>> => double;
type `Krig.ftrace` <double, double[]> => double;
type `Krig.make.u` <class<`Krig`, `Tps`>, double[], null, logical> => list<class<`matrix`> | null | double>;
type `Krig.make.W` <list<any>, logical> => (list<class<`matrix`>> | list<double[]> | list<null>);
type `Krig.make.Wi` <class<`Krig`> | class<`Krig`, `Tps`>, any> => (list<class<`matrix`>> | list<double[]>);
type `Krig.null.function` <class<`matrix`>, class<`matrix`> | double[] | null, logical, double> => class<`matrix`>;
type `Krig.parameters` <list<any>, logical> => (list<double> | list<double | null> | list<null | double> | list<null>);
type `Krig.replicates` <list<any> | null, any, any, null, any, logical> => (list<class<`matrix`> | double[] | null> | list<class<`matrix`> | null | double[]>);
type `Krig.transform.xY` <list<any>, null | class<`matrix`>, logical> => list<any>;
type `Krig.which.lambda` <list<any>> => (list<character | null | double> | list<character | null | logical>);
type `Krig.ynew` <any, double[] | null | class<`matrix`>, null | class<`matrix`> | double[]> => (list<class<`matrix`> | double> | list<class<`matrix`> | null | double>);
type `larry.colors` < > => character[];
type `make.surface.grid` <list<double[]> | list<integer[] | double>> => class<`matrix`>;
type `Matern` <class<`dist`> | class<`matrix`> | double[], double, double, double, double, double> => (class<`dist`> | class<`matrix`> | double[]);
type `Matern.cor.to.range` <double, double, double, null, ...> => double;
type `matern.image.cov` <any, any, any, list<any> | null, logical, any, null, null> => (class<`matrix`> | list<any>);
type `MaternQRProfile.test` <class<`matrix`>, double[], double, double> => list<class<`Krig`> | double[] | list<double | integer[] | character>>;
type `MaternQR.test` <class<`matrix`>, double[], double, double[]> => list<double[] | class<`matrix`> | list<double[] | character>>;
type `mKrig` <class<`data.frame`> | class<`matrix`>, class<`matrix`> | ^double[], double[], double[] | null | class<`matrix`>, character | class<`function`>, null | list<any>, double, double> => class<`mKrig`>;
type `mKrigCheckXY` <class<`matrix`> | class<`data.frame`>, class<`matrix`> | ^double[], double[], class<`matrix`> | double[] | null, logical> => (list<class<`matrix`> | double[]> | list<class<`matrix`> | double[] | null> | list<double[] | class<`matrix`> | null>);
type `mKrig.coef` <class<`fastTps`, `mKrig`> | class<`mKrig`> | list<any>, class<`matrix`> | double[], logical> => list<class<`matrix`>>;
type `mKrig.MLE` <class<`matrix`>, double[] | class<`matrix`>, double[], character, null | list<character>, null, null | list<double[]>, null | double> => list<any>;
type `mKrigMLEGrid` <class<`matrix`>, class<`matrix`> | ^double[], double[], null, list<double> | null, character, list<character | double>, logical> => list<any>;
type `mKrig.MLE.joint` <class<`matrix`>, double[], double[], double, list<double>, character, list<character | double>, null> => class<`mKrig`>;
type `mKrigMLEJoint` <class<`matrix`>, class<`matrix`> | ^double[], double[], null, null | list<double>, logical, character, list<any>> => list<any>;
type `mKrig.trace` <class<`mKrig`> | list<any>, double, double> => (list<double[]> | list<null | double>);
type `MLE.Matern` <class<`data.frame`> | class<`matrix`>, ^double[], double, null, double, logical, double, double> => list<any>;
type `MLESpatialProcess` <class<`matrix`>, class<`matrix`> | ^double[], double[], null, list<double>, character, list<character | double>, double> => list<any>;
type `multWendlandGrid` <list<double[]>, class<`matrix`>, double, class<`matrix`> | double[], double[]> => double[];
type `parse.grid.list` <list<double[]>, character> => list<double[] | character>;
type `plot.Krig` <class<`Krig`> | class<`Krig`, `Tps`>, double, integer[], ...> => class<`histogram`>;
type `plot.qsreg` <class<`qsreg`>, character, null, ...> => null;
type `plot.spatialDesign` <class<`spatialDesign`>, ...> => null;
type `plot.spatialProcess` <class<`mKrig`, `spatialProcess`>, double, integer[], ...> => null;
type `plot.sreg` <class<`sreg`>, double, integer[], ...> => class<`histogram`>;
type `plot.surface` <list<double[] | character | class<`matrix`>> | list<double[] | class<`matrix`>>, null, character, null, null, null, any, null> => null;
type `plot.vgram` <class<`list`, `vgram`>, double, double[], logical, ...> => null;
type `plot.vgram.matrix` <class<`vgram.matrix`>, ...> => null;
type `poly.image` <class<`matrix`>, class<`matrix`>, class<`matrix`>, character[], any, character, logical, double[]> => null;
type `poly.image.regrid` <class<`matrix`>> => class<`matrix`>;
type `predictDerivative.Krig` <class<`Krig`> | class<`Krig`, `Tps`>, class<`matrix`> | null, logical, ...> => class<`matrix`>;
type `predict.fastTps` <class<`fastTps`, `mKrig`>, class<`matrix`> | null, null | list<double[]>, null | double[], double, null, logical, logical> => class<`matrix`>;
type `predict.Krig` <class<`Krig`> | list<any> | class<`Krig`, `Tps`>, null | class<`matrix`> | class<`data.frame`>, null | class<`matrix`> | double[], logical, logical, null | double, null | double, null> => class<`matrix`>;
type `predict.mKrig` <class<`fastTps`, `mKrig`> | class<`mKrig`> | list<any> | class<`mKrig`, `spatialProcess`>, class<`matrix`> | null | class<`data.frame`>, null | class<`matrix`>, null, double, null | double[], logical, logical> => class<`matrix`>;
type `predict.qsreg` <class<`qsreg`>, any, double, integer, ...> => double[];
type `predictSE` <class<`Krig`> | class<`Krig`, `Tps`> | class<`mKrig`>, ...> => (class<`matrix`> | double[]);
type `predictSE.Krig` <class<`Krig`> | class<`Krig`, `Tps`>, null | class<`matrix`>, logical, logical, ...> => (double[] | class<`matrix`>);
type `predictSE.mKrig` <class<`mKrig`>, class<`matrix`> | null, null, logical, logical, ...> => double[];
type `predict.sreg` <class<`sreg`>, any, double, double, ...> => double[];
type `predictSurface` <class<`Krig`> | class<`Krig`, `Tps`> | class<`mKrig`> | class<`mKrig`, `spatialProcess`> | class<`fastTps`, `mKrig`>, ...> => list<double[] | character | class<`matrix`>>;
type `predictSurface.fastTps` <class<`fastTps`, `mKrig`>, list<double[]>, logical, null, double, double, double[], logical> => list<double[] | character | class<`matrix`>>;
type `predictSurface.Krig` <class<`mKrig`> | class<`mKrig`, `spatialProcess`> | class<`Krig`> | class<`Krig`, `Tps`>, null | list<double[]>, logical, null, any, any, any, logical> => list<double[] | character | class<`matrix`>>;
type `predictSurface.mKrig` <class<`mKrig`> | class<`mKrig`, `spatialProcess`>, ...> => list<double[] | character | class<`matrix`>>;
type `predictSurfaceSE` <class<`Krig`> | class<`Krig`, `Tps`>, ...> => list<double[] | character | class<`matrix`>>;
type `predictSurfaceSE.default` <class<`Krig`> | class<`Krig`, `Tps`>, null | list<double[]>, logical, null, double, double, any, logical> => list<double[] | character | class<`matrix`>>;
type `printGCVWarnings` <class<`data.frame`>, character> => null;
type `print.Krig` <class<`Krig`>, double, ...> => class<`Krig`>;
type `print.mKrig` <class<`fastTps`, `mKrig`> | class<`mKrig`>, double, ...> => class<`mKrigSummary`>;
type `print.mKrigSummary` <class<`mKrigSummary`>, any, ...> => class<`mKrigSummary`>;
type `pushpin` <double, double, double, class<`matrix`>, double, character, character, double> => null;
type `qr.q2ty` <class<`qr`>, class<`matrix`> | double[]> => (class<`matrix`> | double[]);
type `qr.yq2` <class<`qr`>, class<`matrix`>> => class<`matrix`>;
type `qsreg` <double[], double[], double | null, double, double, double, double, double> => class<`qsreg`>;
type `qsreg.psi` <class<`matrix`> | double[], double, double> => (class<`matrix`> | double[]);
type `qsreg.rho` <class<`matrix`> | double[], double, double> => (class<`matrix`> | double[]);
type `qsreg.trace` <double[], double[], double, double, double, double, double, double> => double;
type `QTps` <class<`matrix`>, ^double[], ..., class<`matrix`> | null, null | double, double, double, double> => class<`Krig`>;
type `quilt.plot` <class<`data.frame`> | class<`matrix`>, class<`matrix`> | ^double[], any, double, double, null, logical, logical> => list<any>;
type `radbas.constant` <double, double> => double;
type `Rad.cov` <class<`matrix`>, class<`matrix`> | null, double, double | null, logical, logical, class<`matrix`> | double[] | null, logical> => (class<`matrix`> | double[]);
type `RadialBasis` <class<`matrix`>, double, double, double> => class<`matrix`>;
type `rdist` <class<`data.frame`> | class<`matrix`> | double[], class<`data.frame`> | class<`matrix`> | null | double[], logical> => (class<`matrix`> | class<`dist`>);
type `rdist.earth` <class<`matrix`>, class<`matrix`> | null, logical, null> => class<`matrix`>;
type `RdistEarth` <class<`matrix`>, null, logical, null> => class<`matrix`>;
type `rdist.earth.vec` <class<`matrix`>, class<`matrix`>, logical, null> => double[];
type `rdist.vec` <integer[], integer[]> => double[];
type `REML.test` <class<`matrix`>, double[], double, double, double, double> => list<class<`matrix`> | double>;
type `ribbon.plot` <double[], double[], double[], null, character[], character, ...> => null;
type `set.panel` <double, double, logical> => null;
type `setup.image.smooth` <double, double, double, double, class<`function`>, double, double, double> => list<any>;
type `sim.Krig` <class<`Krig`>, class<`matrix`>, double, logical, ...> => class<`matrix`>;
type `sim.Krig.approx` <class<`Krig`>, null, double, double, double, logical, logical, ...> => list<double[] | class<`array`>>;
type `sim.rf` <list<any>> => class<`matrix`>;
type `smooth.2d` <double[], null, null, logical, null, class<`data.frame`>, double, double> => list<double[] | class<`matrix`> | null>;
type `snow.colors` <double, double> => character[];
type `spam2full` <class<`spam`>> => class<`matrix`>;
type `spam2spind` <class<`spam`>> => list<class<`matrix`> | double[]>;
type `spatialProcess` <class<`matrix`>, ^double[], double[], null, list<double>, character, list<character | double>, double | null> => class<`mKrig`, `spatialProcess`>;
type `spind2full` <list<class<`matrix`> | double[]>> => class<`matrix`>;
type `spind2spam` <list<class<`matrix`> | double[]>, logical> => class<`spam`>;
type `splint` <class<`matrix`> | double[], double[], any, null, double, double, null | double, null> => (double[] | list<double[]>);
type `sreg` <double[], double[], double | null, null | double, double, double[], double, double> => class<`sreg`>;
type `sreg.df.to.lambda` <double, class<`matrix`> | double[], double[], double, double> => double;
type `sreg.fit` <double, class<`sreg`> | list<class<`matrix`> | null | double[]>, any> => (list<double> | list<double | null>);
type `sreg.trace` <double, list<class<`matrix`> | double[]> | list<double[]>> => double;
type `stationary.cov` <class<`data.frame`> | class<`matrix`> | double[], class<`matrix`> | null | double[], character, character, null | list<logical>, double, null | class<`matrix`>, class<`matrix`> | null | double[]> => (class<`matrix`> | double[]);
type `stationary.image.cov` <any, any, any, list<any> | null, logical, any, null, null> => (class<`matrix`> | double[] | list<any>);
type `stationary.taper.cov` <class<`matrix`>, class<`matrix`>, character | class<`function`>, character, null | list<character>, null | list<double>, double, null | class<`matrix`>> => (class<`matrix`> | class<`spam`>);
type `stats` <class<`matrix`> | double[], any> => class<`matrix`>;
type `stats.bin` <double[], double[], double, double[] | null> => list<double[] | class<`matrix`>>;
type `summaryGCV.Krig` <class<`Krig`> | class<`Krig`, `Tps`>, double, double, logical, double, null, ...> => ^double[];
type `summaryGCV.sreg` <class<`sreg`>, double, double, double, double, logical, ...> => ^double[];
type `summary.Krig` <class<`Krig`> | class<`Krig`, `Tps`>, double, ...> => class<`summary.Krig`>;
type `summary.mKrig` <class<`fastTps`, `mKrig`> | class<`mKrig`>, ...> => class<`mKrigSummary`>;
type `summary.spatialDesign` <class<`spatialDesign`>, double, ...> => class<`summarySpatialDesign`>;
type `summary.spatialProcess` <class<`mKrig`, `spatialProcess`>, ...> => class<`spatialProcessSummary`>;
type `summary.sreg` <class<`sreg`>, double, ...> => class<`summary.sreg`>;
type `supportsArg` <character | class<`function`>, character> => logical;
type `surface` <class<`Krig`> | class<`Krig`, `Tps`> | class<`mKrig`> | class<`mKrig`, `spatialProcess`> | list<double[] | character | class<`matrix`>>, ...> => null;
type `surface.default` <list<double[] | character | class<`matrix`>>, ...> => null;
type `surface.Krig` <class<`Krig`> | class<`Krig`, `Tps`> | class<`mKrig`> | class<`mKrig`, `spatialProcess`>, null | list<double[]>, logical, null, null, null, null, null> => null;
type `surface.mKrig` <class<`Krig`> | class<`Krig`, `Tps`> | class<`mKrig`> | class<`mKrig`, `spatialProcess`>, null | list<double[]>, logical, null, null, null, null, null> => null;
type `test.for.zero` <class<`matrix`> | class<`spam`> | double[] | null, class<`matrix`> | class<`spam`> | double[], double, logical, character | null> => null;
type `tim.colors` <double, double> => character[];
type `Tps` <class<`data.frame`> | class<`matrix`> | double[], ^double[] | class<`matrix`>, null | double, null, character, logical, logical, character> => class<`Krig`, `Tps`>;
type `transformx` <class<`matrix`>, character, any, any> => class<`matrix`>;
type `two.colors` <double, character, character, character, double> => character[];
type `unrollZGrid` <any, null> => null;
type `unscale` <class<`matrix`> | integer[], double[], double[]> => class<`matrix`>;
type `US` <...> => null;
type `vgram` <class<`matrix`>, class<`matrix`> | ^double[], null, null, logical, null, null | double, null> => class<`list`, `vgram`>;
type `vgram.matrix` <class<`matrix`>, double, double, double> => class<`vgram.matrix`>;
type `Wendland` <class<`matrix`> | double[], double, double, double, double, null> => (class<`matrix`> | double[]);
type `Wendland2.2` <class<`matrix`> | double[], double> => (class<`matrix`> | double[]);
type `Wendland.beta` <double, double> => class<`matrix`>;
type `wendland.cov` <class<`matrix`> | double[], class<`matrix`> | double[], double, null | class<`matrix`>, double, class<`matrix`> | null | double[], logical, list<character>> => (class<`matrix`> | class<`spam`>);
type `wendland.eval` <class<`matrix`> | double[], double, double, double> => (class<`matrix`> | double[]);
type `which.max.image` <list<double[] | class<`matrix`>>> => list<double | class<`matrix`>>;
type `which.max.matrix` <class<`matrix`>> => class<`matrix`>;
type `world` <...> => null;
type `xline` <double[], ...> => null;
type `yline` <double[], ...> => null;
