type `all_identical` <list<null>> => logical;
type `append_col` <class<`data.frame`, `tbl`, `tbl_df`>, character[], character, integer> => class<`data.frame`, `tbl`, `tbl_df`>;
type `append_df` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`> | list<^character[]>, character | integer, logical> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `as_tibble_matrix` <class<`factor`> | class<`matrix`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `build_longer_spec` <class<`data.frame`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, any, character[], any, null | character, null | character, character | null, null | list<any>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `build_wider_spec` <class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, any, any, character, character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `check_key` <any> => character;
type `check_replacement` <character | double | list<double>, any> => null;
type `check_spec` <class<`data.frame`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `chop` <class<`data.frame`, `tbl`, `tbl_df`>, any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `col_names` <class<`data.frame`>, null> => character[];
type `complete` <class<`data.frame`, `tbl`, `tbl_df`>, ..., any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `complete_cases` <class<`data.frame`, `tbl`, `tbl_df`>, any> => logical[];
type `complete.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>, ..., list<any>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `crossing` <...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `deduplicate_names` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `dots_cols` <..., null | class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>> => list<any>;
type `drop_cols` <class<`data.frame`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, character[] | integer[]> => (class<`data.frame`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `drop_na` <class<`data.frame`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `drop_na.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `drop_null` <list<any>> => list<any>;
type `ensym2` <any> => class<`name`>;
type `expand` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `expand.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `expand_grid` <...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `extract` <class<`data.frame`>, any, character[], character, logical, logical, ...> => class<`data.frame`>;
type `extract.data.frame` <class<`data.frame`>, any, character[], character, logical, logical, ...> => class<`data.frame`>;
type `.f` <character[] | integer[] | class<`data.frame`, `tbl`, `tbl_df`>, double, double> => (character[] | integer[] | class<`data.frame`, `tbl`, `tbl_df`>) | <character[] | class<`Date`> | class<`factor`> | double[], any> => integer[] | <class<`data.frame`, `tbl`, `tbl_df`> | double[] | list<class<`formula`> | class<`data.frame`>>> => (class<`data.frame`, `tbl`, `tbl_df`> | double[] | list<class<`formula`> | class<`data.frame`>>);
type `fill` <class<`data.frame`>, ..., any> => class<`data.frame`>;
type `fill.data.frame` <class<`data.frame`>, ..., character[]> => class<`data.frame`>;
type `flatten_at` <class<`data.frame`, `tbl`, `tbl_df`>, logical[]> => (class<`data.frame`, `tbl`, `tbl_df`> | list<any>);
type `flatten_nested` <class<`data.frame`, `tbl`, `tbl_df`>, logical[]> => class<`data.frame`, `tbl`, `tbl_df`>;
type `full_seq` <double[], double, double> => double[];
type `full_seq.numeric` <double[], double, double> => double[];
type `gather` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, any, any, ..., logical, logical, logical> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `gather.data.frame` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, any, any, ..., logical, logical, logical> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `hoist` <class<`data.frame`, `tbl`, `tbl_df`>, any, ..., logical, logical, list<any>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `id` <class<`data.frame`> | list<integer[]>, any> => integer[];
type `id_var` <character[] | class<`Date`> | class<`factor`> | double[], any> => integer[];
type `imap` <class<`data.frame`, `tbl`, `tbl_df`> | list<any>, class<`function`>, ...> => list<any>;
type `index` <double[]> => character[];
type `is_complete` <^character[] | ^double[] | list<integer[] | null>> => logical[];
type `list_indices` <integer[], double> => character;
type `melt_dataframe` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, integer, integer[], character, character, ^double[], logical, logical, logical> => class<`data.frame`>;
type `nest` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., any> => (class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `nest.data.frame` <class<`data.frame`>, ..., any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `nest.grouped_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>, ..., any> => class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`>;
type `nesting` <...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `nest_legacy` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `nest_legacy.data.frame` <class<`data.frame`>, ..., character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `nest_legacy.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, ..., any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `nest.tbl_df` <class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `normalize_melt_arguments` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, integer[]> => list<^double[]>;
type `pack` <class<`data.frame`, `tbl`, `tbl_df`>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `pivot_longer` <class<`data.frame`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, any, character[], null | character, null | character, character | null, list<any>, character, character, logical, list<any>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `pivot_longer_spec` <class<`data.frame`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, character, logical, list<any>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `pivot_wider` <class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, any, any, character, character, character, any, null | list<double>, null | list<class<`function`>>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `pivot_wider_spec` <class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, character, any, null | list<double>, null | list<class<`function`>>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `reconstruct_tibble` <class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `spec_tbl_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, any> => (class<`data.frame`> | class<`data.frame`, `grouped_df`, `tbl`, `tbl_df`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `replace_na` <^character[] | class<`data.frame`, `tbl`, `tbl_df`> | ^double[], character | double | list<any>, ...> => (character[] | class<`data.frame`, `tbl`, `tbl_df`> | double[]);
type `replace_na.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>, list<any>, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `replace_na.default` <^character[] | ^double[], character | double, ...> => (character[] | double[]);
type `separate` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, any, ^character[], character, logical, logical, character, character, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `separate.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, any, ^character[], character, logical, logical, character, character, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `separate_rows` <class<`data.frame`>, ..., character, logical> => class<`data.frame`>;
type `separate_rows.data.frame` <class<`data.frame`>, ..., character, logical> => class<`data.frame`>;
type `seq_nrow` <class<`data.frame`, `tbl`, `tbl_df`>> => integer[];
type `simplifyPieces` <list<character[] | null | null | character[] | character[]>, integer, logical> => list<integer[] | list<^character[]> | integer | list<^character[]> | integer[] | list<character[]>>;
type `sorted_unique` <class<`data.frame`, `tbl`, `tbl_df`> | double[] | list<class<`formula`> | class<`data.frame`>>> => (class<`data.frame`, `tbl`, `tbl_df`> | double[] | list<class<`formula`> | class<`data.frame`>>);
type `split_labels` <class<`data.frame`>, integer[], logical> => class<`data.frame`>;
type `spread` <class<`data.frame`>, any, any, null, logical, logical, null> => class<`data.frame`>;
type `spread.data.frame` <class<`data.frame`>, any, any, null, logical, logical, null> => class<`data.frame`>;
type `str_extract` <^character[], character[], character, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `strike` <character[] | list<character[]>, character | list<integer | character | integer>> => (character[] | list<character[]>);
type `str_separate` <^character[], ^character[], character, logical, character, character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `str_split_fixed` <^character[], character, integer, character, character> => list<^character[]>;
type `unchop` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, any, logical, null | class<`data.frame`, `tbl`, `tbl_df`>> => any;
type `uncount` <class<`data.frame`, `tbl`, `tbl_df`>, any, logical, character | null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unite` <class<`data.frame`, `tbl`, `tbl_df`>, character, ..., character, logical, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unite.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>, character, ..., character, logical, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unnest` <class<`data.frame`, `tbl`, `tbl_df`>, any, ..., logical, null, null, character | class<`function`>, any, any, any, any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unnest.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>, any, ..., logical, null, null, character | class<`function`>, character, character, character, character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unnest_legacy` <class<`data.frame`, `tbl`, `tbl_df`>, ..., null, null, null, null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unnest_legacy.data.frame` <class<`data.frame`, `tbl`, `tbl_df`>, ..., null, null, null, null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unnest_longer` <class<`data.frame`, `tbl`, `tbl_df`>, any, null, null, null, character, logical, list<any>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unnest_wider` <class<`data.frame`, `tbl`, `tbl_df`>, any, null, logical, character, list<any>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `unpack` <class<`data.frame`, `tbl`, `tbl_df`>, any, character | null, character | class<`function`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `update_cols` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | list<class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>>> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `vals_dedup` <class<`data.frame`>, character[] | ^double[], any, null | class<`function`>> => (class<`data.frame`> | list<any>);
type `vec_fill_fun` <character[]> => class<`function`>;
type `vec_repeat` <character[] | integer[] | class<`data.frame`, `tbl`, `tbl_df`>, double, double> => (character[] | integer[] | class<`data.frame`, `tbl`, `tbl_df`>);
type `vec_simplify` <list<character | class<`vctrs_unspecified`> | character[]>> => (^character[] | list<character[]>);
type `wrap_error_names` <class<`data.frame`, `tbl`, `tbl_df`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `wrap_vec` <^character[] | ^double[] | list<double[]>, character[]> => class<`data.frame`, `tbl`, `tbl_df`>;
