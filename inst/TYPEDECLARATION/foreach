type `[[` <class<`condition`, `error`, `simpleError`>> => null | <class<`condition`, `error`, `simpleError`>> => any;
type `$` <class<`foreach`> | class<`filteredforeach`, `foreach`>, class<`name`> | class<`(`> | class<`call`>, environment, any> => (class<`data.frame`> | class<`matrix`> | double[] | null | list<double>);
type `%:%` <class<`foreach`>, class<`foreachCondition`>> => class<`filteredforeach`, `foreach`>;
type `accumulate` <class<`ifilteredforeach`, `iter`> | class<`iforeach`, `iter`>, class<`data.frame`> | class<`matrix`> | double[], double, ...> => logical;
type `accumulate.ifilteredforeach` <class<`ifilteredforeach`, `iter`>, double, double, ...> => logical;
type `accumulate.iforeach` <class<`iforeach`, `iter`>, class<`data.frame`> | class<`matrix`> | double[], double, ...> => logical;
type `accumulator` <list<class<`data.frame`> | class<`matrix`> | double[]>, double> => null;
type `callCombine` <class<`iforeach`, `iter`>, logical> => null;
type `complete` <class<`iforeach`, `iter`>> => logical;
type `%do%` <class<`filteredforeach`, `foreach`> | class<`foreach`>, any> => (double[] | null | list<double>);
type `%dopar%` <class<`foreach`>, any> => (class<`data.frame`> | class<`matrix`>);
type `filter` <character[]> => logical[];
type `foreach` <..., any, any, null, logical, logical, double, character[], null, null, null, logical> => class<`foreach`>;
type `fun` <list<any>, ...> => list<double> | <any, any> => null;
type `FUN` <class<`call`>> => (class<`abstractiter`, `iter`> | class<`containeriter`, `iter`> | class<`dataframeiter`, `iter`> | class<`iter`, `matrixiter`>);
type `getDoPar` < > => list<class<`function`> | null>;
type `getDoParName` < > => null;
type `getDoParRegistered` < > => logical;
type `getDoParVersion` < > => null;
type `getDoParWorkers` < > => integer;
type `getDoSeq` < > => list<class<`function`> | null>;
type `getDoSeqName` < > => null;
type `getDoSeqRegistered` < > => logical;
type `getDoSeqVersion` < > => null;
type `getDoSeqWorkers` < > => integer;
type `getErrorIndex` <class<`ifilteredforeach`, `iter`> | class<`iforeach`, `iter`>, ...> => integer;
type `getErrorIndex.ifilteredforeach` <class<`ifilteredforeach`, `iter`>, ...> => integer;
type `getErrorIndex.iforeach` <class<`iforeach`, `iter`>, ...> => integer;
type `getErrorValue` <class<`ifilteredforeach`, `iter`> | class<`iforeach`, `iter`>, ...> => null;
type `getErrorValue.ifilteredforeach` <class<`ifilteredforeach`, `iter`>, ...> => null;
type `getErrorValue.iforeach` <class<`iforeach`, `iter`>, ...> => null;
type `getResult` <class<`iforeach`, `iter`> | class<`ifilteredforeach`, `iter`>, ...> => (class<`data.frame`> | class<`matrix`> | double[] | null | list<double>);
type `getResult.ifilteredforeach` <class<`ifilteredforeach`, `iter`>, ...> => (double[] | null);
type `getResult.iforeach` <class<`iforeach`, `iter`>, ...> => (class<`data.frame`> | class<`matrix`> | double[] | null | list<double>);
type `iter.filteredforeach` <class<`filteredforeach`, `foreach`>, ...> => class<`ifilteredforeach`, `iter`>;
type `iter.foreach` <class<`foreach`>, ..., list<any>> => class<`iforeach`, `iter`>;
type `makeAccum` <any> => class<`function`>;
type `makeFiltered` <class<`foreach`>, class<`foreachCondition`>> => class<`filteredforeach`, `foreach`>;
type `nextElem.ifilteredforeach` <class<`ifilteredforeach`, `iter`>, ..., logical> => any;
type `nextElem.iforeach` <class<`iforeach`, `iter`>, ..., logical> => any;
type `registerDoSEQ` < > => class<`function`>;
type `setDoPar` <class<`function`>, null, class<`function`>> => class<`function`>;
type `setDoSeq` <class<`function`>, null, class<`function`>> => class<`function`>;
type `times` <double> => class<`foreach`>;
type `when` <any> => class<`foreachCondition`>;
