type `[[` <class<`condition`, `error`, `simpleError`>> => character | <class<`LogEvent`, `R6`>> => logical | <class<`LogEvent`, `R6`>> => logical | <...> => character;
type `$` <class<`condition`, `error`, `simpleError`>> => character | <character> => class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | < > => null | <class<`LogEvent`, `R6`>> => class<`json`> | <null | list<any>> => class<`Layout`, `LayoutFormat`, `R6`> | <character> => (class<`Appender`, `AppenderFile`, `AppenderJson`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `Filterable`, `R6`>) | <character, ..., character> => character | <character> => (class<`Layout`, `LayoutFormat`, `R6`> | class<`Layout`, `LayoutGlue`, `R6`>) | <character> => class<`Layout`, `LayoutFormat`, `R6`> | <character> => class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | <logical> => class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | <character, ..., character> => character | <class<`Layout`, `LayoutFormat`, `R6`> | class<`Layout`, `LayoutGlue`, `R6`> | class<`Layout`, `LayoutJson`, `R6`>> => (class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `AppenderJson`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `Filterable`, `R6`> | class<`Appender`, `AppenderSyslog`, `Filterable`, `R6`>) | <null> => null | <..., character, environment> => class<`character`, `glue`> | <null | class<`function`> | list<any>> => (class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `AppenderJson`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `Filterable`, `R6`> | class<`Appender`, `AppenderSyslog`, `Filterable`, `R6`> | class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <character> => (class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <character> => class<`Layout`, `LayoutFormat`, `R6`> | <class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `AppenderJson`, `Filterable`, `R6`> | class<`Appender`, `AppenderSyslog`, `Filterable`, `R6`>, character | null> => (class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <null, integer> => character[] | <character, ..., any> => character | <class<`list`, `logger_config`> | character | null | list<null | logical | list<class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`>> | character | logical | list<class<`Appender`, `AppenderConsole`, `Filterable`, `R6`>>>, any, any, any> => (class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <double> => list<any> | <null | character | integer> => (class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <class<`function`> | class<`EventFilter`, `FilterForceLevel`, `R6`> | class<`EventFilter`, `FilterInject`, `R6`>, character | null> => (class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <list<logical>> => class<`Layout`, `LayoutJson`, `R6`> | <logical> => (class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <class<`function`>> => class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | < > => null | <integer> => character | <environment | class<`LogEvent`, `R6`>> => character[] | <character[]> => class<`Appender`, `AppenderSyslog`, `Filterable`, `R6`> | < > => class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | <class<`function`>> => (class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <character | double | null> => class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | <..., character, environment> => character | <character, ..., any> => (character | null) | <character[]> => (class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `AppenderJson`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `Filterable`, `R6`> | list<any>> => (class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <class<`LogEvent`, `R6`>> => (character | list<any>) | <..., character, environment> => class<`character`, `glue`> | <logical> => class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | <character, ..., any> => character | <null> => class<`Appender`, `AppenderSyslog`, `Filterable`, `R6`> | <null, integer> => environment | <null, any, any> => class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | <character | null> => (class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `AppenderJson`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `Filterable`, `R6`> | class<`Appender`, `AppenderSyslog`, `Filterable`, `R6`>);
type `%||%` <character | null, any> => (character | integer);
type `add_appender` <class<`Appender`, `AppenderConsole`, `Filterable`, `R6`>, character, class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>> => class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>;
type `add_log_levels` <double> => class<`integer`, `log_levels`>;
type `all_are_distinct` <character[] | integer[], logical> => logical;
type `appender_summary` <null | list<any>> => (character | null);
type `as.data.frame.LogEvent` <class<`LogEvent`, `R6`>, null, logical, logical, ...> => class<`data.frame`>;
type `as_logger_config` <null | character | list<any>> => class<`list`, `logger_config`>;
type `as_logger_config.character` <character> => class<`list`, `logger_config`>;
type `as_logger_config.list` <list<any>> => class<`list`, `logger_config`>;
type `as_logger_config.NULL` <null> => class<`list`, `logger_config`>;
type `as_log_levels` <integer[]> => class<`integer`, `log_levels`>;
type `assert` <logical, ..., logical, null> => logical;
type `assert_filter` <class<`EventFilter`, `FilterForceLevel`, `R6`> | class<`EventFilter`, `FilterInject`, `R6`> | class<`function`>> => logical;
type `assert_namespace` <...> => logical;
type `basic_config` <character | null, character, character, character, null, character, character, character, logical | character> => class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>;
type `class_fmt` <class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | class<`data.frame`>, character[] | null> => character;
type `colorize_levels` <character[] | double[], null | list<any>> => (character[] | double[]);
type `compact` <list<any>> => list<any>;
type `dyn_register_s3_method` <character, character, character, null> => null;
type `f` <class<`LogEvent`, `R6`>> => logical | <any> => any | <class<`LogEvent`, `R6`>> => logical;
type `filter` <character[]> => logical[];
type `find_target` <class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`> | class<`Appender`, `AppenderConsole`, `Filterable`, `R6`>, character> => any;
type `fmt_class` <character> => character;
type `fmt_threshold` <integer | null, character, class<`integer`, `log_levels`>> => character;
type `format.ancestry` <class<`ancestry`, `logical`>, logical, ...> => character;
type `format_custom_fields` <list<any>, any> => character;
type `format.LogEvent` <environment | class<`LogEvent`, `R6`>, character, character, any, class<`integer`, `log_levels`> | integer[], character, ...> => character[];
type `format.Logger` <class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>, logical, ...> => character[];
type `format.logger_tree` <class<`data.frame`, `logger_tree`>, logical, ...> => character[];
type `fun` <...> => class<`matrix`> | <...> => class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>;
type `FUN` <character> => character[] | <integer> => character | <class<`Appender`, `AppenderConsole`, `Filterable`, `R6`>> => class<`data.frame`> | <integer | null> => character | <character | class<`data.frame`> | double | integer[], any, any, any, any> => character | <character> => (class<`R6ClassGenerator`> | null) | <character[] | class<`POSIXct`, `POSIXt`> | integer[]> => logical | <double> => character | <class<`LogEvent`, `R6`>> => class<`data.frame`, `data.table`> | <character[] | null | class<`factor`>> => logical[] | <class<`data.frame`>> => class<`AsIs`>;
type `get` <integer, character, ..., any, any> => character | <integer, ..., class<`POSIXct`, `POSIXt`>, character, environment> => (character | class<`character`, `glue`>) | <class<`LogEvent`, `R6`>> => any | <class<`LogEvent`, `R6`>> => null | <class<`LogEvent`, `R6`>> => null | <class<`LogEvent`, `R6`>> => logical | <class<`LogEvent`, `R6`>> => null | <any> => logical | <any> => any;
type `get_caller` <integer> => character;
type `get_custom_fields` <class<`LogEvent`, `R6`>> => list<any>;
type `get_envar_default_config` < > => null;
type `get_envar_default_threshold` <double> => double;
type `get_envar_suspend_logging` < > => logical;
type `get_logger` <any, any, logical> => (class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>);
type `get_logger_glue` <character> => class<`Filterable`, `Logger`, `LoggerGlue`, `R6`>;
type `get_log_levels` < > => (class<`integer`, `log_levels`> | integer[]);
type `get_user` <character> => character;
type `guess_user` < > => character;
type `is_blank` <character[] | null | class<`factor`>> => logical[];
type `is_equal_length` <...> => logical;
type `is_filter` <class<`EventFilter`, `FilterForceLevel`, `R6`> | class<`EventFilter`, `FilterInject`, `R6`> | class<`function`> | list<any>> => logical;
type `is_integerish` <character[] | double | integer[]> => logical;
type `is_Logger` <class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>> => logical;
type `is_logger_config` <class<`list`, `logger_config`> | class<`list`, `parsed_logger_config`> | list<null | logical | list<class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`>> | character | logical | list<class<`Appender`, `AppenderConsole`, `Filterable`, `R6`>>>> => logical;
type `is_n0` <double> => logical;
type `is_parsed_logger_config` <class<`list`, `logger_config`> | class<`list`, `parsed_logger_config`> | list<null | logical | list<class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`>> | character | logical | list<class<`Appender`, `AppenderConsole`, `Filterable`, `R6`>>>> => logical;
type `is_scalar` <character[] | class<`POSIXct`, `POSIXt`> | double | integer[] | null> => logical;
type `is_scalar_bool` <character | logical> => logical;
type `is_scalar_character` <character | class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>> => logical;
type `is_scalar_integerish` <double> => logical;
type `is_scalar_list` <class<`Layout`, `LayoutFormat`, `R6`> | class<`Layout`, `LayoutGlue`, `R6`> | class<`Layout`, `LayoutJson`, `R6`>> => logical;
type `is_threshold` <character> => logical;
type `is_threshold_inherited` <class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>> => logical;
type `is_virgin_Logger` <character, logical> => logical;
type `label_levels` <^double[], class<`integer`, `log_levels`> | integer[]> => character[];
type `logger_config` <null, null, null, null, logical> => class<`list`, `logger_config`>;
type `logger_tree` < > => class<`data.frame`, `logger_tree`>;
type `named_union` <integer[], integer> => integer[];
type `.obj` < > => (class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | class<`Filterable`, `Logger`, `R6`>);
type `pad_left` <character[], double, character> => character[];
type `pad_right` <character | class<`factor`>, double, character> => character;
type `parsed_logger_config` <list<any>, null | character, list<any>, class<`function`>, logical> => class<`list`, `parsed_logger_config`>;
type `parse_logger_config` <class<`list`, `logger_config`> | list<null | logical | list<class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`>> | character | logical | list<class<`Appender`, `AppenderConsole`, `Filterable`, `R6`>>>, class<`list`, `parsed_logger_config`>> => class<`list`, `parsed_logger_config`>;
type `print.ancestry` <class<`ancestry`, `logical`>, logical, ...> => class<`ancestry`, `logical`>;
type `print.LogEvent` <class<`LogEvent`, `R6`>, character, character, null | list<any>, class<`integer`, `log_levels`>, character, ...> => class<`LogEvent`, `R6`>;
type `print.Logger` <class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>, logical, ...> => (class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>);
type `print.logger_tree` <class<`data.frame`, `logger_tree`>, logical, ...> => class<`data.frame`, `logger_tree`>;
type `ptrunc` <..., double, character, character, character> => character;
type `read_json_lines` <character> => class<`data.frame`>;
type `remove_appender` <character, class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>> => class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>;
type `remove_log_levels` <character> => class<`integer`, `log_levels`>;
type `resolve_r6_ctors` <class<`list`, `logger_config`> | list<character | list<character>>> => (class<`list`, `logger_config`> | list<class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | character>);
type `show_data` <class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>> => class<`data.frame`>;
type `show_log` <null, integer, class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>> => environment;
type `standardize_appenders_list` <class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `AppenderJson`, `Filterable`, `R6`> | class<`Appender`, `AppenderFile`, `Filterable`, `R6`> | list<any>> => list<any>;
type `standardize_filters_list` <null | class<`function`> | list<any>> => list<any>;
type `standardize_log_level` <character, class<`integer`, `log_levels`> | integer[]> => integer;
type `standardize_log_levels` <character[] | integer, any> => integer[];
type `standardize_threshold` <character | double | null, any, logical> => (integer | null);
type `style` <...> => character[];
type `style_fatal` <...> => character[];
type `style_subtle` <...> => character[];
type `.subset2` <character, list<any>, null, list<any>, class<`function`>, logical> => (class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>) | <null, null, class<`Layout`, `LayoutFormat`, `R6`>, null, character[]> => class<`Appender`, `AppenderSyslog`, `Filterable`, `R6`> | <class<`Filterable`, `Logger`, `LoggerGlue`, `R6`> | class<`Filterable`, `Logger`, `LoggerRoot`, `R6`> | class<`Filterable`, `Logger`, `R6`>, double, class<`POSIXct`, `POSIXt`>, null | character, null | class<`character`, `glue`> | character, ...> => null | <character> => class<`function`> | <character, null, class<`Layout`, `LayoutJson`, `R6`>, null> => class<`Appender`, `AppenderFile`, `AppenderJson`, `Filterable`, `R6`> | <character, character, null | list<any>, character> => class<`Layout`, `LayoutFormat`, `R6`> | <character | null, class<`Layout`, `LayoutFormat`, `R6`>, null> => class<`Appender`, `AppenderConsole`, `Filterable`, `R6`> | <list<logical>> => class<`Layout`, `LayoutJson`, `R6`> | <..., list<any>> => class<`function`> | <character, null, class<`Layout`, `LayoutFormat`, `R6`> | class<`Layout`, `LayoutJson`, `R6`>, null> => class<`Appender`, `AppenderFile`, `Filterable`, `R6`> | <character> => class<`Layout`, `LayoutGlue`, `R6`> | <character | null, class<`Layout`, `LayoutFormat`, `R6`>, null, double, character, logical, logical, class<`function`>, null> => class<`Appender`, `AppenderBuffer`, `AppenderMemory`, `Filterable`, `R6`>;
type `suspend_logging` < > => null;
type `tokenize_format` <character, character[]> => character[];
type `unlabel_levels` <character[], class<`integer`, `log_levels`>> => ^integer[];
type `unsuspend_logging` < > => null;
type `use_logger` <character> => character;
type `with_logging` <character> => character;
type `with_log_level` <character, character, class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>> => character;
type `with_log_value` <list<character>, character, class<`Filterable`, `Logger`, `LoggerRoot`, `R6`>> => character;
type `without_logging` <character> => character;
