type `add.all.combinations` <class<`data.frame`>, list<null> | list<character[]> | list<character[] | null> | list<character | null>, null | ^double[]> => class<`data.frame`>;
type `all.vars.character` <character, character> => (list<null | list<character>> | list<character[] | list<character>> | list<character | list<character>> | list<null | list<character[]>> | list<character | list<character[] | null>> | list<character | list<character[]>> | list<character | list<character | null>> | list<null | list<character | null>> | list<null | list<null | character[]>>);
type `as.data.frame.cast_matrix` <class<`cast_matrix`, `matrix`>, any, any, ...> => class<`cast_df`, `data.frame`>;
type `cast` <class<`data.frame`>, class<`formula`> | character, class<`function`> | null | list<class<`function`>>, ..., logical | character[], any, logical, null | double> => (class<`array`> | class<`cast_df`, `data.frame`>);
type `cast_matrix` <class<`matrix`>, list<class<`data.frame`>>> => class<`cast_matrix`, `matrix`>;
type `cast_parse_formula` <character, character[]> => (list<null | list<character>> | list<character[] | list<character>> | list<character | list<character>> | list<null | list<character[]>> | list<character[] | list<character[] | null>> | list<character | list<character | null>> | list<null | list<character | null>>);
type `check_formula` <character, character[]> => null;
type `combine_factor` <class<`factor`>, double[], character> => class<`factor`>;
type `compute.margins` <any, list<character | double[]> | list<character[]> | list<double[]> | null, any, any, ..., any> => class<`data.frame`>;
type `condense` <class<`data.frame`>, character[] | double[], class<`function`>, ...> => class<`data.frame`>;
type `dim_names` <any, null | character[]> => class<`data.frame`>;
type `expand` <class<`data.frame`>> => class<`data.frame`>;
type `expand.grid.df` <..., logical> => class<`data.frame`>;
type `funstofun` <...> => class<`function`> | <double[], ...> => double[];
type `guess_value` <class<`data.frame`>> => character;
type `margin.vars` <list<character[]> | list<character[] | null> | list<character | null>, any> => (list<character | double[]> | list<character[]> | list<double[]> | null);
type `melt` <class<`array`> | class<`matrix`> | double | integer[] | list<list<integer>> | list<integer[]> | list<class<`matrix`> | class<`array`>> | list<class<`matrix`>> | list<integer[] | class<`matrix`>> | list<double | list<integer[] | list<integer>>> | class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, ...> => class<`data.frame`>;
type `melt.array` <class<`array`> | class<`matrix`>, character[] | null, ...> => class<`data.frame`>;
type `melt_check` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, any, any> => list<character[]>;
type `melt.data.frame` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, any, any, character, logical, logical, ...> => class<`data.frame`>;
type `melt.default` <double | integer[], ...> => class<`data.frame`>;
type `melt.list` <list<class<`matrix`> | class<`array`>> | list<class<`matrix`>> | list<integer[] | class<`matrix`>> | list<list<integer>> | list<double | list<integer[] | list<integer>>> | list<integer[]>, ..., double> => class<`data.frame`>;
type `melt.matrix` <class<`array`> | class<`matrix`>, character[] | null, ...> => class<`data.frame`>;
type `nested.by` <class<`data.frame`>, class<`data.frame`> | list<class<`factor`>>, class<`function`>, ...> => class<`array`>;
type `nulldefault` <character[] | null, any> => (character[] | integer[]);
type `rcolnames` <class<`cast_matrix`, `matrix`>> => class<`data.frame`>;
type `rdimnames` <class<`cast_matrix`, `matrix`>> => list<class<`data.frame`>>;
type `rdimnames<-` <class<`matrix`>, list<class<`data.frame`>>> => class<`matrix`>;
type `recast` <class<`data.frame`>, class<`formula`>, ..., integer[], any> => class<`cast_df`, `data.frame`>;
type `rename` <class<`data.frame`> | list<double>, character[]> => (class<`data.frame`> | list<double>);
type `reshape1` <class<`data.frame`>, list<character[]> | list<character[] | null> | list<character | null>, class<`function`> | null, any, logical, null | double, logical, ...> => (class<`array`> | class<`cast_df`, `data.frame`>);
type `round_any` <double, double, class<`function`>> => double;
type `rrownames` <class<`cast_matrix`, `matrix`>> => class<`data.frame`>;
type `sort_df` <class<`data.frame`>, character[]> => class<`data.frame`>;
type `sparseby` <class<`data.frame`> | class<`matrix`>, double[] | list<double[]>, class<`function`>, ..., logical> => class<`matrix`>;
