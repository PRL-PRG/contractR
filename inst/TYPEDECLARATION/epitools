type `ageadjust.direct` <double[], double[], null, double[], double> => double[];
type `ageadjust.indirect` <double[], double[], double[], double[], null, double> => list<double[]>;
type `as.hour` <class<`POSIXlt`, `POSIXt`>, character, character, logical> => list<any>;
type `as.month` <^character[], character, any, any, double, double, class<`Date`>, logical> => list<any>;
type `as.week` <class<`Date`> | ^character[], character, any, any, double, double, class<`Date`>, logical> => list<any>;
type `binom.approx` <integer[], double[], double> => class<`data.frame`>;
type `binom.exact` <integer[], double[], double> => class<`data.frame`>;
type `binom.wilson` <integer[], double[], double> => class<`data.frame`>;
type `colorbrewer.data` < > => class<`data.frame`>;
type `colorbrewer.display` <double, character, character> => class<`data.frame`>;
type `colorbrewer.palette` <double, character, character[]> => character[];
type `colors.matrix` < > => class<`matrix`>;
type `colors.plot` <logical, double> => class<`matrix`>;
type `epicurve.dates` <class<`Date`>, character, character[] | null, any, any, double, double, double, double, logical, double, logical, ...> => list<any>;
type `epicurve.hours` <class<`POSIXlt`, `POSIXt`>, character, character, character[], logical, double, double, logical, double, logical, ...> => list<any>;
type `epicurve.table` <double[] | class<`matrix`>, double, double, logical, double, logical, ...> => (class<`matrix`> | double[]);
type `epicurve.weeks` <class<`Date`>, character, character[] | null, any, any, double, double, double, double, logical, double, logical, class<`Date`>, logical, ...> => list<any>;
type `epitab` <class<`matrix`>, null, character[], double, character[], any, any, any, character[], logical, logical> => list<class<`matrix`> | character | double>;
type `epitable` <..., double, logical, character[]> => (class<`matrix`> | class<`table`>);
type `expand.table` <class<`array`> | class<`table`>> => class<`data.frame`>;
type `expected` <class<`matrix`>> => class<`matrix`>;
type `julian2date` <double[]> => class<`Date`> | <^double[]> => class<`Date`>;
type `kapmeier` <double[], double[]> => class<`matrix`>;
type `oddsratio` <class<`matrix`>, null, character[], double, character[], logical, logical> => list<class<`matrix`> | logical | class<`matrix`> | double>;
type `oddsratio.fisher` <class<`matrix`>, null, double, character, logical, logical> => list<class<`matrix`> | logical>;
type `oddsratio.midp` <class<`matrix`>, null, double, character[], logical, logical, double[]> => list<class<`matrix`> | logical>;
type `oddsratio.small` <class<`matrix`>, null, double, character, logical, logical> => list<class<`matrix`> | logical>;
type `oddsratio.wald` <class<`matrix`>, null, double, character[], logical, logical> => list<class<`matrix`> | logical | class<`matrix`> | double>;
type `or.midp` <class<`matrix`>, double, logical, double[]> => list<class<`matrix`> | double[]>;
type `ormidp.test` <double, double, double, double, double> => class<`data.frame`>;
type `pois.approx` <integer[], double | integer[], double> => class<`data.frame`>;
type `pois.byar` <integer[], double | integer[], double> => class<`data.frame`>;
type `pois.daly` <integer[], double | integer[], double> => class<`data.frame`>;
type `pois.exact` <integer[], double | integer[], double> => class<`data.frame`>;
type `probratio` <class<`glm`, `lm`>, any, any, character, character, double, any, double, ...> => class<`matrix`>;
type `rate2by2.test` <class<`matrix`> | double[], null | double[], double, character[]> => list<class<`matrix`>>;
type `rateratio` <class<`matrix`> | double[], null | double[], character[], double, character[], logical> => list<class<`matrix`> | class<`matrix`> | double>;
type `rateratio.midp` <class<`matrix`> | double[], null | double[], double, character[], logical> => list<class<`matrix`>>;
type `rateratio.wald` <class<`matrix`> | double[], null | double[], double, character[], logical> => list<class<`matrix`> | class<`matrix`> | double>;
type `ratetable` <..., logical, character[]> => class<`matrix`>;
type `riskratio` <class<`matrix`>, null, character[], double, character[], logical, logical, double> => list<class<`matrix`> | logical | class<`matrix`> | double>;
type `riskratio.boot` <class<`matrix`>, null, double, character[], logical, logical, double> => list<class<`matrix`> | logical | class<`matrix`> | double>;
type `riskratio.small` <class<`matrix`>, null, double, character, logical, logical> => list<class<`matrix`> | logical>;
type `riskratio.wald` <class<`matrix`>, null, double, character[], logical, logical> => list<class<`matrix`> | logical | class<`matrix`> | double>;
type `tab2by2.test` <class<`matrix`>, null, logical, character[]> => list<class<`matrix`> | logical>;
type `table.margins` <class<`matrix`>> => class<`matrix`>;
