type `ageadjust.direct` <double[], double[], null, double[], double> => double[];
type `ageadjust.indirect` <double[], double[], double[], double[], null, double> => struct<`sir`:double[], `rate`:double[]>;
type `as.hour` <struct<`sec`:^double[], `min`:^integer[], `hour`:^integer[], `mday`:^integer[], `mon`:^integer[], `year`:^integer[], `wday`:^integer[], `yday`:^integer[], `isdst`:integer[], `zone`:character[], `gmtoff`:^integer[]>, character, character, logical> => struct<`ct`:^double[], `sec`:^double[], `min`:^integer[], `hour`:^integer[], `hour12`:^double[], `stratum`:^integer[], `stratum2`:^double[], `stratum3`:^integer[], `cstratum`:double[], `cstratum2`:double[], `csec`:double[], `cmin`:integer[], `chour`:integer[], `chour12`:double[], `campm`:character[], `campm2`:character[], `cweekday`:character[], `cwkday`:character[], `cmday`:integer[], `cmonth`:character[], `cmon`:character[], `cyear`:character[], `half.hour`:logical>;
type `as.month` <^character[], character, character | null, null, double, double, double, logical> => struct<`dates`:^double[], `mon`:^double[], `month`:^character[], `stratum`:^double[], `stratum2`:^integer[], `stratum3`:^double[], `cmon`:double[], `cmonth`:character[], `cstratum`:double[], `cstratum2`:double[], `cmday`:double[], `cyear`:character[]>;
type `as.week` <double[] | ^character[], character, symbol | character | null, symbol | null, double, double, double, logical> => struct<`dates`:^double[], `firstday`:character, `week`:^character[], `stratum`:^double[], `stratum2`:^integer[], `stratum3`:^double[], `cweek`:character[], `cstratum`:double[], `cstratum2`:double[], `cmday`:double[], `cmonth`:character[], `cyear`:character[]>;
type `binom.approx` <integer[], double[], double> => struct<`x`:integer[], `n`:double[], `proportion`:double[], `lower`:double[], `upper`:double[], `conf.level`:double[]>;
type `binom.exact` <integer[], double[], double> => struct<`x`:integer[], `n`:double[], `proportion`:double[], `lower`:double[], `upper`:double[], `conf.level`:double[]>;
type `binom.wilson` <integer[], double[], double> => struct<`x`:integer[], `n`:double[], `proportion`:double[], `lower`:double[], `upper`:double[], `conf.level`:double[]>;
type `cipois` <double, double> => struct<`x`:double, `lower`:double, `upper`:double>;
type `colorbrewer.data` < > => struct<`type`:integer[], `nclass`:integer[], `name`:character[], `palette`:integer[], `number`:integer[], `red`:integer[], `green`:integer[], `blue`:integer[]>;
type `colorbrewer.display` <double, character, character> => struct<`type`:integer[], `nclass`:integer[], `name`:character[], `palette`:integer[], `number`:integer[], `red`:integer[], `green`:integer[], `blue`:integer[]>;
type `colorbrewer.palette` <double, character, character[]> => character[];
type `colors.matrix` < > => ^character[];
type `colors.plot` <logical, double> => ^character[];
type `epicurve.dates` <double[], character, null | character[], null, null, double, double, double, double, logical, double, logical, logical | null> => struct<`dates`:double[], `dates2`:^integer[], `xvals`:double[], `cdates`:double[], `cmday`:double[], `cmonth`:character[], `cyear`:character[]>;
type `epicurve.hours` <struct<`sec`:^double[], `min`:^integer[], `hour`:^integer[], `mday`:^integer[], `mon`:^integer[], `year`:^integer[], `wday`:^integer[], `yday`:^integer[], `isdst`:integer[], `zone`:character[], `gmtoff`:^integer[]>, character, character, character[], logical, double, double, logical, double, logical, logical> => struct<`ct`:^double[], `sec`:^double[], `min`:^integer[], `hour`:^integer[], `hour12`:^double[], `stratum`:^integer[], `stratum2`:^double[], `stratum3`:^integer[], `xvals`:double[], `cstratum`:double[], `cstratum2`:double[], `csec`:double[], `cmin`:integer[], `chour`:integer[], `chour12`:double[], `campm`:character[], `campm2`:character[], `cweekday`:character[], `cwkday`:character[], `cmday`:integer[], `cmonth`:character[], `cmon`:character[], `cyear`:character[], `half.hour`:logical>;
type `epicurve.table` <^double[], double, double, logical, double, logical, null> => ^double[];
type `epicurve.weeks` <double[], character, null | character[], null, null, double, double, double, double, logical, double, logical, double, logical, null> => struct<`dates`:double[], `firstday`:character, `week`:character[], `stratum`:double[], `stratum2`:integer[], `stratum3`:double[], `xvals`:double[], `cweek`:character[], `cstratum`:double[], `cstratum2`:double[], `cmday`:double[], `cmonth`:character[], `cyear`:character[]>;
type `epitab` <^double[], null, character[], double, character[], character[] | language, language | character[], language | character[], character[], logical, logical> => struct<`tab`:^double[], `measure`:character, `conf.level`:double, `pvalue`:character, `x`:^double[], `data`:^double[], `p.value`:^double[]>;
type `epitable` <^double[], double, logical, character[]> => ^double[];
type `expand.table` <double[]> => struct<`Class`:integer[], `Sex`:integer[], `Age`:integer[], `Survived`:integer[]>;
type `expected` <^double[]> => ^double[];
type `f` <^double[], double, double, logical, double> => double;
type `filter` <character[]> => logical[];
type `FUN` <integer> => double[];
type `is.even` <integer> => logical;
type `julian2date` <^double[]> => ^double[];
type `kapmeier` <double[], double[]> => ^double[];
type `midp` <double, double, double, double, double> => double;
type `midprob` <double, double, double, logical, double> => double;
type `mue` <double, double, double, double, double> => double;
type `oddsratio` <^double[], null, character[], double, character[], logical, logical> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `oddsratio.fisher` <^double[], null, double, character, logical, logical> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `oddsratio.midp` <^double[], null, double, character[], logical, logical, double[]> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `oddsratio.small` <^double[], null, double, character, logical, logical> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `oddsratio.wald` <^double[], null, double, character[], logical, logical> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `ormidp.test` <double, double, double, double, double> => struct<`one.sided`:double, `two.sided`:double>;
type `pois.approx` <integer[], double | integer[], double> => struct<`x`:integer[], `pt`:double[], `rate`:double[], `lower`:double[], `upper`:double[], `conf.level`:double[]>;
type `pois.byar` <integer[], double | integer[], double> => struct<`x`:integer[], `pt`:double[], `rate`:double[], `lower`:double[], `upper`:double[], `conf.level`:double[]>;
type `pois.daly` <integer[], double | integer[], double> => struct<`x`:double[], `pt`:double[], `rate`:double[], `lower`:double[], `upper`:double[], `conf.level`:double[]>;
type `pois.exact` <integer[], double | integer[], double> => struct<`x`:double[], `pt`:double[], `rate`:double[], `lower`:double[], `upper`:double[], `conf.level`:double[]>;
type `rate2by2.test` <^double[], null | double[], double, character[]> => struct<`x`:^double[], `p.value`:^double[]>;
type `rateratio.midp` <^double[], null | double[], double, character[], logical> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[]>;
type `rateratio.wald` <^double[], null | double[], double, character[], logical> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[]>;
type `ratetable` <^double[], logical, character[]> => ^double[];
type `repeated` <character[] | double[]> => logical[];
type `riskratio` <^double[], null, character[], double, character[], logical, logical, double> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `riskratio.boot` <^double[], null, double, character[], logical, logical, double> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `riskratio.small` <^double[], null, double, character, logical, logical> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `riskratio.wald` <^double[], null, double, character[], logical, logical> => struct<`data`:^double[], `measure`:^double[], `p.value`:^double[], `correction`:logical>;
type `rr.boot` <double, double, double, double, double, double> => struct<`p0`:double, `p1`:double, `rr`:double, `rr.mean`:double, `conf.level`:double, `conf.int`:double[], `replicates`:double>;
type `tab2by2.test` <^double[], null, logical, character[]> => struct<`x`:^double[], `p.value`:^double[], `correction`:logical>;
type `table.margins` <^double[]> => ^double[];
