type `.local` <^double[] | symbol | struct<>, symbol | ^double[] | character, null | double[] | struct<>, language | logical | null, character | double, logical, null | null | logical, null | null, null, null> => ^double[] | struct<`mean`:double[], `sd`:double[]>;
type `branin` <struct<`x1`:double[], `x2`:double[]>> => struct<`x2`:double[]>;
type `compute.sigma2.hat` <double[]> => double;
type `covMat1Mat2` <^double[], ^double[], logical> => ^double[];
type `covMatrix` <^double[], null | double[] | language> => struct<`C`:^double[], `vn`:double[]>;
type `covMatrixDerivative` <^double[], ^double[] | symbol, integer, null> => ^double[];
type `covparam2vect` < > => double[];
type `covParametersBounds` <struct<`x`:double[]>> => struct<`lower`:double[], `upper`:double[]>;
type `filter` <character[]> => logical[];
type `FUN` <double[]> => double;
type `paramSample` <double, double[]> => ^double[];
type `plot` <null, logical | null> => struct<`mean`:double[], `sd`:double[]>;
type `plot.km` <character, logical, null> => struct<`mean`:double[], `sd`:double[]>;
type `predict` <struct<`x`:double[]>> => struct<`trend`:^double[], `mean`:double[], `c`:^double[], `Tinv.c`:^double[], `sd`:double[], `lower95`:double[], `upper95`:double[]>;
type `scalingGrad` <^double[], struct<`x`:double[]>, integer> => ^double[];
type `simulate` <double, null, null | struct<`x`:double[]> | null> => ^double[];
type `testfun` <struct<`x1`:double[], `x2`:double[]> | ^double[]> => struct<`x2`:double[]> | double;
type `update` < > => ^double[];
type `validityMethod` < > => logical;
type `vect2covparam` < > => double[];
