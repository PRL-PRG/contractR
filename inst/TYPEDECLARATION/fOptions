type `BAWAmericanApproxOption` <character, double, double, double, double, double, double, null, null> => class<`fOPTION`>;
type `.BAWAmPutApproxOption` <double, double, double, double, double, double> => double;
type `.bawKp` <double, double, double, double, double> => double;
type `BinomialTreeOption` <character, double, double, double, double, double, double, double, null, null> => class<`matrix`>;
type `BinomialTreePlot` <class<`matrix`>, double, double, double, double, ...> => null;
type `Black76Option` <character, double, double, double, double, double, null, null> => class<`fOPTION`>;
type `BSAmericanApproxOption` <character, double, double, double, double, double, double, null, null> => class<`fOPTION`>;
type `.BSAmericanCallApprox` <double, double, double, double, double, double> => list<double>;
type `.bsPhi` <double, double, double, double, double, double, double, double> => double;
type `CBND` <double, double, double> => double;
type `CND` <double> => double;
type `CRRBinomialTreeOption` <character, double, double, double, double, double, double, double, null, null> => class<`fOPTION`>;
type `.fHN` <double[], double, list<double>, double, double, double, double> => complex[];
type `GBSCharacteristics` <character, double, double, double, double, double, double> => list<double>;
type `.GBSDelta` <character, double, double, double, double, double, double> => double;
type `.GBSGamma` <any, double, double, double, double, double, double> => double;
type `GBSGreeks` <character, character, double, double, double, double, double, double> => double;
type `.GBSLambda` <character, double, double, double, double, double, double> => double;
type `GBSOption` <character, double, double, double, double, double, double, null, null> => class<`fOPTION`>;
type `.GBSRho` <character, double, double, double, double, double, double> => double;
type `.GBSTheta` <character, double, double, double, double, double, double> => double;
type `.GBSVega` <any, double, double, double, double, double, double> => double;
type `.getfOptionsEnv` <character, character> => list<double[]>;
type `hngarchFit` <double[], list<double>, logical, logical, null, null, ...> => class<`hngarch`>;
type `hngarchSim` <list<double>, double, null, double, null, class<`function`>, ...> => double[];
type `hngarchStats` <list<double>> => list<double>;
type `HNGGreeks` <character, character, list<double>, double, double, double, double> => double;
type `HNGOption` <character, list<double>, double, double, double, double> => class<`option`>;
type `JRBinomialTreeOption` <character, double, double, double, double, double, double, integer, null, null> => class<`fOPTION`>;
type `.llhHNGarch` <double[], logical, logical, double, double[]> => double;
type `MiltersenSchwartzOption` <character, double, double, double, double, double, double, double, double, double, double, double, double, double, null, null> => class<`fOPTION`>;
type `MonteCarloOption` <double, double, double, double, logical, class<`function`>, class<`function`>, class<`function`>, logical, logical, logical, ...> => double[];
type `NDF` <double> => double;
type `rnorm.halton` <double, double, logical> => class<`matrix`>;
type `rnorm.pseudo` <double, double, logical> => class<`matrix`>;
type `rnorm.sobol` <double, double, logical, double, double> => class<`matrix`>;
type `RollGeskeWhaleyOption` <double, double, double, double, double, double, double, null, null> => class<`fOPTION`>;
type `runif.halton` <double, double, logical> => class<`matrix`>;
type `runif.pseudo` <double, double, null> => class<`matrix`>;
type `runif.sobol` <double, double, logical, double, double> => class<`matrix`>;
type `.setfOptionsEnv` <...> => null;
type `summary.hngarch` <class<`hngarch`>, ...> => null;
type `TIANBinomialTreeOption` <character, double, double, double, double, double, double, integer, null, null> => class<`fOPTION`>;
