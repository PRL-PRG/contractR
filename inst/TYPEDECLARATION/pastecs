type `abund` <class<`data.frame`> | integer[] | character, double> => any;
type `AutoD2` <class<`matrix`, `mts`, `ts`>, double[], double, logical, logical, ...> => class<`D2`>;
type `buysbal` <double[], double[], double, character, character, character, logical> => class<`matrix`>;
type `CenterD2` <class<`matrix`, `mts`, `ts`>, double, logical, logical, character, double, logical, double, double, ...> => class<`D2`>;
type `CrossD2` <class<`matrix`, `mts`, `ts`>, class<`matrix`, `mts`, `ts`>, double[], double, logical, logical, ...> => class<`D2`>;
type `daystoyears` <double[], character | null, character> => double[];
type `decaverage` <class<`ts`>, character, double, double, double, character, null> => class<`tsd`>;
type `deccensus` <class<`ts`>, character, logical> => class<`tsd`>;
type `decdiff` <class<`ts`>, character, double, double, character> => class<`tsd`>;
type `decevf` <class<`ts`>, character, double, double> => class<`tsd`>;
type `decloess` <class<`ts`>, character, double | character, double, null, double, logical, logical> => class<`tsd`>;
type `decmedian` <class<`ts`>, character, double, double, character> => class<`tsd`>;
type `decreg` <class<`ts`>, double[], character> => class<`tsd`>;
type `disjoin` <class<`factor`>> => class<`matrix`>;
type `disto` <class<`data.frame`>, double, logical, null> => class<`data.frame`>;
type `escouf` <class<`data.frame`>, double, logical> => class<`escouf`>;
type `extract` <class<`abund`> | class<`escouf`> | class<`tsd`> | class<`turnogram`> | class<`regul`>, any, ...> => (class<`data.frame`> | class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `extract.abund` <class<`abund`>, any, logical, ...> => class<`data.frame`>;
type `extract.escouf` <class<`escouf`>, any, double, ...> => class<`data.frame`>;
type `extract.regul` <class<`regul`>, any, character, ...> => class<`ts`>;
type `extract.tsd` <class<`tsd`>, any, integer[] | null, character, ...> => class<`matrix`, `mts`, `ts`>;
type `extract.turnogram` <class<`turnogram`>, any, double, character, double, ...> => class<`ts`>;
type `first` <^double[], logical> => (double | null);
type `GetUnitText` <class<`matrix`, `mts`, `ts`> | class<`ts`>> => character;
type `is.tseries` <class<`matrix`, `mts`, `ts`> | class<`regul`> | class<`ts`> | double[]> => logical;
type `last` <^double[], logical> => (double | null);
type `lines.abund` <class<`abund`>, double, logical, logical, double, double, ...> => double[];
type `lines.escouf` <class<`escouf`>, double, logical, logical, logical, double, double, ...> => double[];
type `lines.stat.slide` <class<`stat.slide`>, character, double, double, ...> => null;
type `lines.turnpoints` <class<`turnpoints`>, logical, logical, logical, double[], double[], ...> => null;
type `local.trend` <double[], double, logical, character, integer[], integer[], character, character, ...> => class<`local.trend`, `ts`>;
type `match.tol` <double[], double[], null, character, double> => ^double[];
type `pennington` <double[], character, logical> => double[];
type `pgleissberg` <double[], double[], logical, logical> => double[];
type `plot.abund` <class<`abund`>, null, logical, logical, double, double, logical, character[], double[], character[], double[], character, character, character, character, ...> => null;
type `plot.escouf` <class<`escouf`>, null, logical, logical, logical, double, double, logical, character, double, character, double, character, character, character, character, ...> => null;
type `plot.regul` <class<`regul`>, double, double[], character[], logical, logical, any, any, character, character, character, ...> => null;
type `plot.stat.slide` <class<`stat.slide`>, character, double[], character[], logical, any, any, character, character, character, ...> => (null | list<list<double[]>>);
type `plot.tsd` <class<`tsd`>, double, logical, logical, double[], character, character[], logical, any, character, character, any, ...> => null;
type `plot.turnpoints` <class<`turnpoints`>, double, logical, double, double, character, character, character, character, ...> => null;
type `regarea` <double[], double[], double, double, double, double, double, logical, double> => list<double[]>;
type `regconst` <double[], double[], double, double, double, double, double> => list<double[]>;
type `reglin` <double[], double[], double, double, double, double> => list<double[]>;
type `regspline` <double[], double[], double, double, double, double, logical> => list<double[]>;
type `regul` <double[], class<`data.frame`> | double[], double, double, character, double | null, double, character | null, character, double, character, character[], double, double, logical, double, double, null> => class<`regul`>;
type `regul.adj` <double[], double, null, double, double, character, double, double[], character, character, character, logical, ...> => list<double[]>;
type `regul.screen` <double[], null, integer[], null, integer[], double, character> => list<double[] | class<`matrix`>>;
type `specs` <class<`regul`>, ...> => class<`specs.regul`>;
type `specs.regul` <class<`regul`>, ...> => class<`specs.regul`>;
type `stat.desc` <class<`data.frame`>, logical, logical, logical, double> => class<`data.frame`>;
type `stat.pen` <class<`data.frame`>, logical, logical> => class<`data.frame`>;
type `stat.slide` <integer[], double[], double[] | null, any, null | double, null, any, logical, logical, logical, logical, double> => class<`stat.slide`>;
type `summary.abund` <class<`abund`>, ...> => class<`abund`, `summary.abund`>;
type `summary.escouf` <class<`escouf`>, ...> => class<`escouf`, `summary.escouf`>;
type `summary.turnogram` <class<`turnogram`>, ...> => class<`summary.turnogram`, `turnogram`>;
type `summary.turnpoints` <class<`turnpoints`>, ...> => class<`summary.turnpoints`, `turnpoints`>;
type `trend.test` <double[], double> => (class<`boot`> | class<`htest`>);
type `tsd` <class<`matrix`, `mts`, `ts`>, null, character, character, double, integer[], double, double, double, character, null, double | null, double, null, double, logical, logical, null> => class<`tsd`>;
type `tseries` <class<`regul`>> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `turnogram` <class<`ts`>, double[], double, logical, logical, class<`function`>, logical, double, logical, logical, logical> => class<`turnogram`>;
type `turnpoints` <double[], logical> => class<`turnpoints`>;
type `vario` <double[], double, logical, null> => class<`data.frame`>;
type `yearstodays` <double[], double | null> => double[];
