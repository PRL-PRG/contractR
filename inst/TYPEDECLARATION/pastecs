type `abund` <struct<`S1`:double[], `S2`:double[], `S3`:double[], `S4`:double[], `S5`:double[], `S6`:double[], `S7`:double[], `S8`:double[], `S9`:double[], `S10`:double[], `S11`:double[], `S12`:double[], `S13`:double[], `S14`:double[], `S15`:double[], `S16`:double[], `S17`:double[], `S18`:double[], `S19`:double[], `S20`:double[], `S21`:double[], `S22`:double[], `S23`:double[], `S24`:double[], `S25`:double[], `S26`:double[], `S27`:double[], `S28`:double[], `S29`:double[], `S30`:double[], `S31`:double[], `S32`:double[], `S33`:double[], `S34`:double[], `S35`:double[], `S36`:double[], `S37`:double[], `S38`:double[], `S39`:double[], `S40`:double[], `S41`:double[], `S42`:double[], `S43`:double[], `S44`:double[], `S45`:double[], `S46`:double[], `S47`:double[], `S48`:double[], `S49`:double[], `S50`:double[], `S51`:double[], `S52`:double[], `S53`:double[], `S54`:double[], `S55`:double[], `S56`:double[], `S57`:double[], `S58`:double[], `S59`:double[], `S60`:double[], `S61`:double[], `S62`:double[], `S63`:double[], `S64`:double[], `S65`:double[], `S66`:double[], `S67`:double[], `S68`:double[], `S69`:double[], `S70`:double[], `S71`:double[], `S72`:double[], `S73`:double[], `S74`:double[], `S75`:double[], `S76`:double[], `S77`:double[], `S78`:double[], `S79`:double[], `S80`:double[], `S81`:double[], `S82`:double[], `S83`:double[], `S84`:double[], `S85`:double[], `S86`:double[], `S87`:double[], `S88`:double[], `S89`:double[], `S90`:double[], `S91`:double[], `S92`:double[], `S93`:double[], `S94`:double[], `S95`:double[], `S96`:double[], `S97`:double[], `S98`:double[], `S99`:double[], `S100`:double[], `S101`:double[], `S102`:double[], `S103`:double[], `S104`:double[], `S105`:double[], `S106`:double[], `S107`:double[], `S108`:double[], `S109`:double[], `S110`:double[], `S111`:double[], `S112`:double[], `S113`:double[], `S114`:double[], `S115`:double[], `S116`:double[], `S117`:double[], `S118`:double[], `S119`:double[], `S120`:double[], `S121`:double[], `S122`:double[], `S123`:double[], `S124`:double[], `S125`:double[], `S126`:double[], `S127`:double[], `S128`:double[], `S129`:double[], `S130`:double[], `S131`:double[], `S132`:double[], `S133`:double[], `S134`:double[], `S135`:double[], `S136`:double[], `S137`:double[], `S138`:double[], `S139`:double[], `S140`:double[], `S141`:double[], `S142`:double[], `S143`:double[], `S144`:double[], `S145`:double[], `S146`:double[], `S147`:double[], `S148`:double[], `S149`:double[], `S150`:double[], `S151`:double[], `S152`:double[], `S153`:double[], `S154`:double[], `S155`:double[], `S156`:double[], `S157`:double[], `S158`:double[], `S159`:double[], `S160`:double[], `S161`:double[], `S162`:double[], `S163`:double[]> | integer[], double> => struct<`data`:character, `vr`:integer[], `sort`:double[], `cumsum`:double[], `p.log.ind`:double[], `p.nonull`:double[], `f`:double, `call`:language>;
type `abund.graph` <struct<`data`:character, `vr`:integer[], `sort`:double[], `cumsum`:double[], `p.log.ind`:double[], `p.nonull`:double[], `f`:double, `call`:language>, null, symbol, symbol, symbol, symbol, logical, character[], double[], character[], double[], character, character, character, character, null> => null;
type `abund.lines` <struct<`data`:character, `vr`:integer[], `sort`:double[], `cumsum`:double[], `p.log.ind`:double[], `p.nonull`:double[], `f`:double, `call`:language, `n`:double>, double, logical, logical, double, double, null> => double[];
type `AutoD2` <^double[], double[], double, logical, logical, null> => struct<`lag`:double[], `D2`:double[], `call`:language, `data`:character, `type`:character, `units.text`:character>;
type `buysbal` <double[], double[], double, character, character, character, logical> => ^double[];
type `CenterD2` <^double[], double, logical, logical, character, double, logical, double, double, null> => struct<`lag`:integer[], `D2`:double[], `call`:language, `data`:character, `type`:character, `window`:double, `level`:double, `chisq`:double, `units.text`:character>;
type `CrossD2` <^double[], ^double[], double[], double, logical, logical, null> => struct<`lag`:double[], `D2`:double[], `call`:language, `data`:character, `data2`:character, `type`:character, `units.text`:character>;
type `daystoyears` <double[], null | character, character> => double[];
type `decaverage` <double[], character, double, double, double, character, null> => struct<`ts`:character, `series`:^double[], `weights`:double[], `units`:null, `specs`:struct<`method`:character, `type`:character, `order`:double, `times`:double, `sides`:double, `ends`:character, `weights`:double[]>, `call`:language>;
type `deccensus` <double[], character, logical> => struct<`ts`:character, `series`:^double[], `test.seasons`:double[], `amplitude`:double, `units`:null, `model.type`:character, `specs`:struct<`method`:character, `type`:character>, `call`:language>;
type `decdiff` <double[], character, double, double, character> => struct<`ts`:character, `series`:^double[], `units`:null, `specs`:struct<`method`:character, `type`:character, `lag`:double, `order`:double, `ends`:character>, `call`:language>;
type `decevf` <double[], character, double, double> => struct<`ts`:character, `series`:^double[], `units`:character, `specs`:struct<`method`:character, `type`:character, `lag`:double, `axes`:double>, `call`:any => any>;
type `decloess` <double[], character, character | double, double, null, double, logical, logical> => struct<`ts`:character, `series`:^double[], `weights`:double[], `units`:character, `specs`:struct<`method`:character, `type`:character, `s.window`:character, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical>, `call`:language> | struct<`ts`:character, `series`:^double[], `weights`:double[], `units`:null, `specs`:struct<`method`:character, `type`:character, `s.window`:double, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical>, `call`:language>;
type `decmedian` <double[], character, double, double, character> => struct<`ts`:character, `series`:^double[], `units`:null, `specs`:struct<`method`:character, `type`:character, `order`:double, `times`:double, `ends`:character>, `call`:language>;
type `decreg` <double[], double[], character> => struct<`ts`:character, `series`:^double[], `units`:null, `specs`:struct<`method`:character, `type`:character, `xreg`:double[]>, `call`:language>;
type `disto` <struct<`S1`:double[], `S2`:double[], `S3`:double[], `S4`:double[], `S5`:double[], `S6`:double[], `S7`:double[], `S8`:double[], `S9`:double[], `S10`:double[], `S11`:double[], `S12`:double[], `S13`:double[], `S14`:double[], `S15`:double[], `S16`:double[], `S17`:double[], `S18`:double[], `S19`:double[], `S20`:double[], `S21`:double[], `S22`:double[], `S23`:double[], `S24`:double[], `S25`:double[], `S26`:double[], `S27`:double[], `S28`:double[], `S29`:double[], `S30`:double[], `S31`:double[], `S32`:double[], `S33`:double[], `S34`:double[], `S35`:double[], `S36`:double[], `S37`:double[], `S38`:double[], `S39`:double[], `S40`:double[], `S41`:double[], `S42`:double[], `S43`:double[], `S44`:double[], `S45`:double[], `S46`:double[], `S47`:double[], `S48`:double[], `S49`:double[], `S50`:double[], `S51`:double[], `S52`:double[], `S53`:double[], `S54`:double[], `S55`:double[], `S56`:double[], `S57`:double[], `S58`:double[], `S59`:double[], `S60`:double[], `S61`:double[], `S62`:double[], `S63`:double[], `S64`:double[], `S65`:double[], `S66`:double[], `S67`:double[], `S68`:double[], `S69`:double[], `S70`:double[], `S71`:double[], `S72`:double[], `S73`:double[], `S74`:double[], `S75`:double[], `S76`:double[], `S77`:double[], `S78`:double[], `S79`:double[], `S80`:double[], `S81`:double[], `S82`:double[], `S83`:double[], `S84`:double[], `S85`:double[], `S86`:double[], `S87`:double[], `S88`:double[], `S89`:double[], `S90`:double[], `S91`:double[], `S92`:double[], `S93`:double[], `S94`:double[], `S95`:double[], `S96`:double[], `S97`:double[], `S98`:double[], `S99`:double[], `S100`:double[], `S101`:double[], `S102`:double[], `S103`:double[], `S104`:double[], `S105`:double[], `S106`:double[], `S107`:double[], `S108`:double[], `S109`:double[], `S110`:double[], `S111`:double[], `S112`:double[], `S113`:double[], `S114`:double[], `S115`:double[], `S116`:double[], `S117`:double[], `S118`:double[], `S119`:double[], `S120`:double[], `S121`:double[], `S122`:double[], `S123`:double[], `S124`:double[], `S125`:double[], `S126`:double[], `S127`:double[], `S128`:double[], `S129`:double[], `S130`:double[], `S131`:double[], `S132`:double[], `S133`:double[], `S134`:double[], `S135`:double[], `S136`:double[], `S137`:double[], `S138`:double[], `S139`:double[], `S140`:double[], `S141`:double[], `S142`:double[], `S143`:double[], `S144`:double[], `S145`:double[], `S146`:double[], `S147`:double[], `S148`:double[], `S149`:double[], `S150`:double[], `S151`:double[], `S152`:double[], `S153`:double[], `S154`:double[], `S155`:double[], `S156`:double[], `S157`:double[], `S158`:double[], `S159`:double[], `S160`:double[], `S161`:double[], `S162`:double[], `S163`:double[]>, double, logical, null> => struct<`distance`:integer[], `distogram`:double[]>;
type `escouf` <struct<`Acartia`:double[], `AdultsOfCalanus`:double[], `Copepodits1`:double[], `Copepodits2`:double[], `Copepodits3`:double[], `Copepodits4`:double[], `Copepodits5`:double[], `ClausocalanusA`:double[], `ClausocalanusB`:double[], `ClausocalanusC`:double[], `AdultsOfCentropages`:double[], `JuvenilesOfCentropages`:double[], `Nauplii`:double[], `Oithona`:double[], `Acanthaires`:double[], `Cladocerans`:double[], `EchinodermsLarvae`:double[], `DecapodsLarvae`:double[], `GasteropodsLarvae`:double[], `EggsOfCrustaceans`:double[], `Ostracods`:double[], `Pteropods`:double[], `Siphonophores`:double[], `BellsOfCalycophores`:double[]>, double, logical> => struct<`data`:character, `vr`:integer[], `RV`:double[], `calc.level`:double, `vars`:integer[], `call`:language>;
type `escouf.graph` <struct<`data`:character, `vr`:integer[], `RV`:double[], `calc.level`:double, `vars`:integer[], `call`:language>, null, symbol, symbol, symbol, symbol, symbol, logical, character, double, character, double, character, character, character, character, null> => null;
type `escouf.lines` <struct<`data`:character, `vr`:integer[], `RV`:double[], `calc.level`:double, `vars`:integer[], `call`:language, `level`:double>, double, logical, logical, logical, double, double, null> => double[];
type `extract.abund` <struct<`data`:character, `vr`:integer[], `sort`:double[], `cumsum`:double[], `p.log.ind`:double[], `p.nonull`:double[], `f`:double, `call`:language, `n`:double>, null, logical, null> => struct<`S8`:double[], `S2`:double[], `S3`:double[], `S4`:double[], `S6`:double[], `S13`:double[], `S1`:double[], `S5`:double[], `S10`:double[], `S14`:double[], `S9`:double[], `S15`:double[], `S21`:double[], `S17`:double[], `S22`:double[], `S39`:double[], `S12`:double[], `S26`:double[], `S25`:double[], `S11`:double[], `S38`:double[], `S19`:double[], `S20`:double[], `S29`:double[], `S37`:double[], `S41`:double[], `S27`:double[], `S16`:double[], `S45`:double[], `S23`:double[], `S43`:double[], `S33`:double[], `S36`:double[], `S24`:double[], `S47`:double[], `S49`:double[], `S52`:double[], `S31`:double[], `S32`:double[], `S46`:double[], `S67`:double[], `S58`:double[], `S50`:double[], `S71`:double[], `S54`:double[], `S35`:double[], `S61`:double[], `S18`:double[], `S34`:double[], `S68`:double[], `S7`:double[], `S69`:double[], `S64`:double[], `S72`:double[], `S62`:double[], `S48`:double[], `S70`:double[], `S59`:double[], `S78`:double[], `S51`:double[], `S42`:double[], `S80`:double[], `S53`:double[], `S73`:double[], `S88`:double[], `S100`:double[], `S84`:double[], `S77`:double[], `S55`:double[], `S56`:double[], `S30`:double[], `S112`:double[], `S135`:double[], `S136`:double[], `S137`:double[], `S138`:double[], `S139`:double[], `S140`:double[], `S141`:double[], `S142`:double[], `S143`:double[], `S144`:double[], `S145`:double[], `S146`:double[], `S147`:double[], `S148`:double[], `S149`:double[], `S150`:double[], `S151`:double[], `S152`:double[], `S153`:double[], `S154`:double[], `S155`:double[], `S156`:double[], `S157`:double[], `S158`:double[], `S159`:double[], `S160`:double[], `S161`:double[], `S162`:double[], `S163`:double[], `S92`:double[], `S74`:double[], `S114`:double[], `S90`:double[], `S91`:double[], `S107`:double[], `S119`:double[], `S120`:double[], `S121`:double[], `S125`:double[], `S127`:double[], `S128`:double[], `S131`:double[], `S132`:double[], `S133`:double[], `S134`:double[], `S93`:double[], `S96`:double[], `S98`:double[], `S85`:double[], `S83`:double[], `S113`:double[], `S115`:double[], `S117`:double[], `S102`:double[], `S103`:double[], `S108`:double[], `S122`:double[], `S123`:double[], `S124`:double[], `S126`:double[], `S129`:double[], `S130`:double[], `S89`:double[], `S94`:double[], `S95`:double[], `S97`:double[], `S101`:double[], `S110`:double[], `S111`:double[], `S81`:double[], `S116`:double[], `S118`:double[], `S104`:double[], `S105`:double[], `S106`:double[], `S63`:double[], `S99`:double[], `S87`:double[], `S109`:double[], `S60`:double[], `S75`:double[], `S82`:double[], `S76`:double[], `S79`:double[], `S86`:double[], `S57`:double[], `S65`:double[], `S66`:double[], `S44`:double[], `S28`:double[], `S40`:double[]>;
type `extract.escouf` <struct<`data`:character, `vr`:integer[], `RV`:double[], `calc.level`:double, `vars`:integer[], `call`:language, `level`:double>, null, double, null> => struct<`Copepodits3`:double[], `ClausocalanusB`:double[], `Copepodits1`:double[], `EchinodermsLarvae`:double[], `AdultsOfCentropages`:double[]>;
type `extract.regul` <struct<`x`:double[], `y`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `xini`:double[], `yini`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `tspar`:struct<`start`:double, `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:null, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character[], `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language>, null, character, null> => double[];
type `extract.tsd` <struct<`ts`:character[], `series`:tuple<^double[], ^double[], ^double[], ^double[]>, `units`:character, `specs`:struct<`method`:character, `type`:character, `lag`:double, `axes`:integer[], `order`:double, `times`:double, `sides`:double, `ends`:character, `weights`:null, `s.window`:null, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical, `xreg`:null>, `call`:language, `weights`:double[]> | struct<`ts`:character[], `series`:list<^double[]>, `units`:character, `specs`:struct<`method`:character, `type`:character, `lag`:double, `axes`:integer[], `order`:double, `times`:double, `sides`:double, `ends`:character, `weights`:null, `s.window`:double, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical, `xreg`:null>, `call`:language, `weights`:double[]>, null, null | integer[], character, null> => ^double[];
type `extract.turnogram` <struct<`interval`:double[], `n`:double[], `turns`:double[], `info`:double[], `level`:double, `call`:language, `data`:character, `type`:character, `fun`:character, `proba`:character, `units.text`:character>, null, double, character, double, null> => double[];
type `filter` <character[]> => logical[];
type `filtmedian` <double[], integer, double, double, logical> => double[];
type `first` <^double[], logical> => null | double;
type `FUN` <double[], double[]> => double[];
type `GetUnitText` <^double[]> => character;
type `Gmt` <integer, double> => double;
type `is.tseries` <^double[] | struct<`x`:double[], `y`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `xini`:double[], `yini`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `tspar`:struct<`start`:double[], `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:character, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character, `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language>> => logical;
type `Julian` <double, integer, double> => double;
type `last` <^double[], logical> => null | double;
type `lines.abund` <struct<`data`:character, `vr`:integer[], `sort`:double[], `cumsum`:double[], `p.log.ind`:double[], `p.nonull`:double[], `f`:double, `call`:language, `n`:double>, double, logical, logical, double, double, null> => double[];
type `lines.escouf` <struct<`data`:character, `vr`:integer[], `RV`:double[], `calc.level`:double, `vars`:integer[], `call`:language, `level`:double>, double, logical, logical, logical, double, double, null> => double[];
type `lines.stat.slide` <struct<`stat`:struct<`[0#17[`:double[], `[17#25[`:double[], `[25#30[`:double[], `[30#41[`:double[], `[41#46[`:double[], `[46#70[`:double[]>, `x`:double[], `y`:double[], `xcut`:double[], `call`:language>, character, double, double, null> => null;
type `lines.turnpoints` <struct<`data`:character, `n`:integer, `points`:double[], `pos`:double[], `exaequos`:double[], `nturns`:integer, `firstispeak`:logical, `peaks`:logical[], `pits`:logical[], `tppos`:double[], `proba`:double[], `info`:double[]>, logical, logical, logical, double[], double[], null> => null;
type `local.trend` <double[], double, logical, character, integer[], integer[], character, character, null> => double[];
type `match.tol` <double[], double[], null, character, double> => ^double[];
type `match.tol.both` <double[], double[], double, null> => ^double[];
type `padleft` <double[], double, logical> => double[];
type `padmean` <double[], double, double> => struct<`x`:double[], `circular`:logical, `cut`:double[]>;
type `pen.mean` <double, integer, double, double> => double;
type `pen.mean.var` <double, integer, double, double> => double;
type `pen.var` <double, integer, double, double> => double;
type `pennington` <double[], character, logical> => double[];
type `pgleissberg` <double[], double[], logical, logical> => double[];
type `plot.abund` <struct<`data`:character, `vr`:integer[], `sort`:double[], `cumsum`:double[], `p.log.ind`:double[], `p.nonull`:double[], `f`:double, `call`:language>, null, logical, logical, double, double, logical, character[], double[], character[], double[], character, character, character, character, null> => null;
type `plot.escouf` <struct<`data`:character, `vr`:integer[], `RV`:double[], `calc.level`:double, `vars`:integer[], `call`:language>, null, logical, logical, logical, double, double, logical, character, double, character, double, character, character, character, character, null> => null;
type `plot.regul` <struct<`x`:double[], `y`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `xini`:double[], `yini`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `tspar`:struct<`start`:double, `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:null, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character[], `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language> | struct<`x`:double[], `y`:struct<`Series`:double[]>, `xini`:double[], `yini`:struct<`Initial`:double[]>, `tspar`:struct<`start`:double[], `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:character, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character, `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language>, double, double[], character[], logical, logical, language, language, character, character, character, null> => null;
type `plot.stat.slide` <struct<`stat`:struct<`[0#17[`:double[], `[17#25[`:double[], `[25#30[`:double[], `[30#41[`:double[], `[41#46[`:double[], `[46#70[`:double[]>, `x`:double[], `y`:double[], `xcut`:double[], `call`:language> | struct<`stat`:struct<`[0#10[`:double[], `[10#20[`:double[], `[20#30[`:double[], `[30#40[`:double[], `[40#50[`:double[], `[50#60[`:double[], `[60#70[`:double[]>, `x`:double[], `y`:double[], `xcut`:double[], `call`:language>, character, double[], character[], logical, language | character[], language | double[], character, character, character, null> => null | struct<`rect`:struct<`w`:double, `h`:double, `left`:double, `top`:double>, `text`:struct<`x`:double[], `y`:double[]>>;
type `plot.tsd` <struct<`ts`:character[], `series`:tuple<^double[], ^double[], ^double[], ^double[]>, `units`:character, `specs`:struct<`method`:character, `type`:character, `lag`:double, `axes`:integer[], `order`:double, `times`:double, `sides`:double, `ends`:character, `weights`:null, `s.window`:null, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical, `xreg`:null>, `call`:language, `weights`:double[]> | struct<`ts`:character[], `series`:list<^double[]>, `units`:character, `specs`:struct<`method`:character, `type`:character, `lag`:double, `axes`:integer[], `order`:double, `times`:double, `sides`:double, `ends`:character, `weights`:null, `s.window`:double, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical, `xreg`:null>, `call`:language, `weights`:double[]> | struct<`ts`:character, `series`:^double[], `test.seasons`:double[], `amplitude`:double, `units`:null, `model.type`:character, `specs`:struct<`method`:character, `type`:character>, `call`:language> | struct<`ts`:character, `series`:^double[], `units`:character, `specs`:struct<`method`:character, `type`:character, `lag`:double, `axes`:double>, `call`:any => any> | struct<`ts`:character, `series`:^double[], `units`:null, `specs`:struct<`method`:character, `type`:character, `lag`:double, `order`:double, `ends`:character>, `call`:language> | struct<`ts`:character, `series`:^double[], `units`:null, `specs`:struct<`method`:character, `type`:character, `order`:double, `times`:double, `ends`:character>, `call`:language> | struct<`ts`:character, `series`:^double[], `units`:null, `specs`:struct<`method`:character, `type`:character, `xreg`:double[]>, `call`:language> | struct<`ts`:character, `series`:^double[], `weights`:double[], `units`:character, `specs`:struct<`method`:character, `type`:character, `s.window`:character, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical>, `call`:language>, double, logical, logical, double[], character, character[], logical, language | double[], character, character, language | character, null> => null;
type `plot.turnpoints` <struct<`data`:character, `n`:integer, `points`:double[], `pos`:double[], `exaequos`:double[], `nturns`:integer, `firstispeak`:logical, `peaks`:logical[], `pits`:logical[], `tppos`:double[], `proba`:double[], `info`:double[]>, double, logical, double, double, character, character, character, character, null> => null;
type `regarea` <double[], double[], double, double, double, double, double, logical, double> => struct<`x`:double[], `y`:double[]>;
type `regconst` <double[], double[], double, double, double, double, double> => struct<`x`:double[], `y`:double[]>;
type `reglin` <double[], double[], double, double, double, double> => struct<`x`:double[], `y`:double[]>;
type `regspline` <double[], double[], double, double, double, double, logical> => struct<`x`:double[], `y`:double[]>;
type `regul` <double[], struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]> | double[], double, double, character, null | double, double, null | character, character, double, character, character[], double, double, logical, double, double, null> => struct<`x`:double[], `y`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `xini`:double[], `yini`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `tspar`:struct<`start`:double[], `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:character, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character, `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language> | struct<`x`:double[], `y`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `xini`:double[], `yini`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `tspar`:struct<`start`:double, `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:null, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character[], `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language> | struct<`x`:double[], `y`:struct<`Series`:double[]>, `xini`:double[], `yini`:struct<`Initial`:double[]>, `tspar`:struct<`start`:double[], `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:character, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character, `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language>;
type `regul.adj` <double[], double, null, double, double, character, double, double[], character, character, character, logical, null> => struct<`params`:double[], `match`:integer, `exact.match`:integer, `match.counts`:integer[]>;
type `regul.graph` <struct<`x`:double[], `y`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `xini`:double[], `yini`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `tspar`:struct<`start`:double, `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:null, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character[], `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language> | struct<`x`:double[], `y`:struct<`Series`:double[]>, `xini`:double[], `yini`:struct<`Initial`:double[]>, `tspar`:struct<`start`:double[], `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:character, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character, `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language>, double, double[], character[], logical, logical, symbol, symbol, character, character, character, null> => null;
type `regul.screen` <double[], null, integer[], null, integer[], double, character> => struct<`tol`:double[], `n`:^double[], `nbr.match`:^double[], `nbr.exact.match`:^double[]>;
type `regul.screen.calc` <double[], double[], integer, integer, double, character> => struct<`tol`:double, `nx`:double, `match`:double, `exact.match`:double>;
type `specs.regul` <struct<`x`:double[], `y`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `xini`:double[], `yini`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `tspar`:struct<`start`:double, `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:null, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character[], `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language>, null> => struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:null, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character[], `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>;
type `stat.desc` <struct<`Nauplii`:double[], `Oithona`:double[], `Acanthaires`:double[], `Cladocerans`:double[]>, logical, logical, logical, double> => struct<`Nauplii`:double[], `Oithona`:double[], `Acanthaires`:double[], `Cladocerans`:double[]>;
type `stat.desc.vec` <struct<`Acanthaires`:double[]>, logical, logical, logical, double> => double[];
type `stat.pen` <struct<`Copepodits2`:double[], `Oithona`:double[], `Acanthaires`:double[], `Cladocerans`:double[]>, logical, logical> => struct<`Copepodits2`:double[], `Oithona`:double[], `Acanthaires`:double[], `Cladocerans`:double[]>;
type `stat.pen.vec` <struct<`Acanthaires`:double[]>, logical, logical> => double[];
type `stat.slide` <integer[], double[], null | double[], double | language, null | double, null, double | language, logical, logical, logical, logical, double> => struct<`stat`:struct<`[0#10[`:double[], `[10#20[`:double[], `[20#30[`:double[], `[30#40[`:double[], `[40#50[`:double[], `[50#60[`:double[], `[60#70[`:double[]>, `x`:double[], `y`:double[], `xcut`:double[], `call`:language> | struct<`stat`:struct<`[0#17[`:double[], `[17#25[`:double[], `[25#30[`:double[], `[30#41[`:double[], `[41#46[`:double[], `[46#70[`:double[]>, `x`:double[], `y`:double[], `xcut`:double[], `call`:language>;
type `stat.slide.cut` <double[], double, double, logical, logical, logical, logical, symbol | double> => double[];
type `stat.slide.graph` <struct<`stat`:struct<`[0#17[`:double[], `[17#25[`:double[], `[25#30[`:double[], `[30#41[`:double[], `[41#46[`:double[], `[46#70[`:double[]>, `x`:double[], `y`:double[], `xcut`:double[], `call`:language> | struct<`stat`:struct<`[0#10[`:double[], `[10#20[`:double[], `[20#30[`:double[], `[30#40[`:double[], `[40#50[`:double[], `[50#60[`:double[], `[60#70[`:double[]>, `x`:double[], `y`:double[], `xcut`:double[], `call`:language>, character, double[], character[], logical, symbol | character[], symbol | double[], character, character, character, null> => null | struct<`rect`:struct<`w`:double, `h`:double, `left`:double, `top`:double>, `text`:struct<`x`:double[], `y`:double[]>>;
type `stat.slide.lines` <struct<`stat`:struct<`[0#17[`:double[], `[17#25[`:double[], `[25#30[`:double[], `[30#41[`:double[], `[41#46[`:double[], `[46#70[`:double[]>, `x`:double[], `y`:double[], `xcut`:double[], `call`:language>, character, double, double, null> => null;
type `statistic` <double[]> => double;
type `summary.abund` <struct<`data`:character, `vr`:integer[], `sort`:double[], `cumsum`:double[], `p.log.ind`:double[], `p.nonull`:double[], `f`:double, `call`:language>, null> => struct<`data`:character, `vr`:integer[], `sort`:double[], `cumsum`:double[], `p.log.ind`:double[], `p.nonull`:double[], `f`:double, `call`:language>;
type `summary.escouf` <struct<`data`:character, `vr`:integer[], `RV`:double[], `calc.level`:double, `vars`:integer[], `call`:language>, null> => struct<`data`:character, `vr`:integer[], `RV`:double[], `calc.level`:double, `vars`:integer[], `call`:language>;
type `summary.turnogram` <struct<`interval`:double[], `n`:double[], `turns`:double[], `info`:double[], `level`:double, `call`:language, `data`:character, `type`:character, `fun`:character, `proba`:character, `units.text`:character>, null> => struct<`interval`:double[], `n`:double[], `turns`:double[], `info`:double[], `level`:double, `call`:language, `data`:character, `type`:character, `fun`:character, `proba`:character, `units.text`:character>;
type `summary.turnpoints` <struct<`data`:character, `n`:integer, `points`:double[], `pos`:double[], `exaequos`:double[], `nturns`:integer, `firstispeak`:logical, `peaks`:logical[], `pits`:logical[], `tppos`:double[], `proba`:double[], `info`:double[]>, null> => struct<`data`:character, `n`:integer, `points`:double[], `pos`:double[], `exaequos`:double[], `nturns`:integer, `firstispeak`:logical, `peaks`:logical[], `pits`:logical[], `tppos`:double[], `proba`:double[], `info`:double[]>;
type `SumTerm` <integer, double, double> => double;
type `Trace` <^double[]> => double;
type `trend.test` <double[], double> => struct<`statistic`:double, `parameter`:null, `p.value`:double, `estimate`:double, `null.value`:double, `alternative`:character, `method`:character, `data.name`:character> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:integer, `call`:language, `l`:double, `endcorr`:logical, `p.value`:double>;
type `tsd` <^double[], null, character, character, double, integer[], double, double, double, character, null, null | double, double, null, double, logical, logical, null> => struct<`ts`:character[], `series`:tuple<^double[], ^double[], ^double[], ^double[]>, `units`:character, `specs`:struct<`method`:character, `type`:character, `lag`:double, `axes`:integer[], `order`:double, `times`:double, `sides`:double, `ends`:character, `weights`:null, `s.window`:null, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical, `xreg`:null>, `call`:language, `weights`:double[]> | struct<`ts`:character[], `series`:list<^double[]>, `units`:character, `specs`:struct<`method`:character, `type`:character, `lag`:double, `axes`:integer[], `order`:double, `times`:double, `sides`:double, `ends`:character, `weights`:null, `s.window`:double, `s.degree`:double, `t.window`:null, `t.degree`:double, `robust`:logical, `trend`:logical, `xreg`:null>, `call`:language, `weights`:double[]>;
type `tseries` <struct<`x`:double[], `y`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `xini`:double[], `yini`:struct<`Astegla`:double[], `Chae`:double[], `Dity`:double[], `Gymn`:double[], `Melosul`:double[], `Navi`:double[]>, `tspar`:struct<`start`:double[], `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:character, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character, `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language> | struct<`x`:double[], `y`:struct<`Series`:double[]>, `xini`:double[], `yini`:struct<`Initial`:double[]>, `tspar`:struct<`start`:double[], `deltat`:double, `frequency`:double>, `units`:character, `match.dist`:double[], `specs`:struct<`xmin`:double, `n`:double, `frequency`:double, `deltat`:double, `units`:character, `datemin`:character, `dateformat`:character, `tol`:double, `tol.type`:character, `methods`:character, `rule`:double, `f`:double, `periodic`:logical, `window`:double, `split`:double>, `call`:language>> => ^double[];
type `turnogram` <double[], double[], double, logical, logical, any => any, logical, double, logical, logical, logical> => struct<`interval`:double[], `n`:double[], `turns`:double[], `info`:double[], `level`:double, `call`:language, `data`:character, `type`:character, `fun`:character, `proba`:character, `units.text`:character>;
type `turnogram.step1` <double[], double, logical, any => any> => struct<`n`:integer[], `nturns`:integer[]>;
type `turnpoints` <double[], logical> => struct<`data`:character, `n`:integer, `points`:double[], `pos`:double[], `exaequos`:double[], `nturns`:integer, `firstispeak`:logical, `peaks`:logical[], `pits`:logical[], `tppos`:double[], `proba`:double[], `info`:double[]>;
type `turnpoints.graph` <struct<`data`:character, `n`:integer, `points`:double[], `pos`:double[], `exaequos`:double[], `nturns`:integer, `firstispeak`:logical, `peaks`:logical[], `pits`:logical[], `tppos`:double[], `proba`:double[], `info`:double[]>, double, symbol, double, double, character, character, character, character, null, null> => null;
type `turnpoints.lines` <struct<`data`:character, `n`:integer, `points`:double[], `pos`:double[], `exaequos`:double[], `nturns`:integer, `firstispeak`:logical, `peaks`:logical[], `pits`:logical[], `tppos`:double[], `proba`:double[], `info`:double[]>, logical, logical, logical, double[], double[], null> => null;
type `vario` <double[], double, logical, null> => struct<`distance`:integer[], `semivario`:double[]>;
type `yearstodays` <double[], null | double> => double[];
