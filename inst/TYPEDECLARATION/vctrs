type `%0%` <integer[], double> => (double | integer[]);
type `all_equal` <integer[]> => logical;
type `allow_lossy_cast` <any, null, null | integer[]> => any;
type `append_pos` <character[], logical[]> => character[];
type `as_double_date` <class<`Date`>> => class<`Date`>;
type `as_list_of` <class<`vctrs_list_of`, `vctrs_vctr`>, ...> => class<`vctrs_list_of`, `vctrs_vctr`>;
type `as_list_of.vctrs_list_of` <class<`vctrs_list_of`, `vctrs_vctr`>, double[], ...> => class<`vctrs_list_of`, `vctrs_vctr`>;
type `as.list.vctrs_sclr` <class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, ...> => list<class<`factor`>>;
type `as_minimal_names` <character[]> => character[];
type `as_universal_names` <character[], logical> => character[];
type `bullets` <character, ..., any> => character;
type `cat_line` <...> => null;
type `check_fields` <list<integer[] | character[]>> => list<integer[] | character[]>;
type `cnd_body.vctrs_error_cast_lossy` <class<`condition`, `error`, `rlang_error`, `vctrs_error`, `vctrs_error_cast_lossy`>, ...> => character;
type `cnd_header.vctrs_error_cast_lossy` <class<`condition`, `error`, `rlang_error`, `vctrs_error`, `vctrs_error_cast_lossy`>, ...> => class<`character`, `glue`>;
type `compact` <list<any>> => list<any>;
type `conditionMessage.vctrs_error_cast_lossy` <class<`condition`, `error`, `rlang_error`, `vctrs_error`, `vctrs_error_cast_lossy`>> => character;
type `data_frame` <...> => class<`data.frame`>;
type `describe_repair` <character[] | null, character[]> => null;
type `dim2` <class<`matrix`> | character[] | double[] | null> => integer[];
type `field` <class<`vctrs_rcrd`, `vctrs_vctr`> | class<`vctrs_group_rle`, `vctrs_rcrd`, `vctrs_vctr`>, character> => double[];
type `field<-` <class<`vctrs_rcrd`, `vctrs_vctr`>, character, double[]> => class<`vctrs_rcrd`, `vctrs_vctr`>;
type `fields` <class<`vctrs_rcrd`, `vctrs_vctr`>> => character[];
type `format_arg_label` <character, character> => character;
type `FUN` <^double[] | character[] | class<`data.frame`>, ..., logical> => (^double[] | character[] | class<`data.frame`>) | <character[], double> => character | <class<`data.frame`> | class<`factor`> | double[] | character[] | class<`Date`> | class<`factor`, `ordered`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | null, ...> => character | <class<`data.frame`>> => class<`data.frame`>;
type `glue_lines` <..., environment> => character;
type `has_dim` <character[] | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`> | ^double[]> => logical;
type `hash_label` <character[], double> => character;
type `has_unique_names` <list<class<`data.frame`> | class<`factor`> | integer[] | character[]>> => logical;
type `indent` <character, double> => character;
type `inline_list` <character, integer, integer, character> => character;
type `is_partial` <class<`factor`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | double[]> => logical;
type `is_same_type` <character | class<`factor`> | integer[], double[] | class<`factor`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>> => logical;
type `is_syntactic` <character[]> => logical[];
type `is_unspecified` <double[]> => logical;
type `layout_type` <character, character> => character;
type `list_of` <..., double[] | null> => class<`vctrs_list_of`, `vctrs_vctr`>;
type `make_syntactic` <character[]> => character[];
type `map` <character[] | class<`data.frame`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | list<any>, class<`function`>, ...> => list<any>;
type `map_chr` <character | class<`data.frame`> | list<character[] | class<`data.frame`>>, class<`function`>, ...> => character[];
type `map_int` <list<character[] | integer[] | character[]>, class<`function`>, ...> => integer[];
type `map_lgl` <class<`data.frame`> | list<any>, class<`function`>, ...> => logical[];
type `map_mold` <character | class<`data.frame`> | list<any>, class<`function`>, character | integer, ...> => (character[] | integer[]);
type `Math.vctrs_vctr` <class<`vctrs_vctr`>, ...> => class<`vctrs_vctr`>;
type `maybe_lossy_cast` <character[] | integer[], any, any, logical[], null, null, ..., any, any, null, null, logical> => any;
type `names_all_or_nothing` <null> => logical;
type `new_data_frame` <list<any>, integer | null, ..., null> => class<`data.frame`>;
type `new_date` <double> => class<`Date`>;
type `new_datetime` <class<`POSIXct`, `POSIXt`> | double, null | character> => class<`POSIXct`, `POSIXt`>;
type `new_duration` <double[], character> => class<`difftime`>;
type `new_factor` <integer[], character[], ..., character[]> => class<`factor`>;
type `new_list_of` <list<any>, double[], ..., character[]> => class<`vctrs_list_of`, `vctrs_vctr`>;
type `new_partial` <..., character> => (class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>);
type `new_partial_factor` <class<`factor`>, class<`factor`>> => class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>;
type `new_partial_frame` <class<`data.frame`>, class<`data.frame`>> => class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>;
type `new_rcrd` <list<integer[] | character[]>, ..., character[]> => class<`vctrs_rcrd`, `vctrs_vctr`>;
type `new_sclr` <..., character[]> => (class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>);
type `new_vctr` <double[] | list<any>, ..., character[], logical> => (class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>);
type `n_fields` <class<`vctrs_rcrd`, `vctrs_vctr`>> => integer;
type `on_package_load` <character, any> => null;
type `order_proxy` <character[] | class<`data.frame`> | ^double[], character, character> => integer[];
type `parens` <character[], logical> => character[];
type `partial_factor` <character[]> => class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>;
type `partial_frame` <...> => class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>;
type `paste_line` <...> => character;
type `re_match` <character[], character, logical, ...> => class<`data.frame`>;
type `reset_rownames` <class<`data.frame`>> => class<`data.frame`>;
type `result` <character[] | integer, null> => class<`rlang_result`>;
type `result_get` <class<`rlang_result`>> => (character[] | integer);
type `s3_register` <character, character, null> => null;
type `set_names_fallback` <class<`factor`>, null> => class<`factor`>;
type `shape_broadcast` <integer[] | list<integer[]>, integer[] | list<any>> => (integer[] | list<integer[]>);
type `stop_incompatible` <character | double, double[] | class<`factor`>, null, ..., character, character> => any;
type `stop_incompatible_cast` <double, class<`factor`>, null, ..., character, character, null, null> => any;
type `stop_incompatible_type` <character, double[], character, character, null, ..., null, null> => any;
type `stop_lossy_cast` <double[] | null, integer[] | character, integer[] | character[], integer, null, ..., character, character, null, null> => any;
type `stop_vctrs` <character | null, character[], ...> => any;
type `str_backtick` <character> => character;
type `str_dup` <character, double> => character;
type `strip_pos` <character[]> => character[];
type `str_is_multiline` <character> => logical;
type `Summary.vctrs_vctr` <..., logical> => class<`vctrs_vctr`>;
type `tick` <character[]> => (character[] | logical[]);
type `tick_if_needed` <character[]> => character[];
type `two_to_three_dots` <character[]> => character[];
type `tzone` <class<`POSIXct`, `POSIXt`>> => character;
type `tzone_is_local` <class<`POSIXct`, `POSIXt`>> => logical;
type `units_union` <class<`difftime`>, class<`difftime`>> => character;
type `validate_names` <double[] | list<any>> => null;
type `[[.vctrs_list_of` <class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, integer | character, ...> => (double | class<`data.frame`> | class<`factor`>);
type `$.vctrs_sclr` <class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, integer | character, ...> => (double | class<`data.frame`> | class<`factor`>);
type `vec_arith` <character, class<`POSIXct`, `POSIXt`> | class<`difftime`>, class<`Date`> | class<`difftime`> | double, ...> => (class<`difftime`> | class<`POSIXct`, `POSIXt`> | double);
type `vec_arith_base` <character, class<`difftime`> | class<`POSIXct`, `POSIXt`>, class<`difftime`> | double> => double;
type `vec_arith.difftime` <character, class<`difftime`>, class<`difftime`> | double, ...> => (class<`difftime`> | double);
type `vec_arith.difftime.difftime` <character, class<`difftime`>, class<`difftime`>, ...> => (class<`difftime`> | double);
type `vec_arith.difftime.numeric` <character, class<`difftime`>, double, ...> => class<`difftime`>;
type `vec_arith.POSIXct` <character, class<`POSIXct`, `POSIXt`>, class<`Date`> | class<`difftime`> | double, ...> => (class<`difftime`> | class<`POSIXct`, `POSIXt`>);
type `vec_arith.POSIXct.Date` <character, class<`POSIXct`, `POSIXt`>, class<`Date`>, ...> => class<`difftime`>;
type `vec_arith.POSIXct.difftime` <character, class<`POSIXct`, `POSIXt`>, class<`difftime`>, ...> => class<`POSIXct`, `POSIXt`>;
type `vec_arith.POSIXct.numeric` <character, class<`POSIXct`, `POSIXt`>, double, ...> => class<`POSIXct`, `POSIXt`>;
type `vec_as_location` <character[] | double, integer, character[] | null, ..., character[], null> => integer[];
type `vec_as_names` <^character[], ..., character[], logical> => character[];
type `vec_assert` <character[] | class<`data.frame`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`> | ^double[], null | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | class<`factor`> | logical[], null | integer, any> => any;
type `vec_assert_type_explain` <class<`factor`>, class<`factor`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, character> => character;
type `vec_assign` <double[], double, double | character> => any;
type `vec_as_subscript` <character[] | double, ..., character[], character[], character[], any> => (character[] | integer);
type `vec_as_subscript_result` <character[] | double, any, character[], character[], character[]> => class<`rlang_result`>;
type `vec_c` <..., character[] | null, null | character | class<`function`> | class<`formula`>, character[]> => any;
type `vec_cast` <class<`difftime`> | double[] | character, class<`difftime`> | integer[] | class<`factor`>, ..., character, character> => any;
type `vec_cast_common` <..., null> => list<any>;
type `vec_cast.Date` <class<`Date`>, class<`Date`>, ...> => class<`Date`>;
type `vec_cast.Date.Date` <class<`Date`>, class<`Date`>, ...> => class<`Date`>;
type `vec_cast.difftime` <class<`difftime`>, class<`difftime`>, ...> => class<`difftime`>;
type `vec_cast.difftime.difftime` <class<`difftime`>, class<`difftime`>, ...> => class<`difftime`>;
type `vec_cast_dispatch` <class<`Date`> | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`> | double[] | character | list<integer[]>, class<`Date`> | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`> | integer[] | class<`factor`> | list<any>, ..., any, any> => any;
type `vec_cast.factor` <double, class<`factor`>, ...> => any;
type `vec_cast.factor.default` <double, class<`factor`>, ..., character, character> => any;
type `vec_cast.integer` <double[] | character, integer[], ...> => any;
type `vec_cast.integer.character` <character | double[], integer[], ..., any, any> => any;
type `vec_cast.integer.double` <character | double[], integer[], ..., any, any> => any;
type `vec_cast.list` <list<integer[]>, list<any>, ...> => list<integer[]>;
type `vec_cast.list.list` <list<integer[]>, list<any>, ..., any, any> => list<integer[]>;
type `vec_cast.logical` <double[], logical[], ...> => any;
type `vec_cast.logical.double` <double[], logical[], ..., character, character> => any;
type `vec_cast.POSIXct` <class<`Date`> | class<`POSIXct`, `POSIXt`>, class<`POSIXct`, `POSIXt`>, ...> => class<`POSIXct`, `POSIXt`>;
type `vec_cast.POSIXct.Date` <class<`Date`>, class<`POSIXct`, `POSIXt`>, ...> => class<`POSIXct`, `POSIXt`>;
type `vec_cast.POSIXct.POSIXct` <class<`POSIXct`, `POSIXt`>, class<`POSIXct`, `POSIXt`>, ...> => class<`POSIXct`, `POSIXt`>;
type `vec_cast.vctrs_list_of` <class<`vctrs_list_of`, `vctrs_vctr`>, class<`vctrs_list_of`, `vctrs_vctr`>, ...> => class<`vctrs_list_of`, `vctrs_vctr`>;
type `vec_cast.vctrs_list_of.vctrs_list_of` <class<`vctrs_list_of`, `vctrs_vctr`>, class<`vctrs_list_of`, `vctrs_vctr`>, ...> => class<`vctrs_list_of`, `vctrs_vctr`>;
type `vec_cast.vctrs_vctr` <class<`vctrs_vctr`>, class<`vctrs_vctr`>, ...> => class<`vctrs_vctr`>;
type `vec_cast.vctrs_vctr.default` <class<`vctrs_vctr`>, class<`vctrs_vctr`>, ...> => class<`vctrs_vctr`>;
type `vec_cbind` <..., null, null, character[]> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `vec_chop` <class<`data.frame`> | integer[], null | list<integer[] | double | integer[]>> => list<class<`data.frame`> | integer[]>;
type `vec_coerce_bare` <double[] | character, character> => integer[];
type `vec_coercible_cast` <double, integer[], ..., null, character> => integer;
type `vec_compare` <^logical[] | character[] | class<`data.frame`> | double[], character | class<`data.frame`> | double, logical, null> => ^integer[];
type `vec_count` <character[] | class<`data.frame`> | class<`factor`> | double[], character[]> => class<`data.frame`>;
type `vec_data` <character[] | ^double[] | class<`vctrs_vctr`> | class<`difftime`> | class<`POSIXct`, `POSIXt`>> => (character[] | ^double[]);
type `vec_default_cast` <double, class<`factor`>, character, character> => any;
type `vec_default_ptype2` <character, double[], ..., character, character> => any;
type `vec_dim` <integer[] | list<any>> => integer;
type `vec_dim_n` <character[] | ^double[]> => integer;
type `vec_duplicate_any` <double[]> => logical;
type `vec_duplicate_detect` <character[] | double[]> => logical[];
type `vec_duplicate_id` <double[]> => integer[];
type `vec_equal` <class<`data.frame`> | ^logical[] | character | double, class<`data.frame`> | character[] | integer[], logical, null> => ^logical[];
type `vec_equal_na` <class<`data.frame`> | ^logical[]> => logical[];
type `vec_group_id` <character[] | class<`data.frame`>> => integer[];
type `vec_group_loc` <class<`data.frame`> | double[]> => class<`data.frame`>;
type `vec_group_rle` <character[] | class<`data.frame`>> => class<`vctrs_group_rle`, `vctrs_rcrd`, `vctrs_vctr`>;
type `vec_in` <character[], character[]> => logical[];
type `vec_init` <class<`data.frame`> | class<`Date`> | integer[], double> => (class<`data.frame`> | class<`Date`> | ^integer[]);
type `vec_init_along` <class<`data.frame`>, class<`data.frame`>> => class<`data.frame`>;
type `vec_is` <character[] | double | integer[], null | integer[], null> => logical;
type `vec_is_empty` <integer[]> => logical;
type `vec_is_list` <class<`data.frame`> | class<`vctrs_list_of`, `vctrs_vctr`> | list<any>> => logical;
type `vec_is_vector` <character[] | class<`data.frame`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`> | ^double[]> => logical;
type `vec_match` <character[] | class<`data.frame`>, character[] | class<`data.frame`>> => ^integer[];
type `vec_math` <character, class<`vctrs_vctr`>, ...> => class<`vctrs_vctr`>;
type `vec_math_base` <character, class<`vctrs_vctr`>, ...> => double[];
type `vec_math.default` <character, class<`vctrs_vctr`>, ...> => class<`vctrs_vctr`>;
type `vec_order` <character[] | class<`data.frame`> | ^double[], character[], character[]> => integer[];
type `vec_proxy` <character[] | class<`data.frame`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`> | ^double[], ...> => (character[] | class<`data.frame`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`> | ^double[]) | <class<`Date`>, ...> => class<`Date`> | <class<`vctrs_vctr`>, ...> => class<`vctrs_vctr`> | <class<`vctrs_rcrd`, `vctrs_vctr`>, ...> => class<`data.frame`> | <class<`POSIXct`, `POSIXt`>, ...> => class<`POSIXct`, `POSIXt`> | <class<`vctrs_list_of`, `vctrs_vctr`>, ...> => list<any>;
type `vec_proxy_compare` <^double[] | character[] | class<`data.frame`>, ..., logical> => (^double[] | character[] | class<`data.frame`>);
type `vec_proxy_compare.data.frame` <class<`data.frame`>, ..., logical> => class<`data.frame`>;
type `vec_proxy_compare_default` <character[] | ^double[], any> => (character[] | ^double[]);
type `vec_proxy_compare.default` <character[] | ^double[], ..., logical> => (character[] | ^double[]);
type `vec_proxy_equal.default` <class<`factor`>, ...> => class<`factor`>;
type `vec_proxy_equal_dispatch` <class<`factor`>, ...> => class<`factor`>;
type `vec_ptype` <class<`factor`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | double[]> => (class<`factor`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | double[]);
type `vec_ptype2` <class<`data.frame`> | class<`factor`> | double[] | character, class<`data.frame`> | class<`factor`> | integer[], ..., character, character> => any;
type `vec_ptype2.character` <character, double[], ..., character, character> => any;
type `vec_ptype2.character.default` <character, double[], ..., character, character> => any;
type `vec_ptype2.difftime` <class<`difftime`>, class<`difftime`>, ...> => class<`difftime`>;
type `vec_ptype2.difftime.difftime` <class<`difftime`>, class<`difftime`>, ...> => class<`difftime`>;
type `vec_ptype2_dispatch_s3` <class<`difftime`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`factor`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`> | character, class<`difftime`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | class<`factor`> | class<`data.frame`> | double[], ..., any, any> => any;
type `vec_ptype2.factor` <class<`factor`>, class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, ...> => class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>;
type `vec_ptype2.factor.vctrs_partial_factor` <class<`factor`>, class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, ...> => class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>;
type `vec_ptype2.vctrs_list_of` <class<`vctrs_list_of`, `vctrs_vctr`>, class<`vctrs_list_of`, `vctrs_vctr`>, ..., any, any> => class<`vctrs_list_of`, `vctrs_vctr`>;
type `vec_ptype2.vctrs_list_of.vctrs_list_of` <class<`vctrs_list_of`, `vctrs_vctr`>, class<`vctrs_list_of`, `vctrs_vctr`>, ...> => class<`vctrs_list_of`, `vctrs_vctr`>;
type `vec_ptype2.vctrs_partial_factor` <class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, class<`factor`>, ...> => class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>;
type `vec_ptype2.vctrs_partial_factor.factor` <class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, class<`factor`>, ...> => class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>;
type `vec_ptype2.vctrs_partial_frame` <class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>, class<`data.frame`>, ...> => class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>;
type `vec_ptype2.vctrs_partial_frame.data.frame` <class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>, class<`data.frame`>, ...> => class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>;
type `vec_ptype_abbr` <integer[], ...> => character;
type `vec_ptype_abbr.default` <integer[], ...> => character;
type `vec_ptype_common` <..., class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | null | double[]> => (class<`factor`> | double[]);
type `vec_ptype_finalise` <class<`factor`> | integer[], ...> => (class<`factor`> | integer[]);
type `vec_ptype_finalise.default` <class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>, ...> => (class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>);
type `vec_ptype_finalise_dispatch` <class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`> | class<`Date`> | class<`difftime`> | class<`factor`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>, ...> => (class<`data.frame`> | class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>);
type `vec_ptype_finalise.vctrs_partial_factor` <class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, ...> => class<`factor`>;
type `vec_ptype_finalise.vctrs_partial_frame` <class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`>, ...> => class<`data.frame`>;
type `vec_ptype_full` <class<`data.frame`> | class<`factor`> | double[] | character[] | class<`Date`> | class<`factor`, `ordered`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | null, ...> => character;
type `vec_ptype_full.data.frame` <class<`data.frame`>, ...> => character;
type `vec_ptype_full.Date` <class<`Date`>, ...> => character;
type `vec_ptype_full.default` <character[] | class<`matrix`> | double[] | null, ...> => character;
type `vec_ptype_full.factor` <class<`factor`>, ...> => character;
type `vec_ptype_full.NULL` <null, ...> => character;
type `vec_ptype_full.ordered` <class<`factor`, `ordered`>, ...> => character;
type `vec_ptype_full.POSIXct` <class<`POSIXct`, `POSIXt`>, ...> => character;
type `vec_ptype_full.vctrs_partial_factor` <class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`>, ...> => character;
type `vec_ptype_shape` <character[] | class<`matrix`> | double[] | null> => character;
type `vec_ptype_show` <...> => null;
type `vec_rbind` <..., class<`vctrs_partial`, `vctrs_partial_frame`, `vctrs_sclr`> | null, null, character[]> => class<`data.frame`>;
type `vec_recycle` <integer, integer, ..., character> => integer;
type `vec_recycle_common` <..., null> => list<any>;
type `vec_repeat` <class<`data.frame`> | integer[], double, double> => (class<`data.frame`> | integer[]);
type `vec_restore` <double[], class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`>, ..., null> => (class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`>);
type `vec_restore.default` <class<`Date`> | ^double[] | null | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`> | list<any>, class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>, ..., any> => (class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>);
type `vec_restore_dispatch` <class<`Date`> | ^double[] | null | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_vctr`> | list<any>, class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>, ..., any> => (class<`Date`> | class<`difftime`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>);
type `vec_restore.vctrs_vctr` <class<`vctrs_vctr`> | ^double[] | list<any>, class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>, ..., null> => (class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`>);
type `vec_seq_along` <class<`data.frame`> | integer[]> => integer[];
type `vec_set_attributes` <character[] | ^double[] | class<`vctrs_vctr`> | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`vctrs_partial`, `vctrs_partial_factor`, `vctrs_sclr`> | list<any>, list<any>> => (character[] | class<`vctrs_list_of`, `vctrs_vctr`> | class<`vctrs_vctr`> | ^double[] | list<class<`factor`>>);
type `vec_set_names` <character[] | class<`factor`> | double[], null> => (character[] | class<`factor`> | double[]);
type `vec_size` <class<`array`> | class<`data.frame`> | class<`matrix`> | double[]> => integer;
type `vec_size_common` <..., null, integer> => integer;
type `vec_slice` <character[] | class<`data.frame`> | class<`factor`> | ^double[], ^integer[]> => (character[] | class<`data.frame`> | class<`factor`> | ^double[]);
type `vec_slice<-` <double[], double, double | character> => any;
type `vec_sort` <class<`data.frame`> | ^double[], character[], character[]> => (class<`data.frame`> | ^double[]);
type `vec_split` <class<`data.frame`> | double[], class<`data.frame`> | double[]> => class<`data.frame`>;
type `vec_unique` <class<`data.frame`> | ^double[]> => (class<`data.frame`> | ^double[]);
type `vec_unique_count` <integer[]> => integer;
type `vec_unique_loc` <class<`data.frame`> | ^double[]> => integer[];
