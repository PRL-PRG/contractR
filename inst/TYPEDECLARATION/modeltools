type `@` <character, class<`data.frame`>> => class<`data.frame`> | <class<`linearModel`, `lm`>, class<`data.frame`> | null, ...> => double[] | <null, class<`data.frame`>, any, environment> => null | <class<`formula`>, class<`data.frame`> | list<any>, null | integer[], null | class<`standardGeneric`>, null | environment, environment, list<any>, logical, logical, null | list<class<`function`>>, ...> => any | <character | null, class<`data.frame`> | list<any>, environment, environment> => class<`ModelEnvFormula`> | <character> => class<`data.frame`> | <character, null, any, environment> => class<`matrix`> | <character, null, any, environment> => (class<`data.frame`> | class<`matrix`>) | <class<`ModelEnvFormula`>, null, ...> => class<`linearModel`, `lm`> | <character, class<`data.frame`> | null, any, environment> => (class<`data.frame`> | class<`matrix`>) | <character | null, class<`data.frame`>, any, environment> => (class<`ModelEnvFormula`> | null);
type `$` <class<`data.frame`> | null> => double[];
type `checkData` <class<`data.frame`>, class<`data.frame`>> => null;
type `clone` <class<`ModelEnvFormula`>, ...> => class<`ModelEnvFormula`> | <class<`ModelEnv`>, ...> => class<`ModelEnv`> | <class<`ModelEnv`> | class<`ModelEnvFormula`>, ...> => (class<`ModelEnv`> | class<`ModelEnvFormula`>);
type `complete.cases.ModelEnv` <class<`ModelEnv`> | class<`ModelEnvFormula`>> => logical[];
type `dimension` <class<`ModelEnv`>, character> => integer[] | <class<`ModelEnv`>, character> => integer[];
type `dpp` <class<`StatModel`>, ...> => any | <class<`StatModel`>, ...> => any;
type `empty` <class<`ModelEnv`> | class<`ModelEnvFormula`>> => logical | <class<`ModelEnv`>> => logical | <class<`ModelEnvFormula`>> => logical;
type `filter` <character[]> => logical[];
type `fit` <class<`StatModel`>, class<`ModelEnvFormula`>, ...> => class<`linearModel`, `lm`> | <class<`StatModel`>, class<`ModelEnvFormula`>, ...> => class<`linearModel`, `lm`>;
type `FUN` <class<`data.frame`> | class<`matrix`>, logical[], ...> => any | <character> => (class<`data.frame`> | class<`matrix`>);
type `has` <class<`ModelEnv`>, character> => logical | <class<`ModelEnv`>, character> => logical;
type `initialize` <class<`ModelEnvFormula`>, ...> => class<`ModelEnvFormula`> | <class<`ModelEnv`>, ...> => class<`ModelEnv`>;
type `.local` <class<`ModelEnv`> | class<`ModelEnvFormula`>> => (class<`ModelEnv`> | class<`ModelEnvFormula`>) | <class<`ModelEnv`> | class<`ModelEnvFormula`>, logical[], logical, ...> => any | <class<`ModelEnv`> | class<`ModelEnvFormula`>, logical> => (class<`ModelEnv`> | class<`ModelEnvFormula`>);
type `MEapply` <class<`ModelEnv`>, class<`function`>, logical, ...> => class<`ModelEnv`> | <class<`ModelEnv`> | class<`ModelEnvFormula`>, class<`function`> | null | list<class<`function`>>, logical, ...> => any | <class<`ModelEnvFormula`>, class<`function`> | null | list<class<`function`>>, logical, ...> => any;
type `ModelEnvFormula` <class<`formula`>, class<`data.frame`> | list<any>, null | integer[], null | class<`standardGeneric`>, null | environment, environment, list<any>, logical, logical, null | list<class<`function`>>, ...> => any;
type `ModelEnvMatrix` <class<`data.frame`>, class<`data.frame`>, integer[] | null, class<`standardGeneric`> | null, list<any>, ...> => class<`ModelEnv`>;
type `na.action` <class<`ModelEnvFormula`>, ...> => class<`ModelEnvFormula`> | <class<`ModelEnvFormula`>, ...> => any | <class<`ModelEnv`>, ...> => class<`ModelEnv`>;
type `na.omit` <class<`ModelEnvFormula`>, ...> => any;
type `ParseFormula` <class<`formula`>, class<`data.frame`> | list<any>> => class<`FormulaParts`>;
type `Predict` <class<`linearModel`, `lm`> | class<`lm`>, ...> => double[];
type `predict.linearModel` <class<`linearModel`, `lm`>, class<`data.frame`>, ...> => double[];
type `print.linearModel` <class<`linearModel`, `lm`>, double, ...> => class<`linearModel`, `lm`>;
type `subset` <class<`ModelEnv`>, ...> => class<`ModelEnv`> | <class<`ModelEnvFormula`>, ...> => any;
type `u` <class<`ModelEnvFormula`>, null, ...> => class<`linearModel`, `lm`>;
