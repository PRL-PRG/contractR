type `:::` <class<`pedigree`>, character, ...> => class<`matrix`>;
type `alignped1` <double, any, any, double[], any, any, class<`matrix`>> => list<double[] | class<`matrix`> | class<`matrix`> | double[]>;
type `alignped2` <integer[], any, any, double[], double[], any, class<`matrix`>> => list<double[] | class<`matrix`> | class<`matrix`> | double[]>;
type `alignped3` <list<double[] | class<`matrix`> | class<`matrix`> | double[]>, list<double[] | class<`matrix`> | class<`matrix`> | double[]>, logical, double> => list<double[] | class<`matrix`>>;
type `alignped4` <list<double[] | class<`matrix`>>, class<`matrix`>, any, double, double[]> => class<`matrix`>;
type `align.pedigree` <class<`pedigree`>, logical, double, double[], null | list<double[] | class<`matrix`> | double[] | null | integer[] | null>> => list<double[] | class<`matrix`>>;
type `as.data.frame.pedigree` <class<`pedigree`>, ...> => class<`data.frame`>;
type `autohint` <class<`pedigree`>, any, logical, logical> => list<double[] | class<`matrix`> | integer[] | null>;
type `bitSize` <class<`pedigree`>> => list<double>;
type `check.hint` <list<double[] | class<`matrix`> | double[] | null | integer[] | null>, class<`factor`>> => list<double[] | class<`matrix`> | double[] | null | integer[] | null>;
type `excludeStrayMarryin` <character[] | integer[], double[], double[]> => class<`data.frame`>;
type `excludeUnavailFounders` <character[] | integer[], integer[], integer[], any> => list<any>;
type `familycheck` <double[], integer[], double[], integer[], any> => any;
type `findAvailAffected` <class<`pedigree`>, integer[], null | double> => list<any>;
type `findAvailNonInform` <class<`pedigree`>, double[]> => (character[] | integer[]);
type `findUnavailable` <class<`pedigree`>, double[]> => (character[] | integer[]);
type `fixParents` <class<`factor`> | integer[], class<`factor`> | double[], class<`factor`> | double[], class<`factor`> | double[], character | double> => class<`data.frame`>;
type `is.founder` <double[], double[]> => logical[];
type `is.parent` <character[] | integer[], double[], double[]> => logical[];
type `kindepth` <class<`pedigree`> | integer[], any, any, logical> => any;
type `kinship` <class<`pedigreeList`> | class<`pedigree`>, ...> => (class<`dsCMatrix`> | class<`matrix`>);
type `kinship.pedigree` <class<`pedigree`>, character, ...> => class<`matrix`>;
type `kinship.pedigreeList` <class<`pedigreeList`>, character, ...> => class<`dsCMatrix`>;
type `legendPlot` <class<`pedigree`>, integer[], class<`matrix`>, character[] | null, double[], character[] | null, double, ...> => list<logical>;
type `makefamid` <integer[], double[], double[]> => any;
type `pedigree` <character[] | class<`factor`> | double[], character[] | class<`factor`> | ^double[], character[] | class<`factor`> | ^double[], class<`factor`> | double[] | ^character[], any, any, any, any, any> => (class<`pedigree`> | class<`pedigreeList`>);
type `[.pedigree` <class<`pedigree`>, ..., any> => class<`pedigree`>;
type `pedigree.legend` <class<`pedigree`>, character[], double, double | null, character, logical, double[], double[], ...> => null;
type `[.pedigreeList` <class<`pedigreeList`>, ..., any> => class<`pedigree`>;
type `pedigree.shrink` <class<`pedigree`>, double[], null, null, double> => class<`pedigree.shrink`>;
type `pedigree.trim` <character[] | double[], class<`pedigree`>> => class<`pedigree`>;
type `pedigree.unrelated` <class<`pedigree`>, integer[]> => character[];
type `plot.pedigree` <class<`pedigree`>, character[] | integer[], double[] | null, class<`matrix`> | ^integer[] | null, double, double[] | character[], double, double, logical, double[], double, any, double[], any, logical, any, double, ...> => list<double[] | class<`call`> | list<double[] | class<`matrix`>> | ^double[] | class<`call`> | list<double[] | class<`matrix`>>>;
type `printBanner` <character, double, double, character> => null;
type `print.pedigree` <class<`pedigree`>, ...> => null;
type `print.pedigreeList` <class<`pedigreeList`>, ...> => null;
type `print.pedigree.shrink` <class<`pedigree.shrink`>, ...> => null;
