type `autoplot.microbenchmark` <struct<`expr`:integer[], `time`:double[]>, null, logical, double> => struct<`data`:struct<`expr`:integer[], `time`:double[], `ntime`:double[]>, `layers`:tuple<environment>, `scales`:environment, `mapping`:struct<`x`:language, `y`:language>, `theme`:tuple<>, `coordinates`:environment, `facet`:environment, `plot_env`:environment, `labels`:struct<`x`:character, `y`:character>>;
type `coalesce` <null> => character | double;
type `convert_to_unit` <double[], character> => double[];
type `f` <null | character | double> => logical;
type `filter` <character[]> => logical[];
type `find_prefix` <double[], any => any, double, double, logical> => character;
type `fun` <symbol, symbol> => null | list<character | any => any>;
type `FUN` <null | double[] | language | symbol> => double[] | character | expression;
type `microbenchmark` <null | language | symbol, null, integer, null | character, null | any => any | character, null | character | double | integer[] | pairlist, null | language | double> => struct<`expr`:integer[], `time`:double[]>;
type `print.microbenchmark` <struct<`expr`:integer[], `time`:double[]>, null | character, null | character, null | double, null> => struct<`expr`:integer[], `min`:double[], `lq`:double[], `mean`:double[], `median`:double[], `uq`:double[], `max`:double[], `neval`:double[], `cld`:character[]>;
type `register_s3_method` <character, character, character, null> => null;
type `summary.microbenchmark` <struct<`expr`:integer[], `time`:double[]>, symbol | character, null> => struct<`expr`:integer[], `min`:double[], `lq`:double[], `mean`:double[], `median`:double[], `uq`:double[], `max`:double[], `neval`:double[], `cld`:character[]>;
type `::` <language, null, integer, null, null, character, null | character> => struct<`expr`:integer[], `time`:double[]>;
type `boxplot.microbenchmark` <struct<`expr`:integer[], `time`:double[]>, character, logical, null, null, logical, null> => struct<`stats`:^double[], `n`:double[], `conf`:^double[], `out`:double[], `group`:double[], `names`:character[]>;
type `check` <struct<`2 + 2`:double, `2 + a`:double, `sum(2# a)`:double, `sum(2# 2)`:double> | struct<`rnorm(1e+05)`:double[], `x`:double[]>> => logical;
type `get_nanotime` < > => double;
type `microtiming_precision` <integer, double> => double[];
