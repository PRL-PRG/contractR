type `assert_all_are_classes` <character[], character> => character[];
type `assert_is_a_bool` <logical[] | null, character> => any;
type `assert_is_a_complex` <complex[] | null, character> => any;
type `assert_is_a_double` <double, character> => double;
type `assert_is_all_of` <integer[], character[], character> => integer[];
type `assert_is_an_integer` <integer[], character> => any;
type `assert_is_a_number` <double[] | null, character> => any;
type `assert_is_any_of` <integer[], character[], character> => any;
type `assert_is_a_raw` <raw[], character> => any;
type `assert_is_array` <class<`array`> | class<`matrix`>, character> => (class<`array`> | class<`matrix`>);
type `assert_is_builtin_function` <character | class<`function`>, character> => any;
type `assert_is_call` <class<`call`>, character> => class<`call`>;
type `assert_is_character` <character[] | class<`factor`>, character> => any;
type `assert_is_complex` <complex[], character> => any;
type `assert_is_data.frame` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>, character> => (class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>);
type `assert_is_data.table` <class<`data.frame`, `data.table`> | list<double>, character> => any;
type `assert_is_date` <class<`POSIXct`, `POSIXt`>, character> => any;
type `assert_is_double` <integer[], character> => any;
type `assert_is_environment` <environment, character> => environment;
type `assert_is_expression` <expression, character> => expression;
type `assert_is_externalptr` <externalptr | null, character> => any;
type `assert_is_factor` <class<`factor`>, character> => class<`factor`>;
type `assert_is_function` <class<`function`>, character> => class<`function`>;
type `assert_is_inherited_from` <class<`bar`, `foo`>, character[], any> => any;
type `assert_is_integer` <double[], character> => any;
type `assert_is_internal_function` <character | class<`function`>, character> => any;
type `assert_is_language` <class<`call`> | class<`name`> | expression | class<`function`>, character> => any;
type `assert_is_list` <integer[] | list<double>, character> => any;
type `assert_is_logical` <double | logical[], character> => any;
type `assert_is_matrix` <class<`matrix`> | class<`array`>, character> => any;
type `assert_is_name` <class<`name`>, character> => class<`name`>;
type `assert_is_numeric` <integer[], character> => any;
type `assert_is_pairlist` <list<any> | pairlist, character> => any;
type `assert_is_qr` <class<`qr`>, character> => class<`qr`>;
type `assert_is_raster` <class<`raster`>, character> => class<`raster`>;
type `assert_is_raw` <logical[] | raw[], character> => any;
type `assert_is_relistable` <class<`list`, `relistable`> | list<double>, character> => any;
type `assert_is_s3_primitive_generic` <class<`function`>, character> => any;
type `assert_is_s4` <class<`classRepresentation`> | integer[], character> => any;
type `assert_is_s4_group_generic` <class<`function`>, character> => any;
type `assert_is_simple_error` <class<`try-error`>, character> => any;
type `assert_is_table` <class<`table`>, character> => class<`table`>;
type `assert_is_tbl` <class<`data.frame`>, character> => any;
type `assert_is_tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `assert_is_try_error` <class<`condition`, `error`, `simpleError`>, character> => any;
type `assert_is_ts` <class<`ts`>, character> => class<`ts`>;
type `%calls%` <class<`function`>, character> => logical;
type `%fn_in%` <class<`function`>, list<class<`function`>>> => logical;
type `is_builtin_function` <class<`function`> | character, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_closure_function` <class<`function`>, any> => logical;
type `is_complex` <complex[] | null, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_data.frame` <list<double> | class<`data.frame`> | class<`data.frame`, `data.table`> | class<`data.frame`, `tbl`, `tbl_df`>, any> => (class<`logical`, `scalar_with_cause`> | logical);
type `is_date` <class<`Date`> | class<`POSIXct`, `POSIXt`>, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_double` <double | integer[], any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_error` <class<`try-error`> | class<`condition`, `error`, `simpleError`>, any> => (class<`logical`, `scalar_with_cause`> | logical);
type `is_formula` <class<`formula`>, any> => logical;
type `is_function` <character | class<`function`>, any> => (class<`logical`, `scalar_with_cause`> | logical);
type `is_integer` <double[], any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_internal_function` <class<`function`> | character, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_logical` <logical[] | null | double, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_message` <class<`condition`, `message`, `simpleMessage`>, any> => logical;
type `is_numeric` <double[] | null, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_one_sided_formula` <class<`formula`>, any> => logical;
type `is_posixct` <class<`POSIXct`, `POSIXt`>, any> => logical;
type `is_raw` <raw[] | logical[], any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_s3_generic` <class<`function`>, any> => logical;
type `is_s3_group_generic` <class<`function`>, any> => logical;
type `is_s3_internal_generic` <class<`function`>, any> => logical;
type `is_s3_method` <class<`function`>, any> => logical;
type `is_s3_primitive_generic` <class<`function`>, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_s4_group_generic` <class<`function`>, character[], any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_simple_error` <class<`condition`, `error`, `simpleError`> | class<`try-error`>, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_simple_message` <class<`condition`, `message`, `simpleMessage`>, any> => logical;
type `is_simple_warning` <class<`condition`, `simpleWarning`, `warning`>, any> => logical;
type `is_special_function` <class<`function`>, any> => logical;
type `is_tbl` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_try_error` <class<`try-error`> | class<`condition`, `error`, `simpleError`>, any> => (logical | class<`logical`, `scalar_with_cause`>);
type `is_two_sided_formula` <class<`formula`>, any> => logical;
type `is_typeof_function` <character | class<`function`>, character, any> => (class<`logical`, `scalar_with_cause`> | logical);
type `is_warning` <class<`condition`, `simpleWarning`, `warning`>, any> => logical;
