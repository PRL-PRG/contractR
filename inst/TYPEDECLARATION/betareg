type `betamix` <class<`formula`>, any, any, any, any, any, any, character[], character, list<character | double | null>, null | class<`matrix`>, class<`FLXPmultinom`> | null, list<any>, logical, double, character, any, any, class<`extraComponent`> | list<class<`extraComponent`>>, ...> => class<`betamix`>;
type `betareg` <class<`formula`>, class<`data.frame`> | list<any>, any, any, any, any, character[], null | character, character[], list<character | double | null>, logical, logical, logical, ...> => class<`betareg`>;
type `betareg.control` <logical, character, double, logical, logical, null, double, double, ...> => list<character | double | null>;
type `betareg.fit` <class<`matrix`>, double[] | class<`AsIs`>, class<`matrix`>, double[] | null, null | list<double[]>, character, character, character, list<character | double | null | character | double | list<double[]>>> => list<any>;
type `betatree` <class<`formula`>, class<`formula`>, class<`data.frame`>, null, any, any, any, any, character, character, any, ...> => class<`betatree`, `modelparty`, `party`>;
type `coef.betamix` <class<`betamix`>, character[], ...> => class<`matrix`>;
type `coef.betareg` <class<`betareg`> | list<any>, any, null | logical, ...> => double[];
type `coeftest.betareg` <class<`betareg`>, null, double, ...> => class<`coeftest`>;
type `cooks.distance.betareg` <class<`betareg`>, ...> => double[];
type `estfun.betareg` <class<`betareg`>, null, ...> => class<`matrix`>;
type `extraComponent` <character, double | list<double>, any, character, character> => class<`extraComponent`>;
type `fit` <class<`formula`>, class<`data.frame`> | list<any>, any, any, any, any, character[], null | character, character[], list<character | double | null>, logical, logical, logical, ...> => class<`betareg`>;
type `FLXMRbeta` <class<`formula`>, class<`formula`>, any, character[], character, list<character | double | null>> => class<`FLXMRbeta`>;
type `FLXMRbeta_extra` <class<`formula`>, class<`formula`>, class<`extraComponent`> | list<class<`extraComponent`>>, any, character[], character, list<character | double | null>> => class<`FLXMRbeta_extra`>;
type `gleverage` <class<`betareg`>, ...> => double[];
type `gleverage.betareg` <class<`betareg`>, ...> => double[];
type `halfnormal.betareg` <class<`betareg`>, double, double, character> => class<`matrix`>;
type `hatvalues.betareg` <class<`betareg`>, ...> => double[];
type `logLik.betareg` <class<`betareg`>, ...> => class<`logLik`>;
type `make.dmu.deta` <character> => class<`function`>;
type `model.frame.betareg` <class<`betareg`>, ...> => class<`data.frame`>;
type `model.matrix.betareg` <class<`betareg`>, character, ...> => class<`matrix`>;
type `plot.betareg` <class<`betareg`>, double | integer[], character[], any, character, logical, ..., character, double, double> => null;
type `plot.betatree` <class<`betatree`, `modelparty`, `party`>, class<`grapcon_generator`>, list<any>, null, null, ...> => null;
type `predict.betareg` <class<`betareg`>, null | class<`data.frame`>, character[], any, double[], ...> => (class<`matrix`> | double[]);
type `print.betamix` <class<`betamix`>, ...> => class<`betamix`>;
type `print.betatree` <class<`betatree`, `modelparty`, `party`>, character, character, ...> => class<`betatree`, `modelparty`, `party`>;
type `register_s3_method` <character, character, character, null> => null;
type `residuals.betareg` <class<`betareg`>, character, ...> => (class<`AsIs`> | double[]);
type `sctest.betatree` <class<`betatree`, `modelparty`, `party`>, ...> => list<class<`matrix`> | null>;
type `summary.betamix` <class<`betamix`>, character[], ...> => class<`FLXRoptim`>;
type `summary.betareg` <class<`betareg`>, logical | null, character, ...> => class<`summary.betareg`>;
type `terms.betareg` <class<`betareg`>, character[], ...> => class<`formula`, `terms`>;
type `update.betareg` <class<`betareg`>, any, ..., logical> => class<`betareg`>;
type `vcov.betareg` <class<`betareg`>, any, null, ...> => class<`matrix`>;
