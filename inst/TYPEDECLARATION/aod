type `AIC` <class<`glimML`>, ..., double> => class<`aic`>;
type `AIC1` <class<`logLik`>, double> => double[];
type `anova` <class<`glimML`>, ...> => class<`anova.glimML`>;
type `betabin` <class<`formula`>, class<`formula`>, class<`data.frame`>, character[], null, logical, class<`function`>, list<any>, logical, list<double>, ...> => class<`glimML`>;
type `coef` <class<`glimML`>, ...> => double[] | <class<`glimQL`>, ...> => double[];
type `deviance` <class<`glimML`>, ...> => double;
type `df.residual` <class<`glimML`>, ...> => integer;
type `donner` <class<`formula`> | null, any, any, any, class<`data.frame`>, null | double[]> => class<`drs`>;
type `filter` <character[]> => logical[];
type `fn` <double[]> => double | <double[]> => double;
type `FUN` <class<`glimML`>> => logical | <class<`glimML`>, ...> => class<`logLik`> | <class<`logLik`>> => double[] | <integer[]> => integer[];
type `iccbin` <any, any, class<`data.frame`>, character, double, double> => class<`iccbin`>;
type `invlink` <double[], character> => double[];
type `is.singular` <class<`matrix`>> => logical;
type `link` <double[], character> => double[];
type `.local` <class<`glimQL`>, character, ...> => double[] | <class<`glimQL`>, null | class<`data.frame`>, character, logical, ...> => list<double[]> | <class<`aic`>, character> => class<`data.frame`> | <class<`glimML`>, class<`data.frame`>, character, logical, ...> => list<double[]>;
type `negbin` <class<`formula`>, class<`formula`>, class<`data.frame`>, null, logical, class<`function`>, list<any>, logical, list<double>, ...> => class<`glimML`>;
type `predict` <class<`glimML`>, ...> => list<double[]> | <class<`glimQL`>, ...> => list<double[]>;
type `quasibin` <class<`formula`>, class<`data.frame`>, character[], double | null, double> => class<`glimQL`>;
type `quasipois` <class<`formula`>, class<`data.frame`>, double | null, double> => class<`glimQL`>;
type `raoscott` <class<`formula`> | null, any, any, any, class<`data.frame`>, logical, null | double[]> => class<`drs`>;
type `residuals` <class<`glimQL`>, ...> => double[];
type `splitbin` <class<`formula`>, class<`data.frame`>, character> => list<class<`call`> | class<`data.frame`>>;
type `splitbin.w` <class<`formula`>, class<`data.frame`>, character> => class<`data.frame`>;
type `summary` <class<`aic`>, ...> => class<`data.frame`>;
type `tr` <character> => character;
type `vcov` <class<`glimML`>, ...> => class<`matrix`>;
type `wald.test` <class<`matrix`>, double[], integer[], null, null, null, logical> => class<`wald.test`>;
type `withWarnings` <list<any>> => list<null | list<any> | list<any>>;
