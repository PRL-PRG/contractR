type `asc` <character[], logical> => (class<`matrix`> | integer[] | list<integer[]>);
type `ASCIIfy` <character[], double, any> => character[];
type `ask` <character, class<`connection`, `terminal`>> => character[];
type `baseOf` <double[], double, double> => (class<`matrix`> | double[]);
type `baseOf.inner` <double, any, double> => double[];
type `binsearch` <class<`function`>, double[], ..., double, double, double, double, logical> => list<class<`call`> | character | double[] | class<`call`> | double | character>;
type `capwords` <character, logical, logical, logical, logical, character> => character;
type `checkRVersion` <logical> => class<`numeric_version`>;
type `chr` <class<`matrix`> | integer[] | list<integer[]>> => character[];
type `.clean_up_dependencies2` <character[], class<`matrix`>, any> => list<character[]>;
type `combinations` <double, double, character[] | integer[], logical, logical> => class<`matrix`>;
type `ddirichlet` <class<`matrix`> | double[], double[]> => double[];
type `defmacro` <..., any> => class<`function`>;
type `even` <integer[] | double> => logical[];
type `foldchange` <integer[], integer[]> => double[];
type `FUN` <character[], double, any> => character[] | <double, any, double> => double[] | <any> => logical;
type `getDependencies` <character, character[], logical, logical, logical, logical> => character[];
type `invalid` <any> => logical;
type `inv.logit` <double[], double, double> => double[];
type `keywords` <any> => (character[] | null);
type `lastAdd` <class<`function`>> => class<`function`>;
type `loadedPackages` <logical> => class<`data.frame`>;
type `logit` <double[], double, double> => double[];
type `mixedorder` <^character[], logical, any, any, character[], character[]> => integer[];
type `mixedsort` <^character[], logical, logical, logical, character[], character[]> => ^character[];
type `na.replace` <^double[], character | class<`function`>, ...> => (character[] | double[]);
type `odd` <integer[] | double> => logical[];
type `permutations` <double, double, character[], logical, logical> => class<`matrix`>;
type `permute` <integer[]> => integer[];
type `quantcut` <double[], double[], logical, ...> => class<`factor`>;
type `rdirichlet` <double, double[]> => class<`matrix`>;
type `roman2int` <character[]> => ^integer[];
type `roman2int.inner` <character> => any;
type `running` <double[], null | double[], class<`function`>, double, logical, logical, character[], logical, any, ...> => (class<`matrix`> | ^double[] | list<integer[]>);
type `scat` <...> => null;
type `setTCPNoDelay` <class<`socket`>, logical> => character;
type `smartbind` <..., any, null | double, character, logical> => class<`data.frame`>;
type `stars.pval` <double[]> => character[];
type `strmacro` <..., any, any> => class<`function`>;
