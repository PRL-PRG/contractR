type `binarise` <class<`array`> | double[]> => double[];
type `binary` <class<`array`> | class<`array`, `loder`> | class<`kernel`, `kernelArray`> | double[] | class<`matrix`>> => logical;
type `boxKernel` < > => class<`kernel`, `kernelFunction`>;
type `.checkAttribs` <class<`array`, `loder`> | class<`kernel`, `kernelArray`>, ...> => list<double[] | character[] | integer[] | character[]>;
type `.checkDpi` < > => double[];
type `closing` <class<`array`, `loder`>, class<`kernel`, `kernelArray`>> => class<`array`>;
type `components` <class<`matrix`> | double[], class<`kernel`, `kernelArray`> | double[], ...> => (class<`matrix`> | ^double[]);
type `components.default` <class<`matrix`> | double[], class<`kernel`, `kernelArray`> | double[], ...> => (class<`matrix`> | ^double[]);
type `dilate` <class<`array`> | class<`array`, `loder`> | class<`kernel`, `kernelArray`> | class<`matrix`> | double[], class<`kernel`, `kernelArray`> | double[]> => (class<`array`> | class<`matrix`> | double[]);
type `display` <class<`array`, `loder`>, ...> => null;
type `display.array` <class<`array`, `loder`>, null, ...> => null;
type `display.default` <class<`array`, `loder`>, logical, logical, logical, character[], ...> => null;
type `distanceTransform` <class<`kernel`, `kernelArray`> | double[], ...> => (class<`matrix`> | double[]);
type `distanceTransform.default` <class<`kernel`, `kernelArray`> | double[], double[], logical, ...> => (class<`matrix`> | double[]);
type `erode` <class<`array`> | class<`array`, `loder`> | class<`kernel`, `kernelArray`> | class<`matrix`> | double[], class<`kernel`, `kernelArray`> | double[]> => (class<`array`> | class<`matrix`> | double[]);
type `f` <class<`array`> | class<`array`, `loder`> | class<`matrix`>, class<`array`> | class<`kernel`, `kernelArray`>> => (class<`array`> | class<`matrix`>) | <double[], double[]> => class<`matrix`>;
type `filter` <character[]> => logical[];
type `FUN` <integer> => double[] | <integer> => class<`array`> | <character[]> => null | <integer> => double[] | <double[], double[]> => double[] | <double[], double[]> => double[] | <integer> => class<`kernel`, `kernelArray`> | <integer> => class<`array`> | <double[], double[]> => double[] | <integer> => double[] | <integer> => double[] | <integer> => double[];
type `gameOfLife` <class<`matrix`>, any, double, double, logical, double> => class<`matrix`>;
type `gaussianKernel` <double[], integer, double[], logical> => class<`kernel`, `kernelArray`>;
type `gaussianSmooth` <class<`matrix`>, double[]> => class<`matrix`>;
type `gosperGliderGun` < > => class<`matrix`>;
type `hitOrMiss` <class<`kernel`, `kernelArray`> | class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `isKernel` <class<`kernel`, `kernelArray`> | class<`kernel`, `kernelFunction`>> => logical;
type `isKernelArray` <class<`array`> | class<`kernel`, `kernelArray`> | class<`kernel`, `kernelFunction`> | class<`matrix`> | double[]> => logical;
type `isKernelFunction` <class<`array`> | class<`kernel`, `kernelArray`> | class<`kernel`, `kernelFunction`> | class<`matrix`> | double[]> => logical;
type `kernelArray` <class<`array`> | class<`matrix`> | double[]> => class<`kernel`, `kernelArray`>;
type `kernelFunction` <character, ...> => class<`kernel`, `kernelFunction`>;
type `lanczosKernel` < > => class<`kernel`, `kernelFunction`>;
type `meanFilter` <class<`array`, `loder`>, class<`kernel`, `kernelArray`>> => class<`array`>;
type `medianFilter` <class<`array`, `loder`>, class<`kernel`, `kernelArray`>> => class<`array`>;
type `mitchellNetravaliKernel` <double, double> => class<`kernel`, `kernelFunction`>;
type `mnKernel` <double, double> => class<`kernel`, `kernelFunction`>;
type `morph` <class<`array`> | class<`array`, `loder`> | class<`kernel`, `kernelArray`> | class<`matrix`> | double[], class<`array`> | class<`kernel`, `kernelArray`> | class<`matrix`> | double, ...> => (class<`array`> | class<`matrix`> | double[]);
type `morph.default` <class<`array`> | class<`array`, `loder`> | class<`kernel`, `kernelArray`> | class<`matrix`> | double[], class<`array`> | class<`kernel`, `kernelArray`> | class<`matrix`> | double, character, character[], null | double, null | double, null | integer[], null | double, logical, ...> => (class<`array`> | class<`matrix`> | double[]);
type `neighbourhood` <class<`matrix`>, double> => list<class<`matrix`> | double[]>;
type `opening` <class<`array`, `loder`> | class<`kernel`, `kernelArray`> | class<`matrix`> | class<`array`> | double[], class<`kernel`, `kernelArray`> | double[]> => (class<`array`> | class<`matrix`> | double[]);
type `plot.kernelArray` <class<`kernel`, `kernelArray`>, any, double, double, character, ...> => null;
type `plot.kernelFunction` <class<`kernel`, `kernelFunction`>, any, double[], double, character, ...> => null;
type `resample` <class<`array`, `loder`> | class<`kernel`, `kernelArray`> | class<`matrix`> | class<`array`> | double[], class<`matrix`> | double[] | list<double[]>, class<`kernel`, `kernelFunction`>, ...> => (class<`matrix`> | double[]);
type `resample.default` <class<`array`, `loder`> | class<`kernel`, `kernelArray`> | class<`matrix`> | class<`array`> | double[], class<`matrix`> | double[] | list<double[]>, class<`kernel`, `kernelFunction`>, character[], ...> => (class<`matrix`> | double[]);
type `rescale` <class<`array`, `loder`> | class<`kernel`, `kernelArray`> | double[], double[], class<`kernel`, `kernelFunction`>, ...> => (class<`matrix`> | double[]);
type `rotateKernel` <class<`matrix`>> => class<`matrix`>;
type `sampleKernelFunction` <class<`kernel`, `kernelFunction`>, double[]> => double[];
type `shapeKernel` <double[], integer, character[], logical, logical> => class<`kernel`, `kernelArray`>;
type `skeletonise` <class<`kernel`, `kernelArray`> | double[], any, character[]> => (class<`matrix`> | double[]);
type `sketch` <class<`array`, `loder`> | class<`kernel`, `kernelArray`>, logical, integer, double> => null;
type `sobelFilter` <class<`array`, `loder`>, any, double> => class<`array`>;
type `sobelKernel` <double, double> => class<`kernel`, `kernelArray`>;
type `symmetric` <class<`kernel`, `kernelArray`> | double[]> => logical;
type `threshold` <double[], any, character[], logical> => double[];
type `triangleKernel` < > => class<`kernel`, `kernelFunction`>;
