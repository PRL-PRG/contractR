type `add_column` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, ..., double | null, null> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `add_row` <class<`data.frame`, `tbl`, `tbl_df`>, ..., double | null, null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `append_pos` <character[], logical[]> => character[];
type `as.data.frame.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, null, logical, ...> => class<`data.frame`>;
type `as_tibble` <class<`data.frame`> | class<`matrix`> | list<integer[] | character[] | double[]>, ..., null, any, any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `as_tibble.data.frame` <class<`data.frame`>, null, ..., null, character[], null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `as_tibble.list` <list<any>, null, ..., integer | null, character[]> => class<`data.frame`, `tbl`, `tbl_df`>;
type `as_tibble.matrix` <class<`matrix`>, ..., null, null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `big_mark` <double, ...> => character;
type `bullets` <character, ..., character> => character;
type `cat_line` <...> => null;
type `check_minimal` <character[]> => character[];
type `check_names_before_after` <double | null, any> => (double | null);
type `check_names_before_after_character` <character[], character[]> => integer[];
type `check_names_df` <character[] | integer[], class<`data.frame`, `tbl`, `tbl_df`>> => integer[];
type `check_names_df_numeric` <integer[], class<`data.frame`, `tbl`, `tbl_df`>> => integer[];
type `check_names_non_na` <character[], any> => character[];
type `check_names_non_null` <character[], any> => character[];
type `check_unique` <character[]> => any;
type `check_valid_cols` <list<any>> => any;
type `collapse` <character[]> => character;
type `col_lengths` <list<any>> => integer[];
type `column_to_rownames` <class<`data.frame`, `tbl`, `tbl_df`>, character> => class<`data.frame`>;
type `commas` <character> => character;
type `compat_name_repair` <character[], null> => character[];
type `deframe` <class<`data.frame`, `tbl`, `tbl_df`>> => (integer[] | list<integer>);
type `describe_repair` <character[], character[]> => null;
type `dim_desc` <class<`data.frame`, `tbl`, `tbl_df`>> => character;
type `enframe` <double[] | list<double | integer[]>, character | null, character> => class<`data.frame`, `tbl`, `tbl_df`>;
type `error_column_names_must_be_unique` <character, logical> => character;
type `error_inconsistent_cols` <null, character[], integer[], character> => character;
type `error_time_column_must_be_posixct` <character> => character;
type `expand_vecs` <list<double[] | character[]>, integer> => list<double[] | character[]>;
type `extract_frame_data_from_dots` <...> => list<character[] | list<character | double> | character[] | list<character | integer[]> | character[] | list<double>>;
type `extract_frame_names_from_dots` <list<class<`formula`> | character | double | class<`formula`> | character | integer[] | class<`formula`> | double>> => character[];
type `fast_nrow` <class<`data.frame`, `tbl`, `tbl_df`>> => integer;
type `format_body` <class<`pillar_squeezed_colonnade`>> => class<`pillar_vertical`>;
type `format_comment` <character[], any> => character[];
type `format_extra_vars` <^character[]> => character;
type `format_footer` <class<`trunc_mat`, `trunc_mat_data.frame`, `trunc_mat_tbl`, `trunc_mat_tbl_df`>, class<`pillar_squeezed_colonnade`>> => character[];
type `format_footer_cols` <any, ^character[]> => (character | null);
type `format_footer_rows` <class<`trunc_mat`, `trunc_mat_data.frame`, `trunc_mat_tbl`, `trunc_mat_tbl_df`>> => (character | null);
type `format_header` <class<`trunc_mat`, `trunc_mat_data.frame`, `trunc_mat_tbl`, `trunc_mat_tbl_df`>> => character;
type `format.tbl` <class<`data.frame`, `tbl`, `tbl_df`>, ..., double | null, null | double, double | null> => character[];
type `format.trunc_mat` <class<`trunc_mat`, `trunc_mat_data.frame`, `trunc_mat_tbl`, `trunc_mat_tbl_df`>, null, ...> => character[];
type `format_v` <character[] | class<`POSIXct`, `POSIXt`> | double[]> => character[];
type `format_v.character` <character[]> => character[];
type `format_v.default` <class<`POSIXct`, `POSIXt`> | double[]> => character[];
type `frame_matrix` <...> => class<`matrix`>;
type `FUN` <double, ...> => character;
type `glimpse` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, null, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `glimpse.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, null, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `glimpse.tbl` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, null, ...> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `guess_nrow` <any, double | null> => double;
type `has_dim` <character[] | class<`factor`> | class<`latlon`> | double[]> => logical;
type `has_nonnull_names` <character[] | class<`factor`> | class<`latlon`> | double[]> => logical;
type `has_null_names` <character[] | class<`factor`> | class<`latlon`> | double[]> => logical;
type `has_rownames` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => logical;
type `has_tibble_arg` <character> => logical;
type `invalid_df` <character, character, ...> => character;
type `is_syntactic` <character[]> => logical[];
type `justify` <character[], logical, character> => character[];
type `limit_pos_range` <double, integer> => double;
type `lst` <...> => list<any>;
type `lst_quos` <class<`list`, `quosures`>, any> => list<any>;
type `lst_to_tibble` <list<any>, any, character[] | class<`function`> | class<`formula`>, any> => any;
type `make_syntactic` <character[]> => character[];
type `map` <class<`data.frame`, `tbl`, `tbl_df`> | pairlist | class<`data.frame`> | list<any>, class<`function`>, ...> => list<any>;
type `map2` <character[], list<character>, class<`function`>, ...> => list<character>;
type `map2_chr` <character[], list<character>, class<`function`>, ...> => character[];
type `map_chr` <character[] | integer[] | class<`data.frame`> | list<class<`pillar_type`>>, class<`function`>, ...> => character[];
type `map_int` <list<any>, class<`function`>, ...> => integer[];
type `map_lgl` <list<any>, class<`function`>, ...> => logical[];
type `map_mold` <character[] | integer[] | class<`data.frame`> | list<any>, class<`function`>, character | integer, ...> => (character[] | integer[]);
type `matrixToDataFrame` <class<`matrix`>> => class<`data.frame`>;
type `minimal_names` <character[] | null, any> => character[];
type `mult_sign` < > => character;
type `nchar_width` <character[]> => integer[];
type `needs_dim` <character[] | class<`data.frame`, `tbl`, `tbl_df`> | class<`factor`> | class<`latlon`> | class<`matrix`> | class<`POSIXlt`, `POSIXt`> | double[] | list<class<`latlon`> | class<`matrix`> | integer[]>> => logical;
type `new_tibble` <class<`data.frame`> | list<any>, ..., double, null, null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `pluralise` <character, ^character[]> => character;
type `pluralise_commas` <character, character, ...> => character;
type `pluralise_n` <character[], double> => character[];
type `pos_from_before_after` <double | null, null, integer> => double;
type `pos_from_before_after_names` <double | null, null, character[]> => double;
type `pre_dots` <character[]> => character[];
type `print.tbl` <class<`data.frame`, `tbl`, `tbl_df`>, ..., double | null, null | double, double | null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `raw_rownames` <class<`data.frame`>> => (character[] | ^integer[]);
type `rbind_at` <class<`data.frame`, `tbl`, `tbl_df`>, class<`data.frame`, `tbl`, `tbl_df`>, double> => class<`data.frame`, `tbl`, `tbl_df`>;
type `recycle_columns` <list<any>, double | null, integer[]> => any;
type `re_match` <character[], character, logical, ...> => class<`data.frame`>;
type `remove_rownames` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => (class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>);
type `repaired_names` <any, class<`formula`> | character[] | class<`function`>> => any;
type `repair_fun` <character[], logical, class<`function`>> => character[];
type `row.names<-.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `rownames_to_column` <class<`data.frame`>, character> => class<`data.frame`>;
type `safe_match` <character[], character[]> => integer[];
type `set_minimal_names` <list<any>> => list<any>;
type `set_repaired_names` <list<any>, character[] | class<`function`> | class<`formula`>> => any;
type `set_tibble_subclass` <list<any>, double, null> => class<`data.frame`, `tbl`, `tbl_df`>;
type `shrink_mat` <class<`data.frame`>, integer, double, logical> => list<class<`pillar_colonnade`> | double | class<`pillar_colonnade`> | integer>;
type `some` <list<character | double | integer[]>, class<`function`>, ...> => logical;
type `spaces_around` <character> => character;
type `strip_pos` <character[]> => character[];
type `str_trunc` <character[], double[]> => character[];
type `strwrap2` <character, double, double> => character[];
type `[.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, any, any, logical> => (class<`data.frame`, `tbl`, `tbl_df`> | integer[]);
type `[[.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, character | double, any, ..., logical> => (character[] | double | integer[] | null | list<class<`matrix`> | integer>);
type `$.tbl_df` <class<`data.frame`, `tbl`, `tbl_df`>, character> => (class<`latlon`> | double | integer[] | null);
type `tbl_sum` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>> => character;
type `tbl_sum.default` <class<`data.frame`>> => character;
type `tbl_sum.tbl` <class<`data.frame`, `tbl`, `tbl_df`>> => character;
type `tibble` <..., double | null, character[] | class<`formula`> | class<`function`>> => any;
type `tibble_glimpse_width` <null> => integer;
type `tibble_opt` <character> => (integer | null);
type `tibble_width` <double | null> => double;
type `tick` <character[]> => (character[] | logical[]);
type `tick_if_needed` <character[]> => character[];
type `transform` <character[]> => character[];
type `tribble` <...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `trunc_mat` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>, null | double, null | double, null | double> => (class<`trunc_mat`, `trunc_mat_data.frame`> | class<`trunc_mat`, `trunc_mat_data.frame`, `trunc_mat_tbl`, `trunc_mat_tbl_df`>);
type `turn_frame_data_into_frame_matrix` <character[], list<double>> => class<`matrix`>;
type `turn_frame_data_into_tibble` <character[], list<character | double | character | integer[]>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `turn_matrix_into_column_list` <class<`matrix`>> => list<character[] | double[] | character[] | list<integer[]>>;
type `two_to_three_dots` <character[]> => character[];
type `unique_names` <character[], logical, class<`function`>> => character[];
type `update_tibble_attrs` <list<any>, ...> => list<any>;
type `use_repair` <logical> => character;
type `validate_rectangular_shape` <character[], list<character | double | character | integer[] | double>> => null;
type `vec_restore_tbl_df_with_nr` <list<any>, class<`data.frame`, `tbl`, `tbl_df`>, integer> => class<`data.frame`, `tbl`, `tbl_df`>;
type `warningc` <...> => character;
