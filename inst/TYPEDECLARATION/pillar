type `align` <character[] | class<`pillar_ornament`>, double | null, character[]> => character[];
type `all_pillars_fit` <class<`data.frame`>> => logical;
type `assemble_decimal` <list<character[] | double[] | ^integer[]>> => character[];
type `assign_crayon_styles` < > => class<`function`>;
type `big_mark` <integer[], ...> => character[];
type `bind_rows` <list<class<`data.frame`>>> => class<`data.frame`>;
type `cat_line` <...> => null;
type `check_sigfig` <double> => integer;
type `colonnade` <class<`data.frame`> | list<character | integer[] | character[] | integer[]>, logical, null | double, ...> => class<`pillar_colonnade`>;
type `colonnade_compute_tiered_col_widths` <list<class<`pillar_capital`> | class<`pillar`>>, double> => class<`data.frame`>;
type `colonnade_compute_tiered_col_widths_df` <class<`data.frame`>, double, any> => class<`data.frame`>;
type `colonnade_distribute_space` <double, null, any> => integer;
type `colonnade_distribute_space_df` <class<`data.frame`>, double> => class<`data.frame`>;
type `colonnade_get_width` <class<`pillar_colonnade`>, double, integer> => class<`data.frame`>;
type `compat_lengths` < > => null;
type `compute_exp` <^double[], integer> => ^integer[];
type `compute_rhs_digits` <^double[], integer> => double[];
type `crayon_grey_0.6` <...> => character[];
type `crayon_grey_0.8` <...> => character[];
type `crayon_italic` <...> => character[];
type `crayon_red` <...> => character[];
type `crayon_underline` <...> => character[];
type `diff_to_trunc` <^double[]> => ^double[];
type `dim2` <class<`matrix`> | class<`table`> | class<`Date`> | class<`POSIXct`, `POSIXt`> | integer[]> => integer[];
type `dim_desc` <class<`Date`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | class<`table`> | integer[]> => character;
type `distribute_pillars` <double, double> => class<`data.frame`>;
type `expect_known_display` <any, character, ..., integer, logical> => class<`pillar_vertical`>;
type `extra_cols` <class<`pillar_squeezed_colonnade`>, ...> => character;
type `extra_cols.pillar_squeezed_colonnade` <class<`pillar_squeezed_colonnade`>, ..., double> => character;
type `filter` <character[]> => logical[];
type `flatten_colonnade` <class<`data.frame`> | list<character | integer[] | character[] | integer[]>> => list<any>;
type `format_dec` <list<character[] | double[] | ^integer[]>> => character[];
type `format_decimal` <^double[], double, ...> => list<character[] | double[] | ^integer[] | character | double | null | character[] | ^double[]>;
type `format_exp` <list<character[] | double[] | ^integer[]>> => character[];
type `format_full_pillar_title` <character> => character;
type `format_full_pillar_type` <integer[]> => character;
type `format_lhs` <list<character[] | double[] | ^integer[]>> => character[];
type `format_mantissa` <list<character[] | double[] | ^integer[]>> => character[];
type `format_neg` <list<character[] | double[] | ^integer[]>> => character[];
type `format.pillar` <class<`pillar`>, null, ...> => class<`pillar_vertical`>;
type `format.pillar_capital` <class<`pillar_capital`>, any, ...> => character[];
type `format.pillar_colonnade` <class<`pillar_colonnade`>, ...> => class<`pillar_vertical`>;
type `format.pillar_rif_shaft` <class<`pillar_rif_shaft`, `pillar_shaft`>, integer, ...> => class<`pillar_ornament`>;
type `format.pillar_rif_title` <class<`pillar_rif_title`>, any, ...> => character[];
type `format.pillar_rif_type` <class<`pillar_rif_type`>, any, ...> => character;
type `format.pillar_shaft_decimal` <class<`pillar_shaft`, `pillar_shaft_decimal`>, integer, ...> => class<`pillar_ornament`>;
type `format.pillar_shaft_simple` <class<`pillar_shaft`, `pillar_shaft_simple`>, double, ...> => class<`pillar_ornament`>;
type `format.pillar_squeezed_colonnade` <class<`pillar_squeezed_colonnade`>, ...> => class<`pillar_vertical`>;
type `format.pillar_title` <class<`pillar_title`>, any, ...> => character[];
type `format.pillar_type` <class<`pillar_type`>, double | null, ...> => character;
type `format_rhs` <list<character[] | double[] | ^integer[]>> => character[];
type `format_scientific` <^double[], double> => list<character[] | double[] | character | double | character[] | ^double[]>;
type `format_title` <character[], double> => character[];
type `format_type_sum` <character | class<`type_sum_accel`> | double, double | null, ...> => character;
type `format_type_sum.default` <character | double, double | null, ...> => character;
type `fun` <character[]> => character[] | <any, any> => null | <...> => class<`matrix`> | <character[] | double[]> => character[] | <...> => double | <^character[]> => character[];
type `FUN` <list<list<character>>> => character[] | <list<list<character[]>>> => list<list<character[]>> | <class<`pillar`> | class<`pillar_capital`>> => integer[] | <class<`data.frame`>> => list<list<character[]>> | <character> => character | <class<`pillar`> | class<`pillar_capital`> | list<list<character[] | double[] | ^integer[] | character[] | double[] | character | double | null | character | double | character[] | ^double[]>>> => integer[] | <^double[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | null | ^character[] | class<`accel`> | class<`factor`> | class<`pillar_vertical`>, ...> => (class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`>) | <^character[] | class<`accel`> | class<`Date`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[], null | character, ...> => class<`pillar_capital`> | <character[]> => character[] | <class<`pillar_capital`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`> | class<`pillar_title`> | class<`pillar_type`> | class<`pillar_rif_title`> | class<`pillar_rif_type`> | list<any>> => integer | <class<`pillar_capital`> | class<`pillar_rif_shaft`, `pillar_shaft`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`> | class<`pillar_title`> | class<`pillar_type`> | class<`pillar_colonnade`> | class<`pillar_rif_title`> | class<`pillar_rif_type`> | class<`pillar`> | list<any>> => (integer | null);
type `get_decimal_width` <list<any>> => double;
type `get_ellipsis` < > => character;
type `get_extent` <character[] | class<`pillar_ornament`> | class<`pillar_vertical`>> => integer[];
type `get_max_extent` <character[] | class<`pillar_vertical`>> => integer;
type `get_min_title_width` <integer> => integer;
type `get_min_width` <class<`pillar_capital`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`> | class<`pillar_title`> | class<`pillar_type`> | class<`pillar_rif_title`> | class<`pillar_rif_type`> | list<any>> => integer;
type `get_min_widths` <class<`pillar`> | class<`pillar_capital`> | list<list<character[] | double[] | ^integer[] | character[] | double[] | character | double | null | character | double | character[] | ^double[]>>> => integer[];
type `get_pillar_type` <^character[] | class<`Date`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[] | class<`accel`>> => (character | class<`type_sum_accel`>);
type `get_rowid_from_colonnade` <class<`pillar_colonnade`>> => class<`pillar`>;
type `get_tier_widths` <double, any, integer, integer> => double;
type `get_width` <class<`pillar_capital`> | class<`pillar_rif_shaft`, `pillar_shaft`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`> | class<`pillar_title`> | class<`pillar_type`> | class<`pillar_colonnade`> | class<`pillar_rif_title`> | class<`pillar_rif_type`> | class<`pillar`> | list<any>> => (integer | null);
type `get_widths` <class<`pillar`> | class<`pillar_capital`>> => integer[];
type `has_color` <logical> => logical;
type `is_ambiguous_string` <^character[]> => logical[];
type `is_syntactic` <null | character> => logical[];
type `is_vector_s3` <class<`Date`> | class<`function`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | integer[]> => logical;
type `is_vector_s3.Date` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => logical;
type `is_vector_s3.default` <class<`function`> | class<`matrix`> | integer[]> => logical;
type `is_vector_s3.POSIXct` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => logical;
type `make_style_fast` <...> => class<`function`>;
type `make_style_fast_16` <...> => class<`function`>;
type `map` <double[] | class<`pillar_squeezed_colonnade`> | list<any>, class<`function`>, ...> => list<any>;
type `map2` <double[] | class<`data.frame`> | list<any>, double[] | character[] | list<any>, class<`function`>, ...> => list<any>;
type `map2_chr` <list<integer[]>, character, class<`function`>, ...> => character;
type `map_chr` <list<character[]>, class<`function`>, ...> => character[];
type `map_chr_named` <list<integer[]>, class<`function`>> => character;
type `map_int` <class<`pillar`> | class<`pillar_capital`> | list<integer[] | list<character[] | double[] | ^integer[] | character[] | double[] | character | double | null | character | double | character[] | ^double[]>>, class<`function`>, ...> => integer[];
type `map_mold` <class<`pillar`> | class<`pillar_capital`> | list<character[] | integer[] | list<character[] | double[] | ^integer[] | character[] | double[] | character | double | null | character | double | character[] | ^double[]>>, class<`function`>, character | integer, ...> => (character[] | integer[]);
type `map_named` <list<character | integer[]>, class<`function`>> => list<class<`pillar_capital`>>;
type `mult_sign` < > => character;
type `new_colonnade_sqeezed` <list<list<list<character[]>>>, class<`pillar_colonnade`>, integer[]> => class<`pillar_squeezed_colonnade`>;
type `new_ornament` <character[], null | double, character> => class<`pillar_ornament`>;
type `new_pillar` <class<`pillar_capital`>, class<`pillar_rif_shaft`, `pillar_shaft`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`>, null | double> => class<`pillar`>;
type `new_pillar_capital` <class<`pillar_rif_title`> | class<`pillar_title`>, class<`pillar_rif_type`> | class<`pillar_type`>> => class<`pillar_capital`>;
type `new_pillar_shaft` <list<any>, ..., double, integer | null, character, null> => (class<`pillar_rif_shaft`, `pillar_shaft`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`>);
type `new_pillar_shaft_simple` <^character[] | null | class<`pillar_vertical`>, ..., double, character, null | integer, null | character, double> => class<`pillar_shaft`, `pillar_shaft_simple`>;
type `new_pillar_title` <character[] | null, ...> => class<`pillar_title`>;
type `new_pillar_type` <^character[] | class<`accel`> | class<`Date`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[], ...> => class<`pillar_type`>;
type `new_vertical` <^character[], ..., null> => class<`pillar_vertical`>;
type `obj_sum` <class<`Date`> | class<`function`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | integer[]> => character;
type `obj_sum.default` <class<`Date`> | class<`function`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | integer[]> => character;
type `pillar` <^character[] | class<`accel`> | class<`Date`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[], null | character, null | double, ...> => class<`pillar`>;
type `pillar_capital` <^character[] | class<`accel`> | class<`Date`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | ^double[], null | character, ...> => class<`pillar_capital`>;
type `pillar_format_parts` <class<`pillar`>, double, ...> => list<character[]>;
type `pillar_get_width` <class<`pillar`>, null> => integer;
type `pillar_na` <logical> => character;
type `pillar_shaft` <^double[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | null | ^character[] | class<`accel`> | class<`factor`> | class<`pillar_vertical`>, ...> => (class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`>);
type `pillar_shaft.character` <^character[], ..., integer> => class<`pillar_shaft`, `pillar_shaft_simple`>;
type `pillar_shaft.Date` <class<`Date`>, ...> => class<`pillar_shaft`, `pillar_shaft_simple`>;
type `pillar_shaft.default` <class<`accel`>, ...> => class<`pillar_shaft`, `pillar_shaft_simple`>;
type `pillar_shaft.factor` <class<`factor`>, ...> => class<`pillar_shaft`, `pillar_shaft_simple`>;
type `pillar_shaft.logical` <^logical[] | null, ...> => class<`pillar_shaft`, `pillar_shaft_simple`>;
type `pillar_shaft.numeric` <^double[], ..., double> => class<`pillar_shaft`, `pillar_shaft_decimal`>;
type `pillar_shaft.pillar_vertical` <class<`pillar_vertical`>, ..., integer, double> => class<`pillar_shaft`, `pillar_shaft_simple`>;
type `pillar_shaft.POSIXt` <class<`POSIXct`, `POSIXt`>, ...> => class<`pillar_shaft`, `pillar_shaft_simple`>;
type `print.pillar` <class<`pillar`> | class<`pillar_colonnade`>, ...> => class<`pillar_vertical`>;
type `print.pillar_colonnade` <class<`pillar`> | class<`pillar_colonnade`>, ...> => class<`pillar_vertical`>;
type `print.pillar_vertical` <class<`pillar_vertical`>, ...> => class<`pillar_vertical`>;
type `register_s3_method` <character, character, character, null> => null;
type `rif_capital` <logical, logical, ...> => class<`pillar_capital`>;
type `rif_shaft` <integer, ...> => class<`pillar_rif_shaft`, `pillar_shaft`>;
type `rif_title` <logical, ...> => class<`pillar_rif_title`>;
type `rif_type` <logical, ...> => class<`pillar_rif_type`>;
type `rowidformat` <integer, logical, logical, ...> => class<`pillar`>;
type `safe_signif` <^double[], double[]> => ^double[];
type `set_min_width` <class<`pillar_capital`> | class<`pillar_rif_shaft`, `pillar_shaft`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`> | class<`pillar_title`> | class<`pillar_type`>, integer | null> => (class<`pillar_capital`> | class<`pillar_rif_shaft`, `pillar_shaft`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`> | class<`pillar_title`> | class<`pillar_type`>);
type `set_width` <class<`pillar`> | class<`pillar_capital`> | class<`pillar_colonnade`> | class<`pillar_ornament`> | class<`pillar_rif_shaft`, `pillar_shaft`> | class<`pillar_rif_title`> | class<`pillar_rif_type`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`> | class<`pillar_title`> | class<`pillar_type`> | list<any>, null | double> => (class<`pillar`> | class<`pillar_capital`> | class<`pillar_colonnade`> | class<`pillar_ornament`> | class<`pillar_rif_shaft`, `pillar_shaft`> | class<`pillar_rif_title`> | class<`pillar_rif_type`> | class<`pillar_shaft`, `pillar_shaft_decimal`> | class<`pillar_shaft`, `pillar_shaft_simple`> | class<`pillar_title`> | class<`pillar_type`> | list<any>);
type `size_sum` <class<`Date`> | class<`function`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | integer[]> => character;
type `spaces_around` <character> => character;
type `split_decimal` <^double[], double, logical> => list<any>;
type `squeeze` <class<`pillar_colonnade`>, double | null, ...> => class<`pillar_squeezed_colonnade`>;
type `str_trunc` <character[], double> => character[];
type `style_bold` <character[]> => character[];
type `style_hint` <double[] | ^character[] | class<`type_sum_accel`>> => character[];
type `style_na` <character> => character;
type `style_neg` <double[] | ^character[] | class<`type_sum_accel`>> => character[];
type `style_num` <character[], logical[], logical[]> => character[];
type `style_rowid` <character[]> => character[];
type `style_star` <character[]> => character[];
type `style_subtle` <double[] | ^character[] | class<`type_sum_accel`>> => character[];
type `style_subtle_num` <character[] | double[], logical[]> => character[];
type `style_title` <character[]> => character[];
type `style_type` <character> => character;
type `supernum` <^integer[]> => character[];
type `tick` <character[] | null> => logical[];
type `tick_if_needed` <character | null> => (character | null);
type `type_sum` <^character[] | class<`Date`> | class<`factor`> | class<`function`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | ^double[] | class<`accel`>> => (character | class<`type_sum_accel`>);
type `type_sum.default` <^character[] | class<`Date`> | class<`function`> | class<`matrix`> | class<`POSIXct`, `POSIXt`> | ^double[]> => character;
type `type_sum.factor` <class<`factor`>> => character;
type `vec_is` <...> => logical;
