type `as.character.shingleLevel` <class<`shingleLevel`>, ...> => character[];
type `as.factorOrShingle` <character[] | class<`factor`> | class<`shingle`> | double[] | null, integer[], logical> => (class<`factor`> | class<`shingle`>);
type `as.shingle` <class<`shingle`> | double[] | null> => class<`shingle`>;
type `barchart` <class<`formula`> | class<`array`> | class<`matrix`> | class<`table`> | double[], any, ...> => class<`trellis`>;
type `barchart.array` <class<`array`> | class<`matrix`>, null, ...> => class<`trellis`>;
type `barchart.formula` <class<`formula`>, class<`data.frame`> | environment | list<integer[] | class<`factor`>>, character, character, double, ...> => class<`trellis`>;
type `barchart.matrix` <class<`array`> | class<`matrix`>, null, ...> => class<`trellis`>;
type `barchart.numeric` <double[], null, character, ...> => class<`trellis`>;
type `barchart.table` <class<`table`>, null, logical, double, logical, ..., logical> => class<`trellis`>;
type `bwplot` <class<`formula`> | double[], any, ...> => class<`trellis`>;
type `bwplot.formula` <class<`formula`>, class<`data.frame`> | environment | null | list<integer[] | class<`factor`>> | list<integer[]> | list<double[] | class<`shingle`> | class<`factor`>>, logical, logical, logical | list<character> | list<double>, character | double, character | class<`function`>, null> => class<`trellis`>;
type `bwplot.numeric` <double[], null, character, ...> => class<`trellis`>;
type `calculateAxisComponents` <double[], ..., any, any, logical | null, any> => (list<double[] | character[]> | list<character[] | double[]>);
type `calculateGridLayout` <class<`trellis`>, double, double, any, list<double | character | null>, list<double | character | null>, null | class<`gDesc`, `grob`, `text`>, null> => list<class<`layout`> | list<double[]>>;
type `canonical.theme` <any, logical> => list<list<any>>;
type `checkArgsAndCall` <class<`function`>, list<any>> => (class<`gDesc`, `grob`, `rect`> | class<`path`, `vpPath`> | double[] | null);
type `chooseFace` <null, double> => double;
type `cloud` <class<`formula`> | class<`matrix`> | class<`table`>, any, ...> => class<`trellis`>;
type `cloud.formula` <class<`formula`>, class<`data.frame`> | null, logical, logical, logical, double[], double, character> => class<`trellis`>;
type `cloud.matrix` <class<`matrix`>, null, character, character, any, ..., any, any> => class<`trellis`>;
type `cloud.table` <class<`table`>, null, logical, character, character[], ...> => class<`trellis`>;
type `complete_names` <list<double> | list<double | character> | list<double | integer[] | character[]> | list<class<`Date`>> | list<double[] | character[]> | list<logical | character> | list<character | double> | list<character | list<double[]>> | list<character> | list<character | double[]> | list<character | list<double[] | character[] | double[] | character[] | double[]>> | list<character | list<double[] | character[] | double[] | character[] | logical>> | list<character | double[] | list<double[]>> | list<character | list<double[] | character[] | double[]>> | list<character | double | list<double[] | character[] | double[] | character[]>> | list<double | character | list<logical | null>>, list<character | double | null>, logical> => (list<double> | list<double | character> | list<double | integer[] | character[]> | list<class<`Date`>> | list<double[] | character[]> | list<logical | character> | list<character | double> | list<character | list<double[]>> | list<character> | list<character | double[]> | list<character | list<double[] | character[] | double[] | character[] | double[]>> | list<character | list<double[] | character[] | double[] | character[] | logical>> | list<character | double[] | list<double[]>> | list<character | list<double[] | character[] | double[]>> | list<character | double | list<double[] | character[] | double[] | character[]>> | list<double | character | list<logical | null>>);
type `compute.layout` <double[] | null, integer[], logical> => double[];
type `compute.packet` <list<class<`factor`>> | list<class<`shingle`>> | list<class<`shingle`> | class<`factor`>> | list<class<`factor`> | class<`shingle`>>, double[]> => logical[];
type `cond.orders` <list<any> | class<`trellis`>, ...> => (list<integer[] | list<integer[]>> | list<integer | list<integer[]>> | list<integer | list<integer>>);
type `construct.legend` <null | list<list<class<`gDesc`, `grob`, `text`>>> | list<list<character | double | list<logical | list<double | list<integer[]>>> | class<`gDesc`, `grob`, `text`>>>, null | list<any>, character> => (null | list<list<character | double | list<logical | list<double | list<integer[]>>> | class<`gDesc`, `grob`, `text`>>> | list<list<character | list<logical | list<double[] | character[]>>>> | list<list<character | list<logical | list<double[] | character | class<`function`>>>>> | list<list<character | list<logical | list<double[] | character>> | character | double | list<logical | list<double | list<integer[]>>> | class<`gDesc`, `grob`, `text`>>> | list<list<character | list<logical | list<double[] | character>>>> | list<list<character | list<logical | list<character | double[]>>>> | list<list<character | list<logical | list<any>>>> | list<list<character | list<logical | list<double | list<character[] | double[] | character[]>>>>> | list<list<character | list<logical | list<character | double | list<double[] | character[] | character[]>>>>>);
type `construct.scales` <logical, character, double[], double, logical, logical, logical | character, double[]> => any;
type `contourplot` <class<`formula`>, class<`data.frame`>, ...> => class<`trellis`>;
type `contourplot.formula` <class<`formula`>, class<`data.frame`>, character | class<`function`>, any, double, logical, logical, logical> => class<`trellis`>;
type `cupdate` <double[], integer[]> => double[];
type `current.column` <character> => integer;
type `current.panel.limits` <character> => list<double[]>;
type `current.row` <character> => integer;
type `.defaultLatticeOptions` < > => list<any>;
type `.defaultLatticePrefixStatus` < > => list<double>;
type `.defaultLatticeStatus` < > => list<double>;
type `densityplot` <class<`formula`> | double[], any, ...> => class<`trellis`>;
type `densityplot.formula` <class<`formula`>, class<`data.frame`> | environment | null | list<integer[] | class<`factor`>>, logical, logical, logical, character, character, null> => class<`trellis`>;
type `densityplot.numeric` <double[], null, character, ...> => class<`trellis`>;
type `do.breaks` <double[], double> => double[];
type `dotplot` <class<`formula`> | class<`array`> | class<`matrix`> | class<`table`> | double[], any, ...> => class<`trellis`>;
type `dotplot.array` <class<`array`> | class<`matrix`>, null, ...> => class<`trellis`>;
type `dotplot.formula` <class<`formula`>, class<`data.frame`> | environment | list<integer[] | class<`factor`>> | list<integer[]> | list<double[] | class<`shingle`> | class<`factor`>>, character, character, ...> => class<`trellis`>;
type `dotplot.matrix` <class<`array`> | class<`matrix`>, null, ...> => class<`trellis`>;
type `dotplot.numeric` <double[], null, character, ...> => class<`trellis`>;
type `dotplot.table` <class<`table`>, null, logical, ..., logical> => class<`trellis`>;
type `drawInViewport` <class<`frame`, `gDesc`, `gTree`, `grob`> | class<`gDesc`, `grob`, `text`>, class<`viewport`>> => class<`path`, `vpPath`>;
type `equal.count` <double[] | class<`ts`>, ...> => class<`shingle`>;
type `evaluate.legend` <null | list<list<character | list<logical | list<double[] | character>>>>> => (null | list<list<class<`frame`, `gDesc`, `gTree`, `grob`>>>);
type `experimentalOptions` < > => list<list<list<double | character | null>>>;
type `extend.limits` <class<`POSIXct`, `POSIXt`> | character[] | ^double[], any, any, any> => (class<`POSIXct`, `POSIXt`> | double[] | null);
type `formattedTicksAndLabels` <double[], ...> => (list<double[] | character[]> | list<character[] | double[]>);
type `formattedTicksAndLabels.default` <double[], logical, any, logical, logical, ..., any, null> => (list<double[] | character[]> | list<character[] | double[]>);
type `getFunctionOrName` <class<`function`> | character | logical | null> => (class<`function`> | logical | null);
type `getLabelList` <null | character | logical, any, any> => (null | list<character | double>);
type `grobFromLabelList` <list<character | double> | null, any, double> => (class<`gDesc`, `grob`, `text`> | null);
type `hasGroupNumber` < > => logical;
type `hist.constructor` <double[], double[], logical, logical, ...> => class<`histogram`>;
type `histogram` <class<`formula`>, any, ...> => class<`trellis`>;
type `histogram.formula` <class<`formula`>, class<`data.frame`> | null, logical, logical, logical, character | double, character | class<`function`>, null> => class<`trellis`>;
type `is.characterOrExpression` <character | logical> => logical;
type `is.shingle` <class<`AsIs`> | ^double[] | class<`by`> | class<`Date`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | class<`shingle`> | class<`ts`> | null> => logical;
type `larrows` <double, double, double, double, null, null, double, double> => class<`gDesc`, `grob`, `segments`>;
type `lattice.getOption` <character> => (character | class<`function`> | double | null | list<any>);
type `lattice.getStatus` <character, null | character> => (character | class<`matrix`> | double[] | null);
type `lattice.options` <...> => list<any>;
type `latticeParseFormula` <class<`formula`>, null | class<`data.frame`> | list<double[] | class<`shingle`> | class<`factor`>> | list<integer[] | class<`factor`>> | environment | list<double[] | character[]> | list<integer[]>, double, integer[], null | class<`factor`> | integer[] | character[], logical, any, logical> => list<any>;
type `lattice.setStatus` <..., character | null, logical> => null;
type `layoutNCol` <class<`layout`>> => integer;
type `layoutNRow` <class<`layout`>> => integer;
type `level.colors` <double[], double[], character[] | class<`function`>, logical, ...> => character[];
type `levelplot` <class<`formula`> | class<`matrix`>, any, ...> => class<`trellis`>;
type `levelplot.formula` <class<`formula`>, class<`data.frame`> | null, logical, logical, character | double, character | class<`function`>, null, list<any>> => class<`trellis`>;
type `levelplot.matrix` <class<`matrix`>, null, character, ..., any, any, integer[], integer[]> => class<`trellis`>;
type `limits.and.aspect` <character, null | class<`function`>, logical, any, any, any, character, any> => any;
type `limitsFromLimitlist` <logical, any, character, list<character[]> | list<^double[] | character[]> | list<character | ^double[]> | list<class<`Date`>> | list<class<`POSIXct`, `POSIXt`>> | list<^double[]>, any, any, any, any> => any;
type `llines` <double[], ...> => null;
type `llines.default` <double[], double[], character, character, double, double, double, ...> => null;
type `lower.saturation` <character[], double> => character[];
type `lplot.xy` <list<double[] | null> | list<double | null>, character, double[], double, character[], double[], double, double> => null;
type `lpoints` <double[], ...> => null;
type `lpoints.default` <double[], double[], character, character[], double[], double, character, double> => null;
type `lpretty` <double[], ...> => double[];
type `lrect` <any, any, any, any, double[], double, double[], double[]> => class<`gDesc`, `grob`, `rect`>;
type `lsegments` <double[], double[], double[], double[], null, null, character, double> => class<`gDesc`, `grob`, `segments`>;
type `ltransform3dMatrix` <list<double>, class<`matrix`>> => class<`matrix`>;
type `ltransform3dto3d` <class<`matrix`>, class<`matrix`>, double> => class<`matrix`>;
type `make.groups` <...> => class<`data.frame`>;
type `make.list.from.intervals` <class<`matrix`>> => list<any>;
type `make.par.list` <character[], list<character[]> | double | list<double> | character[] | integer[], any, any, any, logical> => (list<character[]> | list<double>);
type `needAutoKey` <logical | list<double> | list<logical | character> | list<character>, class<`factor`> | null> => logical;
type `oneway` <class<`formula`>, class<`data.frame`>, class<`function`>, double> => list<double[]>;
type `packet.number` <character> => double;
type `packet.panel.default` <double[], list<integer[]>, double, integer, integer, logical, logical> => double[];
type `panel.axis` <character, double[], character[] | logical, logical, logical, logical, logical, logical> => null;
type `panel.lines` <...> => null;
type `panel.number` <character> => double;
type `panel.points` <...> => null;
type `panel.rect` <...> => class<`gDesc`, `grob`, `rect`>;
type `panel.xyplot` <double[], double[], character, null, double, any, any, character> => null;
type `parallel` <class<`formula`>, class<`data.frame`>, ...> => class<`trellis`>;
type `parallel.formula` <class<`formula`>, class<`data.frame`>, logical, character, list<double>, character, null, list<any>> => class<`trellis`>;
type `parallelplot` <class<`formula`>, class<`data.frame`>, ...> => class<`trellis`>;
type `parallelplot.formula` <class<`formula`>, class<`data.frame`>, logical, character, list<double>, character, null, list<any>> => class<`trellis`>;
type `paste.and.draw` <any, any, character, logical, logical, logical, logical, class<`gpar`>> => (class<`gDesc`, `grob`, `text`> | null);
type `plot.shingle` <class<`shingle`>, class<`function`>, character, character, ...> => class<`trellis`>;
type `plot.trellis` <class<`trellis`>, null, null, logical, logical, class<`function`>, null, list<double | character | null>> => null;
type `prepanel.default.qqmath` <double[], null, class<`function`>, any, null | class<`factor`>, any, ..., double> => list<double[]>;
type `prepanel.loess` <double[], double[], double, double, character[], double, logical, ...> => list<double[]>;
type `prepanel.null` < > => list<^double[] | null>;
type `primName` <character, character, character, double> => character;
type `print.shingle` <class<`shingle`>, logical, ...> => class<`shingle`>;
type `print.shingleLevel` <class<`shingleLevel`>, ...> => class<`shingleLevel`>;
type `print.trellis` <class<`trellis`>, ...> => class<`trellis`>;
type `qq` <class<`formula`>, class<`data.frame`>, ...> => class<`trellis`>;
type `qq.formula` <class<`formula`>, class<`data.frame`>, double, character, null, list<any>, logical, null> => class<`trellis`>;
type `qqmath` <class<`formula`>, any, ...> => class<`trellis`>;
type `qqmath.formula` <class<`formula`>, class<`data.frame`> | null | list<double[] | character[]>, logical, logical, class<`function`>, null, logical | list<character>, character | double> => class<`trellis`>;
type `rearrangeUnit` <class<`unit`> | class<`unit`, `unit.list`>, double, class<`unit`, `unit.arithmetic`>> => class<`unit`, `unit.list`>;
type `rfs` <list<double[]>, double[], character, null, class<`function`>, class<`function`>, null, logical> => class<`trellis`>;
type `Rows` <list<double[] | character[]>, integer[]> => list<double[] | character[]>;
type `scale.limits` <class<`factor`> | class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`array`> | double[]> => (character[] | class<`Date`> | class<`POSIXct`, `POSIXt`> | double[]);
type `shingle` <double[] | null, double[]> => class<`shingle`>;
type `[.shingle` <class<`shingle`>, logical[], logical> => class<`shingle`>;
type `show.settings` <null> => class<`trellis`>;
type `simpleKey` <character[], logical, logical, logical, character, double, double, double> => list<any>;
type `simpleTheme` <any, any, any, double, any, any, any, any> => list<list<any>>;
type `splom` <class<`formula`> | class<`data.frame`>, any, ...> => class<`trellis`>;
type `splom.data.frame` <class<`data.frame`>, null, ..., any, logical> => class<`trellis`>;
type `splom.formula` <class<`formula`>, class<`data.frame`> | environment | null, logical, double | character, list<double>, character | class<`function`>, null, list<any>> => class<`trellis`>;
type `standard.theme` <any, logical> => list<list<any>>;
type `strip.custom` <...> => class<`function`>;
type `stripplot` <class<`formula`>, any, ...> => class<`trellis`>;
type `stripplot.formula` <class<`formula`>, class<`data.frame`> | null | list<double[] | class<`shingle`> | class<`factor`>>, character | class<`function`>, null, ...> => class<`trellis`>;
type `summary.trellis` <class<`trellis`>, ...> => class<`summary.trellis`>;
type `tmd` <class<`trellis`>, ...> => class<`trellis`>;
type `tmd.trellis` <class<`trellis`>, character, character, class<`function`>, class<`function`>, ...> => class<`trellis`>;
type `[.trellis` <class<`trellis`>, any, any, ..., logical> => class<`trellis`>;
type `trellis.currentLayout` <character, character> => class<`matrix`>;
type `trellis.device` <character | class<`function`>, logical, null, logical, logical, ...> => null;
type `trellis.focus` <character, double, double, null, logical, any, ..., any> => any;
type `trellis.grobname` <character, character, double, any, any, any, any, character> => character;
type `trellis.last.object` <..., null> => any;
type `trellis.par.get` <character | null> => list<any>;
type `trellis.par.set` <any, any, ..., any, logical, integer> => null;
type `trellis.skeleton` <class<`formula`>, list<class<`factor`>> | list<class<`shingle`>> | list<class<`shingle`> | class<`factor`>> | list<class<`factor`> | class<`shingle`>>, double | character, logical, list<double[]>, null | list<double | list<integer[]>> | list<double | list<character[] | double[] | character[]>> | list<character | double | list<double[] | character[] | character[]>>, null | list<list<class<`gDesc`, `grob`, `text`>>>, class<`function`> | null> => list<list<any>>;
type `trellis.unfocus` < > => any;
type `trellis.vpname` <character, any, any, character[], logical, character | null> => character;
type `updateList` <list<any>, list<any>> => list<any>;
type `update.trellis` <class<`trellis`>, any, any, any, any, any, any, any> => class<`trellis`>;
type `which.packet` <character> => (double[] | null);
type `wireframe` <class<`formula`> | class<`matrix`>, any, ...> => class<`trellis`>;
type `wireframe.formula` <class<`formula`>, class<`data.frame`> | null, character, character, ...> => class<`trellis`>;
type `wireframe.matrix` <class<`matrix`>, null, character, any, ..., any, any, integer[]> => class<`trellis`>;
type `xscale.components.default` <double[], double, null, logical, ...> => list<double[] | list<list<double[] | double[] | character[]>>>;
type `xyplot` <class<`formula`> | class<`matrix`, `mts`, `ts`> | class<`ts`>, any, ...> => any;
type `xyplot.formula` <class<`formula`>, class<`data.frame`> | null | list<integer[] | class<`factor`>>, logical, logical, logical | list<logical> | list<logical | character>, character | double, character | class<`function`>, null | class<`function`>> => any;
type `xyplot.ts` <class<`matrix`, `mts`, `ts`> | class<`ts`>, null, character[] | double | list<character>, ..., logical, logical | list<double>, character[] | list<character[]>, null | list<character>> => class<`trellis`>;
