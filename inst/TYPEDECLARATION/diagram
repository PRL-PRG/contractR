type `bentarrow` <double[], double[], double, double, character | double, character | double, double | integer[], double, character, character | double | null> => ^double[];
type `circle` <integer, double, character> => null;
type `coordinates` <null | ^double[], double, double, double, logical, double> => ^double[];
type `curvedarrow` <double[], double[], double, double, character | double, character | double, double, double, double, logical, double[], double | null> => double[];
type `en.Amplifier` <double[], double, null, double | symbol, double | symbol, null> => null;
type `en.Capacitator` <double[], double, double, null | character, double, double, logical, null> => null;
type `en.Ground` <double[], double, double, double, double, null> => null;
type `en.Node` <double[], double, character, double, double, null> => null;
type `en.Resistor` <double[], double, double, null | character | double | language, double, double, logical, null> => null;
type `en.Signal` <double[], double, null | expression, double, double, null> => null;
type `en.Transistor` <double[], double[], double[], double[], double, null, double, double, null> => null;
type `filter` <character[]> => logical[];
type `openplotmat` <null, character | double[] | null> => null;
type `Parse` <character, null> => expression;
type `plotmat` <^double[] | ^character[] | struct<>, null | ^double[], null | ^double[], null | character[] | integer[] | expression, double, double, double, character, double, character, double, character[], character, double | integer[], double, character, double, double, double> => struct<`arr`:struct<`row`:integer[], `col`:integer[]>, `comp`:^double[], `radii`:^double[], `rect`:^double[]>;
type `plotweb` <^double[], null, double, logical, double, character, character, character, logical, double[], null, null, null, logical, double, null, character, ^character[], logical> => struct<`mar`:double[]>;
type `Rep` <null | character | double, integer | symbol> => null | character[] | double[];
type `sarr` <double[], double[], logical> => null | ^double[];
type `segmentarrow` <double[], double[], double, double, character | double, character | symbol | double, double | integer[], double, character, double, character | double | null> => ^double[];
type `selfarrow` <double[], double, double, character | double, double, character, double[], double, double, null | character> => double[];
type `shadowbox` <character, double[] | symbol, double | symbol, double | symbol, double, character | language, character | language, character | language, double | language, double | symbol, double, double, double, symbol | double, double, null> => null;
type `splitarrow` <double[], ^double[], double, double, character | double, character | double, double | integer[], double, null | double[], double, null> => ^double[];
type `straightarrow` <double[], double[], double, double, character | double, character | symbol | double, double, logical, double[], character | double | null> => double[];
type `textdiamond` <double[], double, double, double, double, double[], character, character, character, character, double, double> => null;
type `textellipse` <double[], double, double, double, double, double[], character[], character, character, character, double, double, double | null> => null;
type `textempty` <double[], character, double[], character | integer, double, null> => null;
type `texthexa` <double[], double, double, double, double, double[], character, character, character, character, double, double> => null;
type `textmulti` <double[], double, double, double, double, double[], character, character, character, character, double, double, double> => null;
type `textparallel` <double[], double, double, double, double, double[], character, character, character, character, double, double, double> => null;
type `textplain` <double[], double | symbol, character[] | expression | integer, double[], double | null> => null;
type `textrect` <double[], double, double, double, double, double[], character | integer, character, character, character, double, double | null> => null;
type `textround` <double[], double, double, double, double, double[], character, character, character, character, double, double, double> => null;
type `tpos` <double[], double, double> => struct<`x`:double, `y`:double, `adj`:double[]>;
type `treearrow` <^double[], ^double[], double, double, character | double, character | double | symbol, integer[] | double, double, double, character, null> => null | ^double[];
