type `addOptPathEl` <class<`OptPath`, `OptPathDF`>, list<double[] | character | double | character | double>, double[], any, any, null, null, null, any> => null;
type `addOptPathEl.OptPathDF` <class<`OptPath`, `OptPathDF`>, list<double[] | character | double | character | double>, double[], double, double | null, null, null, null, logical> => null;
type `applyTrafos` <class<`data.frame`>, list<class<`Param`>>> => class<`data.frame`>;
type `as.data.frame.OptPathDF` <class<`OptPath`, `OptPathDF`>, null, logical, logical, logical, logical, integer[], ^integer[], ...> => class<`data.frame`>;
type `checkExpressionFeasibility` <class<`LearnerParamSet`, `ParamSet`> | class<`ParamSet`>, character[]> => logical;
type `checkLength` <class<`Param`>, double[]> => logical;
type `checkParamSet` <class<`ParamSet`>, list<double | character>> => logical;
type `checkValuesForDiscreteParam` <any, integer[] | character[] | list<null | list<any> | null | double | logical>> => list<any>;
type `constraintsOkParam` <class<`Param`>, character | double[]> => logical;
type `convertTypesToCInts` <character[]> => integer[];
type `determineReqVectorized` <list<class<`Param`>>> => logical[];
type `dfRowsToList` <class<`data.frame`>, class<`ParamSet`>, logical, ...> => list<list<double[] | character>>;
type `dfRowToList` <class<`data.frame`>, class<`ParamSet`>, integer, logical, ...> => list<double[] | character>;
type `discreteNameToValue` <class<`Param`>, character> => character;
type `discreteValueToName` <class<`Param`>, character | null> => character;
type `doBasicGenDesignChecks` <class<`ParamSet`>> => list<double[]>;
type `evaluateParamExpressions` <class<`Param`> | class<`ParamSet`> | list<expression | double>, any> => (class<`Param`> | class<`ParamSet`> | list<double>);
type `evaluateParamExpressions.list` <list<expression | double>, list<double>> => list<double>;
type `evaluateParamExpressions.Param` <class<`Param`>, any> => class<`Param`>;
type `evaluateParamExpressions.ParamSet` <class<`ParamSet`>, list<class<`data.frame`> | double | double | character>> => class<`ParamSet`>;
type `filterParams` <class<`ParamSet`>, character[] | null, character[], logical[], logical> => class<`ParamSet`>;
type `filterParamsNumeric` <class<`ParamSet`>, null, logical[], logical> => class<`ParamSet`>;
type `fixDesignFactors` <class<`data.frame`>, class<`ParamSet`>> => class<`data.frame`>;
type `FUN` <class<`Param`> | class<`ParamSet`>, logical, logical> => (double | character | integer[] | list<double>) | <class<`LearnerParam`, `Param`> | class<`Param`> | class<`LearnerParamSet`, `ParamSet`> | class<`ParamSet`>> => logical | <class<`Param`> | class<`ParamSet`>, logical, null | list<double | double | character | class<`data.frame`>>> => (character | double[] | null | list<double[] | character | character | null | double>) | <class<`Param`> | class<`ParamSet`>> => logical | <class<`Param`> | class<`ParamSet`>, logical, logical> => character[];
type `generateDesign` <double, class<`ParamSet`>, any, list<any>, logical, integer> => class<`data.frame`>;
type `generateGridDesign` <class<`ParamSet`>, double[], logical> => class<`data.frame`>;
type `getBounds` <class<`Param`> | class<`ParamSet`> | list<class<`Param`>>, character, logical, null | list<double | double | character | class<`data.frame`>>> => double[];
type `getBounds.list` <list<class<`Param`>>, character, logical, null | list<double>> => double[];
type `getBounds.Param` <class<`Param`>, character, logical, null | list<double | double | character | class<`data.frame`>>> => double[];
type `getBounds.ParamSet` <class<`ParamSet`>, character, logical, null | list<double>> => double[];
type `getDefaults` <class<`Param`> | class<`ParamSet`>, logical, null | list<double | double | character | class<`data.frame`>>> => (character | double[] | null | list<double[] | character | character | null | double>);
type `getDefaults.Param` <class<`Param`>, logical, null | list<double | character | double | class<`data.frame`>>> => (character | double[] | null);
type `getDefaults.ParamSet` <class<`ParamSet`>, logical, null | list<double>> => list<double[] | character | character | null | double>;
type `getLower` <class<`Param`> | class<`ParamSet`> | list<class<`Param`>>, logical, null | list<double | character | double | class<`data.frame`>>> => double[];
type `getOptPathBestIndex` <class<`OptPath`, `OptPathDF`>, character, integer[], ^integer[], character> => integer;
type `getOptPathDobAndEolIndex` <class<`OptPath`, `OptPathDF`>, integer[], ^integer[]> => logical[];
type `getOptPathEl` <class<`OptPath`, `OptPathDF`>, integer> => list<double | list<double[] | character>>;
type `getOptPathEl.OptPathDF` <class<`OptPath`, `OptPathDF`>, integer> => list<double | list<double[] | character>>;
type `getOptPathLength` <class<`OptPath`, `OptPathDF`>> => integer;
type `getOptPathLength.OptPathDF` <class<`OptPath`, `OptPathDF`>> => integer;
type `getOptPathParetoFront` <class<`OptPath`, `OptPathDF`>, character[], integer[], ^integer[], logical> => (class<`matrix`> | integer[]);
type `getOptPathY` <class<`OptPath`, `OptPathDF`>, character[], any, any, logical> => (class<`matrix`> | double[]);
type `getOptPathY.OptPathDF` <class<`OptPath`, `OptPathDF`>, character[], integer[], ^integer[], logical> => (class<`matrix`> | double[]);
type `getParamIds` <class<`Param`> | class<`ParamSet`>, logical, logical> => character[];
type `getParamIds.Param` <class<`Param`>, logical, logical> => character[];
type `getParamIds.ParamSet` <class<`ParamSet`>, logical, logical> => character[];
type `getParamLengths` <class<`Param`> | class<`ParamSet`>, null | list<class<`data.frame`> | double | double | character>> => integer[];
type `getParamLengths.Param` <class<`Param`>, list<class<`data.frame`> | double | double | character>> => integer;
type `getParamLengths.ParamSet` <class<`ParamSet`>, null> => integer[];
type `getParamNr` <class<`ParamSet`>, logical> => integer;
type `getParamSetValues` <class<`ParamSet`>> => list<null | character[] | null>;
type `getParamTypes` <class<`ParamSet`>, logical, logical, logical, logical> => character[];
type `getRequiredParamNames` <class<`ParamSet`>> => character[];
type `getRequiredParamNames.ParamSet` <class<`ParamSet`>> => character[];
type `getTypeStringsAll` < > => character[];
type `getTypeStringsDiscrete` <logical> => character[];
type `getTypeStringsInteger` < > => character[];
type `getTypeStringsLogical` < > => character[];
type `getTypeStringsNumeric` <logical> => character[];
type `getUpper` <class<`Param`> | class<`ParamSet`> | list<class<`Param`>>, logical, null | list<double | character | double | class<`data.frame`>>> => double[];
type `getValues` <class<`ParamSet`> | class<`Param`>, null | list<double | character>> => list<any>;
type `getValues.Param` <class<`Param`>, list<double | character>> => list<character>;
type `getValues.ParamSet` <class<`ParamSet`>, null> => list<any>;
type `hasExpression` <class<`LearnerParam`, `Param`> | class<`Param`> | class<`LearnerParamSet`, `ParamSet`> | class<`ParamSet`>> => logical;
type `hasExpression.LearnerParam` <class<`LearnerParam`, `Param`> | class<`Param`>> => logical;
type `hasExpression.LearnerParamSet` <class<`LearnerParamSet`, `ParamSet`> | class<`ParamSet`>> => logical;
type `hasExpression.Param` <class<`LearnerParam`, `Param`> | class<`Param`>> => logical;
type `hasExpression.ParamSet` <class<`LearnerParamSet`, `ParamSet`> | class<`ParamSet`>> => logical;
type `hasForbidden` <class<`ParamSet`>> => logical;
type `hasNumeric` <class<`ParamSet`>, logical> => logical;
type `hasRequires` <class<`Param`> | class<`ParamSet`>> => logical;
type `hasRequires.Param` <class<`Param`>> => logical;
type `hasRequires.ParamSet` <class<`ParamSet`>> => logical;
type `hasSomeParamsOfTypes` <class<`ParamSet`>, character[]> => logical;
type `inBoundsOrExpr` <class<`Param`>, double[]> => logical;
type `isDiscrete` <class<`Param`>, logical> => logical;
type `isDiscrete.Param` <class<`Param`>, logical> => logical;
type `isDiscreteTypeString` <character, logical> => logical;
type `isEmpty` <class<`ParamSet`>> => logical;
type `isEmpty.ParamSet` <class<`ParamSet`>> => logical;
type `isFeasible` <class<`Param`> | class<`ParamSet`>, character | double[] | list<any>, logical, logical> => logical;
type `isFeasible.Param` <class<`Param`>, character | double[], logical, logical> => logical;
type `isFeasible.ParamSet` <class<`ParamSet`>, list<any>, logical, logical> => logical;
type `isForbidden` <class<`ParamSet`>, list<any>> => logical;
type `isInteger` <class<`Param`>> => logical;
type `isInteger.Param` <class<`Param`>> => logical;
type `isIntegerTypeString` <character> => logical;
type `isLogical` <class<`Param`>> => logical;
type `isLogical.Param` <class<`Param`>> => logical;
type `isLogicalTypeString` <character> => logical;
type `isNumeric` <class<`Param`>, logical> => logical;
type `isNumeric.Param` <class<`Param`>, logical> => logical;
type `isNumericTypeString` <character, logical> => logical;
type `isSpecialValue` <class<`Param`>, any> => logical;
type `isVector` <class<`Param`>> => logical;
type `isVector.Param` <class<`Param`>> => logical;
type `isVectorTypeString` <character> => logical;
type `makeCharacterParam` <character, any, null, list<any>> => class<`Param`>;
type `makeDiscreteParam` <character, character[] | integer[] | list<null | list<any> | null | double>, null, any, null, logical, list<any>> => class<`Param`>;
type `makeDiscreteVectorParam` <character, double, character[], null, any, null, logical, list<any>> => class<`Param`>;
type `makeIntegerParam` <character, double | expression, double | expression, any, null | class<`function`>, null, logical, list<any>> => class<`Param`>;
type `makeIntegerVectorParam` <character, double, double, double, null, any, null, null, logical, list<any>> => class<`Param`>;
type `makeLearnerParam` <class<`Param`>, character> => class<`LearnerParam`, `Param`>;
type `makeLogicalParam` <character, any, null, logical, list<any>> => class<`Param`>;
type `makeNumericLearnerParam` <character, double, double | expression, logical, any, character, null, logical, list<any>> => class<`LearnerParam`, `Param`>;
type `makeNumericParam` <character, double | expression, double | expression, logical, any, null | class<`function`>, null, logical, list<any>> => class<`Param`>;
type `makeNumericVectorParam` <character, double | expression, double[], double[] | expression, null, logical, any, null | class<`function`>, null, logical, list<any>> => class<`Param`>;
type `makeOptPath` <class<`ParamSet`>, character[], logical[], logical, logical, logical, logical> => class<`OptPath`>;
type `makeOptPathDF` <class<`ParamSet`>, character[], logical[], logical, logical, logical, logical> => class<`OptPath`, `OptPathDF`>;
type `makeParam` <character, character, logical, double | expression, double[] | null | expression, expression | double[] | null, null | character[] | integer[] | list<null | list<any> | null | double | logical>, null, logical, any, null | class<`function`>, null, logical, list<any>, any> => (class<`LearnerParam`, `Param`> | class<`Param`>);
type `makeParamSet` <..., null, null | expression, null | character[]> => (class<`LearnerParamSet`, `ParamSet`> | class<`ParamSet`>);
type `mapDfc` <integer[], class<`function`>, ...> => class<`data.frame`>;
type `paramValueToString` <class<`Param`> | class<`ParamSet`>, double[] | null | list<double[] | null>, logical, character> => character;
type `paramValueToString.Param` <class<`Param`>, double[] | null, logical, character> => character;
type `paramValueToString.ParamSet` <class<`ParamSet`>, list<double[] | null>, logical, character> => character;
type `requiresOk` <class<`Param`>, any> => logical;
type `sampleValue` <class<`Param`> | class<`ParamSet`>, logical, logical> => (double | character | integer[] | list<double>);
type `sampleValue.Param` <class<`Param`>, logical, logical> => (character | double | integer[]);
type `sampleValue.ParamSet` <class<`ParamSet`>, logical, logical> => list<double>;
type `sampleValues` <class<`Param`> | class<`ParamSet`>, double, logical, logical> => list<double | list<double>>;
type `setRequiresToNA` <class<`data.frame`>, list<class<`Param`>>, list<character[]>, list<null>, logical[]> => class<`data.frame`>;
type `stopIfFunOrUntypedParams` <class<`ParamSet`>> => null;
type `stopIfLearnerParams` <class<`ParamSet`>> => null;
type `trafoOptPath` <class<`OptPath`, `OptPathDF`>> => class<`OptPath`, `OptPathDF`>;
type `trafoValue` <class<`Param`> | class<`ParamSet`>, character | double[] | list<double[] | character>> => (character | double[] | list<double[] | character>);
