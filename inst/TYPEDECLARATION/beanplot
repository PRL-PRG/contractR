type `:::` <language, environment> => struct<`all`:double[], `OJ`:double[], `VC`:double[], `0.5`:double[], `1`:double[], `2`:double[]>;
type `beanplot` <language | symbol, character | double, character, double, double, double, double, logical[], logical, null | tuple<character, character[]> | character[], logical, character, null, double, null | double, double, double, character, null> => struct<`bw`:double, `wd`:double, `names`:character[], `stats`:character, `overall`:double, `log`:character> | struct<`bw`:double, `wd`:double, `names`:character[], `stats`:double[], `overall`:character, `log`:character> | struct<`bw`:double, `wd`:double, `names`:character[], `stats`:double[], `overall`:double, `log`:character>;
type `beanplotbeanlines` <struct<`A`:double[], `B`:double[], `C`:double[], `D`:double[], `E`:double[], `F`:double[]> | struct<`Bass 2`:double[], `Bass 1`:double[], `Tenor 2`:double[], `Tenor 1`:double[], `Alto 2`:double[], `Alto 1`:double[], `Soprano 2`:double[], `Soprano 1`:double[]> | struct<`Uni05`:double[], `Norm`:double[], `T5`:double[], `Gam2`:double[]> | struct<`VC.0.5`:double[], `OJ.0.5`:double[], `VC.1`:double[], `OJ.1`:double[], `VC.2`:double[], `OJ.2`:double[]> | struct<`1`:double[]>, integer, integer, double, double[], double, integer, list<character[]> | tuple<character[]>, logical, any => any, any => any> => double[];
type `beanplotpolyshapes` <integer, tuple<double[], double[]> | list<double[]>, double[], double, logical, symbol, integer, tuple<character[]> | list<character[]>, null | character[] | ^logical[], logical, symbol, any => any> => null;
type `beanplotscatters` <struct<`1`:double[]> | struct<`A`:double[], `B`:double[], `C`:double[], `D`:double[], `E`:double[], `F`:double[]> | struct<`Bass 2`:double[], `Bass 1`:double[], `Tenor 2`:double[], `Tenor 1`:double[], `Alto 2`:double[], `Alto 1`:double[], `Soprano 2`:double[], `Soprano 1`:double[]> | struct<`Uni05`:double[], `Norm`:double[], `T5`:double[], `Gam2`:double[]> | struct<`VC.0.5`:double[], `OJ.0.5`:double[], `VC.1`:double[], `OJ.1`:double[], `VC.2`:double[], `OJ.2`:double[]>, integer, integer, symbol, symbol | tuple<double[], double[]> | list<double[]>, double[], symbol | double, double, integer, double, double, tuple<character[]> | list<character[]>, logical, symbol | any => any, symbol> => null;
type `filter` <character[]> => logical[];
type `FUN` <double[] | character[] | struct<> | language | struct<`all`:double[]>> => double | character[] | struct<`x`:double[], `y`:double[]>;
type `getgroupsfromarguments` <language, environment> => struct<`0.5.OJ`:double[], `1.OJ`:double[], `2.OJ`:double[], `0.5.VC`:double[], `1.VC`:double[], `2.VC`:double[]> | struct<`1`:double[]> | struct<`A`:double[], `B`:double[], `C`:double[], `D`:double[], `E`:double[], `F`:double[]> | struct<`Bass 2`:double[], `Bass 1`:double[], `Tenor 2`:double[], `Tenor 1`:double[], `Alto 2`:double[], `Alto 1`:double[], `Soprano 2`:double[], `Soprano 1`:double[]> | struct<`Uni05`:double[], `Norm`:double[], `T5`:double[], `Gam2`:double[]> | struct<`VC.0.5`:double[], `OJ.0.5`:double[], `VC.1`:double[], `OJ.1`:double[], `VC.2`:double[], `OJ.2`:double[]>;
type `makecombinedname` <character, character> => character;
type `mexp` <double[]> => double[];
type `mlog` <double[]> => double[];
type `mrgb` <^integer[]> => character;
type `nextargpos` <character, double[]> => double[];
type `seemslog` <struct<`0.5.OJ`:double[], `1.OJ`:double[], `2.OJ`:double[], `0.5.VC`:double[], `1.VC`:double[], `2.VC`:double[]> | struct<`1`:double[]> | struct<`A`:double[], `B`:double[], `C`:double[], `D`:double[], `E`:double[], `F`:double[]> | struct<`Bass 2`:double[], `Bass 1`:double[], `Tenor 2`:double[], `Tenor 1`:double[], `Alto 2`:double[], `Alto 1`:double[], `Soprano 2`:double[], `Soprano 1`:double[]> | struct<`Uni05`:double[], `Norm`:double[], `T5`:double[], `Gam2`:double[]> | struct<`VC.0.5`:double[], `OJ.0.5`:double[], `VC.1`:double[], `OJ.1`:double[], `VC.2`:double[], `OJ.2`:double[]>> => logical;
