type `:::` <class<`call`>, environment> => list<double[]>;
type `beanplot` <..., character | double, character, double, double, double, double, logical[], logical, any, logical, character> => list<double | character[] | character[] | double[] | double | character>;
type `beanplotbeanlines` <list<double[]>, integer, integer, double, double[], double, integer, list<character[]>, logical, class<`function`>, class<`function`>> => double[];
type `beanplotpolyshapes` <integer, class<`matrix`>, double[], double, logical, any, integer, list<character[]>, character[] | null | ^logical[], logical, any, class<`function`>> => null;
type `beanplotscatters` <list<double[]>, integer, integer, any, any, double[], any, double, integer, double, double, list<character[]>> => null;
type `filter` <character[]> => logical[];
type `FUN` <double[]> => double | <character[]> => character[] | <double[]> => double | <double[]> => double | <double[]> => list<double[]> | <class<`data.frame`> | class<`formula`> | double[] | list<double[]>> => logical;
type `getgroupsfromarguments` <class<`call`>, environment> => list<double[]>;
type `makecombinedname` <character, character> => character;
type `mexp` <double[]> => double[];
type `mlog` <double[]> => double[];
type `mrgb` <class<`matrix`>> => character;
type `nextargpos` <character, double[]> => double[];
type `seemslog` <list<double[]>> => logical;
