type `::` <class<`data.frame`> | double | list<any>, character[], character[], character[], character[], character[], character[], character[], character[], any, logical, double | class<`AsIs`>> => class<`json`>;
type `apply_by_pages` <class<`data.frame`>, class<`function`>, double, logical, ...> => list<any>;
type `asJSON` <class<`data.frame`>, ...> => character[] | <^character[], ...> => character[] | <list<any>, ...> => character | <class<`data.frame`> | class<`factor`> | ^character[] | class<`character`, `scalar`> | class<`data.frame`, `scalar`> | class<`numeric`, `scalar`> | complex[] | ^double[] | null | list<any>, ...> => character[] | <^double[], ...> => character[];
type `as.scalar` <character | class<`data.frame`> | double> => (class<`character`, `scalar`> | class<`data.frame`, `scalar`> | class<`numeric`, `scalar`>);
type `base64_dec` <character> => raw[];
type `base64_enc` <raw[]> => character;
type `cb` <list<list<character | integer | list<any>>>> => list<list<character | integer | list<any>>>;
type `cleannames` <character[], logical> => character[];
type `collapse` <character[], logical, integer | null> => character;
type `collapse_object` <character[], character[], null> => character;
type `deparse_vector` <^character[]> => character[];
type `filter` <character[]> => logical[];
type `flatten` <class<`data.frame`>, logical> => class<`data.frame`>;
type `fromJSON` <class<`json`> | character, logical, logical, logical, logical, ...> => (class<`data.frame`> | list<any>);
type `FUN` <class<`data.frame`>, ...> => character[] | <^character[], ...> => character[] | <list<any>, ...> => character | <class<`data.frame`> | class<`factor`> | ^character[] | class<`character`, `scalar`> | class<`data.frame`, `scalar`> | class<`numeric`, `scalar`> | complex[] | ^double[] | null | list<any>, ...> => character[] | <^double[], ...> => character[] | <class<`data.frame`>, logical> => class<`data.frame`> | <class<`character`, `scalar`> | class<`data.frame`, `scalar`> | class<`numeric`, `scalar`>, ...> => character | <class<`factor`>, ...> => character[] | <^logical[] | null, ...> => character | <^character[] | raw[] | complex[] | ^double[] | null | class<`matrix`> | class<`data.frame`> | list<any>, ...> => list<any> | <complex[], ...> => character | <character | integer | null | list<any>, any, any, any, any, logical, any, any, any> => (^character[] | class<`data.frame`> | double[] | ^logical[] | null | list<any>) | <class<`data.frame`>, class<`connection`, `terminal`>, character, ...> => null | <class<`data.frame`>> => logical | <character[] | class<`factor`> | double[]> => logical | <character | class<`json`> | class<`connection`, `file`> | class<`connection`, `curl`>, logical> => list<any> | <integer[], ...> => character | <^character[] | class<`data.frame`> | double[] | ^logical[]> => integer | <list<any>> => (^character[] | class<`data.frame`> | class<`matrix`> | complex[] | ^double[] | null | raw[] | list<any>) | <null, ...> => character;
type `givename` <list<any>> => list<any>;
type `is.arraylist` <list<any>> => logical;
type `is_datelist` <list<any>> => logical;
type `is.datelist` <class<`data.frame`> | list<any>> => logical;
type `is.matrixlist` <list<any>> => logical;
type `is.namedlist` <character | double> => logical;
type `is.recordlist` <list<any>> => logical;
type `is.scalarlist` <list<any>> => logical;
type `list_to_vec` <list<any>> => (^character[] | ^double[] | null);
type `loadpkg` <character> => environment;
type `.local` <^character[], logical, any, logical, logical, any, ...> => character[] | <list<any>, logical, null, null, logical, logical, null, logical, ...> => character | <any, character, ...> => character | <class<`data.frame`>, character[] | null, logical, character[], character, null, null, logical, null | integer, logical, ...> => character[] | <complex[], double, logical, character[], null, null, ...> => character | <class<`factor`>, character[], logical, ...> => character[] | <^double[], double | class<`AsIs`>, logical, character | null, logical, logical, logical, any, logical, ...> => character[] | <class<`character`, `scalar`> | class<`data.frame`, `scalar`> | class<`numeric`, `scalar`>, any, ...> => character | <^logical[] | null, logical, null, logical, logical, null, ...> => character;
type `minify` <class<`json`>> => class<`json`>;
type `null_to_na` <list<any>> => list<any>;
type `num_to_char` <^double[], double | class<`AsIs`>, logical | null, logical, logical> => character[];
type `pack` <^character[] | raw[] | complex[] | ^double[] | null | class<`matrix`> | class<`data.frame`> | list<any>, ...> => list<any>;
type `parse_and_simplify` <class<`connection`, `file`> | class<`json`> | character | class<`connection`, `curl`>, logical, logical, logical, any, logical, logical, logical, ...> => (class<`data.frame`> | list<any>);
type `parse_con` <class<`connection`, `file`> | class<`connection`, `curl`>, logical> => list<any>;
type `parse_json` <class<`connection`, `file`>, logical, ...> => (class<`data.frame`> | list<list<double | character>>);
type `parseJSON` <character | class<`json`> | class<`connection`, `file`> | class<`connection`, `curl`>, logical> => list<any>;
type `parse_string` <class<`json`> | character, logical> => list<any>;
type `post_process` <list<list<character | integer | list<any>>>, logical, logical, any, logical> => class<`data.frame`>;
type `prettify` <class<`json`>, double> => class<`json`>;
type `rbind_pages` <list<class<`data.frame`>>> => class<`data.frame`>;
type `read_json` <character, logical, ...> => (class<`data.frame`> | list<list<double | character>>);
type `reformat` <character, logical, character> => class<`json`>;
type `row_collapse_object` <character[], class<`matrix`>, integer | null> => character[];
type `serializeJSON` <class<`data.frame`> | list<any>, double, logical> => class<`json`>;
type `simplify` <character | integer | null | list<any>, any, any, any, any, logical, any, any, any> => (^character[] | class<`data.frame`> | double[] | ^logical[] | null | list<any>);
type `simplifyDataFrame` <list<list<any>>, any, any, any> => class<`data.frame`>;
type `stream_in` <class<`connection`, `url`>, null, double, logical, ...> => class<`data.frame`>;
type `stream_out` <class<`data.frame`>, class<`connection`, `terminal`>, double, logical, character, ...> => list<any>;
type `toJSON` <class<`data.frame`> | double | list<any>, character[], character[], character[], character[], character[], character[], character[], character[], any, logical, double | class<`AsIs`>> => class<`json`>;
type `transpose_list` <list<list<any>>, character[]> => list<list<any>>;
type `unbox` <class<`data.frame`> | double> => (class<`data.frame`, `scalar`> | class<`numeric`, `scalar`>);
type `unpack` <list<any>> => (^character[] | class<`data.frame`> | class<`matrix`> | complex[] | ^double[] | null | raw[] | list<any>);
type `unserializeJSON` <class<`json`>> => (class<`data.frame`> | list<any>);
type `validate` <character | class<`json`>> => logical;
type `write_json` <class<`data.frame`>, character, ...> => null;
