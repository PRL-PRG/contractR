type `[[` <class<`assertError`, `condition`, `error`, `simpleError`>> => logical;
type `%||%` <class<`function`> | null | integer[], any> => (class<`function`> | integer[] | null);
type `are_equal` <double, double, ...> => logical;
type `assertError` <character, null> => class<`assertError`, `condition`, `error`, `simpleError`>;
type `assert_that` <..., environment, null> => any;
type `check_result` <logical> => logical;
type `fail` <class<`call`>, environment> => character | <class<`call`>, any> => character | <class<`call`>, environment> => character | <class<`call`>, any> => character | <class<`call`>, any> => character | <class<`call`>, environment> => character | <class<`call`>, any> => character | <class<`call`>, environment> => character | <class<`call`>, any> => character | <class<`call`>, environment> => character | <class<`call`>, any> => character | <class<`call`>, any> => character | <class<`call`>, any> => character;
type `filter` <character[]> => logical[];
type `get_message` <logical, class<`call`>, any> => character;
type `%has_args%` <class<`function`>, character> => logical;
type `has_args` <class<`function`>, character, logical> => logical;
type `%has_attr%` <double | class<`function`>, character> => logical;
type `has_attr` <double | class<`function`>, character> => logical;
type `%has_name%` <list<double>, character> => logical;
type `is.count` <character | double | integer[]> => logical;
type `is.date` <class<`Date`>> => logical;
type `is.dir` <character | double> => any;
type `is.error` <class<`try-error`>> => logical;
type `is.flag` <character | integer[]> => logical;
type `is.integerish` <character | double> => logical;
type `is.number` <double | integer[]> => logical;
type `is.readable` <character> => any;
type `is.scalar` <character | integer[]> => logical;
type `is.string` <character[] | double | integer[]> => logical;
type `is.time` <class<`POSIXct`, `POSIXt`>> => logical;
type `is.writeable` <character> => logical;
type `noNA` <character | ^integer[]> => logical;
type `not_empty` <class<`data.frame`> | double[]> => logical;
type `on_failure` <class<`function`>> => (class<`function`> | null);
type `on_failure<-` <class<`function`>, class<`function`>> => class<`function`>;
type `see_if` <..., environment, any> => logical;
type `validate_that` <..., environment, null> => (character | logical);
