type `auglag` <double[], class<`function`>, null, null, null, class<`function`> | null, null, class<`function`>, null, character, double, logical, logical, list<any>, ...> => list<double[] | character>;
type `bobyqa` <double[], class<`function`>, double[], double[], logical, list<any>, ...> => list<double[] | character>;
type `ccsaq` <double[], class<`function`>, class<`function`> | null, null, null, class<`function`>, class<`function`> | null, logical, list<double>, ...> => list<double[] | character>;
type `check.derivatives` <double[], class<`function`>, class<`function`>, double, character, character, ...> => list<class<`matrix`> | double[]>;
type `cobyla` <double[], class<`function`>, null, null, class<`function`>, logical, list<double>, ...> => list<double[] | character>;
type `directL` <class<`function`>, double[], double[], logical, logical, logical, list<double>, ...> => list<double[] | character>;
type `finite.diff` <class<`function`>, double[], integer[], double, ...> => (class<`matrix`> | double[]);
type `is.nloptr` <class<`nloptr`>> => logical;
type `isres` <double[], class<`function`>, double[], double[], null, null, double, double, double, logical, ...> => list<double[] | character>;
type `lbfgs` <double[], class<`function`>, null, double[], double[], logical, list<double>, ...> => list<double[] | character>;
type `mlsl` <double[], class<`function`>, null, double[], double[], character, logical, logical, list<double>, ...> => list<double[] | character>;
type `mma` <double[], class<`function`>, class<`function`> | null, null, null, class<`function`>, class<`function`> | null, logical, list<double>, ...> => list<double[] | character>;
type `neldermead` <double[], class<`function`>, null, null, logical, list<any>, ...> => list<double[] | character>;
type `newuoa` <double[], class<`function`>, logical, list<any>, ...> => list<double[] | character>;
type `nl.grad` <double[], class<`function`>, double, ...> => double[];
type `nl.jacobian` <double[], class<`function`>, double, ...> => class<`matrix`>;
type `nloptr` <double[], class<`function`>, class<`function`> | null, double[] | null, double[] | null, class<`function`> | null, class<`function`> | null, null | class<`function`>, null | class<`function`>, list<any>, ...> => class<`nloptr`>;
type `nloptr.add.default.options` <list<any>, double[], double, double> => list<character | list<character | double[]>>;
type `nloptr.get.default.options` < > => class<`data.frame`>;
type `nloptr.print.options` <character[] | null | list<character | double>, null | list<character | double>> => null;
type `nl.opts` <list<any>> => list<double | null | null | double>;
type `print.nloptr` <class<`nloptr`>, logical, ...> => null;
type `sbplx` <double[], class<`function`>, null, null, logical, list<any>, ...> => list<double[] | character>;
type `slsqp` <double[], class<`function`>, null, null, null, class<`function`>, class<`function`> | null, null, null, logical, list<double>, ...> => list<double[] | character>;
type `stogo` <double[], class<`function`>, null, double[], double[], double, double, logical, logical, ...> => list<double[] | character>;
type `tnewton` <double[], class<`function`>, null, double[], double[], logical, logical, logical, list<double>, ...> => list<double[] | character>;
type `varmetric` <double[], class<`function`>, null, logical, double[], double[], logical, list<double>, ...> => list<double[] | character>;
