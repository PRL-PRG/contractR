type `%|%` <character, character> => character;
type `%+%` <character, character> => character;
type `as_count` <class<`extracted`, `list`>, ...> => class<`data.frame`>;
type `as_numeric` <class<`extracted`, `list`>> => list<double[] | null>;
type `as_numeric2` <class<`extracted`, `list`>> => ^double[];
type `as_time` <class<`extracted`, `list`>, logical, logical> => list<character[] | character[] | null | class<`POSIXlt`, `POSIXt`>>;
type `bind` <..., character, character, any> => character[];
type `bind_or` <..., logical, character, character> => character;
type `bracket_convert` <character[]> => list<character[]>;
type `cheat` <class<`data.frame`>, logical> => class<`data.frame`>;
type `clean` <^character[]> => ^character[];
type `distribute` <character[], logical> => character[];
type `escape` <character> => class<`character`, `escape`>;
type `ex_abbreviation` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_angle` <character, character, logical, logical, character, logical, logical, null, ...> => class<`extracted`, `list`>;
type `ex_between` <character[], character[], character[], logical, logical, logical, character, logical, logical, null, ...> => class<`extracted`, `list`>;
type `ex_between_multiple` <character[], character[], character[], logical, logical, logical, character, logical, logical, logical> => (class<`extracted`, `list`> | list<character[]>);
type `ex_bracket` <character[], character[], logical, logical, character, logical, logical, null, ...> => class<`extracted`, `list`>;
type `ex_caps` <character, logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_caps_phrase` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_citation` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_citation_tex` <character[], logical, logical, character, character, logical, logical, logical, null, ...> => class<`extracted`, `list`>;
type `ex_city_state` <character, logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_city_state_zip` <character, logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_curly` <character, character, logical, logical, character, logical, logical, null, ...> => class<`extracted`, `list`>;
type `ex_date` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_default` <character[], logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `ex_email` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_emoticon` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_endmark` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_hash` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_nchar_words` <character, double, logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_non_ascii` <character[], logical, logical, character, character, logical, null, logical, ...> => class<`extracted`, `list`>;
type `ex_non_words` <^character[], logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `ex_number` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_percent` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_phone` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `explain` <character, logical, logical, any> => class<`character`, `explain`>;
type `ex_postal_code` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_repeated_characters` <character, logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_repeated_phrases` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_repeated_words` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_round` <character, character, logical, logical, character, logical, logical, null, ...> => class<`extracted`, `list`>;
type `ex_square` <character, character, logical, logical, character, logical, logical, null, ...> => class<`extracted`, `list`>;
type `ext` <list<any>> => class<`extracted`, `list`>;
type `ex_tag` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_time` <character[], logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `ex_title_name` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `extract_consec_num` <character, logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `extract_word_after_a` <character, logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `extract_word_after_the` <character, logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `ex_transcript_time` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_twitter_url` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_url` <character, logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_zip` <character[], logical, logical, character, character, logical, null, ...> => class<`extracted`, `list`>;
type `ex_zip2` <class<`factor`>, logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `ex_zip3` <class<`factor`>, logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `f` <character, logical, logical, character, character, logical, any, ...> => character;
type `file_ext2` <character[], logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `filter` <character[]> => logical[];
type `FUN` <character[]> => character[] | <integer> => integer | <integer> => character | <integer> => character[] | <character | null> => (character | null) | <integer> => (character | logical) | <null | ^character[]> => (null | ^character[]) | <character, character, character[], logical> => list<character[]> | <character[] | null> => (character[] | null) | <character | class<`character`, `regexr`>> => logical | <character, character, character[], any, any, character> => character[] | <integer> => character[] | <character> => character[] | <integer> => character[] | <character[] | null> => (double[] | null) | <character[] | null> => (character[] | null) | <character[] | double | list<character[]>> => character[] | <character[]> => character[] | <character[]> => character[] | <integer> => list<character[]> | <character> => character;
type `.genX` <character[], character[], character[], null, logical, character, logical> => character[];
type `.genXtract` <character[], character[], character[], logical, any, logical> => (class<`extracted`, `list`> | list<character[]>);
type `grab` <character, any> => character;
type `group` <..., character, character, any> => character[];
type `group_or` <..., logical> => character;
type `is.regex` <character | class<`character`, `regexr`>> => logical;
type `L` <character[], ...> => list<character>;
type `.mgsub` <character[], character[], character[], logical, logical, logical, ...> => character[];
type `pastex` <..., character, any> => character;
type `reg_check` <character | double | class<`character`, `escape`> | list<character[]>, any, any, any> => (character | class<`character`, `escape`> | class<`character`, `regexr`>);
type `reg_check_sprintf` <character, null, character | double, list<class<`character`, `regexr`> | character>> => character;
type `reg_check_sprintf2` <character, null, ..., list<class<`character`, `regexr`> | character>> => character;
type `rm_` <...> => class<`function`>;
type `rm_abbreviation` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_all_except_letters` <character, logical, logical, character, character, logical, any, ...> => character;
type `rm_angle` <character, character, logical, logical, character, logical, logical, null, ...> => character;
type `rm_between` <character[], character[], character[], logical, logical, any, any, logical, logical, null, ...> => (character[] | class<`extracted`, `list`>);
type `rm_between_double_quote` <character> => list<character[]>;
type `rm_between_multiple` <character[], character[], character[], logical, logical, logical, character, logical, logical, logical> => character[];
type `rm_between_quote` <character, character> => list<character[]>;
type `rm_between_subber` <character, character, logical, null, logical> => character;
type `rm_bracket` <character[], character[], logical, logical, character, logical, logical, null, ...> => character[];
type `rm_caps` <character, logical, logical, character, character, logical, null, ...> => character;
type `rm_caps_phrase` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_citation` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_citation_tex` <character[], logical, logical, character, character, logical, any, logical, null, ...> => character[];
type `rm_city_state` <character, logical, logical, character, character, logical, null, ...> => character;
type `rm_city_state_zip` <character, logical, logical, character, character, logical, null, ...> => character;
type `rm_curly` <character[], character, logical, logical, character, logical, logical, null, ...> => (character | class<`extracted`, `list`>);
type `rm_date` <character, logical, logical, character, character, logical, null, ...> => character;
type `rm_default` <character[], logical, any, character | class<`character`, `escape`>, any, logical, any, ...> => (character[] | class<`extracted`, `list`>);
type `rm_digit` <character, logical, logical, character, character, logical, any, ...> => character;
type `rm_dollar` <character[], logical, logical, character, character, logical, any, ...> => class<`extracted`, `list`>;
type `rm_email` <character, logical, logical, character, character, logical, null, ...> => character;
type `rm_emoticon` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_endmark` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_hash` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_lead` <character, logical, logical, character, character, logical, any, ...> => character;
type `rm_nchar_words` <character, character | double, logical, logical, character, character, logical, null, ...> => character;
type `rm_non_ascii` <character[], logical, logical, character, character, logical, null, logical, ...> => character[];
type `rm_non_words` <^character[], logical, logical, character, character, logical, null, ...> => ^character[];
type `rm_number` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_percent` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_phone` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_postal_code` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_repeated_characters` <character, logical, logical, character, character, logical, null, ...> => character;
type `rm_repeated_phrases` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_repeated_words` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_round` <character, character, logical, logical, character, logical, logical, null, ...> => character;
type `rm_square` <character, character, logical, logical, character, logical, logical, null, ...> => character;
type `rm_tag` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_time` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_title_name` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_transcript_time` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_twitter_n_url` <character[], logical, logical, character, character, logical, any, ...> => (character[] | class<`extracted`, `list`>);
type `rm_twitter_url` <character[], logical, logical, character, character, logical, null, ...> => (character[] | class<`extracted`, `list`>);
type `rm_url` <character, logical, logical, character, character, logical, null, ...> => character;
type `rm_white` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_bracket` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_colon` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_comma` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_endmark` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_lead` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_lead_trail` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_multiple` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_punctuation` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_white_trail` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `rm_zip` <character[], logical, logical, character, character, logical, null, ...> => character[];
type `S` <character, ...> => character;
type `TC` <character[], null, ...> => list<character>;
type `Trim` <null | ^character[]> => (null | ^character[]);
type `U` <character[], ...> => list<character>;
type `valid_address` <character[]> => logical[];
type `valid_address2` <character[]> => logical[];
type `validate` <any, logical, logical, logical, any> => class<`function`>;
type `valid_email` <character[]> => logical[];
type `valid_email_1` <character[]> => logical[];
