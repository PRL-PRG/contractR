type `adjusted` <character[], ...> => class<`function`>;
type `adjusted_calpha` <...> => class<`function`>;
type `allsubsets` <integer[]> => (list<integer[]> | list<null>);
type `as.char` <class<`name`>> => character;
type `.bdiag` <...> => class<`matrix`>;
type `bread.mmm` <class<`mmm`>, ...> => class<`matrix`>;
type `cftest` <class<`lm`>, any, class<`function`>, ...> => class<`glht`, `summary.glht`>;
type `Chisqtest` < > => class<`function`>;
type `chkdots` <...> => (character | null);
type `chrlinfct2matrix` <character[], character[]> => any;
type `cld` <class<`confint.glht`, `glht`> | class<`glht`> | class<`glht`, `summary.glht`>, ...> => class<`cld`>;
type `cld.confint.glht` <class<`confint.glht`, `glht`>, logical, ...> => class<`cld`>;
type `cld.glht` <class<`glht`>, double, logical, ...> => class<`cld`>;
type `cld.summary.glht` <class<`glht`, `summary.glht`>, double, logical, ...> => class<`cld`>;
type `coef.glht` <class<`glht`> | class<`glht`, `summary.gtest`>, logical, ...> => double[];
type `coef.mmm` <class<`mmm`>, ...> => double[];
type `coef.parm` <class<`parm`>, ...> => double[];
type `confint.glht` <class<`glht`>, any, double, class<`function`> | double, ...> => class<`confint.glht`, `glht`>;
type `contrMat` <class<`table`> | double[], character[], double> => class<`contrMat`, `matrix`>;
type `estfun.mmm` <class<`mmm`>, ...> => class<`matrix`>;
type `expression2coef` <expression, any, logical> => any;
type `extr` <class<`glht`, `summary.glht`> | class<`confint.glht`, `glht`>> => list<any>;
type `factor_contrasts` <class<`aovlist`, `listof`> | class<`aov`, `lm`> | class<`coxph`> | class<`glm`, `lm`> | class<`lm`> | class<`polr`> | class<`survreg`> | class<`lme`> | class<`coxme`> | class<`lmerMod`> | class<`colr`, `mlt`, `mlt_fit`, `mlt_setup`, `tram`>> => any;
type `Ftest` < > => class<`function`>;
type `get_letters` <integer, character[], any> => character[];
type `glht` <class<`aov`, `lm`> | class<`colr`, `mlt`, `mlt_fit`, `mlt_setup`, `tram`> | class<`coxme`> | class<`coxph`> | class<`glmerMod`> | class<`glm`, `lm`> | class<`lm`> | class<`lme`> | class<`lmerMod`> | class<`lmrob`> | class<`mmm`> | class<`nls`> | class<`parm`> | class<`polr`> | class<`survreg`> | list<double[] | class<`matrix`>> | class<`aovlist`, `listof`>, any, ...> => any;
type `glht.character` <class<`aov`, `lm`> | class<`glm`, `lm`> | class<`lm`> | class<`parm`> | list<double[] | class<`matrix`>>, character[], ...> => class<`glht`>;
type `glht.matrix` <class<`mmm`> | class<`aov`, `lm`> | class<`colr`, `mlt`, `mlt_fit`, `mlt_setup`, `tram`> | class<`coxme`> | class<`coxph`> | class<`glmerMod`> | class<`glm`, `lm`> | class<`lm`> | class<`lme`> | class<`lmerMod`> | class<`lmrob`> | class<`nls`> | class<`parm`> | class<`polr`> | class<`survreg`> | list<double[] | class<`matrix`>>, class<`matrix`>, character[], double[], ...> => class<`glht`>;
type `glht.mcp` <class<`aov`, `lm`> | class<`colr`, `mlt`, `mlt_fit`, `mlt_setup`, `tram`> | class<`coxme`> | class<`coxph`> | class<`glm`, `lm`> | class<`lm`> | class<`lme`> | class<`lmerMod`> | class<`polr`> | class<`survreg`> | class<`aovlist`, `listof`>, class<`mcp`>, ...> => any;
type `glht.means` <class<`aov`, `lm`>, class<`means`>, ...> => class<`glht`>;
type `glht.mlf` <class<`mmm`>, class<`mlf`>, ...> => class<`glht`>;
type `global` <character> => class<`function`>;
type `insert_absorb` <logical[], character[], character, logical, class<`matrix`>, character[]> => class<`multcompLetters`>;
type `is_num` <double> => logical;
type `lhs` <expression> => (class<`call`> | class<`name`>);
type `maxsets` <class<`matrix`>> => list<list<integer[]>>;
type `mcp` <..., logical, logical> => (class<`mcp`> | class<`means`>);
type `mcp2matrix` <class<`aovlist`, `listof`> | class<`aov`, `lm`> | class<`lm`> | class<`polr`> | class<`colr`, `mlt`, `mlt_fit`, `mlt_setup`, `tram`> | class<`coxme`> | class<`coxph`> | class<`glm`, `lm`> | class<`lme`> | class<`lmerMod`> | class<`survreg`>, any> => any;
type `meanslinfct` <class<`aov`, `lm`>, character, class<`data.frame`>, class<`formula`, `terms`>, null> => class<`matrix`>;
type `mlf` <...> => class<`mlf`>;
type `mmm` <...> => class<`mmm`>;
type `model.frame.coxme` <class<`coxme`>, ...> => class<`data.frame`>;
type `model.frame.lme` <class<`lme`>, ...> => (class<`data.frame`, `groupedData`, `nfGroupedData`, `nffGroupedData`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>);
type `model.matrix.aovlist` <class<`aovlist`, `listof`>, ...> => any;
type `model.matrix.coxme` <class<`coxme`>, ...> => class<`matrix`>;
type `model.matrix.lme` <class<`lme`>, ...> => class<`matrix`>;
type `model.matrix.polr` <class<`polr`>, ...> => class<`matrix`>;
type `modelparm` <class<`aov`, `lm`> | class<`colr`, `mlt`, `mlt_fit`, `mlt_setup`, `tram`> | class<`coxme`> | class<`coxph`> | class<`glmerMod`> | class<`glm`, `lm`> | class<`lm`> | class<`lme`> | class<`lmerMod`> | class<`lmrob`> | class<`mmm`> | class<`nls`> | class<`parm`> | class<`polr`> | class<`survreg`> | list<double[] | class<`matrix`>>, any, any, any, ...> => class<`modelparm`>;
type `modelparm.coxme` <class<`coxme`>, class<`function`>, class<`function`>, null, ...> => class<`modelparm`>;
type `modelparm.default` <class<`coxme`> | class<`glmerMod`> | class<`lme`> | class<`lmerMod`> | class<`polr`> | class<`survreg`> | class<`aov`, `lm`> | class<`colr`, `mlt`, `mlt_fit`, `mlt_setup`, `tram`> | class<`coxph`> | class<`glm`, `lm`> | class<`lm`> | class<`lmrob`> | class<`mmm`> | class<`nls`> | class<`parm`> | list<double[] | class<`matrix`>>, class<`function`>, class<`function`>, null | double, ...> => class<`modelparm`>;
type `modelparm.lme` <class<`lme`>, class<`function`>, class<`function`>, null, ...> => class<`modelparm`>;
type `modelparm.merMod` <class<`glmerMod`> | class<`lmerMod`>, class<`function`>, class<`function`>, null, ...> => class<`modelparm`>;
type `modelparm.polr` <class<`polr`>, class<`function`>, class<`function`>, null, ...> => class<`modelparm`>;
type `modelparm.survreg` <class<`survreg`>, class<`function`>, class<`function`>, null, ...> => class<`modelparm`>;
type `MPinv` <class<`matrix`>, double> => list<class<`matrix`> | integer>;
type `parm` <double[], class<`matrix`>, double> => class<`parm`>;
type `plot.cld` <class<`cld`>, character[], ...> => (class<`table`, `xtabs`> | double[] | list<list<double[]>>);
type `plot.confint.glht` <class<`confint.glht`, `glht`>, any, any, any, ...> => null;
type `plot.glht` <class<`glht`>, ...> => null;
type `pqglht` <class<`glht`>> => class<`pqglht`>;
type `print.confint.glht` <class<`confint.glht`, `glht`>, double, ...> => class<`confint.glht`, `glht`>;
type `print.glht` <class<`glht`, `summary.gtest`> | class<`glht`>, double, ...> => (class<`glht`, `summary.gtest`> | class<`glht`>);
type `print.summary.glht` <class<`glht`, `summary.glht`>, double, ...> => class<`glht`, `summary.glht`>;
type `print.summary.gtest` <class<`glht`, `summary.gtest`>, double, ...> => class<`glht`, `summary.gtest`>;
type `rhs` <expression> => double;
type `side` <expression> => character;
type `summary.glht` <class<`glht`>, class<`function`>, ...> => (class<`glht`, `summary.glht`> | class<`glht`, `summary.gtest`>);
type `sweepLetters` <class<`matrix`>, double, any, character> => class<`matrix`>;
type `univariate` < > => class<`function`>;
type `vcov.glht` <class<`glht`>, ...> => class<`matrix`>;
type `vcov.mmm` <class<`mmm`>, ...> => class<`matrix`>;
type `vcov.parm` <class<`parm`>, ...> => class<`matrix`>;
