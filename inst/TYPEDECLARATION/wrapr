type `:=` <any, any> => (character[] | class<`function`> | double[]);
type `::` <class<`call`>, character> => any | <...> => class<`data.frame`> | <..., environment> => character[] | <character[] | class<`name`> | list<class<`name`>>, class<`call`> | class<`{`>, environment> => class<`function`> | <...> => character[] | <..., environment> => class<`data.frame`> | <double, double> => double[] | <character | class<`data.frame`> | class<`PartialFunction`> | class<`PartialNamedFn`> | class<`UnaryFnList`> | double[], class<`PartialFunction`> | character | class<`data.frame`> | class<`PartialNamedFn`> | class<`UnaryFnList`> | class<`SrcFunction`> | class<`locum`> | class<`ourclass`, `wrapr_applicable`> | class<`glm`, `lm`> | list<class<`function`>>, environment, any, any, any> => (double[] | character | class<`data.frame`> | class<`UnaryFnList`>) | <character[] | list<character>, character, character> => (character[] | list<character[]>);
type `:::` <character[] | null, logical> => (class<`call`> | class<`name`> | double);
type `%?%` <^double[] | null | list<any>, ^double[] | list<any>> => (^double[] | null | list<double | null | double>);
type `%.>%` <any, any> => any;
type `%.|%` <integer[], any> => integer;
type `%+%` <any, any> => any;
type `add_name_column` <list<class<`data.frame`>>, character> => list<class<`data.frame`>>;
type `apply_left` <character | class<`Collector`> | class<`data.frame`> | class<`formula`> | class<`function`> | class<`locum`> | class<`PartialNamedFn`> | double[] | class<`track`> | list<class<`data.frame`>>, character | class<`call`> | double | class<`{`>, environment, any, any, any> => any;
type `apply_left.Collector` <class<`Collector`>, class<`call`>, environment, any, any, any> => class<`Collector`>;
type `apply_left_default` <any, class<`call`> | class<`{`>, environment, any, any, any> => any;
type `apply_left.default` <class<`data.frame`> | class<`function`> | double[] | class<`track`> | list<class<`data.frame`>>, class<`call`> | class<`{`>, environment, any, any, any> => any;
type `apply_left.locum` <class<`locum`>, class<`call`>, environment, null, character, null> => class<`locum`>;
type `apply_left.UnaryFn` <class<`PartialNamedFn`>, class<`call`>, environment, any, any, any> => class<`UnaryFnList`>;
type `apply_right` <character | class<`data.frame`> | class<`PartialFunction`> | class<`PartialNamedFn`> | class<`UnaryFnList`> | double[], class<`PartialFunction`> | character | class<`data.frame`> | class<`PartialNamedFn`> | class<`UnaryFnList`> | class<`SrcFunction`> | class<`locum`> | class<`ourclass`, `wrapr_applicable`> | class<`glm`, `lm`> | list<class<`function`>>, environment, any, any, any> => (double[] | character | class<`data.frame`> | class<`UnaryFnList`>);
type `apply_right.default` <character | class<`data.frame`>, character | class<`data.frame`>, environment, any, any, any> => (character | class<`data.frame`>);
type `apply_right.locum` <double, class<`locum`>, environment, any, any, any> => double;
type `apply_right_S4` <character | class<`data.frame`>, character | class<`data.frame`>, any, any, any, any> => (character | class<`data.frame`>);
type `apply_right.UnaryFn` <class<`PartialFunction`> | class<`PartialNamedFn`> | class<`UnaryFnList`> | double[] | class<`data.frame`>, class<`PartialFunction`> | class<`PartialNamedFn`> | class<`UnaryFnList`> | class<`SrcFunction`>, environment, any, any, any> => (class<`UnaryFnList`> | double[]);
type `ApplyTo` <class<`PartialFunction`>, class<`UnaryFnList`>, any> => class<`UnaryFnList`> | <class<`UnaryFnList`>, class<`UnaryFnList`>, any> => class<`UnaryFnList`> | <class<`PartialNamedFn`>, class<`PartialFunction`>, any> => class<`UnaryFnList`> | <class<`SrcFunction`>, double, environment> => double | <class<`UnaryFnList`>, class<`PartialNamedFn`>, any> => class<`UnaryFnList`> | <class<`SrcFunction`>, integer[], environment> => double[] | <class<`PartialFunction`> | class<`PartialNamedFn`> | class<`UnaryFnList`> | class<`SrcFunction`>, class<`PartialFunction`> | class<`PartialNamedFn`> | class<`UnaryFnList`> | double[] | class<`data.frame`>, any> => (class<`UnaryFnList`> | double[]) | <class<`PartialFunction`>, class<`PartialFunction`>, any> => class<`UnaryFnList`> | <class<`PartialNamedFn`>, integer[], environment> => double[] | <class<`UnaryFnList`>, class<`data.frame`>, environment> => double[] | <class<`PartialNamedFn`>, class<`data.frame`>, environment> => double[] | <class<`PartialFunction`>, integer[], environment> => double[] | <class<`UnaryFnList`>, class<`PartialFunction`>, any> => class<`UnaryFnList`> | <class<`PartialNamedFn`>, double[], environment> => double[] | <class<`PartialNamedFn`>, class<`UnaryFnList`>, any> => class<`UnaryFnList`> | <class<`UnaryFnList`>, integer[], environment> => double[] | <class<`PartialNamedFn`>, class<`PartialNamedFn`>, any> => class<`UnaryFnList`> | <class<`PartialFunction`>, class<`PartialNamedFn`>, any> => class<`UnaryFnList`> | <class<`PartialFunction`>, double[], environment> => double[];
type `as.character.locum` <class<`locum`>, ...> => character;
type `as_dot_fn` <any, environment> => class<`wrapr_as_dot_fn`>;
type `as_fn` <class<`PartialFunction`> | class<`PartialNamedFn`>, environment> => class<`wrapr_as_fn`>;
type `as_fnlist` <list<class<`PartialNamedFn`>>, environment> => class<`UnaryFnList`>;
type `as.list.UnaryFn` <class<`PartialNamedFn`>, ...> => list<class<`PartialNamedFn`>>;
type `as.list.UnaryFnList` <class<`UnaryFnList`>, ...> => list<class<`PartialNamedFn`>>;
type `as_named_list` <...> => list<class<`data.frame`> | double>;
type `as.UnaryFn` <list<class<`PartialNamedFn`>>, environment> => class<`UnaryFnList`>;
type `bquote_call_args` <class<`call`>, environment> => list<double>;
type `bquote_function` <class<`function`>> => class<`function`>;
type `build_frame` <..., environment> => class<`data.frame`>;
type `buildNameCallback` <character> => class<`function`>;
type `%c%` <character[] | integer[], character | integer[]> => (character[] | integer[]);
type `:=.character` <character[] | class<`factor`>, character[] | double[]> => (character[] | double[]);
type `checkColsFormUniqueKeys` <class<`data.frame`>, character[]> => logical;
type `clean_fit_glm` <character, character[], class<`data.frame`>, ..., class<`function`>, logical, null, character, null, environment> => list<class<`glm`, `lm`> | class<`summary.glm`>>;
type `clean_fit_lm` <character, character[], class<`data.frame`>, ..., logical, null, environment> => list<class<`lm`> | class<`summary.lm`>>;
type `coalesce` <^double[] | null | list<any>, ^double[] | list<any>> => (^double[] | null | list<double | null | double>);
type `Collector` < > => class<`Collector`>;
type `concat_items_rev` <list<class<`PartialFunction`> | class<`PartialNamedFn`> | class<`PartialFunction`> | class<`PartialNamedFn`>>, list<any>> => list<any>;
type `c.UnaryFn` <...> => class<`UnaryFnList`>;
type `DebugFn` <character, class<`function`>, ...> => any;
type `DebugFnE` <character, class<`function`>, ...> => any;
type `DebugFnW` <character | class<`function`> | class<`name`>, class<`function`>> => class<`function`>;
type `DebugFnWE` <character, class<`function`>, ...> => class<`function`>;
type `DebugPrintFn` <character, class<`function`>, ...> => any;
type `DebugPrintFnE` <character, class<`function`>, ...> => any;
type `defineLambda` <environment, null> => class<`function`>;
type `%dot%` <double[], double[]> => double;
type `draw_frame` <class<`data.frame`>, ..., character, list<any>, double> => character;
type `draw_framec` <class<`data.frame`>, ..., character[], double> => character;
type `early_tries` <class<`call`> | class<`name`> | character, class<`{`> | class<`call`> | character | double | class<`name`>, any> => (class<`function`> | null);
type `evalb` <..., environment> => null;
type `eval_dot_sequence` <character, class<`Collector`>, environment> => character;
type `execute_parallel` <list<class<`data.frame`>>, class<`function`>, character, ..., class<`SOCKcluster`, `cluster`>, logical, environment> => list<class<`data.frame`>>;
type `:=.factor` <character[] | class<`factor`>, character[] | double[]> => (character[] | double[]);
type `fnlist` <...> => class<`UnaryFnList`>;
type `format.locum` <class<`locum`>, ...> => character;
type `format.PartialFunction` <class<`PartialFunction`>, ...> => character;
type `format.PartialNamedFn` <class<`PartialNamedFn`>, ...> => character;
type `format.SrcFunction` <class<`SrcFunction`>, ...> => character;
type `format.UnaryFnList` <class<`UnaryFnList`>, ...> => character;
type `grab_assignments_from_dots` <list<any>> => character[];
type `grepdf` <character, class<`data.frame`>, ..., logical, logical, logical, logical, logical, logical> => character;
type `grepv` <character, character[], ..., logical, logical, logical, logical, logical> => character;
type `has_no_dup_rows` <class<`data.frame`>> => logical;
type `%in_block%` <character[], any> => class<`data.frame`>;
type `invert_perm` <double[]> => integer[];
type `is_infix` <class<`name`>> => logical;
type `isValidAndUnreservedName` <character> => logical;
type `lambda` <..., environment> => class<`function`>;
type `lapplym` <double[], class<`function`>, ...> => list<double>;
type `let` <character[] | null | list<any>, any, ..., environment, character, logical, logical, logical> => (character | class<`{`> | class<`call`> | class<`data.frame`> | double[] | expression | null | list<character | double[]>);
type `letprep_lang` <any, character | class<`<-`> | class<`=`> | class<`{`> | class<`call`> | class<`name`> | double | pairlist> => (character | class<`<-`> | class<`=`> | class<`{`> | class<`call`> | class<`name`> | double | pairlist);
type `letprep_str` <list<character>, character> => expression;
type `locum` < > => class<`locum`>;
type `makeFunction_se` <character[] | class<`name`> | list<class<`name`>>, class<`call`> | class<`{`>, environment> => class<`function`>;
type `mapsyms` <...> => list<character>;
type `map_to_char` <^character[] | ^double[], ..., character, character, class<`function`>> => character;
type `map_upper` <...> => list<character>;
type `match_order` <double[], double[]> => integer[];
type `mk_formula` <character, character[] | null, ..., logical, double | null, character, environment, null> => class<`formula`>;
type `mk_tmp_name_source` <character, ..., character[], double, character> => class<`function`>;
type `mk_unpack_single_arg_fn` <character[], character, character> => class<`UnpackTarget`>;
type `orderv` <class<`data.frame`> | list<double[]>, ..., logical, logical, character[]> => integer[];
type `%p%` <character[], character> => character[];
type `parLapplyLBm` <class<`SOCKcluster`, `cluster`>, double[], class<`function`>, ..., null> => list<double>;
type `partition_tables` <character[], character, ..., null, null, list<class<`data.frame`>>, any> => list<list<class<`data.frame`>>>;
type `pipe_impl` <double | character | class<`call`> | class<`name`> | class<`(`>, class<`name`> | character | class<`call`> | double | class<`{`> | class<`(`>, environment, any> => any;
type `pkgfn` <character, character, list<any>> => class<`PartialNamedFn`>;
type `prepareAlias` <null | character[] | list<any>, logical> => list<any>;
type `print.locum` <class<`locum`>, ...> => null;
type `psagg` <character[], ..., logical> => character;
type `qae` <...> => character[];
type `qc` <..., environment> => character[];
type `%qc%` <any, any> => character[];
type `qchar_frame` <...> => class<`data.frame`>;
type `qe` <...> => character[];
type `qs` <any> => class<`call`>;
type `reduceexpand` <class<`call`> | class<`name`>, integer[], environment> => integer;
type `restrictToNameAssignments` <list<character>, logical> => list<character>;
type `r_plus` <character[] | null, logical> => (class<`call`> | class<`name`> | double);
type `seqi` <double, double> => double[];
type `sequence_as_function` <class<`Collector`>, environment> => class<`function`>;
type `sinterp` <character, ..., class<`data.frame`> | environment | list<double>, environment, character, character[]> => character[];
type `sortv` <class<`data.frame`>, character[], ..., logical, logical, character[]> => class<`data.frame`>;
type `split_at_brace_pairs` <character[] | list<character>, character, character> => (character[] | list<character[]>);
type `srcfn` <character, character, list<double>> => class<`SrcFunction`>;
type `stop_if_dot_args` <class<`call`>, character> => any;
type `strsplit_capture` <character, character, ..., logical, logical, logical, logical> => list<character>;
type `to` <...> => class<`UnpackTarget`>;
type `to_vector` <list<any>> => (^character[] | class<`Date`> | ^double[]);
type `uniques` <any, ..., logical, double, logical> => any;
type `unpack` <list<class<`data.frame`>>, ...> => any;
type `[<-.Unpacker` <class<`Unpacker`>, ..., list<double | class<`data.frame`>>> => class<`Unpacker`>;
type `[.Unpacker` <class<`Unpacker`>, ...> => class<`UnpackTarget`>;
type `unpack_impl` <..., environment, list<class<`data.frame`> | double>, character[], null | character, any> => any;
type `validate_assignment_named_map` <character[], character | null> => character[];
type `validate_positional_targets` <character[], character | null> => character[];
type `validate_source_names` <character[]> => character[];
type `vapplym` <double[], class<`function`>, double, ..., logical> => double[];
type `VectorizeM` <class<`function`>, character, logical, logical, logical> => class<`function`>;
type `view` <class<`data.frame`>, ..., any, double> => class<`knitr_kable`>;
type `view.data.frame` <class<`data.frame`>, ..., character, double> => class<`knitr_kable`>;
type `wrapfn` <class<`function`>, character, list<any>> => class<`PartialFunction`>;
type `wrapr_deparse` <class<`<-`> | class<`{`> | class<`call`> | class<`name`> | double> => character;
type `write_values_into_env` <environment, character[], list<class<`data.frame`> | double>> => any;
