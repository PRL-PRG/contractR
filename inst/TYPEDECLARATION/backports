type `bp_anyNA` <character[], logical> => logical;
type `bp_capture.output` <..., null, logical, character, logical> => character;
type `bp_dir.exists` <character> => logical;
type `bp_...elt` <double> => character;
type `bp_endsWith` <character[], character> => logical[];
type `bp_file.info` <..., logical> => class<`data.frame`>;
type `bp_file.mode` <...> => double;
type `bp_file.size` <...> => double;
type `bp_get0` <character, environment, character, logical, double | null> => (double | null);
type `bp_hasName` <list<double>, character[]> => logical[];
type `bp_isFALSE` <class<`data.frame`> | logical> => logical;
type `bp_isTRUE` <class<`data.frame`> | logical> => logical;
type `bp_...length` < > => integer;
type `bp_lengths` <list<integer[] | double>, logical> => integer[];
type `bp_startsWith` <character[], character> => logical[];
type `bp_strrep` <character, double> => character;
type `bp_trimws` <character[], character[]> => character[];
type `bp_URLencode` <character, logical, logical> => character;
type `bp_.valid_factor` <class<`factor`>> => logical;
type `bp_warningCondition` <character, ..., null, null> => class<`condition`, `warning`>;
type `evalVis` <class<`{`>> => list<null | logical>;
type `filter` <character[]> => logical[];
type `FUN` <character> => character | <...> => character;
type `isTRUE` <class<`data.frame`> | logical> => logical;
type `mysub` <character, character[]> => character[];
