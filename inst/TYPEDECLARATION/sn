type `.local` <null | double[] | character[] | symbol, null | null | double[], null | null | logical | character, character | double | language | any => any, null | character | null, null | double, null | expression | double | character, null | ^double[], null | struct<`col`:null, `pch`:null, `cex`:null, `id.i`:integer[]> | struct<`col`:double, `pch`:null, `cex`:null, `id.i`:integer[]> | struct<`col`:double, `cex`:double, `pch`:double> | struct<`col`:character, `pch`:double, `cex`:null, `id.i`:integer[]> | character[], double, null | double, language | logical, double[] | language, double> => null | ^double[] | struct<`object`:null, `diagonal component chloride`:tuple<>, `plot of components ( 2 # 1 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 3 # 1 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 1 # 2 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `diagonal component glycerol`:tuple<>, `plot of components ( 3 # 2 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 1 # 3 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 2 # 3 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `diagonal component magnesium`:tuple<>> | struct<`object`:null, `diagonal component RCC`:tuple<>, `plot of components ( 2 # 1 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 3 # 1 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 1 # 2 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `diagonal component Hg`:tuple<>, `plot of components ( 3 # 2 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 1 # 3 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 2 # 3 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `diagonal component Fe`:tuple<>> | struct<`object`:null, `plot`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>> | struct<`object`:null, `x`:double[], `density`:double[]>;
type `a` <double> => double;
type `b` <null | double> => null | double;
type `beta0.sq` <double> => double;
type `c1` <double> => double;
type `coef` <character | null | logical> => double[] | struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[]> | struct<`beta`:^double[], `var.cov`:^double[], `gamma1`:double[]> | struct<`beta~`:^double[], `var.cov~`:^double[], `gamma1~`:double[], `gamma2M~`:double>;
type `confint` <character[] | integer[] | null, double, character | null> => ^double[];
type `d.fn` <^double[], double | language, double | null, double | null, double[], double[] | struct<`xi`:double[], `Omega`:^double[], `alpha`:double[]>, logical> => double[];
type `Deta.mu0` <double> => ^double[];
type `Deta.nu` <double> => double[];
type `Deta.vSigma` <double> => ^double[];
type `Dg1.delta` <double, double> => double;
type `Dg1.nu` <double, double> => double;
type `Dg2.delta` <double, double> => double;
type `Dg2.nu` <double, double> => double;
type `Dgamma1.misc` <double> => struct<`Dgamma1.vOmega`:^double[], `Dgamma1.mu0`:^double[], `Dgamma1.nu`:double[]>;
type `Dgamma2M.misc` <double> => struct<`Dgamma2M.vSigma`:double[], `Dgamma2M.mu0`:double[], `PDgamma2.nu`:double>;
type `Dkappa2.nu` <double, double> => double;
type `dmsn` <^double[], double[], ^double[], double[], double, null, logical> => double[];
type `dmst` <^double[], ^double[], ^double[], double[], double, null, logical> => double[];
type `dp2cp` <double[] | null | struct<`xi`:integer[], `Omega`:^double[], `alpha`:double[], `nu`:double>, character | null, null, character, null | double> => double[] | struct<`mean`:double[]>;
type `dp2op` <struct<`xi`:integer[], `Omega`:^double[], `alpha`:double[], `nu`:double>, character> => struct<`xi`:integer[], `Psi`:^double[], `lambda`:double[], `nu`:double>;
type `Dq1.nu` <double> => double;
type `dsbeta` <double[], double, logical> => double[];
type `dsc` <double[], double, double, double, null, logical> => double[];
type `dsn` <double[], double[], double, double, double, null | double[], logical> => double[];
type `dst` <double[], double[], double, double, double, null, logical> => double[];
type `dSymmModulated` <double[], double, double, character, character, any => any, null | double, null | null, character, logical, double[]> => double[];
type `DvOmega.mu0` <double> => ^double[];
type `DvOmega.nu` <double> => double[];
type `DvOmega.vSigma` <double> => ^double[];
type `extractSECdistr` <null> => null;
type `f` <double[], double | struct<`xi`:integer[], `Omega`:^double[], `alpha`:double[], `nu`:double>, double[], double[], double[], double[], logical> => double[];
type `filter` <character[]> => logical[];
type `fitted` <character | null> => ^double[];
type `fn` <double[], ^double[], ^double[], double[], null | logical, logical, null, logical> => null | double;
type `fn.alpha` <double> => double;
type `fn1` <double, double, double, double[]> => double;
type `fn2` <double, double, double, double[]> => double;
type `fun` <symbol, symbol> => null;
type `FUN` <double[], integer[]> => double[];
type `func` <double[], ^double[], ^double[], character | double[], null> => double[];
type `gr` <double[], ^double[], ^double[], double[], logical> => double[];
type `gradient` <double[], ^double[], ^double[], double[], logical> => double[];
type `hessian` <double[], ^double[], double[], double[], null | any => any, logical> => ^double[];
type `kappa2` <double, double> => double;
type `localPlot` <null, null, null> => struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>;
type `logLik` <null> => double;
type `makeSECdistr` <character, character | null, character[] | null> => struct<``:double[], `Omega`:^double[], `alpha`:double[]> | struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[], `nu`:double> | struct<`beta`:double[], `Omega`:^double[], `alpha`:double[]> | struct<`xi`:double[], `Omega`:^double[], `alpha`:double[], `nu`:double> | struct<`xi`:double[], `Omega`:^double[], `alpha`:double[], `tau`:double> | struct<`xi`:double[], `Omega`:^double[], `alpha`:integer[]> | struct<`xi`:integer[], `Omega`:^integer[], `alpha`:double[]> | double[];
type `marginalSECdistr` <character | null, logical> => double[];
type `mean` <null> => double[];
type `modeSECdistr` <null | struct<`xi`:integer[], `Omega`:^double[], `alpha`:double[], `nu`:double>, null | character, null> => double[];
type `modeSECdistrUv` <double[], character> => double;
type `msn.dev` <double[], ^double[], ^double[], double[], logical> => double;
type `msn.mle` <^double[], ^double[], null, null | double[], logical, character, tuple<>> => struct<`call`:language, `dp`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[]>, `logL`:double, `aux`:struct<`alpha.star`:double, `delta.star`:double>, `opt.method`:struct<`par`:double[], `value`:double, `counts`:integer[], `convergence`:integer, `message`:null, `method`:character, `called.by`:character>> | struct<`call`:language, `dp`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[]>, `logL`:double, `aux`:struct<`alpha.star`:double, `delta.star`:double>, `opt.method`:struct<`par`:double[], `objective`:double, `convergence`:integer, `iterations`:integer, `evaluations`:integer[], `message`:character, `value`:double, `method`:character, `called.by`:character>>;
type `msn.moment.fit` <^double[]> => struct<`xi`:double[], `Omega`:^double[], `alpha`:double[], `Omega.cor`:^double[], `omega`:double[], `delta`:double[], `skewness`:double[], `admissible`:logical>;
type `mst.gamma2M` <double, double, integer> => double;
type `mst.mple` <^double[], ^double[], null, double[], null, logical, null, logical, character, tuple<>> => struct<`call`:language, `dp`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[], `nu`:double>, `dp.complete`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[], `nu`:double>, `logL`:double, `boundary`:logical, `aux`:struct<`fixed.nu`:null, `symmetr`:logical, `alpha.star`:double, `delta.star`:double>, `opt.method`:struct<`par`:double[], `value`:double, `counts`:integer[], `convergence`:integer, `message`:null, `hessian`:^double[], `method`:character, `called.by`:character>> | struct<`call`:language, `dp`:struct<`beta`:^double[], `Omega`:^double[], `nu`:double>, `dp.complete`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[], `nu`:double>, `logL`:double, `boundary`:logical, `aux`:struct<`fixed.nu`:null, `symmetr`:logical, `alpha.star`:double, `delta.star`:double>, `opt.method`:struct<`par`:double[], `objective`:double, `convergence`:integer, `iterations`:integer, `evaluations`:integer[], `message`:character, `value`:double, `method`:character, `called.by`:character>>;
type `mst.theta.jacobian` <double[], integer, integer, character> => struct<`Dtheta.dp`:^double[], `Dtheta.cp`:^double[], `Dtheta.phi`:^double[], `Dcp.phi`:^double[]>;
type `mu.z` <double, double> => double;
type `mu0` <double> => double[];
type `objective` <double[], ^double[], ^double[], double[], null | logical, logical, null, logical> => double;
type `op2dp` <struct<`xi`:double[], `Psi`:^double[], `lambda`:double[]>, character> => struct<`xi`:double[], `Omega`:^double[], `alpha`:double[]>;
type `optpar2dplist` <double[], integer, integer, null | character[], null | character[]> => struct<`dp`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[], `nu`:double>, `beta`:^double[], `Omega`:^double[], `alpha`:double[], `nu`:double, `Omega.inv`:^double[], `log.det`:double>;
type `param.names` <character, character, double, null | character[], logical[] | null> => character[];
type `plot` <null, character | null | double[]> => null | struct<`object`:null, `diagonal component chloride`:tuple<>, `plot of components ( 2 # 1 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 3 # 1 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 1 # 2 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `diagonal component glycerol`:tuple<>, `plot of components ( 3 # 2 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 1 # 3 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 2 # 3 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `diagonal component magnesium`:tuple<>> | struct<`object`:null, `diagonal component RCC`:tuple<>, `plot of components ( 2 # 1 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 3 # 1 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 1 # 2 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `diagonal component Hg`:tuple<>, `plot of components ( 3 # 2 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 1 # 3 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `plot of components ( 2 # 3 )`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>, `diagonal component Fe`:tuple<>> | struct<`object`:null, `plot`:struct<`x`:double[], `y`:double[], `names`:character[], `density`:^double[], `contourLines`:tuple<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>, struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>>> | struct<`object`:null, `x`:double[], `density`:double[]>;
type `plot2D.SymmModulated` <^double[], double[], double[], ^double[], character, character, any => any, null, null, character, double[]> => struct<`x`:double[], `y`:double[], `pdf`:^double[]>;
type `pmsn` <^double[], double[], ^double[], double[], double, null, null | double> => double[];
type `pmst` <double[], double[], ^double[], double[], double, null, double | null> => double;
type `profile.selm` <character, character[], tuple<double[], double[]> | double[], null | double[], tuple<> | character | null, logical, logical, null, logical, null> => struct<`call`:language, `alpha`:double, `logLik`:double> | struct<`call`:language, `(Intercept.CP)`:double[], `gamma1`:double[], `logLik`:^double[], `deviance.contour`:list<struct<`level`:double, `x`:double[], `y`:double[], `prob`:double>>> | struct<`call`:language, `alpha`:double[], `logLik`:double[], `deviance`:double[], `confint`:double[], `level`:double> | struct<`call`:language, `gamma1`:double[], `logLik`:double[], `deviance`:double[], `confint`:double[], `level`:double>;
type `psc` <double[], double, double, double, null> => double[];
type `psn` <double[], double, double, double, double, null | double[], null, null> => double[];
type `pst_int` <double[], double, double, double, double> => double[];
type `q1` <double> => double;
type `q2` <double> => double;
type `qst_bounds` <double[], double, double> => ^double[];
type `r` <double, double, double> => double;
type `residuals` <character | null> => ^double[];
type `rSymmModulated` <double, double, double, character, character, any => any, double, double, character, double> => double[];
type `sd` <null> => double;
type `seqLog` <double, double, double, logical> => double[];
type `show` < > => null | double[];
type `Sigma.etc` <double> => struct<`Sigma`:^double[], `Sigma.inv`:^double[], `Sigma.inv_mu0`:double[], `sigma`:double[]>;
type `Sign` <double> => double;
type `sn.cumulants` <double, double, double[], double, null | double[], double> => ^double[];
type `sn.infoMv` <struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[]>, ^double[], ^double[], double[], null, double> => struct<`dp`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[]>, `cp`:struct<`beta`:^double[], `var.cov`:^double[], `gamma1`:double[]>, `type`:character, `info.dp`:^double[], `info.cp`:^double[], `asyvar.dp`:^double[], `asyvar.cp`:^double[], `se.dp`:struct<`beta`:^double[], `diagOmega`:double[], `alpha`:double[]>, `se.cp`:struct<`beta`:^double[], `var`:double[], `gamma1`:double[]>, `aux`:struct<`info.theta`:^double[], `score.theta`:double[], `Dtheta.dp`:^double[], `Dpsi.cp`:^double[], `Dtheta.psi`:^double[], `uaA.coef`:null>>;
type `sn.infoUv` <null | double[], null | double[], null | ^double[], double[] | null, double[] | null, null | character, double> => struct<`dp`:double[], `cp`:double[], `type`:character, `info.dp`:^double[], `info.cp`:^double[], `asyvar.dp`:^double[], `asyvar.cp`:^double[], `aux`:struct<`Ddp.cp`:^double[], `a.coef`:null, `score.cp`:double[]>> | struct<`dp`:double[], `cp`:double[], `type`:character, `info.dp`:^double[], `info.cp`:^double[], `asyvar.dp`:^double[], `asyvar.cp`:^double[], `aux`:struct<`Ddp.cp`:^double[], `a.coef`:double[], `score.cp`:null>>;
type `sn.mple` <^double[], double[], null, double[] | null, null | character, logical, character[], null | tuple<>> => struct<`call`:language, `cp`:double[], `logL`:double, `boundary`:logical, `opt.method`:struct<`par`:double[], `objective`:double, `convergence`:integer, `iterations`:integer, `evaluations`:integer[], `message`:character, `value`:double, `method`:character, `called.by`:character>>;
type `st.cumulants` <double, double, double, double, null | double[], double> => ^double[];
type `st.gamma1` <double[], double> => double[];
type `st.gamma2` <double, double> => double;
type `st.infoMv` <struct<`beta`:^double[], `Omega`:^double[], `nu`:double>, ^double[], ^double[], double[], null, logical, null, double> => struct<`dp`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[], `nu`:double>, `cp`:struct<`beta`:^double[], `var.cov`:^double[], `gamma1`:double[], `gamma2M`:double>, `type`:character, `info.dp`:^double[], `info.cp`:^double[], `asyvar.dp`:^double[], `asyvar.cp`:^double[], `asyvar.p_cp`:^double[], `se.dp`:struct<`beta`:^double[], `diagOmega`:double[], `alpha`:double[], `nu`:double>, `se.cp`:struct<`beta`:^double[], `var`:double[], `gamma1`:double[], `gamma2`:double>, `se.p_cp`:struct<`beta`:^double[], `var`:double[], `gamma1`:double[], `gamma2`:double>, `aux`:struct<`Dpseudocp.dp`:^double[]>> | struct<`dp`:struct<`beta`:^double[], `Omega`:^double[], `alpha`:double[], `nu`:double>, `cp`:null, `type`:character, `info.dp`:^double[], `info.cp`:null, `asyvar.dp`:null, `asyvar.cp`:null, `asyvar.p_cp`:null, `se.dp`:tuple<null>, `se.cp`:null, `se.p_cp`:tuple<null>, `aux`:struct<`Dpseudocp.dp`:null>> | struct<`dp`:struct<`beta`:^double[], `Omega`:^double[], `nu`:double>, `cp`:struct<`beta`:^double[], `var.cov`:^double[], `gamma2M`:double>, `type`:character, `info.dp`:^double[], `info.cp`:^double[], `asyvar.dp`:^double[], `asyvar.cp`:^double[], `asyvar.p_cp`:^double[], `se.dp`:struct<`beta`:^double[], `diagOmega`:double[], `alpha`:double[], `nu`:double>, `se.cp`:struct<`beta`:^double[], `var`:double[], `gamma1`:null, `gamma2`:double>, `se.p_cp`:struct<`beta`:^double[], `var`:double[], `gamma1`:null, `gamma2`:double>, `aux`:struct<`Dpseudocp.dp`:^double[]>>;
type `st.infoUv` <double[], null, ^double[], double[], double[], null | double, logical, null, double> => struct<`dp`:double[], `cp`:double[], `type`:character, `info.dp`:^double[], `info.cp`:^double[], `asyvar.dp`:^double[], `asyvar.cp`:^double[], `aux`:struct<`score.dp`:double[], `Dcp.dp`:^double[], `Ddp.cp`:^double[]>>;
type `st.mple` <^double[], double[], null, double[] | null, null | double, logical, null | character, logical, character[], null | tuple<>> => struct<`call`:language, `dp`:double[], `fixed.nu`:null, `logL`:double, `dp.complete`:double[], `boundary`:logical, `opt.method`:struct<`par`:double[], `objective`:double, `convergence`:integer, `iterations`:integer, `evaluations`:integer[], `message`:character, `value`:double, `method`:character, `called.by`:character>> | struct<`call`:language, `dp`:double[], `fixed.nu`:double, `logL`:double, `dp.complete`:double[], `boundary`:logical, `opt.method`:struct<`par`:double[], `objective`:double, `convergence`:integer, `iterations`:integer, `evaluations`:integer[], `message`:character, `value`:double, `method`:character, `called.by`:character>>;
type `summary` < > => character | null | double[];
type `T.int` <double[], double, double, double> => double[];
type `text.id` <double[], double[], integer[], logical> => null;
type `u` <double> => double;
type `validityMethod` < > => logical;
type `vcov` <character | null> => ^double[];
type `vech` <^double[]> => double[];
type `weights.mselm` <null> => null;
type `weights.selm` <null> => null;
type `zeta` <double, ^double[]> => ^double[];
