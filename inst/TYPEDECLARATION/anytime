type `:::` < > => character;
type `addFormats` <character[]> => null;
type `anydate` <class<`POSIXct`, `POSIXt`> | character[] | class<`Date`> | class<`factor`> | class<`factor`, `ordered`> | double[], any, logical, any, logical> => class<`Date`>;
type `anydate.Date` <class<`Date`>, any, logical, any, logical> => class<`Date`>;
type `anydate.default` <character[] | double[], character, logical, logical, logical> => class<`Date`>;
type `anydate.factor` <class<`factor`> | class<`factor`, `ordered`>, any, logical, any, logical> => class<`Date`>;
type `anydate.POSIXt` <class<`POSIXct`, `POSIXt`>, character, logical, any, logical> => class<`Date`>;
type `anytime` <character[], any, logical, any, any, logical> => class<`POSIXct`, `POSIXt`>;
type `anytime_cpp` <character[] | double[], character, logical, logical, logical, logical> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `anytime.default` <character[], character, logical, logical, logical, logical> => class<`POSIXct`, `POSIXt`>;
type `assertDate` <class<`POSIXct`, `POSIXt`> | character[] | class<`Date`>> => class<`Date`>;
type `assertTime` <character[]> => class<`POSIXct`, `POSIXt`>;
type `filter` <character[]> => logical[];
type `fun` <any, any> => logical;
type `getFormats` < > => character[];
type `getTZ` < > => character;
type `iso8601` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => character;
type `iso8601.Date` <class<`Date`>> => character;
type `iso8601.POSIXt` <class<`POSIXct`, `POSIXt`>> => character;
type `removeFormats` <character> => null;
type `rfc2822` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => character;
type `rfc2822.Date` <class<`Date`>> => character;
type `rfc2822.POSIXt` <class<`POSIXct`, `POSIXt`>> => character;
type `rfc3339` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => character;
type `rfc3339.Date` <class<`Date`>> => character;
type `rfc3339.POSIXt` <class<`POSIXct`, `POSIXt`>> => character;
type `setInitialTZ` <character> => null;
type `utcdate` <character[], any, any, logical> => class<`Date`>;
type `utcdate.default` <character[], character, logical, logical> => class<`Date`>;
type `utctime` <character[], character, logical, logical, logical> => class<`POSIXct`, `POSIXt`>;
type `yyyymmdd` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => character;
