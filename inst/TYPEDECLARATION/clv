type `$` <integer[], any> => integer[] | <class<`matrix`>, double, character, ...> => class<`agnes`, `twins`> | <class<`kmeans`>, any> => integer[] | <class<`matrix`>, double, character, ...> => class<`hclust`> | <class<`matrix`>, integer, null, ...> => class<`kmeans`> | <class<`matrix`>, integer, null, ...> => integer[];
type `bcls.matrix` <class<`matrix`>, integer[], double[]> => class<`matrix`>;
type `check.avail.methods` <character[], character, character[]> => logical[];
type `check.clust.wrappers` <class<`cls.alg`> | class<`function`>> => (class<`cls.alg`> | list<class<`function`> | logical>);
type `check.intercls.method` <character[]> => logical[];
type `check.intracls.method` <character[]> => logical[];
type `check.rep.num` <double> => integer;
type `check.res` <integer[], double, any, any> => null;
type `check.subset.ratio` <class<`matrix`>, double> => double;
type `cls.alg` <class<`function`>, class<`function`>, logical> => class<`cls.alg`>;
type `cls.attrib` <class<`data.frame`> | class<`matrix`>, integer[]> => list<double[] | class<`matrix`>>;
type `cls.class` < > => character;
type `cls.id.vect.validity` <integer[], character> => integer[];
type `cls.num.vect.validity` <double[], integer, character> => integer[];
type `cls.scatt.data` <class<`data.frame`>, integer[], character> => class<`cls.list`>;
type `cls.scatt.diss.mx` <class<`matrix`>, integer[]> => class<`cls.list`>;
type `cls.set.section` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `cls.stab.opt.assign` <class<`data.frame`>, double[], double, double, character[], character[], logical, ...> => list<double[]>;
type `cls.stab.opt.assign.usr` <class<`data.frame`>, double[], class<`cls.alg`>, double, double> => double[];
type `cls.stab.sim.ind` <class<`data.frame`>, double[], double, double, character[], character[], character[], logical, ...> => list<list<class<`data.frame`>>>;
type `cls.stab.sim.ind.usr` <class<`data.frame`>, double[], class<`function`>, character[], double, double> => list<class<`data.frame`>>;
type `cluster.size` <integer[], integer> => integer[];
type `clust.method` <class<`matrix`>, integer> => integer[] | <class<`matrix`>> => (class<`agnes`, `twins`> | class<`hclust`>) | <class<`matrix`>, integer> => integer[] | <class<`matrix`>, integer> => integer[];
type `clust.stab.opt.assign.hver` <class<`matrix`>, integer[], integer, double, class<`function`>, class<`function`>> => double[];
type `clust.stab.opt.assign.pver` <class<`matrix`>, integer[], integer, double, class<`function`>> => double[];
type `clust.stab.sim.ind.hver` <class<`matrix`>, integer[], integer, double, class<`function`>, class<`function`>, logical[]> => list<class<`data.frame`>>;
type `clust.stab.sim.ind.pver` <class<`matrix`>, integer[], integer, double, class<`function`>, logical[]> => list<class<`data.frame`>>;
type `clust.stab.sim.ind.pver.internal` <class<`matrix`>, integer, integer, double, class<`function`>, logical[]> => class<`matrix`>;
type `clust.wrap` <class<`agnes`, `twins`> | class<`hclust`>, integer> => integer[];
type `clv_conv` <list<double>> => integer[];
type `clv.Davies.Bouldin` <class<`cls.list`>, character[], character[]> => class<`matrix`>;
type `clv.DB.ind` <double[], class<`matrix`>, integer> => double;
type `clv.DensBw` <class<`data.frame`>, integer[], class<`scatt.obj`>, character> => double;
type `clv.Dis` <class<`matrix`>> => double;
type `clv.Dunn` <class<`cls.list`>, character[], character[]> => class<`matrix`>;
type `clv.Folkes.Mallows` <list<double>> => double;
type `clv.Jaccard` <list<double>> => double;
type `clv.Rand` <list<double>> => double;
type `clv.Scatt` <class<`data.frame`>, integer[], character> => class<`scatt.obj`>;
type `clv.SD` <double, double, double> => double;
type `clv.SDbw` <double, double> => double;
type `confusion.matrix` <integer[], integer[]> => class<`matrix`>;
type `connectivity` <class<`data.frame`>, integer[], double, character> => double;
type `connectivity.diss.mx` <class<`matrix`>, integer[], double> => double;
type `cut.cl.num` <class<`matrix`>, integer[], double> => integer[];
type `cut.matrix` <class<`matrix`>, logical[], character[]> => class<`matrix`>;
type `cut.vector` <double[], logical[], character[]> => class<`matrix`>;
type `data.validity` <class<`matrix`> | class<`data.frame`>, character> => class<`matrix`>;
type `data.validity.int` <class<`matrix`>, character> => class<`matrix`>;
type `dist.validity` <character> => integer;
type `dot.product` <integer[], integer[]> => double;
type `filter` <character[]> => logical[];
type `similarity.index` <class<`matrix`>> => double;
type `similarity.index.int` <class<`matrix`>, null> => double;
type `std.ext` <integer[], integer[]> => list<double>;
type `wcls.matrix` <class<`data.frame`>, integer[], class<`matrix`>> => class<`matrix`>;
