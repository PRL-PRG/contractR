type `coercedMsg` <character[] | class<`data.frame`> | class<`dummy`> | class<`factor`> | class<`matrix`> | integer[], character> => character;
type `coerceListComponents` <list<any>, list<any>, character[], logical, logical, ...> => class<`comparison`, `multipleComparison`>;
type `commentQuestion` <class<`comparisonList`> | class<`comparisonListList`>, class<`questionComments`>> => character[];
type `commentQuestion.comparisonList` <class<`comparisonList`>, class<`questionComments`>> => character;
type `commentQuestion.comparisonListList` <class<`comparisonListList`>, class<`questionComments`>> => character[];
type `commentQuestions` <class<`comparisonListList`>, ...> => class<`matrix`>;
type `comments` <character, ...> => class<`markingComments`>;
type `compare` <character[] | class<`data.frame`> | class<`factor`> | double[] | class<`lm`> | class<`call`> | class<`formula`, `terms`> | class<`matrix`> | class<`qr`> | list<integer[] | character[] | character[] | class<`matrix`> | double[]>, class<`factor`> | class<`matrix`> | class<`data.frame`> | character[] | double[] | class<`lm`> | class<`call`> | class<`formula`, `terms`> | class<`qr`> | list<character[] | class<`matrix`> | double[]>, logical, any, any, any, any, any, any, logical | class<`function`>, any, any, any, any, any, any, any, any, logical> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareCoerce` <character[] | class<`factor`> | double[] | class<`data.frame`> | class<`lm`> | expression | class<`call`> | class<`formula`, `terms`> | class<`matrix`> | class<`qr`> | list<any>, class<`factor`> | character[] | class<`matrix`> | double[] | class<`data.frame`> | class<`lm`> | expression | class<`dummy`> | class<`call`> | class<`formula`, `terms`> | class<`qr`> | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareCoerce.character` <character[], character[] | class<`factor`>, character[], any, ...> => class<`comparison`>;
type `compareCoerce.data.frame` <class<`data.frame`>, class<`data.frame`>, character[], any, logical, logical, ...> => class<`comparison`, `multipleComparison`>;
type `compareCoerce.default` <class<`call`> | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression, class<`call`> | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression, character[], ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareCoerceDF` <class<`data.frame`>, class<`data.frame`>, character[], ...> => class<`comparison`, `multipleComparison`>;
type `compareCoerce.factor` <class<`factor`>, character[] | class<`factor`> | integer[], character[], any, ...> => class<`comparison`>;
type `compareCoerce.integer` <integer[], character[] | class<`factor`> | integer[], character[], logical, ...> => class<`comparison`>;
type `compareCoerce.language` <class<`call`> | class<`formula`, `terms`> | expression, class<`call`> | class<`formula`, `terms`> | expression, character[], ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareCoerce.list` <list<any>, class<`data.frame`> | class<`dummy`> | list<any>, character[], any, logical, logical, ...> => (class<`comparison`, `multipleComparison`> | class<`comparison`>);
type `compareCoerce.matrix` <class<`matrix`>, class<`matrix`>, character[], logical, ...> => class<`comparison`>;
type `compareCoerce.numeric` <double[], character[] | class<`matrix`> | double[], character[], any, ...> => class<`comparison`>;
type `compareEqual` <character[] | class<`call`> | class<`factor`> | class<`formula`, `terms`> | class<`matrix`> | double[] | class<`data.frame`> | class<`lm`> | class<`qr`> | expression | class<`array`> | class<`table`> | list<any>, character[] | class<`factor`> | class<`matrix`> | class<`call`> | double[] | class<`formula`, `terms`> | class<`data.frame`> | class<`lm`> | class<`qr`> | expression | class<`array`> | class<`table`> | list<any>, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareEqual.array` <class<`array`> | class<`matrix`> | class<`table`>, class<`array`> | class<`matrix`> | class<`table`>, character[], logical, ...> => class<`comparison`>;
type `compareEqual.character` <character[], character[] | class<`factor`> | class<`matrix`>, character[], any, any, ...> => class<`comparison`>;
type `compareEqual.data.frame` <class<`data.frame`>, class<`data.frame`>, character[], logical, logical, ..., class<`function`>> => class<`comparison`, `multipleComparison`>;
type `compareEqual.default` <class<`call`> | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression, class<`call`> | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression, character[], ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareEqualDF` <class<`data.frame`>, class<`data.frame`>, class<`function`>, character[], any, any, logical, logical, ...> => class<`comparison`, `multipleComparison`>;
type `compareEqual.factor` <class<`factor`>, character[] | class<`factor`> | double[], character[], any, any, ...> => class<`comparison`>;
type `compareEqual.language` <class<`call`> | class<`formula`, `terms`> | expression, class<`call`> | class<`formula`, `terms`> | expression, character[], ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareEqual.list` <list<any>, class<`data.frame`> | list<any>, character[], logical, logical, ..., any> => (class<`comparison`, `multipleComparison`> | class<`comparison`>);
type `compareEqual.matrix` <class<`array`> | class<`matrix`> | class<`table`>, class<`array`> | class<`matrix`> | class<`table`>, character[], logical, ...> => class<`comparison`>;
type `compareEqual.numeric` <double[], character[] | class<`factor`> | class<`matrix`> | double[], character[], any, ...> => class<`comparison`>;
type `compareEqual.table` <class<`array`> | class<`matrix`> | class<`table`>, class<`array`> | class<`matrix`> | class<`table`>, character[], logical, ...> => class<`comparison`>;
type `compareFile` <character | class<`connection`, `textConnection`>, character[], character | null, null, null | list<integer[]>, logical | class<`function`> | list<class<`function`> | logical>, ...> => class<`comparisonList`>;
type `compareFiles` <character[], character[], character, null, character[], ...> => class<`comparisonListList`>;
type `compareIdentical` <character[] | class<`call`> | class<`data.frame`> | class<`factor`> | class<`formula`, `terms`> | class<`lm`> | class<`matrix`> | class<`qr`> | double[] | expression | list<any>, character[] | class<`factor`> | class<`matrix`> | class<`call`> | class<`data.frame`> | double[] | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression | list<any>, any, ...> => class<`comparison`>;
type `compareIdentical.default` <character[] | class<`call`> | class<`data.frame`> | class<`factor`> | class<`formula`, `terms`> | class<`lm`> | class<`matrix`> | class<`qr`> | double[] | expression | list<any>, character[] | class<`factor`> | class<`matrix`> | class<`call`> | class<`data.frame`> | double[] | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression | list<any>, character[], ...> => class<`comparison`>;
type `compareIgnoreAttrs` <character[] | class<`data.frame`> | class<`factor`> | double[] | class<`matrix`> | list<any>, class<`matrix`> | character | class<`data.frame`> | class<`factor`> | double[] | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreAttrs.default` <character[] | class<`data.frame`> | class<`factor`> | class<`matrix`> | double[] | list<any>, class<`matrix`> | character | class<`data.frame`> | class<`factor`> | double[] | list<any>, character[], any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreNameCase` <character | class<`data.frame`> | class<`factor`> | double[] | list<any>, character | class<`data.frame`> | class<`factor`> | double[] | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreNameCase.data.frame` <class<`data.frame`>, class<`data.frame`>, any, any, logical, logical, logical, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreNameCase.default` <character | class<`data.frame`> | class<`factor`> | double[], character | class<`data.frame`> | class<`factor`> | double[], character[], any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreNameCase.list` <list<any>, list<any>, character[], logical, logical, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreNames` <character | class<`data.frame`> | class<`factor`> | double[] | list<any>, character | class<`data.frame`> | class<`factor`> | double[] | list<any>, any, logical, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreNames.data.frame` <class<`data.frame`>, class<`data.frame`>, any, logical, logical, logical, logical, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreNames.default` <character | class<`data.frame`> | class<`factor`> | double[], character | class<`data.frame`> | class<`factor`> | double[], character[], logical, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreNames.list` <list<any>, list<any>, character[], logical, logical, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreOrder` <character | double[] | class<`data.frame`> | class<`lm`> | class<`table`> | expression | list<any>, character[] | double[] | class<`data.frame`> | class<`lm`> | class<`table`> | expression | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreOrder.data.frame` <class<`data.frame`>, class<`data.frame`>, character[], logical, logical, logical, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreOrder.default` <character | class<`lm`> | class<`table`> | double[] | expression, class<`lm`> | class<`table`> | character[] | double[] | expression, character[], any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreOrder.language` <expression, expression, character[], ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareIgnoreOrder.list` <list<any>, list<any>, character[], logical, logical, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareListComponents` <list<any>, class<`data.frame`> | list<any>, character[], list<any>, class<`data.frame`> | list<any>, character[], logical, logical, ..., class<`function`>> => class<`comparison`, `multipleComparison`>;
type `compareShorten` <character[] | class<`matrix`> | double[] | class<`data.frame`> | class<`array`> | class<`lm`> | class<`table`> | expression | list<any>, character[] | class<`array`> | double[] | class<`data.frame`> | class<`matrix`> | class<`lm`> | expression | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareShorten.array` <class<`array`> | class<`matrix`> | class<`table`>, class<`matrix`> | class<`array`>, character[], logical, ...> => class<`comparison`>;
type `compareShorten.data.frame` <class<`data.frame`>, class<`data.frame`>, character[], logical, logical, logical, logical, ...> => class<`comparison`, `multipleComparison`>;
type `compareShorten.default` <character[] | class<`lm`> | double[] | expression, character[] | class<`lm`> | double[] | expression, character[], any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareShorten.list` <list<any>, list<any>, character[], logical, logical, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `compareShorten.matrix` <class<`array`> | class<`matrix`> | class<`table`>, class<`matrix`> | class<`array`>, character[], logical, ...> => class<`comparison`>;
type `compareShorten.table` <class<`array`> | class<`matrix`> | class<`table`>, class<`matrix`> | class<`array`>, character[], logical, ...> => class<`comparison`>;
type `comparison` <character[] | class<`call`> | class<`data.frame`> | class<`factor`> | class<`formula`, `terms`> | class<`lm`> | class<`matrix`> | class<`qr`> | double[] | expression | list<any>, character[] | class<`factor`> | class<`matrix`> | class<`call`> | class<`data.frame`> | null | double[] | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression | list<any>, logical, character[], character[] | class<`call`> | class<`data.frame`> | class<`factor`> | class<`formula`, `terms`> | class<`lm`> | class<`matrix`> | class<`qr`> | double[] | expression | list<any>, character[] | class<`factor`> | class<`matrix`> | class<`call`> | class<`data.frame`> | null | double[] | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression | list<any>, character[]> => class<`comparison`>;
type `comparisonComments` <class<`markingComments`>, class<`comparison`>> => character;
type `dimnamesINdimnames` <list<character[]>, list<character[]>> => list<integer[]>;
type `dropDimensions` <class<`array`> | class<`matrix`> | class<`table`>, class<`matrix`> | class<`array`>, character[]> => list<class<`matrix`> | character>;
type `dropDimensions.array` <class<`array`>, class<`matrix`>, character[]> => list<class<`matrix`> | character>;
type `dropDimensions.matrix` <class<`matrix`>, class<`array`>, character[]> => list<class<`matrix`> | character>;
type `dropDimensions.table` <class<`table`>, class<`matrix`>, character[]> => list<class<`matrix`> | character>;
type `FUN` <character[] | class<`data.frame`> | class<`factor`> | double[] | class<`lm`> | class<`call`> | class<`formula`, `terms`> | class<`matrix`> | class<`qr`> | list<integer[] | character[] | character[] | class<`matrix`> | double[]>, class<`factor`> | class<`matrix`> | class<`data.frame`> | character[] | double[] | class<`lm`> | class<`call`> | class<`formula`, `terms`> | class<`qr`> | list<character[] | class<`matrix`> | double[]>, logical, any, any, any, any, any, any, logical | class<`function`>, any, any, any, any, any, any, any, any, logical> => (class<`comparison`> | class<`comparison`, `multipleComparison`>) | <character[] | class<`factor`> | double[] | class<`data.frame`> | class<`lm`> | expression | class<`call`> | class<`formula`, `terms`> | class<`matrix`> | class<`qr`> | list<any>, class<`factor`> | character[] | class<`matrix`> | double[] | class<`data.frame`> | class<`lm`> | expression | class<`dummy`> | class<`call`> | class<`formula`, `terms`> | class<`qr`> | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>) | <character[] | class<`call`> | class<`factor`> | class<`formula`, `terms`> | class<`matrix`> | double[] | class<`data.frame`> | class<`lm`> | class<`qr`> | expression | class<`array`> | class<`table`> | list<any>, character[] | class<`factor`> | class<`matrix`> | class<`call`> | double[] | class<`formula`, `terms`> | class<`data.frame`> | class<`lm`> | class<`qr`> | expression | class<`array`> | class<`table`> | list<any>, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>) | <character[] | class<`call`> | class<`data.frame`> | class<`factor`> | class<`formula`, `terms`> | class<`lm`> | class<`matrix`> | class<`qr`> | double[] | expression | list<any>, character[] | class<`factor`> | class<`matrix`> | class<`call`> | class<`data.frame`> | double[] | class<`formula`, `terms`> | class<`lm`> | class<`qr`> | expression | list<any>, any, ...> => class<`comparison`> | <character[] | class<`data.frame`> | class<`factor`> | double[] | class<`matrix`> | list<any>, class<`matrix`> | character | class<`data.frame`> | class<`factor`> | double[] | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>) | <character | class<`data.frame`> | class<`factor`> | double[] | list<any>, character | class<`data.frame`> | class<`factor`> | double[] | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>) | <character | class<`data.frame`> | class<`factor`> | double[] | list<any>, character | class<`data.frame`> | class<`factor`> | double[] | list<any>, any, logical, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>) | <character | double[] | class<`data.frame`> | class<`lm`> | class<`table`> | expression | list<any>, character[] | double[] | class<`data.frame`> | class<`lm`> | class<`table`> | expression | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>) | <character[] | class<`matrix`> | double[] | class<`data.frame`> | class<`array`> | class<`lm`> | class<`table`> | expression | list<any>, character[] | class<`array`> | double[] | class<`data.frame`> | class<`matrix`> | class<`lm`> | expression | list<any>, any, any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>) | <class<`comparison`> | character[] | logical> => logical;
type `growComments` <character[], character> => character;
type `isTRUE` <class<`comparison`> | character[] | logical> => logical;
type `isTRUE.comparison` <class<`comparison`>> => logical;
type `markQuestion` <class<`comparisonList`> | class<`comparisonListList`>, class<`questionMarks`>> => double[];
type `markQuestion.comparisonList` <class<`comparisonList`>, class<`questionMarks`>> => double;
type `markQuestion.comparisonListList` <class<`comparisonListList`>, class<`questionMarks`>> => double[];
type `markQuestions` <class<`comparisonListList`>, ...> => class<`matrix`>;
type `multipleComparison` <class<`data.frame`> | list<any>, class<`data.frame`> | list<any>, logical, logical[] | list<any>, character[], class<`data.frame`> | expression | class<`lm`> | list<any>, class<`data.frame`> | expression | class<`lm`> | list<any>, character[]> => class<`comparison`, `multipleComparison`>;
type `questionComments` <character[], ...> => class<`questionComments`>;
type `questionMarks` <character[], double, ...> => class<`questionMarks`>;
type `reorderComparison` <class<`data.frame`> | list<integer[] | character[] | list<class<`factor`>>>, class<`data.frame`> | list<integer[] | character[] | list<class<`factor`>>>, character[], logical, class<`function`>> => list<any>;
type `restoreAttrs` <character[] | class<`factor`> | double[] | list<integer[] | character[] | integer[] | class<`factor`>>, null | list<any>> => (character[] | class<`factor`> | double[] | list<integer[] | character[] | integer[] | class<`factor`>>);
type `rule` <character, double, ...> => class<`markingRule`>;
type `same` <character[] | class<`data.frame`> | class<`factor`> | class<`lm`> | class<`matrix`> | double[] | expression | list<any>, character[] | class<`data.frame`> | class<`factor`> | class<`lm`> | class<`matrix`> | double[] | expression | list<any>, character[], any, ...> => (class<`comparison`> | class<`comparison`, `multipleComparison`>);
type `similarNames` <class<`data.frame`> | list<any>, class<`data.frame`> | list<any>, logical> => logical;
type `sourceFile` <character, character[]> => list<class<`factor`> | double[]>;
type `transformComment` <character, character> => class<`transformComment`>;
type `transformRule` <character, double> => class<`transformRule`>;
type `transforms` <class<`comparison`>> => character[];
