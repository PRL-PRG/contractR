type `:::` <language | null | tuple<language> | character | symbol, any => any> => logical | struct<``:null, `warn`:null, `err`:null> | character[] | struct<`.1.1`:language, `.1.2`:language, `.2.1`:language, `.2.2`:language> | struct<`.1`:language, `.2`:language> | language | any => any | struct<``:double, `warn`:character, `err`:null> | struct<``:null, `warn`:null, `err`:character>;
type `.blocks_expressionset` < > => tuple<integer[]>;
type `.get_exprs` <null, logical, logical, logical, logical, logical, double, double, null | symbol | environment> => tuple<> | struct<`average`:language, `sum`:language> | struct<`I1`:language> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language> | struct<`r2`:language, `r4`:language, `r3`:language> | struct<`r5`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`V4`:language> | struct<`x`:language>;
type `.ini_expressionset_cli` <null | language, character> => tuple<> | list<null>;
type `.ini_expressionset_df` <struct<`rule`:integer[], `label`:integer[], `description`:integer[]>, character> => tuple<null, null>;
type `.ini_expressionset_yml` <character, character> => null | struct<`raise`:character, `lin.eq.eps`:double, `lin.ineq.eps`:double, `na.value`:null, `sequential`:logical, `na.condition`:logical>;
type `.local` <^double[] | struct<>, symbol | struct<> | double | null | character[], null | tuple<> | double | character[] | environment | struct<> | symbol | null | struct<`codelist`:character[]> | struct<`women_reference`:struct<`height`:double[], `weight`:double[]>> | struct<`test`:struct<`height`:double[], `weight`:double[], `id`:character[]>> | struct<`w1`:struct<`height`:double[], `weight`:double[], `id`:character[]>> | struct<`persons`:struct<`person_id`:integer[], `household_id`:integer[]>> | struct<`person`:struct<`person_id`:integer[], `household_id`:integer[]>> | struct<`persons`:struct<`person.id`:integer[], `person`:integer[], `year_of_birth`:^integer[], `gender`:integer[], `expected`:integer[]>> | struct<`test`:struct<`aap`:double>> | struct<`codelist`:integer[]> | struct<`ir`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>>, null | character[] | symbol | null | double, double | null, null | double, null | logical, character[]> => null | ^double[] | tuple<> | struct<`a`:character> | tuple<double[]> | character[] | struct<> | tuple<^logical[]> | struct<`I1`:double, `I2`:double> | struct<`mh`:double, `mw`:double, `BMI`:double[]> | struct<`mw`:double, `ratio`:double[]> | struct<`V1`:logical[]> | struct<`V1`:^logical[], `V2`:^logical[]> | struct<`V2`:logical[]>;
type `.parse_yrf_options` <character[]> => null | struct<`raise`:character>;
type `.readlines_utf8` <character, character> => character[];
type `.show_confrontation` < > => null;
type `.show_expressionset` < > => null;
type `[` <null, null, logical> => double | character[] | integer[] | null;
type `[[` <symbol | struct<`message`:character, `call`:language>, character | double, null, null> => null | logical;
type `[[<-` <null, null> => integer;
type `[<-` <null, null> => double;
type `%vin%` <^character[] | double[], ^character[] | integer[]> => ^logical[];
type `+` <null, null> => null;
type `~` <language | symbol, symbol> => logical[];
type `$` <struct<`expr`:expression, `src`:character> | character | null | language | double, struct<`height`:double[], `weight`:double[], `id`:character[]> | symbol | character | null | language | logical, struct<`height`:double[], `weight`:double[], `id`:character[]> | symbol | null | character> => null | ^double[] | struct<`raise`:character, `lin.eq.eps`:double, `lin.ineq.eps`:double, `na.value`:null, `sequential`:logical, `na.condition`:logical> | struct<> | struct<`A`:^double[], `b`:^double[], `operators`:character> | any => any | tuple<integer[]> | tuple<> | struct<`average`:language, `sum`:language> | struct<`I1`:language> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language> | struct<`r2`:language, `r4`:language, `r3`:language> | struct<`r5`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`V4`:language> | struct<`x`:language> | character;
type `add_assignment` <language, environment> => language;
type `addcoef` <character, double, environment> => double;
type `aggregate` <character | null> => struct<`npass`:double[], `nfail`:double[], `nNA`:double[], `rel.pass`:double[], `rel.fail`:double[], `rel.NA`:double[]>;
type `all` <null, logical> => null | logical;
type `all_complete` <double[]> => logical;
type `all_numeric` <language, environment> => logical;
type `all_unique` <integer[]> => logical;
type `any` <null, logical> => logical;
type `as_yaml` <null> => character;
type `as.data.frame` <^double[], null, logical, null> => struct<`id`:^character[], `id2`:^character[], `name`:character[], `value`:logical[], `expression`:character[]>;
type `as.list.expressionset` <logical, null> => struct<`rules`:tuple<struct<`expr`:character, `name`:character, `label`:character[], `description`:character[], `created`:double, `origin`:character, `meta`:struct<`language`:character, `severity`:character>>>>;
type `barplot` <^double[], null | character | double> => double[] | tuple<double[]>;
type `bp_leg_pos` <double[]> => double;
type `capture` <symbol, symbol> => any => any;
type `catf` <character, null | symbol> => null;
type `cell_diff` <struct<`height`:double[], `weight`:double[], `id`:character[]>, null | struct<`height`:double[], `weight`:double[], `id`:character[]>> => double[];
type `cells` <struct<`height`:double[], `weight`:double[], `id`:character[]>, null, character[]> => ^double[];
type `check_primitives` < > => null;
type `check_that` <language> => struct<`height`:double[], `weight`:double[], `id`:character[]>;
type `compare` <struct<`size`:integer[], `incl.prob`:double[], `staff`:^integer[], `turnover`:^integer[], `other.rev`:^integer[], `total.rev`:^integer[], `staff.costs`:^integer[], `total.costs`:^integer[], `profit`:^integer[], `vat`:^integer[]>> => ^double[];
type `confront` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]> | struct<`codelist`:character[]> | struct<`women_reference`:struct<`height`:double[], `weight`:double[]>> | struct<`test`:struct<`height`:double[], `weight`:double[], `id`:character[]>> | struct<`w1`:struct<`height`:double[], `weight`:double[], `id`:character[]>> | struct<`persons`:struct<`person_id`:integer[], `household_id`:integer[]>> | struct<`person`:struct<`person_id`:integer[], `household_id`:integer[]>> | struct<`persons`:struct<`person.id`:integer[], `person`:integer[], `year_of_birth`:^integer[], `gender`:integer[], `expected`:integer[]>> | struct<`test`:struct<`aap`:double>> | struct<`codelist`:integer[]> | null | struct<`ir`:struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>> | environment, null | character[] | double> => struct<`height`:double[], `weight`:double[], `id`:character[]>;
type `confront_work` <struct<>, character, null | character | double> => environment | symbol;
type `confrontation_nerrs` < > => integer;
type `confrontation_nwarn` < > => integer;
type `created` <null> => double[];
type `created<-` < > => double[];
type `description` <null> => character[];
type `description<-` < > => character[];
type `errors` <null> => struct<`I3`:character> | struct<`V1`:character> | struct<`V2`:character>;
type `event` < > => ^character[];
type `event<-` < > => character[];
type `execute` <tuple<> | struct<`I1`:language> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language, `r2`:language, `r3`:language, `r4`:language, `r5`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`V4`:language> | struct<`x`:language>, symbol | environment, symbol | any => any> => tuple<> | struct<`I1`:struct<``:double[], `warn`:null, `err`:null>, `I2`:struct<``:double, `warn`:null, `err`:null>> | struct<`I1`:struct<``:double, `warn`:null, `err`:null>> | struct<`I1`:struct<``:null, `warn`:null, `err`:null>> | struct<`mh`:struct<``:double, `warn`:null, `err`:null>, `a`:struct<``:null, `warn`:character, `err`:null>> | struct<`mh`:struct<``:double, `warn`:null, `err`:null>, `mw`:struct<``:double, `warn`:null, `err`:null>, `BMI`:struct<``:double[], `warn`:null, `err`:null>> | struct<`mw`:struct<``:double, `warn`:null, `err`:null>, `ratio`:struct<``:double[], `warn`:null, `err`:null>> | struct<`r1`:struct<``:^logical[], `warn`:null, `err`:null>, `r2`:struct<``:^logical[], `warn`:null, `err`:null>, `r3`:struct<``:^logical[], `warn`:null, `err`:null>, `r4`:struct<``:^logical[], `warn`:null, `err`:null>, `r5`:struct<``:null, `warn`:null, `err`:character>> | struct<`V1`:struct<``:logical[], `warn`:character, `err`:null>> | struct<`V1`:struct<``:^logical[], `warn`:null, `err`:null>> | struct<`V1`:struct<``:null, `warn`:null, `err`:character>> | struct<`V1`:struct<``:null, `warn`:null, `err`:null>> | struct<`V2`:struct<``:^logical[], `warn`:null, `err`:null>> | struct<`V3`:struct<``:logical[], `warn`:null, `err`:null>> | struct<`V4`:struct<``:logical, `warn`:null, `err`:null>> | struct<`x`:struct<``:null, `warn`:character, `err`:null>>;
type `expand_assignments` <tuple<> | struct<`root`:language, `average`:language, `sum`:language> | struct<`I1`:language> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language> | struct<`r2`:language, `r4`:language, `r3`:language> | struct<`r5`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`x`:language>> => tuple<> | struct<`average`:language, `sum`:language> | struct<`I1`:language> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language> | struct<`r2`:language, `r4`:language, `r3`:language> | struct<`r5`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`V4`:language> | struct<`x`:language>;
type `expand_groups` <tuple<> | struct<`.1.1`:language, `.1.2`:language, `.2.1`:language, `.2.2`:language> | struct<`.1`:language, `.2`:language> | struct<`average`:language, `sum`:language> | struct<`I1`:language> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language> | struct<`r2`:language, `r4`:language, `r3`:language> | struct<`r5`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`V4`:language> | struct<`x`:language>> => null | struct<`.1.1`:language, `.1.2`:language, `.2.1`:language, `.2.2`:language> | struct<`.1`:language, `.2`:language> | struct<`average`:language, `sum`:language> | struct<`I1`:language> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language> | struct<`r2`:language, `r4`:language, `r3`:language> | struct<`r5`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`V4`:language> | struct<`x`:language>;
type `export_yaml` <character, null> => null;
type `expr` <null> => language;
type `extract_names` <struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language, `r2`:language, `r3`:language, `r4`:language, `r5`:language> | struct<`root`:language, `average`:language, `sum`:language> | struct<`aap`:language> | struct<`fiets`:language> | struct<`x`:language>, character> => character[];
type `f` <character, character[]> => symbol | character[];
type `factory` <language | symbol, any => any> => struct<``:^logical[], `warn`:null, `err`:null> | struct<``:null, `warn`:null, `err`:null> | any => any | struct<``:double[], `warn`:null, `err`:null> | struct<``:logical[], `warn`:character, `err`:null> | struct<``:null, `warn`:character, `err`:null> | struct<``:null, `warn`:null, `err`:character>;
type `failed_confrontations` < > => integer;
type `fails` < > => double[];
type `filter` <character[]> => logical[];
type `filter_yrf_options` <character[]> => null | character[];
type `fun` <language, null, null> => struct<`height`:double[], `weight`:double[], `id`:character[]>;
type `FUN` <null | struct<`name`:character, `expr`:character> | character[] | language | struct<> | struct<`name`:character, `label`:character, `description`:character, `origin`:character, `created`:double, `meta`:tuple<>> | struct<`name`:character, `label`:character, `description`:character, `origin`:character, `created`:double, `meta`:struct<`language`:character, `severity`:character>> | ^logical[] | struct<`rules`:tuple<struct<`name`:character, `expr`:character>, struct<`expr`:character, `name`:character, `label`:character>>> | struct<`include`:character[]> | struct<`options`:struct<`raise`:character>> | double[], null | double | symbol | character, null | environment | symbol | null, character> => null | language | character[] | struct<`name`:character, `label`:character, `description`:character, `origin`:character, `created`:double> | struct<> | struct<``:double[], `warn`:null, `err`:null> | struct<``:logical[], `warn`:character, `err`:null> | struct<``:^logical[], `warn`:null, `err`:null> | struct<``:null, `warn`:character, `err`:null> | struct<``:null, `warn`:null, `err`:character> | struct<``:null, `warn`:null, `err`:null> | struct<`include`:character[]> | struct<`options`:struct<`raise`:character>> | struct<`rules`:tuple<struct<`name`:character, `expr`:character>, struct<`expr`:character, `name`:character, `label`:character>>> | tuple<> | ^double[] | struct<`expr`:character, `name`:character, `label`:character[], `description`:character[], `created`:double, `origin`:character, `meta`:struct<`language`:character, `severity`:character>>;
type `get_filestack_yml` <character> => character[];
type `get_linear_coefficients` <logical, null> => struct<`A`:^double[], `b`:^double[], `operators`:character>;
type `get_stat` <any => any, logical> => ^double[];
type `getMethod` <null> => struct<`I1`:double, `I2`:double> | struct<`mh`:double, `mw`:double, `BMI`:double[]> | struct<`mw`:double, `ratio`:double[]> | struct<`V1`:logical[]> | struct<`V1`:^logical[], `V2`:^logical[]> | struct<`V2`:logical[]>;
type `has_error` < > => logical[];
type `has_warning` < > => logical[];
type `indicator` <null | character, null | struct<>> => language | null;
type `ini_indicator` <language | null, symbol | character, symbol | struct<>> => null | any => any;
type `ini_validator` <language | null, symbol | character, symbol | struct<>> => null;
type `int_values` <logical, logical, null> => ^double[] | tuple<^logical[]> | struct<`I1`:double, `I2`:double> | struct<`mh`:double, `mw`:double, `BMI`:double[]> | struct<`mw`:double, `ratio`:double[]> | struct<`V1`:logical[]> | struct<`V1`:^logical[], `V2`:^logical[]> | struct<`V2`:logical[]>;
type `is_complete` <^double[]> => logical[];
type `is_full_path` <null | character[]> => logical[];
type `is_null` < > => logical[];
type `is_r` <character> => logical;
type `is_tran_assign` <null> => logical[];
type `is_unique` <double[]> => logical[];
type `is_yaml` <character> => logical;
type `is.assignment` <tuple<> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r2`:language, `r4`:language, `r3`:language> | struct<`root`:language, `average`:language, `sum`:language> | struct<`I1`:language> | struct<`r1`:language> | struct<`r5`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`V4`:language> | struct<`x`:language>> => tuple<> | logical[];
type `label` <null> => character[];
type `label<-` < > => character[];
type `lbj_cells` < > => logical;
type `lbj_rules` <null, null> => null;
type `left` <language> => null | character | double | language | symbol;
type `length` <null> => integer;
type `linear` <null> => logical[];
type `linear_call` <language> => logical;
type `make_listnames` <struct<`from`:struct<`height`:double[], `weight`:double[], `id`:character[]>, `to`:struct<`height`:double[], `weight`:double[], `id`:character[]>> | struct<`raw`:struct<`size`:integer[], `incl.prob`:double[], `staff`:^integer[], `turnover`:^integer[], `other.rev`:^integer[], `total.rev`:^integer[], `staff.costs`:^integer[], `total.costs`:^integer[], `profit`:^integer[], `vat`:^integer[]>, `imputed`:struct<`size`:integer[], `incl.prob`:double[], `staff`:^integer[], `turnover`:double[], `other.rev`:^integer[], `total.rev`:^integer[], `staff.costs`:^integer[], `total.costs`:^integer[], `profit`:^integer[], `vat`:^integer[]>, `flipped`:struct<`size`:integer[], `incl.prob`:double[], `staff`:^integer[], `turnover`:double[], `other.rev`:^integer[], `total.rev`:^integer[], `staff.costs`:^integer[], `total.costs`:^integer[], `profit`:^integer[], `vat`:^integer[]>>, character[]> => character[];
type `match_cells` <struct<`id`:integer[], `x`:integer[], `y`:integer[]>, null, character> => tuple<struct<`id`:integer[], `x`:integer[], `y`:integer[]>, struct<`id`:integer[], `x`:integer[], `y`:integer[]>>;
type `meta` <logical | null> => struct<`name`:character[], `label`:character[], `description`:character[], `origin`:character[], `created`:double[]> | tuple<> | struct<`bar`:character> | struct<`foo`:character> | struct<`language`:character>;
type `meta<-` <character | double | integer[]> => character;
type `namecheck` <environment> => environment;
type `names` <null> => character[] | tuple<>;
type `names<-` <null> => null;
type `nas` < > => double[];
type `node` <null | double | symbol | language> => null | symbol;
type `npos` <integer> => double;
type `options_from_yml` <character> => null | struct<`raise`:character>;
type `opts` <character, null> => character;
type `origin` <null> => character[];
type `origin<-` < > => character[];
type `outcheck` <symbol> => any => any;
type `output` < > => environment;
type `parse_yrf_include` <character> => null | character[];
type `passes` < > => double[];
type `plot` <^double[], null, double | null | character> => null | ^integer[] | tuple<double[]>;
type `recycle` <character[] | double[]> => character[] | double[];
type `repl` <language, double, character> => language;
type `replace_if` <language> => language;
type `replace_linear_restriction` <null | character | double | language | null | pairlist | symbol, symbol | double, null | symbol | environment, character> => null | character | double | language | null | pairlist | symbol;
type `reset` <any => any> => struct<`raise`:character, `lin.eq.eps`:double, `lin.ineq.eps`:double, `na.value`:null, `sequential`:logical, `na.condition`:logical>;
type `right` <language> => character | double | language | symbol;
type `rule` < > => language;
type `rules_diff` <struct<`size`:integer[], `incl.prob`:double[], `staff`:^integer[], `turnover`:double[], `other.rev`:^integer[], `total.rev`:^integer[], `staff.costs`:^integer[], `total.costs`:^integer[], `profit`:^integer[], `vat`:^integer[]>, null | struct<`size`:integer[], `incl.prob`:double[], `staff`:^integer[], `turnover`:double[], `other.rev`:^integer[], `total.rev`:^integer[], `staff.costs`:^integer[], `total.costs`:^integer[], `profit`:^integer[], `vat`:^integer[]>> => double[];
type `rules_from_freeform` <character, character> => tuple<>;
type `rules_from_yrf` <struct<`rules`:tuple<struct<`name`:character, `expr`:character>, struct<`expr`:character, `name`:character, `label`:character>>>, character> => tuple<null, null>;
type `rules_from_yrf_file` <character, character> => null | tuple<>;
type `run_validation_file` <character, logical> => tuple<null, null>;
type `seq_along` <null> => integer;
type `setNames` <character | struct<> | double[] | tuple<> | tuple<language> | list<language>, character[] | tuple<>> => character | struct<> | double[] | tuple<> | struct<`I1`:language> | struct<`mh`:language, `a`:language> | struct<`mh`:language, `mw`:language, `BMI`:language> | struct<`mw`:language, `ratio`:language> | struct<`r1`:language> | struct<`r2`:language, `r4`:language, `r3`:language> | struct<`r5`:language> | struct<`root`:language, `average`:language, `sum`:language> | struct<`V1`:language> | struct<`V2`:language> | struct<`V3`:language> | struct<`x`:language>;
type `simplify_list` <struct<`I1`:double> | struct<`r1`:^logical[], `r2`:^logical[], `r3`:^logical[], `r4`:^logical[]> | struct<`V1`:^logical[]> | struct<`V1`:null> | struct<`V2`:^logical[]> | struct<`V3`:logical[]> | struct<`V4`:logical>> => tuple<^double[]>;
type `sort` <logical, character | null> => struct<`npass`:double[], `nfail`:double[], `nNA`:double[], `rel.pass`:double[], `rel.fail`:double[], `rel.NA`:double[]>;
type `substitute_assignments` <language, environment> => language;
type `summary` <null> => struct<`block`:integer[], `nvar`:integer[], `rules`:integer[], `linear`:integer[]>;
type `summary.validations` <tuple<null, null>, null> => struct<`name`:character[], `items`:integer[], `passes`:integer[], `fails`:integer[], `nNA`:integer[], `error`:logical[], `warning`:logical[], `expression`:character[], `call`:character[], `file`:character[], `fst`:integer[], `lst`:integer[]>;
type `valid_yaml` <character> => logical;
type `validating` <null> => logical[];
type `validating_call` <language> => logical;
type `validator` <null | character, null | struct<>> => language | null;
type `values` <null | logical> => ^double[] | tuple<^logical[]> | struct<`I1`:double, `I2`:double> | struct<`mh`:double, `mw`:double, `BMI`:double[]> | struct<`mw`:double, `ratio`:double[]> | struct<`V1`:logical[]> | struct<`V1`:^logical[], `V2`:^logical[]> | struct<`V2`:logical[]>;
type `var_from_call` <language> => character[];
type `var_group` <symbol> => any => any;
type `variables` <struct<`height`:double[], `weight`:double[], `id`:character[]> | environment, null | logical | character> => null | character[] | ^logical[];
type `vc` <language> => logical;
type `vectorize` <language> => language;
type `voptions` <null | character, null | character | double> => null | character | any => any | struct<`raise`:character, `lin.eq.eps`:double, `lin.ineq.eps`:double, `na.value`:null, `sequential`:logical, `na.condition`:logical>;
type `warnf` <character, character> => character;
type `warnings` < > => tuple<> | struct<`a`:character>;
type `which.call` <null | character | double | language | null | pairlist | symbol, symbol | character, language | double[], environment> => tuple<> | struct<`x0`:double[]>;
type `yaml_blocks` <character[]> => tuple<character> | tuple<null> | tuple<struct<`include`:character[]>, character> | tuple<struct<`include`:character>, struct<`rules`:tuple<struct<`name`:character, `expr`:character>, struct<`expr`:character, `name`:character, `label`:character>>>> | tuple<struct<`options`:struct<`raise`:character>>, character> | tuple<struct<`rules`:tuple<struct<`expr`:character, `name`:character, `label`:character, `description`:character>, struct<`expr`:character, `name`:character, `label`:character, `description`:character>>>>;
type `yrf_block_type` <null | character | struct<`include`:character[]> | struct<`options`:struct<`raise`:character>> | struct<`rules`:tuple<struct<`name`:character, `expr`:character>, struct<`expr`:character, `name`:character, `label`:character>>>> => null | character;
