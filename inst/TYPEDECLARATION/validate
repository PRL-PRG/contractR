type `~` <any, any> => logical[];
type `add_assignment` <class<`call`>, environment> => class<`call`>;
type `addcoef` <character, double, environment> => double;
type `aggregate` <class<`validation`>, ...> => class<`data.frame`>;
type `all_complete` <...> => logical;
type `all_numeric` <any, null | environment> => logical;
type `all_unique` <...> => logical;
type `as.data.frame` <class<`validation`>, null, logical, ...> => class<`data.frame`> | <class<`indication`>, null, logical, ...> => class<`data.frame`> | <class<`validatorComparison`>, null, logical, ...> => class<`data.frame`> | <class<`cellComparison`>, null, logical, ...> => class<`data.frame`> | <class<`validator`>, null, logical, ...> => class<`data.frame`> | <class<`indicator`>, null, logical, ...> => class<`data.frame`>;
type `as.list.expressionset` <class<`validator`>, logical, ...> => list<list<list<character[] | class<`POSIXct`, `POSIXt`> | list<character>>>>;
type `as_yaml` <class<`validator`>, ...> => character | <class<`validator`>, ...> => character;
type `barplot` <class<`validatorComparison`>, ...> => double[] | <class<`validation`>, ...> => list<double[]> | <class<`cellComparison`>, ...> => double[];
type `.blocks_expressionset` <class<`validator`>> => list<integer[]>;
type `bp_leg_pos` <double[]> => double;
type `capture` <any, any> => class<`function`>;
type `cell_diff` <class<`data.frame`>, null | class<`data.frame`>> => double[];
type `cells` <..., null, character[]> => class<`cellComparison`>;
type `check_primitives` < > => null;
type `check_that` <...> => class<`validation`> | <class<`data.frame`>, ...> => class<`validation`>;
type `coefficients` <double | class<`call`> | class<`name`>, double, environment> => double[];
type `compare` <class<`validator`>, ...> => class<`validatorComparison`> | <class<`validator`>, ...> => class<`validatorComparison`>;
type `confront` <...> => class<`validation`> | <class<`data.frame`>, class<`validator`>, list<character[]> | list<integer[]> | list<class<`data.frame`>>, ...> => class<`validation`> | <class<`data.frame`>, class<`indicator`>, any, ...> => class<`indication`> | <class<`data.frame`>, class<`validator`>, class<`data.frame`>, ...> => class<`validation`> | <class<`data.frame`>, class<`indicator`>, list<class<`data.frame`>>, ...> => class<`indication`> | <class<`data.frame`>, class<`indicator`>, class<`data.frame`>, ...> => class<`indication`> | <class<`data.frame`>, class<`indicator`>, environment, ...> => class<`indication`> | <class<`data.frame`>, class<`indicator`> | class<`validator`>, any, ...> => any | <class<`data.frame`>, class<`validator`>, environment, ...> => class<`validation`> | <class<`data.frame`>, class<`validator`>, any, ...> => any;
type `confrontation_nerrs` <class<`validation`>> => integer;
type `confrontation_nwarn` <class<`validation`>> => integer;
type `confront_work` <class<`indicator`> | class<`validator`>, any, any, character, ...> => any;
type `created` <class<`validator`>, ...> => class<`POSIXct`, `POSIXt`> | <class<`validator`> | class<`rule`>, ...> => class<`POSIXct`, `POSIXt`> | <class<`rule`>, ...> => class<`POSIXct`, `POSIXt`>;
type `created<-` <class<`rule`> | class<`validator`>, class<`POSIXct`, `POSIXt`>> => (class<`rule`> | class<`validator`>) | <class<`validator`>, class<`POSIXct`, `POSIXt`>> => class<`validator`> | <class<`rule`>, class<`POSIXct`, `POSIXt`>> => class<`rule`>;
type `description` <class<`validator`>, ...> => character[] | <class<`validator`> | class<`rule`>, ...> => character[] | <class<`rule`>, ...> => character;
type `description<-` <class<`validator`>, character[]> => class<`validator`> | <class<`rule`>, character> => class<`rule`> | <class<`rule`> | class<`validator`>, character[]> => (class<`rule`> | class<`validator`>);
type `errors` <class<`indication`> | class<`validation`>, ...> => list<character> | <class<`validation`>, ...> => list<character> | <class<`indication`>, ...> => list<character>;
type `event` <class<`validation`>> => ^character[] | <class<`validation`>> => ^character[];
type `event<-` <class<`validation`>, character[]> => class<`validation`> | <class<`validation`>, character[]> => class<`validation`>;
type `execute` <list<any>, any, any> => any;
type `exists_any` <any, ..., logical> => ^logical[];
type `exists_one` <any, ..., logical> => ^logical[];
type `expand_assignments` <list<any>> => list<any>;
type `expand_groups` <list<any>> => (list<class<`call`>> | null | list<class<`call`> | class<`{`>> | list<class<`call`> | class<`if`>> | list<class<`if`>> | list<class<`{`>>);
type `export_yaml` <class<`validator`>, character, ...> => null | <class<`validator`>, character, ...> => null;
type `expr` <class<`rule`>, ...> => (class<`call`> | class<`{`> | class<`if`>) | <class<`rule`>, ...> => (class<`call`> | class<`{`> | class<`if`>);
type `extract_names` <list<any>, character> => character[];
type `factory` <...> => any | <any, class<`standardGeneric`> | class<`function`>> => class<`function`> | <...> => (list<double | character | null> | list<null | character> | list<double[] | null> | list<double | null> | list<integer | null> | list<logical[] | character | null> | list<logical[] | null> | list<logical | null> | list<^logical[] | null>);
type `failed_confrontations` <class<`validation`>> => integer;
type `fails` <class<`validation`>> => double[];
type `filter_yrf_options` <character[]> => (character[] | null);
type `.get_exprs` <class<`validator`> | class<`indicator`>, ..., logical, logical, logical, logical, logical, double> => list<any>;
type `get_filestack_yml` <character> => character[];
type `get_linear_coefficients` <class<`validator`>, logical, ...> => list<class<`matrix`> | character>;
type `get_stat` <class<`indication`>, class<`function`>, ...> => ^double[];
type `has_error` <class<`indication`> | class<`validation`>> => logical[];
type `has_warning` <class<`indication`> | class<`validation`>> => logical[];
type `indicator` <..., any, any> => class<`indicator`>;
type `.ini_expressionset_cli` <class<`indicator`> | class<`validator`>, ..., character> => list<any>;
type `.ini_expressionset_df` <any, class<`data.frame`>, character> => any;
type `.ini_expressionset_yml` <class<`indicator`> | class<`validator`>, character, character> => (null | list<character | double | null>);
type `ini_indicator` <class<`indicator`>, ..., any, any> => (class<`function`> | null);
type `ini_validator` <any, ..., any, any> => any;
type `int_values` <class<`indication`> | class<`validation`>, logical, logical, ...> => (class<`matrix`> | list<class<`matrix`>> | logical | list<double[]> | list<^logical[]>);
type `is.assignment` <list<any>> => (list<any> | logical[]);
type `is_complete` <...> => logical[];
type `is_full_path` <character[] | null> => logical[];
type `is_null` <class<`indication`> | class<`validation`>> => logical[];
type `is_r` <character> => logical;
type `is_tran_assign` <class<`rule`> | class<`validator`>, ...> => logical[] | <class<`validator`>, ...> => logical[];
type `is_unique` <...> => logical[];
type `is_yaml` <character> => logical;
type `label` <class<`rule`>, ...> => character | <class<`rule`> | class<`validator`>, ...> => character[] | <class<`validator`>, ...> => character[];
type `label<-` <class<`rule`> | class<`validator`>, character[]> => (class<`rule`> | class<`validator`>) | <class<`rule`>, character> => class<`rule`> | <class<`validator`>, character[]> => class<`validator`>;
type `lbj_cells` <...> => class<`lbj_cells`>;
type `lbj_rules` <...> => class<`lbj_rules`>;
type `left` <class<`call`>> => (character | class<`(`> | class<`call`> | class<`name`> | double | null);
type `linear` <class<`rule`> | class<`validator`>, ...> => logical[] | <class<`validator`>, ...> => logical[];
type `linear_call` <class<`call`> | character | class<`<-`> | class<`(`> | class<`{`> | class<`if`> | class<`name`> | double | null> => logical;
type `make_listnames` <list<class<`data.frame`>>, character[]> => character[];
type `match_cells` <..., null, character> => list<class<`data.frame`>>;
type `meta` <class<`indicator`>, ...> => class<`data.frame`> | <class<`indicator`> | class<`validator`> | class<`rule`>, ...> => (class<`data.frame`> | list<any>) | <class<`validator`>, ...> => class<`data.frame`> | <class<`rule`>, ...> => list<any>;
type `meta<-` <class<`validator`>, character, character | double | integer[]> => class<`validator`> | <class<`rule`> | class<`validator`>, character, character | double | integer[]> => (class<`rule`> | class<`validator`>) | <class<`rule`>, character, character | double> => class<`rule`>;
type `namecheck` <environment> => environment;
type `nas` <class<`indication`> | class<`validation`>> => double[];
type `node` <class<`<-`> | class<`(`> | class<`{`> | class<`call`> | class<`if`> | class<`name`> | double | null> => (class<`name`> | null);
type `npos` <integer> => double;
type `options_from_yml` <character> => (null | list<character>);
type `origin` <class<`rule`> | class<`validator`>, ...> => character[] | <class<`rule`>, ...> => character | <class<`validator`>, ...> => character[];
type `origin<-` <class<`rule`>, character> => class<`rule`> | <class<`validator`>, character[]> => class<`validator`> | <class<`rule`> | class<`validator`>, character[]> => (class<`rule`> | class<`validator`>);
type `outcheck` <any> => class<`function`> | <...> => any;
type `output` < > => environment;
type `parse_yrf_include` <character> => (character[] | null);
type `.parse_yrf_options` <character[]> => (null | list<character>);
type `passes` <class<`validation`>> => double[];
type `plot` <class<`validator`>, any, ...> => (class<`factor`> | null) | <class<`validation`>, any, ...> => list<double[]> | <class<`cellComparison`>, any, ...> => null | <class<`validatorComparison`>, any, ...> => null;
type `.readlines_utf8` <character, character> => character[];
type `recycle` <character[] | class<`POSIXct`, `POSIXt`>, class<`indicator`> | class<`validator`>> => (character[] | class<`POSIXct`, `POSIXt`>);
type `replace_if` <class<`if`>> => class<`call`>;
type `replace_linear_restriction` <any, any, any, character> => any;
type `reset` <class<`standardGeneric`>> => list<character | double | null> | <class<`validator`>> => list<character | double | null> | <class<`standardGeneric`> | class<`validator`>> => list<character | double | null>;
type `right` <class<`call`>> => (character | class<`call`> | class<`name`> | double);
type `rule` <...> => class<`rule`>;
type `rules_diff` <class<`validator`>, class<`data.frame`>, class<`data.frame`> | null> => double[];
type `rules_from_yrf_file` <character, character> => (list<class<`rule`>> | null);
type `run_validation_file` <character, logical> => class<`list`, `validations`>;
type `setNames` <character | class<`data.frame`> | class<`POSIXct`, `POSIXt`> | double[] | list<any>, character[] | list<any>> => (character | class<`data.frame`> | class<`POSIXct`, `POSIXt`> | double[] | list<any>);
type `.show_confrontation` <class<`validation`>> => null;
type `.show_expressionset` <class<`validator`>> => null;
type `simplify_list` <list<double> | list<^logical[]> | list<null> | list<class<`array`>>> => list<class<`matrix`>>;
type `sort` <class<`validation`>, logical, ...> => class<`data.frame`>;
type `substitute_assignments` <class<`{`> | class<`call`> | class<`if`>, environment> => (class<`{`> | class<`call`> | class<`if`>);
type `summary` <class<`validator`>, ...> => class<`data.frame`> | <class<`indication`>, ...> => class<`data.frame`> | <class<`validation`>, ...> => class<`data.frame`>;
type `summary.validations` <class<`list`, `validations`>, ...> => class<`data.frame`>;
type `validating` <class<`rule`> | class<`validator`>, ...> => logical[] | <class<`validator`>, ...> => logical[];
type `validating_call` <class<`call`> | class<`if`> | class<`name`>> => logical;
type `validator` <..., any, any> => any;
type `valid_yaml` <character> => logical;
type `values` <class<`indication`> | class<`validation`>, ...> => (class<`matrix`> | list<class<`matrix`>> | logical | list<double[]> | list<^logical[]>) | <class<`indication`>, ...> => (class<`matrix`> | list<double[]>) | <class<`validation`>, ...> => (class<`matrix`> | list<class<`matrix`>> | logical | list<^logical[]>);
type `var_from_call` <class<`call`> | class<`if`>> => (character[] | null);
type `var_group` <...> => class<`function`>;
type `variables` <class<`data.frame`> | class<`rule`> | class<`validator`> | environment | list<double[]>, ...> => (character[] | class<`matrix`> | null) | <list<double[]>, ...> => character[] | <class<`validator`>, ...> => (character[] | class<`matrix`>) | <class<`rule`>, ...> => (character[] | null) | <class<`data.frame`>, ...> => character[] | <environment, ...> => character[];
type `vectorize` <class<`(`> | class<`call`> | class<`if`> | class<`{`> | character | class<`name`> | double | null> => (class<`(`> | class<`call`> | class<`{`> | character | class<`name`> | double | null);
type `%vin%` <any, any> => any;
type `voptions` <character | class<`validator`> | class<`indicator`> | null, ...> => (character | class<`function`> | null | list<character | double | null>) | <character, ...> => (character | null) | <null, ...> => list<character | double | null> | <class<`indicator`>, ...> => class<`function`> | <class<`validator`>, ...> => (character | class<`function`> | list<character | double | null>);
type `warnf` <character, ...> => character;
type `warnings` <...> => list<any> | <...> => list<character>;
type `which.call` <any, any, any, environment> => list<any>;
type `yaml_blocks` <character[]> => (list<character> | list<null> | list<character | list<character[]>> | list<list<character | list<list<character>>>> | list<character | list<list<character>>> | list<list<list<list<character | list<character>>>>> | list<list<list<list<character>>>>);
type `yrf_block_type` <character | list<character[]> | list<list<character>> | list<list<list<character | list<character>>>> | list<list<list<character>>> | null> => (character | null);
