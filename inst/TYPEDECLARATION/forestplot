type `forestplot` <...> => class<`path`, `vpPath`>;
type `forestplot.default` <character[] | class<`matrix`> | integer[] | list<^character[] | list<expression | character>> | list<list<character | expression | character | class<`call`>>> | list<list<character | expression>>, class<`matrix`> | class<`data.frame`> | ^double[], any, any, any, logical[], character | double, any, double[], character, double[], character, any, character | class<`unit`>, any, class<`fpColors`, `list`>> => class<`path`, `vpPath`>;
type `fpColors` <any, character[], character[], character[], character, character, character, character> => class<`fpColors`, `list`>;
type `fpDrawPointCI` <double, double, double, double, double, character, character, any, double, any, double, double, ...> => class<`gDesc`, `grob`, `points`>;
type `fpLegend` <character | list<character> | list<character | double> | list<double>, null | class<`gpar`>, class<`unit`>, class<`unit`>, character | null> => list<any>;
type `fpTxtGp` <any, any, any, any, any, any, any, double> => class<`fpTxtGp`, `list`>;
type `getTicks` <double[], double[], double[], logical, any> => double[];
type `heightDetails.xaxis` <class<`axis`, `gDesc`, `gTree`, `grob`, `xaxis`>> => class<`unit`, `unit.arithmetic`>;
type `prFpConvertMultidimArray` <class<`data.frame`> | class<`matrix`>> => list<^double[]>;
type `prFpDrawLegend` <class<`Legend`, `list`>, class<`fpColors`, `list`>, class<`unit`>, list<double | character[]> | list<class<`unit`> | class<`unit`, `unit.arithmetic`> | character[]> | character, class<`gpar`> | null, any, any, list<class<`function`>>, ...> => (class<`path`, `vpPath`> | null);
type `prFpDrawLine` <double, double, any, any, any, any, any, any> => (class<`gDesc`, `grob`, `lines`> | null);
type `prFpDrawLines` <list<null | class<`gpar`, `list`>> | list<null>, integer, any, any> => null;
type `prFpFetchRowLabel` <character, class<`matrix`> | list<^character[] | list<expression | character>> | list<list<character | expression | character | class<`call`>>> | list<list<character | expression>>, integer, integer> => (character | class<`call`> | expression | integer);
type `prFpFindWidestGrob` <list<class<`gDesc`, `grob`, `text`> | null> | list<class<`gDesc`, `grob`, `text`>>, character> => class<`unit`>;
type `prFpGetConfintFnList` <class<`function`> | list<character | class<`function`>> | character[] | list<list<class<`function`>>> | list<class<`function`>>, integer, integer, any, any, any> => (list<class<`function`>> | list<list<class<`function`>>>);
type `prFpGetGraphTicksAndClips` <any, any, double[], logical, character, any, class<`fpColors`, `list`>, class<`fpTxtGp`, `list`>, double[], double[], double[], class<`matrix`> | ^double[], double> => list<any>;
type `prFpGetLabels` <character, class<`matrix`> | list<^character[] | list<expression | character>> | list<list<character | expression | character | class<`call`>>> | list<list<character | expression>>, character[], double, integer, logical[], class<`fpTxtGp`, `list`>, class<`fpColors`, `list`>> => (list<list<class<`gDesc`, `grob`, `text`> | null>> | list<list<class<`gDesc`, `grob`, `text`>>>);
type `prFpGetLayoutVP` <character | class<`unit`>, any, any, class<`layout`> | null> => class<`viewport`>;
type `prFpGetLegendBoxPosition` <list<character> | list<character | double> | list<double>> => (list<class<`unit`> | class<`unit`, `unit.arithmetic`> | character[]> | list<double | character[]>);
type `prFpGetLegendGrobs` <character[], class<`fpTxtGp`, `list`>, null | character> => class<`Legend`, `list`>;
type `prFpGetLines` <any, logical[], any, any> => (list<null | class<`gpar`, `list`>> | list<null>);
type `prFpPrepareLegendMarker` <any, integer, any, character[] | class<`function`> | list<list<class<`function`>>> | list<class<`function`>>> => list<class<`function`>>;
type `prFpPrintLabels` <list<list<class<`gDesc`, `grob`, `text`> | null>> | list<list<class<`gDesc`, `grob`, `text`>>>, double, integer, double> => null;
type `prFpPrintXaxis` <list<any>, class<`fpColors`, `list`>, any> => class<`path`, `vpPath`>;
type `prFpValidateLabelList` <list<^character[] | list<expression | character>> | list<list<character | expression | character | class<`call`>>> | list<list<character | expression>>> => logical;
type `prFpXrange` <^double[], ^double[], double[], double[], any, logical> => double[];
type `prGetTextGrobCex` <class<`gDesc`, `grob`, `text`>> => double;
type `prGparMerge` <class<`gpar`> | list<character | double>, class<`gpar`> | list<character | double> | list<double>> => (class<`gpar`, `list`> | list<character | double>);
type `prGridPlotTitle` <character, list<character | double>, any> => null;
type `prListRep` <list<list<list<character | double>>> | list<list<character | double>> | list<character | double>, double> => (list<list<list<character | double>>> | list<list<character | double>>);
type `prPopulateList` <list<character | class<`function`>> | class<`function`> | character[] | list<list<class<`function`>>> | list<class<`function`>> | double[], integer, integer, any, any, any> => (list<character | class<`function`>> | list<class<`function`>> | list<double> | list<list<character>> | list<list<character | class<`function`>>> | list<list<class<`function`>>> | list<list<double>>);
type `prPushMarginViewport` <class<`unit`>, class<`unit`>, class<`unit`>, class<`unit`>, character> => null;
