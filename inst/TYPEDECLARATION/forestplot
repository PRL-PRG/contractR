type `cleanFont4Fontface` <class<`gpar`> | list<double | character | double>> => (class<`gpar`> | list<double | character | double>);
type `drawBox` <class<`viewport`>, integer, class<`fpColors`, `list`>, class<`Legend`, `list`>> => class<`path`, `vpPath`>;
type `filter` <character[]> => logical[];
type `forestplot` <...> => class<`path`, `vpPath`>;
type `forestplot.default` <class<`matrix`> | integer[] | list<list<character | expression | character | class<`call`> | character | expression>>, class<`data.frame`> | class<`matrix`> | double[], any, any, any, logical[], character, any, double[], character, double[], character> => class<`path`, `vpPath`>;
type `fpColors` <any, character[], character[], character[], character, character, character, character> => class<`fpColors`, `list`>;
type `fpLegend` <character | list<character | character | double>, null | class<`gpar`>, class<`unit`>, class<`unit`>, character> => list<any>;
type `fpTxtGp` <any, any, any, any, any, any, any, double> => class<`fpTxtGp`, `list`>;
type `FUN` <list<character | expression | character | class<`call`>>> => logical | <integer> => null | <integer, list<character | double | list<list<character | double>>>> => list<character | double | list<character | double>> | <integer> => class<`function`>;
type `getTicks` <double[], double[], double[], logical, any> => double[];
type `heightDetails.xaxis` <class<`axis`, `gDesc`, `gTree`, `grob`, `xaxis`>> => class<`unit`, `unit.arithmetic`>;
type `makeCalleable` <character | class<`function`> | list<character | class<`function`> | list<character | class<`function`>>>> => (class<`function`> | list<class<`function`> | list<class<`function`>>>);
type `prFpConvertMultidimArray` <class<`data.frame`>> => list<^double[]>;
type `prFpDrawLegend` <class<`Legend`, `list`>, class<`fpColors`, `list`>, class<`unit`>, character | list<class<`unit`> | class<`unit`, `unit.arithmetic`> | character[]>, class<`gpar`> | null, any, any, list<class<`function`>>, ...> => (class<`path`, `vpPath`> | null);
type `prFpDrawLine` <double, double, any, any, any, any, any, any> => null;
type `prFpDrawLines` <list<null>, integer, any, any> => null;
type `prFpFetchRowLabel` <character, class<`matrix`> | list<list<character | expression | character | class<`call`> | character | expression>>, integer, integer> => (character | class<`call`> | expression | integer);
type `prFpFindWidestGrob` <list<class<`gDesc`, `grob`, `text`>>, character> => class<`unit`>;
type `prFpGetConfintFnList` <class<`function`> | character[] | list<list<class<`function`>>>, integer, integer, any, any, any> => list<class<`function`> | list<class<`function`>>>;
type `prFpGetGraphTicksAndClips` <any, any, double[], logical, character, any, class<`fpColors`, `list`>, class<`fpTxtGp`, `list`>, double[], double[], double[], class<`matrix`> | ^double[]> => list<any>;
type `prFpGetLabels` <character, class<`matrix`> | list<list<character | expression | character | class<`call`> | character | expression>>, character[], double, integer, logical[], class<`fpTxtGp`, `list`>, class<`fpColors`, `list`>> => list<list<class<`gDesc`, `grob`, `text`>>>;
type `prFpGetLayoutVP` <character | class<`unit`>, any, any, class<`layout`> | null> => class<`viewport`>;
type `prFpGetLegendBoxPosition` <list<character | character | double>> => list<class<`unit`> | class<`unit`, `unit.arithmetic`> | character[]>;
type `prFpGetLegendGrobs` <character[], class<`fpTxtGp`, `list`>, character> => class<`Legend`, `list`>;
type `prFpGetLines` <any, logical[], any, any> => list<null>;
type `prFpPrepareLegendMarker` <any, integer, any, character[] | class<`function`> | list<list<class<`function`>>>> => list<class<`function`>>;
type `prFpPrintLabels` <list<list<class<`gDesc`, `grob`, `text`>>>, double, integer, double> => null;
type `prFpPrintXaxis` <list<any>, class<`fpColors`, `list`>, any> => class<`path`, `vpPath`>;
type `prFpValidateLabelList` <list<list<character | expression | character | class<`call`> | character | expression>>> => logical;
type `prFpXrange` <^double[], ^double[], double[], double[], any, logical> => double[];
type `prGetTextGrobCex` <class<`gDesc`, `grob`, `text`>> => double;
type `prGparMerge` <list<character | double>, class<`gpar`> | list<character | double | double>> => list<character | double>;
type `prGparMergeMultiLevel` <list<character | double>, class<`gpar`>> => list<character | double>;
type `prGridPlotTitle` <character, list<character | double>, any> => null;
type `prListRep` <list<character | double | list<list<character | double>>>, double> => list<list<character | double | list<character | double>>>;
type `prPopulateList` <class<`function`> | double | character[] | list<list<class<`function`>>>, integer, integer, any, any, any> => list<class<`function`> | double | list<character | class<`function`> | double>>;
type `prPushMarginViewport` <class<`unit`>, class<`unit`>, class<`unit`>, class<`unit`>, character> => null;
