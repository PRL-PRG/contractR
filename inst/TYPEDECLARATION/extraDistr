type `cpp_dbbinom` <integer[], double, double, double, logical> => double[];
type `cpp_dbetapr` <double[], double, double, double, logical> => double[];
type `cpp_dbhatt` <double[], double, double, double, logical> => double[];
type `cpp_dbnbinom` <integer[], double, double, double, logical> => double[];
type `cpp_dbnorm` <double[], double[], double, double, double, double, double, logical> => double[];
type `cpp_dcat` <double[], ^double[], logical> => double[];
type `cpp_ddgamma` <integer[], double, double, logical> => double[];
type `cpp_ddlaplace` <double[], double, double, logical> => double[];
type `cpp_ddnorm` <integer[], double, double, logical> => double[];
type `cpp_ddunif` <integer[], double, double, logical> => double[];
type `cpp_ddweibull` <double[], double, double, logical> => double[];
type `cpp_dfatigue` <double[], double, double, double, logical> => double[];
type `cpp_dfrechet` <double[], double, double, double, logical> => double[];
type `cpp_dgev` <double[], double, double, double, logical> => double[];
type `cpp_dgompertz` <double[], double, double, logical> => double[];
type `cpp_dgpd` <double[], double, double, double, logical> => double[];
type `cpp_dgpois` <double[], double, double, logical> => double[];
type `cpp_dgumbel` <double[], double, double, logical> => double[];
type `cpp_dhcauchy` <integer[], double, logical> => double[];
type `cpp_dhnorm` <double[], double, logical> => double[];
type `cpp_dht` <integer[], double, double, logical> => double[];
type `cpp_dhuber` <double[], double, double, double, logical> => double[];
type `cpp_dinvgamma` <double[], double, double, logical> => double[];
type `cpp_dkumar` <double[], double, double, logical> => double[];
type `cpp_dlaplace` <double[], double, double, logical> => double[];
type `cpp_dlgser` <double[], double, logical> => double[];
type `cpp_dlomax` <double[], double, double, logical> => double[];
type `cpp_dlst` <double[], double, double, double, logical> => double[];
type `cpp_dmixnorm` <double[], ^double[], ^double[], ^double[], logical> => double[];
type `cpp_dmixpois` <integer[], ^double[], ^double[], logical> => double[];
type `cpp_dmnom` <^double[], double, ^double[], logical> => double;
type `cpp_dnhyper` <integer[], double, double, double, logical> => double[];
type `cpp_dnsbeta` <double[], double, double, double, double, logical> => double[];
type `cpp_dpareto` <integer[], double, double, logical> => double[];
type `cpp_dpower` <double[], double, double, logical> => double[];
type `cpp_dprop` <double[], double, double, double, logical> => double[];
type `cpp_drayleigh` <double[], double, logical> => double[];
type `cpp_dsgomp` <double[], double, double, logical> => double[];
type `cpp_dskellam` <integer[], double, double, logical> => double[];
type `cpp_dslash` <double[], double, double, logical> => double[];
type `cpp_dtbinom` <integer[], double, double, double, double, logical> => double[];
type `cpp_dtnorm` <double[], double, double, double, double, logical> => double[];
type `cpp_dtpois` <integer[], double, double, double, logical> => double[];
type `cpp_dtriang` <double[], double, double, double, logical> => double[];
type `cpp_dwald` <double[], double, double, logical> => double[];
type `cpp_dzib` <integer[], double, double, double, logical> => double[];
type `cpp_dzinb` <integer[], double, double, double, logical> => double[];
type `cpp_dzip` <integer[], double, double, logical> => double[];
type `cpp_pbbinom` <double[], double, double, double, logical, logical> => double[];
type `cpp_pbetapr` <double[], double, double, double, logical, logical> => double[];
type `cpp_pbhatt` <double[], double, double, double, logical, logical> => double[];
type `cpp_pbnbinom` <double[], double, double, double, logical, logical> => double[];
type `cpp_pcat` <double[], ^double[], logical, logical> => double[];
type `cpp_pdlaplace` <double[], double, double, logical, logical> => double[];
type `cpp_pdunif` <double[], double, double, logical, logical> => double[];
type `cpp_pdweibull` <double[], double, double, logical, logical> => double[];
type `cpp_pfatigue` <double[], double, double, double, logical, logical> => double[];
type `cpp_pfrechet` <double[], double, double, double, logical, logical> => double[];
type `cpp_pgev` <double[], double, double, double, logical, logical> => double[];
type `cpp_pgompertz` <double[], double, double, logical, logical> => double[];
type `cpp_pgpd` <double[], double, double, double, logical, logical> => double[];
type `cpp_pgpois` <double[], double, double, logical, logical> => double[];
type `cpp_pgumbel` <double[], double, double, logical, logical> => double[];
type `cpp_phcauchy` <double[], double, logical, logical> => double[];
type `cpp_phnorm` <double[], double, logical, logical> => double[];
type `cpp_pht` <double[], double, double, logical, logical> => double[];
type `cpp_phuber` <double[], double, double, double, logical, logical> => double[];
type `cpp_pinvgamma` <double[], double, double, logical, logical> => double[];
type `cpp_pkumar` <double[], double, double, logical, logical> => double[];
type `cpp_plaplace` <double[], double, double, logical, logical> => double[];
type `cpp_plgser` <double[], double, logical, logical> => double[];
type `cpp_plomax` <double[], double, double, logical, logical> => double[];
type `cpp_plst` <double[], double, double, double, logical, logical> => double[];
type `cpp_pmixnorm` <double[], ^double[], ^double[], ^double[], logical, logical> => double[];
type `cpp_pmixpois` <double[], ^double[], ^double[], logical, logical> => double[];
type `cpp_pnhyper` <double[], double, double, double, logical, logical> => double[];
type `cpp_pnsbeta` <double[], double, double, double, double, logical, logical> => double[];
type `cpp_ppareto` <double[], double, double, logical, logical> => double[];
type `cpp_ppower` <double[], double, double, logical, logical> => double[];
type `cpp_pprop` <double[], double, double, double, logical, logical> => double[];
type `cpp_prayleigh` <double[], double, logical, logical> => double[];
type `cpp_psgomp` <double[], double, double, logical, logical> => double[];
type `cpp_pslash` <double[], double, double, logical, logical> => double[];
type `cpp_ptbinom` <double[], double, double, double, double, logical, logical> => double[];
type `cpp_ptnorm` <double[], double, double, double, double, logical, logical> => double[];
type `cpp_ptpois` <double[], double, double, double, logical, logical> => double[];
type `cpp_ptriang` <double[], double, double, double, logical, logical> => double[];
type `cpp_pwald` <double[], double, double, logical, logical> => double[];
type `cpp_pzib` <double[], double, double, double, logical, logical> => double[];
type `cpp_pzinb` <double[], double, double, double, logical, logical> => double[];
type `cpp_pzip` <double[], double, double, logical, logical> => double[];
type `cpp_qcat` <double[], ^double[], logical, logical> => double[];
type `cpp_qtbinom` <double[], double, double, double, double, logical, logical> => double[];
type `cpp_qtlambda` <double[], double, logical, logical> => double[];
type `cpp_qtpois` <double[], double, double, double, logical, logical> => double[];
type `cpp_rbbinom` <double, double, double, double> => double[];
type `cpp_rbern` <double, double> => double[];
type `cpp_rbetapr` <double, double, double, double> => double[];
type `cpp_rbhatt` <double, double, double, double> => double[];
type `cpp_rbnbinom` <double, double, double, double> => double[];
type `cpp_rbpois` <double, double, double, double> => ^double[];
type `cpp_rcat` <double, ^double[]> => double[];
type `cpp_rdirichlet` <double, ^double[]> => ^double[];
type `cpp_rdlaplace` <double, double, double> => double[];
type `cpp_rdunif` <double, double, double> => double[];
type `cpp_rdweibull` <double, double, double> => double[];
type `cpp_rfatigue` <double, double, double, double> => double[];
type `cpp_rfrechet` <double, double, double, double> => double[];
type `cpp_rgev` <double, double, double, double> => double[];
type `cpp_rgompertz` <double, double, double> => double[];
type `cpp_rgpd` <double, double, double, double> => double[];
type `cpp_rgpois` <double, double, double> => double[];
type `cpp_rgumbel` <double, double, double> => double[];
type `cpp_rhcauchy` <double, double> => double[];
type `cpp_rhnorm` <double, double> => double[];
type `cpp_rht` <double, double, double> => double[];
type `cpp_rhuber` <double, double, double, double> => double[];
type `cpp_rkumar` <double, double, double> => double[];
type `cpp_rlaplace` <double, double, double> => double[];
type `cpp_rlgser` <double, double> => double[];
type `cpp_rlomax` <double, double, double> => double[];
type `cpp_rlst` <double, double, double, double> => double[];
type `cpp_rmixnorm` <double, ^double[], ^double[], ^double[]> => double[];
type `cpp_rmixpois` <double, ^double[], ^double[]> => double[];
type `cpp_rmnom` <double, double, ^double[]> => ^double[];
type `cpp_rmvhyper` <double, ^double[], double> => ^double[];
type `cpp_rnhyper` <double, double, double, double> => double[];
type `cpp_rnsbeta` <double, double, double, double, double> => double[];
type `cpp_rpareto` <double, double, double> => double[];
type `cpp_rpower` <double, double, double> => double[];
type `cpp_rprop` <double, double, double, double> => double[];
type `cpp_rrayleigh` <double, double> => double[];
type `cpp_rsgomp` <double, double, double> => double[];
type `cpp_rskellam` <double, double, double> => double[];
type `cpp_rslash` <double, double, double> => double[];
type `cpp_rtbinom` <double, double, double, double, double> => double[];
type `cpp_rtlambda` <double, double> => double[];
type `cpp_rtnorm` <double, double, double, double, double> => double[];
type `cpp_rtpois` <double, double, double, double> => double[];
type `cpp_rtriang` <double, double, double, double> => double[];
type `cpp_rwald` <double, double, double> => double[];
type `cpp_rzib` <double, double, double, double> => double[];
type `cpp_rzinb` <double, double, double, double> => double[];
type `cpp_rzip` <double, double, double> => double[];
type `dbbinom` <integer[], double, double, double, logical> => double[];
type `dbetapr` <double[], double, double, double, logical> => double[];
type `dbhatt` <double[], double, double, double, logical> => double[];
type `dbnbinom` <integer[], double, double, double, logical> => double[];
type `dbvnorm` <double[], double[], double, double, double, double, double, logical> => double[];
type `dcat` <integer[], ^double[], logical> => double[];
type `ddgamma` <integer[], double, double, double, logical> => double[];
type `ddlaplace` <double[], double, double, logical> => double[];
type `ddnorm` <integer[], double, double, logical> => double[];
type `ddunif` <integer[], double, double, logical> => double[];
type `ddweibull` <double[], double, double, logical> => double[];
type `dfatigue` <double[], double, double, double, logical> => double[];
type `dfrechet` <double[], double, double, double, logical> => double[];
type `dgev` <double[], double, double, double, logical> => double[];
type `dgompertz` <double[], double, double, logical> => double[];
type `dgpd` <double[], double, double, double, logical> => double[];
type `dgpois` <double[], double, double, double, logical> => double[];
type `dgumbel` <double[], double, double, logical> => double[];
type `dhcauchy` <integer[], double, logical> => double[];
type `dhnorm` <double[], double, logical> => double[];
type `dht` <integer[], double, double, logical> => double[];
type `dhuber` <double[], double, double, double, logical> => double[];
type `dinvchisq` <double[], double, double | ???, logical> => double[];
type `dinvgamma` <double[], double, double, logical> => double[];
type `dkumar` <double[], double, double, logical> => double[];
type `dlaplace` <double[], double, double, logical> => double[];
type `dlgser` <double[], double, logical> => double[];
type `dlomax` <double[], double, double, logical> => double[];
type `dlst` <double[], double, double, double, logical> => double[];
type `dmixnorm` <double[], double[], double[], double[], logical> => double[];
type `dmixpois` <integer[], double[], double[], logical> => double[];
type `dmnom` <^double[], double, double[], logical> => double;
type `dnhyper` <integer[], double, double, double, logical> => double[];
type `dnsbeta` <double[], double, double, double, double, logical> => double[];
type `dpareto` <integer[], double, double, logical> => double[];
type `dpower` <double[], double, double, logical> => double[];
type `dprop` <double[], double, double, double, logical> => double[];
type `drayleigh` <double[], double, logical> => double[];
type `dsgomp` <double[], double, double, logical> => double[];
type `dskellam` <integer[], double, double, logical> => double[];
type `dslash` <double[], double, double, logical> => double[];
type `dtbinom` <integer[], double, double, double, double, logical> => double[];
type `dtnorm` <double[], double, double, double, double, logical> => double[];
type `dtpois` <integer[], double, double, double, logical> => double[];
type `dtriang` <double[], double, double, double, logical> => double[];
type `dwald` <double[], double, double, logical> => double[];
type `dzib` <integer[], double, double, double, logical> => double[];
type `dzinb` <integer[], double, double, double, logical> => double[];
type `dzip` <integer[], double, double, logical> => double[];
type `filter` <character[]> => logical[];
type `pbbinom` <double[], double, double, double, logical, logical> => double[];
type `pbetapr` <double[], double, double, double, logical, logical> => double[];
type `pbhatt` <double[], double, double, double, logical, logical> => double[];
type `pbnbinom` <double[], double, double, double, logical, logical> => double[];
type `pcat` <double[], ^double[], logical, logical> => double[];
type `pdgamma` <double[], double, double, double, logical, logical> => double[];
type `pdlaplace` <double[], double, double, logical, logical> => double[];
type `pdnorm` <double[], double, double, logical, logical> => double[];
type `pdunif` <double[], double, double, logical, logical> => double[];
type `pdweibull` <double[], double, double, logical, logical> => double[];
type `pfatigue` <double[], double, double, double, logical, logical> => double[];
type `pfrechet` <double[], double, double, double, logical, logical> => double[];
type `pgev` <double[], double, double, double, logical, logical> => double[];
type `pgompertz` <double[], double, double, logical, logical> => double[];
type `pgpd` <double[], double, double, double, logical, logical> => double[];
type `pgpois` <double[], double, double, double, logical, logical> => double[];
type `pgumbel` <double[], double, double, logical, logical> => double[];
type `phcauchy` <double[], double, logical, logical> => double[];
type `phnorm` <double[], double, logical, logical> => double[];
type `pht` <double[], double, double, logical, logical> => double[];
type `phuber` <double[], double, double, double, logical, logical> => double[];
type `pinvchisq` <double[], double, double | ???, logical, logical> => double[];
type `pinvgamma` <double[], double, double, logical, logical> => double[];
type `pkumar` <double[], double, double, logical, logical> => double[];
type `plaplace` <double[], double, double, logical, logical> => double[];
type `plgser` <double[], double, logical, logical> => double[];
type `plomax` <double[], double, double, logical, logical> => double[];
type `plst` <double[], double, double, double, logical, logical> => double[];
type `pmixnorm` <double[], double[], double[], double[], logical, logical> => double[];
type `pmixpois` <double[], double[], double[], logical, logical> => double[];
type `pnhyper` <double[], double, double, double, logical, logical> => double[];
type `pnsbeta` <double[], double, double, double, double, logical, logical> => double[];
type `ppareto` <double[], double, double, logical, logical> => double[];
type `ppower` <double[], double, double, logical, logical> => double[];
type `pprop` <double[], double, double, double, logical, logical> => double[];
type `prayleigh` <double[], double, logical, logical> => double[];
type `psgomp` <double[], double, double, logical, logical> => double[];
type `pslash` <double[], double, double, logical, logical> => double[];
type `ptbinom` <double[], double, double, double, double, logical, logical> => double[];
type `ptnorm` <double[], double, double, double, double, logical, logical> => double[];
type `ptpois` <double[], double, double, double, logical, logical> => double[];
type `ptriang` <double[], double, double, double, logical, logical> => double[];
type `pwald` <double[], double, double, logical, logical> => double[];
type `pzib` <double[], double, double, double, logical, logical> => double[];
type `pzinb` <double[], double, double, double, logical, logical> => double[];
type `pzip` <double[], double, double, logical, logical> => double[];
type `qtbinom` <double[], double, double, double, double, logical, logical> => double[];
type `qtlambda` <double[], double, logical, logical> => double[];
type `qtpois` <double[], double, double, double, logical, logical> => double[];
type `rbbinom` <double, double, double, double> => double[];
type `rbern` <double, double> => double[];
type `rbetapr` <double, double, double, double> => double[];
type `rbhatt` <double, double, double, double> => double[];
type `rbnbinom` <double, double, double, double> => double[];
type `rbvpois` <double, double, double, double> => ^double[];
type `rdgamma` <double, double, double, double> => double[];
type `rdirichlet` <double, ^double[]> => ^double[];
type `rdlaplace` <double, double, double> => double[];
type `rdnorm` <double, double, double> => double[];
type `rdunif` <double, double, double> => double[];
type `rdweibull` <double, double, double> => double[];
type `rfatigue` <double, double, double, double> => double[];
type `rfrechet` <double, double, double, double> => double[];
type `rgev` <double, double, double, double> => double[];
type `rgompertz` <double, double, double> => double[];
type `rgpd` <double, double, double, double> => double[];
type `rgpois` <double, double, double, double> => double[];
type `rgumbel` <double, double, double> => double[];
type `rhcauchy` <double, double> => double[];
type `rhnorm` <double, double> => double[];
type `rht` <double, double, double> => double[];
type `rhuber` <double, double, double, double> => double[];
type `rinvchisq` <double, double, double | ???> => double[];
type `rinvgamma` <double, double, double> => double[];
type `rkumar` <double, double, double> => double[];
type `rlaplace` <double, double, double> => double[];
type `rlgser` <double, double> => double[];
type `rlomax` <double, double, double> => double[];
type `rlst` <double, double, double, double> => double[];
type `rmixnorm` <double, double[], double[], double[]> => double[];
type `rmixpois` <double, double[], double[]> => double[];
type `rmnom` <double, double, double[]> => ^double[];
type `rmvhyper` <double, double[], double> => ^double[];
type `rnhyper` <double, double, double, double> => double[];
type `rnsbeta` <double, double, double, double, double> => double[];
type `rpareto` <double, double, double> => double[];
type `rpower` <double, double, double> => double[];
type `rprop` <double, double, double, double> => double[];
type `rrayleigh` <double, double> => double[];
type `rsgomp` <double, double, double> => double[];
type `rskellam` <double, double, double> => double[];
type `rslash` <double, double, double> => double[];
type `rtbinom` <double, double, double, double, double> => double[];
type `rtlambda` <double, double> => double[];
type `rtnorm` <double, double, double, double, double> => double[];
type `rtpois` <double, double, double, double> => double[];
type `rtriang` <double, double, double, double> => double[];
type `rwald` <double, double, double> => double[];
type `rzib` <double, double, double, double> => double[];
type `rzinb` <double, double, double, double> => double[];
type `rzip` <double, double, double> => double[];
