type `cospi2` <double[]> => double[];
type `C.stable.tail` <double, logical> => double;
type `dPareto` <double[], double, double, logical> => double[];
type `dstable` <double[], double, double, double, double, double, logical, double, null, double> => double[];
type `.e.minus` <double, double> => double;
type `.e.plus` <double, double> => double;
type `.FCT1` <double, any, any, any, logical, any, any, any, any> => double;
type `.fct2` <double, double, logical, double, double, logical> => double;
type `.FCT2` <double, double, any, any, logical, any> => double;
type `.integrate2` <class<`function`>, double, double, ..., double, double, double, logical> => double;
type `.om` <any, double> => double;
type `pi2..` <double> => double;
type `pPareto` <double[], double, double, logical, logical> => double[];
type `pstable` <double[], double, double, double, double, double, logical, logical, logical, double, double> => double[];
type `qstable` <double[], double, double, double, double, double, logical, logical, double, double, double, double, double> => double[];
type `R.D.Cval` <double, logical> => double;
type `R.D.Lval` <double, logical> => double;
type `R.DT.CIv` <double, logical, logical> => double;
type `R.DT.qIv` <double, logical, logical> => double;
type `rstable` <double, double, double, double, double, double> => double[];
type `stableMode` <double, double, double, any> => double;
type `tanpi2` <double[]> => double[];
type `.unirootNA` <class<`function`>, double[], ..., double, double, double, double, any, logical, any, any, any> => (double | null);
type `x.exp.m.x` <double[]> => double[];
