type `as.quoted.character` <character[], environment> => tuple<symbol> | tuple<> | list<symbol>;
type `as.quoted.quoted` <tuple<symbol>, language> => tuple<symbol>;
type `filter` <character[]> => logical[];
type `FUN` <tuple<symbol> | symbol | struct<> | any => any | ^double[] | character[] | struct<`diet`:integer[], `chick`:integer[]> | struct<`treatment`:integer[], `subject`:integer[]> | language, struct<> | integer[], environment | integer, logical> => symbol | struct<`country`:integer[]> | struct<`year`:integer[]> | null | double[] | ^character[] | language | struct<`chick`:integer[]> | struct<`day`:integer[]> | struct<`diet`:integer[]> | struct<`month`:integer[]> | struct<`rep`:double[]> | struct<`sex`:integer[]> | struct<`smoker`:integer[]> | struct<`subject`:integer[]> | struct<`time`:double[]> | struct<`treatment`:integer[]> | struct<`variable`:integer[]> | ^integer[] | tuple<double, double, double, double> | list<double>;
type `id` <tuple<integer[], integer[]> | struct<`Bound`:integer[], `thetaidx`:integer[]> | struct<>, logical> => integer[];
type `id_var` <double[], symbol | logical> => integer[];
type `is.formula` <language | tuple<tuple<symbol>, tuple<symbol>> | character> => logical;
type `is.quoted` <tuple<symbol> | tuple<language>> => logical;
type `make_names` <struct<`country`:integer[]> | struct<`year`:integer[]> | struct<> | double | tuple<double[]> | struct<`Bound`:integer[], `thetaidx`:integer[]> | struct<`Probability`:double[]> | struct<`ein`:integer[], `strein`:character[], `name`:character[], `sub_name`:character[], `city`:character[], `state`:character[], `ntee_code`:^character[], `raw_ntee_code`:^character[], `subseccd`:integer[], `has_subseccd`:logical[], `have_filings`:^logical[], `have_extracts`:^logical[], `have_pdfs`:^logical[], `score`:double[]> | struct<`foo`:double[], `bar`:^logical[], `col`:^character[]> | struct<`v`:double[], `x`:double[]> | struct<`value`:double[], `L2`:^integer[], `L3`:^integer[]> | struct<`chick`:integer[]> | struct<`day`:integer[]> | struct<`diet`:integer[]> | struct<`month`:integer[]> | struct<`rep`:double[]> | struct<`sex`:integer[]> | struct<`smoker`:integer[]> | struct<`subject`:integer[]> | struct<`time`:double[]> | struct<`treatment`:integer[]> | struct<`value`:^integer[]> | struct<`variable`:integer[]> | struct<`CO2`:character[], `VAR`:character[], `GEN`:character[], `COU`:character[], `TIME_FORMAT`:character[], `obsTime`:character[], `obsValue`:double[]>, character> => character[];
type `names.quoted` <tuple<symbol> | tuple<language>> => character[];
type `quickdf` <struct<`country`:integer[]> | struct<`year`:integer[]> | tuple<double[]> | struct<`Bound`:integer[], `thetaidx`:integer[]> | struct<`Probability`:double[]> | struct<`ein`:integer[], `strein`:character[], `name`:character[], `sub_name`:character[], `city`:character[], `state`:character[], `ntee_code`:^character[], `raw_ntee_code`:^character[], `subseccd`:integer[], `has_subseccd`:logical[], `have_filings`:^logical[], `have_extracts`:^logical[], `have_pdfs`:^logical[], `score`:double[]> | struct<`foo`:double[], `bar`:^logical[], `col`:^character[]> | struct<`v`:double[], `x`:double[]> | struct<`chick`:integer[]> | struct<`day`:integer[]> | struct<`diet`:integer[]> | struct<`month`:integer[]> | struct<`rep`:double[]> | struct<`sex`:integer[]> | struct<`smoker`:integer[]> | struct<`subject`:integer[]> | struct<`time`:double[]> | struct<`treatment`:integer[]> | struct<`value`:double[], `L2`:^integer[], `L3`:^integer[]> | struct<`value`:^integer[]> | struct<`variable`:integer[]> | struct<`CO2`:character[], `VAR`:character[], `GEN`:character[], `COU`:character[], `TIME_FORMAT`:character[], `obsTime`:character[], `obsValue`:double[]>> => struct<`country`:integer[]>;
type `[.quoted` <tuple<symbol> | tuple<language>, logical[], null> => tuple<symbol> | tuple<language>;
type `amv_dim` <^double[] | struct<> | ^character[]> => integer[];
type `amv_dimnames` <^double[] | ^character[]> => struct<`Iteration`:character[], `Chain`:character[], `Parameter`:character[]> | struct<`Class`:character[], `Sex`:character[], `Age`:character[], `Survived`:character[]> | tuple<integer[]> | tuple<character[]> | struct<`lat`:character[], `long`:character[]>;
type `dims` <^double[] | struct<> | ^character[]> => integer;
type `::` <struct<`x`:integer[], `y`:integer[]> | list<struct<`ein`:integer[], `strein`:character[], `name`:character[], `sub_name`:character[], `city`:character[], `state`:character[], `ntee_code`:^character[], `raw_ntee_code`:^character[], `subseccd`:integer[], `has_subseccd`:logical[], `have_filings`:^logical[], `have_extracts`:^logical[], `have_pdfs`:^logical[], `score`:double[]>> | tuple<struct<`foo`:double[], `bar`:logical[]>, struct<`foo`:double[], `col`:character[]>>, double, any => any, null, logical, character, logical, logical, null | symbol, null | logical> => struct<`1`:integer[], `2`:integer[], `3`:integer[], `4`:integer[], `5`:integer[], `6`:integer[], `7`:integer[], `8`:integer[], `9`:integer[], `10`:integer[], `11`:integer[], `12`:integer[], `13`:integer[], `14`:integer[], `15`:integer[], `16`:integer[]> | struct<`1`:null, `2`:null, `3`:null, `4`:null, `5`:null, `6`:null, `7`:null, `8`:null, `9`:null, `10`:null, `11`:null, `12`:null, `13`:null, `14`:null, `15`:null, `16`:null> | struct<>;
type `[[.indexed_array` <struct<`env`:environment, `index`:struct<`X1`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:character[], `X3`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:integer[]>, `drop`:logical, `subs`:symbol>, integer> => struct<`x`:integer, `y`:integer> | ^double[] | character[];
type `$` <symbol> => null;
type `create_progress_bar` <character, null> => struct<`init`:any => any, `step`:any => any, `term`:any => any>;
type `indexed_array` <environment, struct<`X1`:integer[], `X2`:character[]>> => struct<`env`:environment, `index`:struct<`X1`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:character[], `X3`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:integer[]>, `drop`:logical, `subs`:symbol>;
type `length.indexed_array` <struct<`env`:environment, `index`:struct<`X1`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:character[], `X3`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:integer[]>, `drop`:logical, `subs`:symbol>> => integer;
type `llply` <struct<`data`:struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, `index`:list<integer[]>, `vars`:character[]> | struct<`env`:environment, `index`:struct<`X1`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:character[], `X3`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:integer[]>, `drop`:logical, `subs`:symbol>, any => any, null | language | double[], character, logical, logical, symbol> => struct<`1`:integer[], `2`:integer[], `3`:integer[], `4`:integer[], `5`:integer[], `6`:integer[], `7`:integer[], `8`:integer[], `9`:integer[], `10`:integer[], `11`:integer[], `12`:integer[], `13`:integer[], `14`:integer[], `15`:integer[], `16`:integer[]> | struct<`1`:null, `2`:null, `3`:null, `4`:null, `5`:null, `6`:null, `7`:null, `8`:null, `9`:null, `10`:null, `11`:null, `12`:null, `13`:null, `14`:null, `15`:null, `16`:null> | struct<`1-Lower bound.1`:struct<`Probability`:double[]>, `1-Lower bound.2`:struct<`Probability`:double[]>, `1-Lower bound.3`:struct<`Probability`:double[]>, `1-Lower bound.4`:struct<`Probability`:double[]>, `1-Lower bound.5`:struct<`Probability`:double[]>, `1-Lower bound.6`:struct<`Probability`:double[]>, `1-Lower bound.7`:struct<`Probability`:double[]>, `1-Lower bound.8`:struct<`Probability`:double[]>, `1-Lower bound.9`:struct<`Probability`:double[]>, `Upper bound.1`:struct<`Probability`:double[]>, `Upper bound.2`:struct<`Probability`:double[]>, `Upper bound.3`:struct<`Probability`:double[]>, `Upper bound.4`:struct<`Probability`:double[]>, `Upper bound.5`:struct<`Probability`:double[]>, `Upper bound.6`:struct<`Probability`:double[]>, `Upper bound.7`:struct<`Probability`:double[]>, `Upper bound.8`:struct<`Probability`:double[]>, `Upper bound.9`:struct<`Probability`:double[]>> | struct<`1`:struct<`v`:double[], `x`:double[]>, `2`:struct<`v`:double[], `x`:double[]>, `3`:struct<`v`:double[], `x`:double[]>, `4`:struct<`v`:double[], `x`:double[]>, `5`:struct<`v`:double[], `x`:double[]>> | struct<`1`:^double[], `2`:^double[], `3`:^double[], `4`:^double[], `5`:^double[], `6`:^double[], `7`:^double[], `8`:^double[], `9`:^double[], `10`:^double[], `11`:^double[], `12`:^double[], `13`:^double[], `14`:^double[], `15`:^double[], `16`:^double[], `17`:^double[], `18`:^double[], `19`:^double[], `20`:^double[], `21`:^double[], `22`:^double[], `23`:^double[], `24`:^double[], `25`:^double[], `26`:^double[], `27`:^double[], `28`:^double[], `29`:^double[], `30`:^double[], `31`:^double[], `32`:^double[], `33`:^double[], `34`:^double[], `35`:^double[], `36`:^double[], `37`:^double[], `38`:^double[], `39`:^double[], `40`:^double[], `41`:^double[], `42`:^double[], `43`:^double[], `44`:^double[], `45`:^double[], `46`:^double[], `47`:^double[], `48`:^double[], `49`:^double[], `50`:^double[], `51`:^double[], `52`:^double[], `53`:^double[], `54`:^double[], `55`:^double[], `56`:^double[], `57`:^double[], `58`:^double[], `59`:^double[], `60`:^double[], `61`:^double[], `62`:^double[], `63`:^double[], `64`:^double[], `65`:^double[], `66`:^double[], `67`:^double[], `68`:^double[], `69`:^double[], `70`:^double[], `71`:^double[], `72`:^double[]> | struct<`1`:double[], `2`:double[], `3`:double[], `4`:double[], `5`:double[], `6`:double[], `7`:double[], `8`:double[], `9`:double[], `10`:double[], `11`:double[], `12`:double[], `13`:double[], `14`:double[], `15`:double[], `16`:double[], `17`:double[], `18`:double[], `19`:double[], `20`:double[], `21`:double[], `22`:double[], `23`:double[], `24`:double[]> | struct<`1`:character[], `2`:integer[]>;
type `loop_apply` <integer, any => any, environment> => list<null> | list<struct<`Probability`:double[]>> | tuple<struct<`v`:double[], `x`:double[]>, struct<`v`:double[], `x`:double[]>, struct<`v`:double[], `x`:double[]>, struct<`v`:double[], `x`:double[]>, struct<`v`:double[], `x`:double[]>> | list<^double[]> | tuple<character[], integer[]>;
type `match.fun` < > => struct<`init`:any => any, `step`:any => any, `term`:any => any>;
type `names.indexed_array` <struct<`env`:environment, `index`:struct<`X1`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:character[], `X3`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:integer[]>, `drop`:logical, `subs`:symbol>> => character[];
type `splitter_a` <struct<`x`:integer[], `y`:integer[]> | double[] | ^character[], double[], logical | symbol, null> => struct<`env`:environment, `index`:struct<`X1`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:character[], `X3`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:integer[]>, `drop`:logical, `subs`:symbol>;
type `unrowname` <struct<`X1`:integer[], `X2`:character[]>> => struct<`X1`:integer[], `X2`:character[]>;
type `ldply` <struct<`data`:struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, `index`:list<integer[]>, `vars`:character[]> | struct<`env`:environment, `index`:struct<`X1`:integer[]>, `drop`:logical, `subs`:symbol>, any => any, null | language | double[], character, logical, logical, symbol, null> => struct<`age`:double[], `yhat`:double[]>;
type `list_to_dataframe` <struct<`1`:double, `2`:double, `3`:double, `4`:double, `5`:double, `6`:double, `7`:double, `8`:double, `9`:double, `10`:double, `11`:double, `12`:double, `13`:double, `14`:double, `15`:double, `16`:double, `17`:double, `18`:double, `19`:double, `20`:double, `21`:double, `22`:double, `23`:double, `24`:double, `25`:double, `26`:double, `27`:double, `28`:double, `29`:double, `30`:double, `31`:double, `32`:double, `33`:double, `34`:double, `35`:double, `36`:double, `37`:double, `38`:double, `39`:double, `40`:double, `41`:double, `42`:double, `43`:double, `44`:double, `45`:double, `46`:double, `47`:double, `48`:double, `49`:double, `50`:double, `51`:double> | struct<`1-Lower bound.1`:struct<`Probability`:double[]>, `1-Lower bound.2`:struct<`Probability`:double[]>, `1-Lower bound.3`:struct<`Probability`:double[]>, `1-Lower bound.4`:struct<`Probability`:double[]>, `1-Lower bound.5`:struct<`Probability`:double[]>, `1-Lower bound.6`:struct<`Probability`:double[]>, `1-Lower bound.7`:struct<`Probability`:double[]>, `1-Lower bound.8`:struct<`Probability`:double[]>, `1-Lower bound.9`:struct<`Probability`:double[]>, `Upper bound.1`:struct<`Probability`:double[]>, `Upper bound.2`:struct<`Probability`:double[]>, `Upper bound.3`:struct<`Probability`:double[]>, `Upper bound.4`:struct<`Probability`:double[]>, `Upper bound.5`:struct<`Probability`:double[]>, `Upper bound.6`:struct<`Probability`:double[]>, `Upper bound.7`:struct<`Probability`:double[]>, `Upper bound.8`:struct<`Probability`:double[]>, `Upper bound.9`:struct<`Probability`:double[]>> | struct<`1`:struct<`v`:double[], `x`:double[]>, `2`:struct<`v`:double[], `x`:double[]>, `3`:struct<`v`:double[], `x`:double[]>, `4`:struct<`v`:double[], `x`:double[]>, `5`:struct<`v`:double[], `x`:double[]>>, struct<`age`:double[]>, character, symbol> => struct<`age`:double[], `yhat`:double[]>;
type `.` <symbol | language, environment> => tuple<symbol, symbol> | tuple<language>;
type `.fun` <struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]> | ^double[], language | double[] | null> => struct<`Probability`:double[]> | double[];
type `[[` <double[], null | double[] | ^character[] | ^logical[] | tuple<double> | list<double>> => null | double[] | ^character[] | ^logical[] | tuple<double> | list<double>;
type `[[.indexed_df` <struct<`data`:struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, `index`:list<integer[]>, `vars`:character[]>, integer> => struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>;
type `allocate_column` <double[] | ^character[] | ^logical[] | tuple<double, double, double, double> | list<double>, integer, symbol | tuple<struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>, struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>, struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>> | tuple<struct<`day`:integer[], `month`:integer[], `variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`diet`:integer[], `chick`:integer[], `time`:integer[], `result`:list<double>>, struct<`diet`:integer[], `time`:integer[], `chick`:integer[], `result`:list<double>>> | tuple<struct<`diet`:integer[], `variable`:integer[], `result`:tuple<double, double, double, double>>, struct<>> | tuple<struct<`month`:integer[], `day`:integer[], `result`:list<double>>, struct<`month`:integer[], `day`:integer[], `result`:tuple<double, double, double, double, double>>> | tuple<struct<`month`:integer[], `result_variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`month`:integer[], `result`:tuple<double, double, double, double, double>>, struct<`month`:integer, `result`:tuple<double>>> | tuple<struct<`month`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `month`:integer[], `result`:tuple<double, double, double, double>>> | tuple<struct<`month`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `month`:integer[], `result`:list<double>>> | tuple<struct<`sex`:integer[], `smoker`:integer[], `result`:tuple<double, double, double, double>>, struct<>> | tuple<struct<`subject`:integer[], `time`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`time`:double[], `diet`:integer[], `result`:list<integer>>, struct<>> | tuple<struct<`time`:double[], `variable`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`treatment`:integer[], `rep`:double[], `result`:list<double>>, struct<>> | tuple<struct<`treatment`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `treatment`:integer[], `result`:list<double>>> | tuple<struct<`variable`:integer[], `result_variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`chick`:integer[], `time`:double[], `result`:list<double>>, struct<>>, symbol | character> => struct<`set`:any => any, `get`:any => any>;
type `compact` <struct<`1-Lower bound.1`:struct<`Probability`:double[]>, `1-Lower bound.2`:struct<`Probability`:double[]>, `1-Lower bound.3`:struct<`Probability`:double[]>, `1-Lower bound.4`:struct<`Probability`:double[]>, `1-Lower bound.5`:struct<`Probability`:double[]>, `1-Lower bound.6`:struct<`Probability`:double[]>, `1-Lower bound.7`:struct<`Probability`:double[]>, `1-Lower bound.8`:struct<`Probability`:double[]>, `1-Lower bound.9`:struct<`Probability`:double[]>, `Upper bound.1`:struct<`Probability`:double[]>, `Upper bound.2`:struct<`Probability`:double[]>, `Upper bound.3`:struct<`Probability`:double[]>, `Upper bound.4`:struct<`Probability`:double[]>, `Upper bound.5`:struct<`Probability`:double[]>, `Upper bound.6`:struct<`Probability`:double[]>, `Upper bound.7`:struct<`Probability`:double[]>, `Upper bound.8`:struct<`Probability`:double[]>, `Upper bound.9`:struct<`Probability`:double[]>> | list<struct<`ein`:integer[], `strein`:character[], `name`:character[], `sub_name`:character[], `city`:character[], `state`:character[], `ntee_code`:^character[], `raw_ntee_code`:^character[], `subseccd`:integer[], `has_subseccd`:logical[], `have_filings`:^logical[], `have_extracts`:^logical[], `have_pdfs`:^logical[], `score`:double[]>> | tuple<struct<`foo`:double[], `bar`:logical[]>, struct<`foo`:double[], `col`:character[]>> | struct<`1`:struct<`v`:double[], `x`:double[]>, `2`:struct<`v`:double[], `x`:double[]>, `3`:struct<`v`:double[], `x`:double[]>, `4`:struct<`v`:double[], `x`:double[]>, `5`:struct<`v`:double[], `x`:double[]>> | tuple<struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>, struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>, struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>> | tuple<struct<`value`:integer[]>> | struct<`a`:struct<`value`:integer>, `b`:struct<`value`:integer>, `c`:struct<`value`:integer>, `d`:struct<`value`:integer>, `NA`:struct<`value`:null>> | struct<`Probability`:double[]> | tuple<null, null> | tuple<character[], character, null> | tuple<character, null> | tuple<struct<`chick`:integer[], `time`:double[], `result`:list<double>>, struct<>> | tuple<struct<`day`:integer[], `month`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`day`:integer[], `month`:integer[], `variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`diet`:integer[], `chick`:integer[], `time`:integer[], `result`:list<double>>, struct<`diet`:integer[], `time`:integer[], `chick`:integer[], `result`:list<double>>> | tuple<struct<`diet`:integer[], `variable`:integer[], `result`:tuple<double, double, double, double>>, struct<>> | tuple<struct<`month`:integer[], `day`:integer[], `result`:list<double>>, struct<`month`:integer[], `day`:integer[], `result`:tuple<double, double, double, double, double>>> | tuple<struct<`month`:integer[], `result_variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`month`:integer[], `result`:tuple<double, double, double, double, double>>, struct<>> | tuple<struct<`month`:integer[], `result`:tuple<double, double, double, double, double>>, struct<`month`:integer, `result`:tuple<double>>> | tuple<struct<`month`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `month`:integer[], `result`:tuple<double, double, double, double>>> | tuple<struct<`month`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `month`:integer[], `result`:list<double>>> | tuple<struct<`sex`:integer[], `smoker`:integer[], `result`:tuple<double, double, double, double>>, struct<>> | tuple<struct<`subject`:integer[], `time`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`time`:double[], `diet`:integer[], `result`:list<integer>>, struct<>> | tuple<struct<`time`:double[], `variable`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`treatment`:integer[], `rep`:double[], `result`:list<double>>, struct<>> | tuple<struct<`treatment`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `treatment`:integer[], `result`:list<double>>> | tuple<struct<`variable`:integer[], `result_variable`:integer[], `result`:double[]>, struct<>> | struct<`a`:struct<`value`:integer, `ID`:character>, `b`:struct<`value`:integer, `ID`:character>, `c`:struct<`value`:integer, `ID`:character>, `d`:struct<`value`:integer, `ID`:character>> | struct<`a`:struct<`value`:integer, `L1`:character>, `b`:struct<`value`:integer, `L1`:character>, `c`:struct<`value`:integer, `L1`:character>, `d`:struct<`value`:integer, `L1`:character>> | struct<`variable`:integer[]> | list<struct<`CO2`:character, `VAR`:character, `GEN`:character, `COU`:character, `TIME_FORMAT`:character, `obsTime`:character, `obsValue`:double>> | tuple<struct<`obsTime`:integer, `obsValue`:double>>> => struct<`1-Lower bound.1`:struct<`Probability`:double[]>, `1-Lower bound.2`:struct<`Probability`:double[]>, `1-Lower bound.3`:struct<`Probability`:double[]>, `1-Lower bound.4`:struct<`Probability`:double[]>, `1-Lower bound.5`:struct<`Probability`:double[]>, `1-Lower bound.6`:struct<`Probability`:double[]>, `1-Lower bound.7`:struct<`Probability`:double[]>, `1-Lower bound.8`:struct<`Probability`:double[]>, `1-Lower bound.9`:struct<`Probability`:double[]>, `Upper bound.1`:struct<`Probability`:double[]>, `Upper bound.2`:struct<`Probability`:double[]>, `Upper bound.3`:struct<`Probability`:double[]>, `Upper bound.4`:struct<`Probability`:double[]>, `Upper bound.5`:struct<`Probability`:double[]>, `Upper bound.6`:struct<`Probability`:double[]>, `Upper bound.7`:struct<`Probability`:double[]>, `Upper bound.8`:struct<`Probability`:double[]>, `Upper bound.9`:struct<`Probability`:double[]>> | list<struct<`ein`:integer[], `strein`:character[], `name`:character[], `sub_name`:character[], `city`:character[], `state`:character[], `ntee_code`:^character[], `raw_ntee_code`:^character[], `subseccd`:integer[], `has_subseccd`:logical[], `have_filings`:^logical[], `have_extracts`:^logical[], `have_pdfs`:^logical[], `score`:double[]>> | tuple<struct<`foo`:double[], `bar`:logical[]>, struct<`foo`:double[], `col`:character[]>> | struct<`1`:struct<`v`:double[], `x`:double[]>, `2`:struct<`v`:double[], `x`:double[]>, `3`:struct<`v`:double[], `x`:double[]>, `4`:struct<`v`:double[], `x`:double[]>, `5`:struct<`v`:double[], `x`:double[]>> | tuple<struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>, struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>, struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>> | tuple<struct<`value`:integer[]>> | struct<`a`:struct<`value`:integer>, `b`:struct<`value`:integer>, `c`:struct<`value`:integer>, `d`:struct<`value`:integer>, `NA`:struct<`value`:null>> | struct<`Probability`:double[]> | tuple<> | tuple<character[], character> | tuple<character> | tuple<struct<`chick`:integer[], `time`:double[], `result`:list<double>>, struct<>> | tuple<struct<`day`:integer[], `month`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`day`:integer[], `month`:integer[], `variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`diet`:integer[], `chick`:integer[], `time`:integer[], `result`:list<double>>, struct<`diet`:integer[], `time`:integer[], `chick`:integer[], `result`:list<double>>> | tuple<struct<`diet`:integer[], `variable`:integer[], `result`:tuple<double, double, double, double>>, struct<>> | tuple<struct<`month`:integer[], `day`:integer[], `result`:list<double>>, struct<`month`:integer[], `day`:integer[], `result`:tuple<double, double, double, double, double>>> | tuple<struct<`month`:integer[], `result_variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`month`:integer[], `result`:tuple<double, double, double, double, double>>, struct<>> | tuple<struct<`month`:integer[], `result`:tuple<double, double, double, double, double>>, struct<`month`:integer, `result`:tuple<double>>> | tuple<struct<`month`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `month`:integer[], `result`:tuple<double, double, double, double>>> | tuple<struct<`month`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `month`:integer[], `result`:list<double>>> | tuple<struct<`sex`:integer[], `smoker`:integer[], `result`:tuple<double, double, double, double>>, struct<>> | tuple<struct<`subject`:integer[], `time`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`time`:double[], `diet`:integer[], `result`:list<integer>>, struct<>> | tuple<struct<`time`:double[], `variable`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`treatment`:integer[], `rep`:double[], `result`:list<double>>, struct<>> | tuple<struct<`treatment`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `treatment`:integer[], `result`:list<double>>> | tuple<struct<`variable`:integer[], `result_variable`:integer[], `result`:double[]>, struct<>> | struct<`a`:struct<`value`:integer, `ID`:character>, `b`:struct<`value`:integer, `ID`:character>, `c`:struct<`value`:integer, `ID`:character>, `d`:struct<`value`:integer, `ID`:character>> | struct<`a`:struct<`value`:integer, `L1`:character>, `b`:struct<`value`:integer, `L1`:character>, `c`:struct<`value`:integer, `L1`:character>, `d`:struct<`value`:integer, `L1`:character>> | struct<`variable`:integer[]> | list<struct<`CO2`:character, `VAR`:character, `GEN`:character, `COU`:character, `TIME_FORMAT`:character, `obsTime`:character, `obsValue`:double>> | tuple<struct<`obsTime`:integer, `obsValue`:double>>;
type `ddply` <struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, tuple<symbol, symbol>, any => any, language, character, logical, logical, logical, null> => struct<`Bound`:integer[], `thetaidx`:integer[], `Probability`:double[]>;
type `empty` <struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>> => logical;
type `eval.quoted` <tuple<symbol, symbol> | tuple<language>, struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, null, logical> => struct<`Bound`:integer[], `thetaidx`:integer[]> | struct<`month == 5`:logical[]> | struct<`time < 10 & chick < 20`:logical[]> | struct<`variable == "ozone"`:logical[]> | struct<`variable == "total_bill"`:logical[]>;
type `extract_rows` <struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, integer[]> => struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>;
type `indexed_df` <struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, list<integer[]>, character[]> => struct<`data`:struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, `index`:list<integer[]>, `vars`:character[]>;
type `length.indexed` <struct<`data`:struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, `index`:list<integer[]>, `vars`:character[]>> => integer;
type `make_assignment_call` <integer> => language;
type `names.indexed` <struct<`data`:struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, `index`:list<integer[]>, `vars`:character[]>> => character[];
type `output_template` <struct<`1-Lower bound.1`:struct<`Probability`:double[]>, `1-Lower bound.2`:struct<`Probability`:double[]>, `1-Lower bound.3`:struct<`Probability`:double[]>, `1-Lower bound.4`:struct<`Probability`:double[]>, `1-Lower bound.5`:struct<`Probability`:double[]>, `1-Lower bound.6`:struct<`Probability`:double[]>, `1-Lower bound.7`:struct<`Probability`:double[]>, `1-Lower bound.8`:struct<`Probability`:double[]>, `1-Lower bound.9`:struct<`Probability`:double[]>, `Upper bound.1`:struct<`Probability`:double[]>, `Upper bound.2`:struct<`Probability`:double[]>, `Upper bound.3`:struct<`Probability`:double[]>, `Upper bound.4`:struct<`Probability`:double[]>, `Upper bound.5`:struct<`Probability`:double[]>, `Upper bound.6`:struct<`Probability`:double[]>, `Upper bound.7`:struct<`Probability`:double[]>, `Upper bound.8`:struct<`Probability`:double[]>, `Upper bound.9`:struct<`Probability`:double[]>> | list<struct<`ein`:integer[], `strein`:character[], `name`:character[], `sub_name`:character[], `city`:character[], `state`:character[], `ntee_code`:^character[], `raw_ntee_code`:^character[], `subseccd`:integer[], `has_subseccd`:logical[], `have_filings`:^logical[], `have_extracts`:^logical[], `have_pdfs`:^logical[], `score`:double[]>> | tuple<struct<`foo`:double[], `bar`:logical[]>, struct<`foo`:double[], `col`:character[]>> | struct<`1`:struct<`v`:double[], `x`:double[]>, `2`:struct<`v`:double[], `x`:double[]>, `3`:struct<`v`:double[], `x`:double[]>, `4`:struct<`v`:double[], `x`:double[]>, `5`:struct<`v`:double[], `x`:double[]>> | tuple<struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>, struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>, struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>> | tuple<struct<`value`:integer>, struct<`value`:integer>> | struct<`a`:struct<`value`:integer>, `b`:struct<`value`:integer>, `c`:struct<`value`:integer>, `d`:struct<`value`:integer>, `NA`:struct<`value`:null>> | tuple<struct<`value`:integer[], `L2`:integer[]>, struct<`value`:double>, struct<`value`:integer[], `L3`:integer[], `L2`:integer[]>> | tuple<struct<`value`:integer[], `L3`:integer[]>, struct<`value`:integer[], `L3`:integer[]>> | tuple<struct<`value`:integer[]>, struct<`Var1`:integer[], `Var2`:integer[], `value`:integer[]>> | tuple<struct<`chick`:integer[], `time`:double[], `result`:list<double>>, struct<>> | tuple<struct<`day`:integer[], `month`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`day`:integer[], `month`:integer[], `variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`diet`:integer[], `chick`:integer[], `time`:integer[], `result`:list<double>>, struct<`diet`:integer[], `time`:integer[], `chick`:integer[], `result`:list<double>>> | tuple<struct<`diet`:integer[], `variable`:integer[], `result`:tuple<double, double, double, double>>, struct<>> | tuple<struct<`month`:integer[], `day`:integer[], `result`:list<double>>, struct<`month`:integer[], `day`:integer[], `result`:tuple<double, double, double, double, double>>> | tuple<struct<`month`:integer[], `result_variable`:integer[], `result`:double[]>, struct<>> | tuple<struct<`month`:integer[], `result`:tuple<double, double, double, double, double>>, struct<>> | tuple<struct<`month`:integer[], `result`:tuple<double, double, double, double, double>>, struct<`month`:integer, `result`:tuple<double>>> | tuple<struct<`month`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `month`:integer[], `result`:tuple<double, double, double, double>>> | tuple<struct<`month`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `month`:integer[], `result`:list<double>>> | tuple<struct<`sex`:integer[], `smoker`:integer[], `result`:tuple<double, double, double, double>>, struct<>> | tuple<struct<`subject`:integer[], `time`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`time`:double[], `diet`:integer[], `result`:list<integer>>, struct<>> | tuple<struct<`time`:double[], `variable`:integer[], `result`:list<double>>, struct<>> | tuple<struct<`treatment`:integer[], `rep`:double[], `result`:list<double>>, struct<>> | tuple<struct<`treatment`:integer[], `variable`:integer[], `result`:list<double>>, struct<`variable`:integer[], `treatment`:integer[], `result`:list<double>>> | struct<`a`:struct<`value`:integer, `ID`:character>, `b`:struct<`value`:integer, `ID`:character>, `c`:struct<`value`:integer, `ID`:character>, `d`:struct<`value`:integer, `ID`:character>> | struct<`a`:struct<`value`:integer, `L1`:character>, `b`:struct<`value`:integer, `L1`:character>, `c`:struct<`value`:integer, `L1`:character>, `d`:struct<`value`:integer, `L1`:character>> | tuple<struct<`value`:integer[], `L1`:integer[]>, struct<`X1`:integer[], `X2`:integer[], `value`:integer[], `L1`:integer[]>> | tuple<struct<`variable`:integer[], `result_variable`:integer[], `result`:double[]>, struct<>> | list<struct<`CO2`:character, `VAR`:character, `GEN`:character, `COU`:character, `TIME_FORMAT`:character, `obsTime`:character, `obsValue`:double>>, integer> => struct<`setters`:struct<`Probability`:any => any>, `getters`:struct<`Probability`:any => any>> | struct<`setters`:struct<`ein`:any => any, `strein`:any => any, `name`:any => any, `sub_name`:any => any, `city`:any => any, `state`:any => any, `ntee_code`:any => any, `raw_ntee_code`:any => any, `subseccd`:any => any, `has_subseccd`:any => any, `have_filings`:any => any, `have_extracts`:any => any, `have_pdfs`:any => any, `score`:any => any>, `getters`:struct<`ein`:any => any, `strein`:any => any, `name`:any => any, `sub_name`:any => any, `city`:any => any, `state`:any => any, `ntee_code`:any => any, `raw_ntee_code`:any => any, `subseccd`:any => any, `has_subseccd`:any => any, `have_filings`:any => any, `have_extracts`:any => any, `have_pdfs`:any => any, `score`:any => any>> | struct<`setters`:struct<`foo`:any => any, `bar`:any => any, `col`:any => any>, `getters`:struct<`foo`:any => any, `bar`:any => any, `col`:any => any>> | struct<`setters`:struct<`v`:any => any, `x`:any => any>, `getters`:struct<`v`:any => any, `x`:any => any>> | struct<`setters`:struct<`month`:any => any, `day`:any => any, `variable`:any => any, `value`:any => any>, `getters`:struct<`month`:any => any, `day`:any => any, `variable`:any => any, `value`:any => any>> | struct<`setters`:struct<`time`:any => any, `chick`:any => any, `diet`:any => any, `variable`:any => any, `value`:any => any>, `getters`:struct<`time`:any => any, `chick`:any => any, `diet`:any => any, `variable`:any => any, `value`:any => any>> | struct<`setters`:struct<`time`:any => any, `treatment`:any => any, `subject`:any => any, `rep`:any => any, `variable`:any => any, `value`:any => any>, `getters`:struct<`time`:any => any, `treatment`:any => any, `subject`:any => any, `rep`:any => any, `variable`:any => any, `value`:any => any>> | struct<`setters`:struct<`value`:any => any>, `getters`:struct<`value`:any => any>> | struct<`setters`:struct<`value`:any => any, `L2`:any => any, `L3`:any => any>, `getters`:struct<`value`:any => any, `L2`:any => any, `L3`:any => any>> | struct<`setters`:struct<`value`:any => any, `L3`:any => any>, `getters`:struct<`value`:any => any, `L3`:any => any>> | struct<`setters`:struct<`value`:any => any, `Var1`:any => any, `Var2`:any => any>, `getters`:struct<`value`:any => any, `Var1`:any => any, `Var2`:any => any>> | struct<`setters`:struct<`Var1`:any => any, `Var2`:any => any, `value`:any => any>, `getters`:struct<`Var1`:any => any, `Var2`:any => any, `value`:any => any>> | struct<`setters`:struct<`Var1`:any => any, `Var2`:any => any, `value`:any => any, `Var3`:any => any>, `getters`:struct<`Var1`:any => any, `Var2`:any => any, `value`:any => any, `Var3`:any => any>> | struct<`setters`:struct<`chick`:any => any, `time`:any => any, `diet`:any => any, `result`:any => any>, `getters`:struct<`chick`:any => any, `time`:any => any, `diet`:any => any, `result`:any => any>> | struct<`setters`:struct<`chick`:any => any, `time`:any => any, `result`:any => any>, `getters`:struct<`chick`:any => any, `time`:any => any, `result`:any => any>> | struct<`setters`:struct<`day`:any => any, `month`:any => any, `result`:any => any>, `getters`:struct<`day`:any => any, `month`:any => any, `result`:any => any>> | struct<`setters`:struct<`day`:any => any, `month`:any => any, `variable`:any => any, `result`:any => any>, `getters`:struct<`day`:any => any, `month`:any => any, `variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`diet`:any => any, `chick`:any => any, `time`:any => any, `result`:any => any>, `getters`:struct<`diet`:any => any, `chick`:any => any, `time`:any => any, `result`:any => any>> | struct<`setters`:struct<`diet`:any => any, `time`:any => any, `variable`:any => any, `result`:any => any>, `getters`:struct<`diet`:any => any, `time`:any => any, `variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`diet`:any => any, `variable`:any => any, `result`:any => any>, `getters`:struct<`diet`:any => any, `variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`month`:any => any, `day`:any => any, `result`:any => any>, `getters`:struct<`month`:any => any, `day`:any => any, `result`:any => any>> | struct<`setters`:struct<`month`:any => any, `day`:any => any, `variable`:any => any, `result`:any => any>, `getters`:struct<`month`:any => any, `day`:any => any, `variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`month`:any => any, `result_variable`:any => any, `result`:any => any>, `getters`:struct<`month`:any => any, `result_variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`month`:any => any, `result`:any => any>, `getters`:struct<`month`:any => any, `result`:any => any>> | struct<`setters`:struct<`month`:any => any, `variable`:any => any, `result_variable`:any => any, `result`:any => any>, `getters`:struct<`month`:any => any, `variable`:any => any, `result_variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`month`:any => any, `variable`:any => any, `result`:any => any>, `getters`:struct<`month`:any => any, `variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`sex`:any => any, `smoker`:any => any, `result`:any => any>, `getters`:struct<`sex`:any => any, `smoker`:any => any, `result`:any => any>> | struct<`setters`:struct<`subject`:any => any, `time`:any => any, `result`:any => any>, `getters`:struct<`subject`:any => any, `time`:any => any, `result`:any => any>> | struct<`setters`:struct<`time`:any => any, `diet`:any => any, `result`:any => any>, `getters`:struct<`time`:any => any, `diet`:any => any, `result`:any => any>> | struct<`setters`:struct<`time`:any => any, `variable`:any => any, `result`:any => any>, `getters`:struct<`time`:any => any, `variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`treatment`:any => any, `rep`:any => any, `result`:any => any>, `getters`:struct<`treatment`:any => any, `rep`:any => any, `result`:any => any>> | struct<`setters`:struct<`treatment`:any => any, `subject`:any => any, `variable`:any => any, `result`:any => any>, `getters`:struct<`treatment`:any => any, `subject`:any => any, `variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`treatment`:any => any, `variable`:any => any, `result`:any => any>, `getters`:struct<`treatment`:any => any, `variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`value`:any => any, `ID`:any => any>, `getters`:struct<`value`:any => any, `ID`:any => any>> | struct<`setters`:struct<`value`:any => any, `L1`:any => any>, `getters`:struct<`value`:any => any, `L1`:any => any>> | struct<`setters`:struct<`value`:any => any, `L1`:any => any, `X1`:any => any, `X2`:any => any>, `getters`:struct<`value`:any => any, `L1`:any => any, `X1`:any => any, `X2`:any => any>> | struct<`setters`:struct<`value`:any => any, `L2`:any => any, `L1`:any => any, `L3`:any => any>, `getters`:struct<`value`:any => any, `L2`:any => any, `L1`:any => any, `L3`:any => any>> | struct<`setters`:struct<`value`:any => any, `L3`:any => any, `L2`:any => any>, `getters`:struct<`value`:any => any, `L3`:any => any, `L2`:any => any>> | struct<`setters`:struct<`variable`:any => any, `day`:any => any, `month`:any => any, `result`:any => any>, `getters`:struct<`variable`:any => any, `day`:any => any, `month`:any => any, `result`:any => any>> | struct<`setters`:struct<`variable`:any => any, `month`:any => any, `result_variable`:any => any, `result`:any => any>, `getters`:struct<`variable`:any => any, `month`:any => any, `result_variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`variable`:any => any, `month`:any => any, `result`:any => any>, `getters`:struct<`variable`:any => any, `month`:any => any, `result`:any => any>> | struct<`setters`:struct<`variable`:any => any, `result_variable`:any => any, `result`:any => any>, `getters`:struct<`variable`:any => any, `result_variable`:any => any, `result`:any => any>> | struct<`setters`:struct<`X1`:any => any, `X2`:any => any, `value`:any => any, `L1`:any => any>, `getters`:struct<`X1`:any => any, `X2`:any => any, `value`:any => any, `L1`:any => any>> | struct<`setters`:struct<`X1`:any => any, `X2`:any => any, `value`:any => any, `L1`:any => any, `X3`:any => any>, `getters`:struct<`X1`:any => any, `X2`:any => any, `value`:any => any, `L1`:any => any, `X3`:any => any>> | struct<`setters`:struct<`CO2`:any => any, `VAR`:any => any, `GEN`:any => any, `COU`:any => any, `TIME_FORMAT`:any => any, `obsTime`:any => any, `obsValue`:any => any>, `getters`:struct<`CO2`:any => any, `VAR`:any => any, `GEN`:any => any, `COU`:any => any, `TIME_FORMAT`:any => any, `obsTime`:any => any, `obsValue`:any => any>>;
type `rbind.fill` <struct<`1-Lower bound.1`:struct<`Probability`:double[]>, `1-Lower bound.2`:struct<`Probability`:double[]>, `1-Lower bound.3`:struct<`Probability`:double[]>, `1-Lower bound.4`:struct<`Probability`:double[]>, `1-Lower bound.5`:struct<`Probability`:double[]>, `1-Lower bound.6`:struct<`Probability`:double[]>, `1-Lower bound.7`:struct<`Probability`:double[]>, `1-Lower bound.8`:struct<`Probability`:double[]>, `1-Lower bound.9`:struct<`Probability`:double[]>, `Upper bound.1`:struct<`Probability`:double[]>, `Upper bound.2`:struct<`Probability`:double[]>, `Upper bound.3`:struct<`Probability`:double[]>, `Upper bound.4`:struct<`Probability`:double[]>, `Upper bound.5`:struct<`Probability`:double[]>, `Upper bound.6`:struct<`Probability`:double[]>, `Upper bound.7`:struct<`Probability`:double[]>, `Upper bound.8`:struct<`Probability`:double[]>, `Upper bound.9`:struct<`Probability`:double[]>> | struct<`1`:struct<`v`:double[], `x`:double[]>, `2`:struct<`v`:double[], `x`:double[]>, `3`:struct<`v`:double[], `x`:double[]>, `4`:struct<`v`:double[], `x`:double[]>, `5`:struct<`v`:double[], `x`:double[]>> | tuple<struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>, struct<`month`:integer[], `day`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>, struct<`time`:double[], `chick`:integer[], `diet`:integer[], `variable`:integer[], `value`:double[]>> | tuple<struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>, struct<`time`:integer[], `treatment`:integer[], `subject`:integer[], `rep`:double[], `variable`:integer[], `value`:double[]>> | tuple<struct<`value`:integer[], `L2`:integer[]>, struct<`value`:double>, struct<`value`:integer[], `L3`:integer[], `L2`:integer[]>> | struct<`a`:struct<`value`:integer>, `b`:struct<`value`:integer>, `c`:struct<`value`:integer>, `d`:struct<`value`:integer>, `NA`:struct<`value`:null>> | tuple<struct<`value`:integer>, struct<`value`:integer>> | tuple<struct<`value`:integer[], `L3`:integer[]>, struct<`value`:integer[], `L3`:integer[]>> | tuple<struct<`value`:integer[]>, struct<`Var1`:integer[], `Var2`:integer[], `value`:integer[]>> | struct<`Probability`:double[]>> => struct<`Probability`:double[]>;
type `split_indices` <integer[], double> => list<integer[]> | tuple<integer[], integer[], integer[], integer[]>;
type `split_labels` <struct<`Bound`:integer[], `thetaidx`:integer[]>, logical, integer[]> => struct<`Bound`:integer[], `thetaidx`:integer[]>;
type `splitter_d` <struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, tuple<symbol, symbol>, logical> => struct<`data`:struct<`thetaidx`:integer[], `Probability`:double[], `id`:integer[], `Bound`:integer[]>, `index`:list<integer[]>, `vars`:character[]>;
type `x` < > => double[] | ^character[] | ^integer[] | tuple<double, double, double, double> | list<double>;
type `adply` <integer[], double, any => any, double[], symbol, character, logical, logical, symbol, null> => struct<`X1`:integer[], `v`:double[], `x`:double[]>;
type `mdply` <integer[], any => any, double[], logical, character, logical, logical, null> => struct<`X1`:integer[], `v`:double[], `x`:double[]>;
type `splat` <symbol> => any => any;
type `aaply` <double[], double[], any => any, null, logical, character, logical, logical, logical, null> => ^double[];
type `alply` <double[] | ^character[], double, any => any, null | logical, logical, character, logical, logical, null, logical> => struct<`1`:double[], `2`:double[], `3`:double[], `4`:double[], `5`:double[], `6`:double[], `7`:double[], `8`:double[], `9`:double[], `10`:double[], `11`:double[], `12`:double[], `13`:double[], `14`:double[], `15`:double[], `16`:double[], `17`:double[], `18`:double[], `19`:double[], `20`:double[], `21`:double[], `22`:double[], `23`:double[], `24`:double[], `25`:double[], `26`:double[], `27`:double[], `28`:double[], `29`:double[], `30`:double[], `31`:double[], `32`:double[], `33`:double[], `34`:double[], `35`:double[], `36`:double[], `37`:double[], `38`:double[], `39`:double[], `40`:double[], `41`:double[], `42`:double[], `43`:double[], `44`:double[], `45`:double[], `46`:double[], `47`:double[], `48`:double[], `49`:double[], `50`:double[], `51`:double[], `52`:double[], `53`:double[], `54`:double[], `55`:double[], `56`:double[], `57`:double[], `58`:double[], `59`:double[], `60`:double[], `61`:double[], `62`:double[], `63`:double[], `64`:double[], `65`:double[], `66`:double[], `67`:double[], `68`:double[], `69`:double[], `70`:double[], `71`:double[], `72`:double[]> | struct<`1`:character[], `2`:integer[]>;
type `arrange` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, symbol> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `as.quoted.formula` <language, environment> => tuple<symbol, symbol, language>;
type `desc` <double[]> => double[];
type `each` <any => any> => any => any;
type `laply` <language | struct<`env`:environment, `index`:struct<`X1`:character[], `X2`:character[], `X3`:integer[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:integer[], `X2`:character[], `X3`:character[]>, `drop`:logical, `subs`:symbol> | struct<`env`:environment, `index`:struct<`X1`:integer[], `X2`:integer[], `X3`:character[]>, `drop`:logical, `subs`:symbol> | tuple<any => any, any => any>, any => any, null, character, logical, logical, logical, null | symbol> => character[] | ^double[];
type `list_to_array` <tuple<character, character> | struct<`1`:double[], `2`:double[], `3`:double[], `4`:double[], `5`:double[], `6`:double[], `7`:double[], `8`:double[], `9`:double[], `10`:double[], `11`:double[], `12`:double[], `13`:double[], `14`:double[], `15`:double[], `16`:double[], `17`:double[], `18`:double[], `19`:double[], `20`:double[], `21`:double[], `22`:double[], `23`:double[], `24`:double[]> | struct<`1`:^double[], `2`:^double[], `3`:^double[], `4`:^double[], `5`:^double[], `6`:^double[], `7`:^double[], `8`:^double[], `9`:^double[], `10`:^double[], `11`:^double[], `12`:^double[], `13`:^double[], `14`:^double[], `15`:^double[], `16`:^double[], `17`:^double[], `18`:^double[], `19`:^double[], `20`:^double[], `21`:^double[], `22`:^double[], `23`:^double[], `24`:^double[], `25`:^double[], `26`:^double[], `27`:^double[], `28`:^double[], `29`:^double[], `30`:^double[], `31`:^double[], `32`:^double[], `33`:^double[], `34`:^double[], `35`:^double[], `36`:^double[], `37`:^double[], `38`:^double[], `39`:^double[], `40`:^double[], `41`:^double[], `42`:^double[], `43`:^double[], `44`:^double[], `45`:^double[], `46`:^double[], `47`:^double[], `48`:^double[], `49`:^double[], `50`:^double[], `51`:^double[], `52`:^double[], `53`:^double[], `54`:^double[], `55`:^double[], `56`:^double[], `57`:^double[], `58`:^double[], `59`:^double[], `60`:^double[], `61`:^double[], `62`:^double[], `63`:^double[], `64`:^double[], `65`:^double[], `66`:^double[], `67`:^double[], `68`:^double[], `69`:^double[], `70`:^double[], `71`:^double[], `72`:^double[]> | tuple<logical, logical>, null | struct<>, logical> => character[] | ^double[];
type `list_to_vector` <struct<`min`:double, `max`:double>> => double[];
type `reduce_dim` <^character[] | ^double[]> => character[] | ^double[];
type `simplify` <language> => tuple<symbol, language> | tuple<symbol, symbol, language>;
type `vaggregate` <^double[], integer[], any => any, null, null | double, double> => double[];
