type `.` <..., environment> => class<`quoted`>;
type `aaply` <class<`array`> | class<`data.frame`>, double[], class<`function`>, ..., logical, character, logical, logical, logical, any> => (class<`array`> | class<`matrix`> | double[]);
type `adply` <class<`data.frame`>, double, class<`function`>, ..., logical, character, logical, logical, any, null> => class<`data.frame`>;
type `allocate_column` <character[] | double[] | ^integer[], integer, any, any> => list<class<`function`>>;
type `alply` <class<`array`> | class<`data.frame`>, integer[] | double, class<`function`>, ..., logical, character, logical, logical, any, logical> => list<class<`lm`> | class<`table`> | double[]>;
type `amv_dim` <class<`array`> | class<`data.frame`> | class<`matrix`> | character | double[]> => integer[];
type `amv_dimnames` <class<`data.frame`> | double[] | class<`matrix`> | character | class<`array`>> => list<character[] | integer[] | character[] | integer[]>;
type `arrange` <class<`data.frame`>, ...> => class<`data.frame`>;
type `as.data.frame.function` <class<`function`>, any, any, ...> => class<`function`>;
type `as.list.indexed` <class<`indexed`, `indexed_df`, `list`, `split`>, ...> => class<`list`, `split`>;
type `as.quoted` <character[] | class<`formula`> | class<`quoted`>, any> => class<`quoted`>;
type `as.quoted.character` <character[], environment> => class<`quoted`>;
type `as.quoted.formula` <class<`formula`>, environment> => class<`quoted`>;
type `as.quoted.quoted` <class<`quoted`>, any> => class<`quoted`>;
type `catcolwise` <any, ...> => class<`function`>;
type `cat_line` <...> => null;
type `colwise` <class<`data.frame`>, ...> => class<`data.frame`> | <any, character[] | class<`formula`> | class<`function`> | class<`quoted`>, ...> => class<`function`>;
type `compact` <list<class<`data.frame`>>> => list<class<`data.frame`>>;
type `count` <class<`data.frame`>, character[], null | character> => class<`data.frame`>;
type `create_progress_bar` <character | list<class<`function`>>, ...> => list<class<`function`>>;
type `daply` <class<`data.frame`>, class<`quoted`>, class<`function`>, ..., character, logical, logical, logical, logical, null> => (class<`matrix`> | integer[]);
type `ddply` <class<`data.frame`>, class<`quoted`> | character | class<`formula`>, class<`function`> | character[], ..., character, logical, logical, logical, null> => class<`data.frame`>;
type `desc` <class<`Date`> | double[] | class<`factor`>> => double[];
type `dim.idf` <class<`environment`, `idf`>> => integer[];
type `dims` <class<`array`> | class<`data.frame`> | class<`matrix`> | character | double[]> => integer;
type `dlply` <class<`data.frame`> | class<`environment`, `idf`>, character[] | class<`quoted`>, null | class<`function`>, ..., character, logical, logical, logical, null> => (class<`list`, `split`> | list<class<`data.frame`> | class<`lm`> | integer>);
type `each` <double[], ...> => double[] | <...> => class<`function`>;
type `empty` <class<`data.frame`>> => logical;
type `eval.quoted` <class<`quoted`>, class<`data.frame`> | class<`environment`, `idf`>, null, logical> => list<any>;
type `extract_rows` <class<`data.frame`> | class<`environment`, `idf`>, integer[]> => (class<`data.frame`> | class<`environment`, `idf`>);
type `f` <class<`data.frame`>, ...> => class<`data.frame`> | <double[], ...> => double[];
type `failwith` <null, class<`function`>, logical> => class<`function`>;
type `.fun` <class<`data.frame`>, ...> => class<`data.frame`> | <class<`data.frame`>, ...> => (class<`data.frame`> | double[]) | <class<`data.frame`>, ...> => class<`data.frame`>;
type `FUN` <class<`array`> | class<`data.frame`> | class<`matrix`> | character | double[]> => integer[] | <class<`array`> | class<`data.frame`> | class<`matrix`> | character | double[]> => integer | <character[] | class<`factor`> | ^double[], any> => integer[];
type `id` <class<`data.frame`> | list<class<`factor`> | ^double[] | character[]>, any> => integer[];
type `idata.frame` <class<`data.frame`>> => class<`environment`, `idf`>;
type `[.idf` <class<`environment`, `idf`>, integer[], any, logical> => class<`environment`, `idf`>;
type `id_var` <character[] | class<`factor`> | ^double[], any> => integer[];
type `[[.indexed_array` <class<`indexed`, `indexed_array`, `list`, `split`>, integer> => (class<`data.frame`> | class<`matrix`> | double[]);
type `indexed_array` <environment, class<`data.frame`>> => class<`indexed`, `indexed_array`>;
type `[[.indexed_df` <class<`indexed`, `indexed_df`, `list`, `split`>, integer> => (class<`data.frame`> | class<`environment`, `idf`>);
type `indexed_df` <class<`data.frame`> | class<`environment`, `idf`>, list<integer[]>, character[]> => class<`indexed`, `indexed_df`>;
type `is.discrete` <character[] | class<`factor`> | integer[]> => logical;
type `is.quoted` <class<`quoted`>> => logical;
type `join` <class<`data.frame`>, class<`data.frame`>, character | null, character, character> => class<`data.frame`>;
type `.join_all` <class<`data.frame`>, class<`data.frame`>, character, character> => class<`data.frame`>;
type `join_all` <list<class<`data.frame`>>, character | null, character, character> => class<`data.frame`>;
type `join_ids` <class<`data.frame`>, class<`data.frame`>, character, logical> => list<integer[]>;
type `join.keys` <class<`data.frame`>, class<`data.frame`>, character> => list<integer[]>;
type `laply` <class<`call`> | class<`indexed`, `indexed_array`, `list`, `split`> | integer[] | class<`indexed`, `indexed_df`, `list`, `split`> | character[] | class<`data.frame`> | list<class<`lm`> | character | class<`function`>>, class<`function`>, ..., character, logical, logical, logical, any> => (character[] | class<`array`> | class<`matrix`> | double[]);
type `ldply` <class<`data.frame`> | class<`indexed`, `indexed_array`, `list`, `split`> | class<`indexed`, `indexed_df`, `list`, `split`> | list<class<`lm`>>, class<`function`> | character[], ..., character, logical, logical, any, null> => class<`data.frame`>;
type `length.indexed` <class<`indexed`, `indexed_df`, `list`, `split`>> => integer;
type `length.indexed_array` <class<`indexed`, `indexed_array`, `list`, `split`>> => integer;
type `list_to_array` <list<any>, null | class<`data.frame`>, logical> => (character[] | class<`array`> | class<`matrix`> | double[]);
type `list_to_dataframe` <list<class<`data.frame`> | double[]>, class<`data.frame`> | null, character | null, any> => class<`data.frame`>;
type `list_to_vector` <list<double>> => double[];
type `llply` <class<`indexed`, `indexed_df`, `list`, `split`> | integer[] | character[] | class<`indexed`, `indexed_array`, `list`, `split`> | class<`data.frame`> | list<any>, null | class<`function`> | character[], ..., any, any, any, any> => (class<`list`, `split`> | list<any>);
type `loop_apply` <integer, class<`function`>, environment> => list<any>;
type `l_ply` <class<`data.frame`> | integer[] | list<double[]>, class<`function`>, ..., character | list<class<`function`>>, logical, logical, logical, null> => null;
type `make_assignment_call` <integer> => class<`call`>;
type `make_names` <class<`data.frame`> | double[] | list<any>, character> => character[];
type `maply` <class<`data.frame`> | class<`matrix`>, class<`function`>, ..., logical, character, logical, logical, logical, null> => class<`array`>;
type `mapvalues` <character[] | class<`factor`> | double[], character[] | double[], character[] | double[], logical> => (character[] | class<`factor`> | double[]);
type `match_df` <class<`data.frame`>, class<`data.frame`>, character> => class<`data.frame`>;
type `match.fun` <double, ...> => list<class<`function`>>;
type `.matrix_to_df` <class<`matrix`>> => class<`data.frame`>;
type `mdply` <class<`data.frame`> | class<`matrix`>, class<`function`>, ..., logical, character, logical, logical, null> => class<`data.frame`>;
type `mlply` <class<`matrix`>, class<`function`>, ..., logical, character, logical, logical, null> => list<double[]>;
type `mutate` <class<`data.frame`>, ...> => class<`data.frame`>;
type `name_rows` <class<`data.frame`>> => class<`data.frame`>;
type `names.indexed` <class<`indexed`, `indexed_df`, `list`, `split`>> => character[];
type `names.indexed_array` <class<`indexed`, `indexed_array`, `list`, `split`>> => character[];
type `names.quoted` <class<`quoted`>> => character[];
type `ninteraction` <class<`data.frame`> | list<class<`factor`> | ^double[] | character[]>, any> => integer[];
type `nlevels` <integer[]> => double;
type `numcolwise` <class<`data.frame`>, ...> => class<`data.frame`> | <any, ...> => class<`function`>;
type `output_template` <list<class<`data.frame`>>, integer> => list<list<class<`function`>>>;
type `progress_text` <double, ...> => list<class<`function`>>;
type `quickdf` <list<any>> => class<`data.frame`>;
type `raply` <double, any, character, logical> => (class<`array`> | class<`matrix`> | double[]);
type `rbind.fill` <...> => class<`data.frame`>;
type `rbind.fill.matrix` <...> => class<`matrix`>;
type `rdply` <double, any, character, null> => class<`data.frame`>;
type `reduce_dim` <class<`matrix`> | class<`array`>> => (character[] | class<`array`> | class<`matrix`> | double[]);
type `rename` <class<`data.frame`> | double[], character, logical, logical> => (class<`data.frame`> | double[]);
type `revalue` <character[] | class<`factor`>, character[], logical> => (character[] | class<`factor`>);
type `rlply` <double, any, character> => list<class<`lm`>>;
type `.rlply_worker` <double, character, class<`function`>, logical, logical> => (null | list<any>);
type `round_any` <class<`POSIXct`, `POSIXt`> | double[], double, any> => (class<`POSIXct`, `POSIXt`> | double[]);
type `round_any.numeric` <double[], double, class<`function`>> => double[];
type `round_any.POSIXct` <class<`POSIXct`, `POSIXt`>, double, class<`function`>> => class<`POSIXct`, `POSIXt`>;
type `r_ply` <double, any, character, logical> => null;
type `show_time` <double> => character;
type `splat` <class<`data.frame`>, ...> => (class<`data.frame`> | double[]) | <any> => class<`function`>;
type `split_indices` <integer[], double> => list<integer[]>;
type `split_labels` <list<class<`factor`> | ^double[] | character[]>, logical, any> => class<`data.frame`>;
type `splitter_a` <class<`array`> | class<`data.frame`>, double[], any, null> => class<`indexed`, `indexed_array`, `list`, `split`>;
type `splitter_d` <class<`data.frame`> | class<`environment`, `idf`>, class<`quoted`>, logical> => class<`indexed`, `indexed_df`, `list`, `split`>;
type `strip_splits` <class<`data.frame`>> => class<`data.frame`>;
type `str_rep` <character, double> => character;
type `summarise` <class<`data.frame`>, ...> => class<`data.frame`>;
type `take` <class<`array`>, double, double, logical> => (class<`array`> | class<`matrix`>);
type `try_default` <any, null, logical> => (double | null);
type `txtTimerBar` <integer> => class<`txtProgressBar`>;
type `unrowname` <class<`data.frame`>> => class<`data.frame`>;
type `vaggregate` <double[], class<`factor`> | integer[], class<`function`>, ..., ^double[] | null, double> => (class<`matrix`> | double[] | ^integer[]);
type `.wrapped_expr_to_fun` <class<`function`>> => list<any>;
