type `bFitMod` <double[], double[], character, class<`matrix`>, logical, character[], any, null | list<double[]>, double, any, null, any> => class<`bFitMod`>;
type `bFitMod.Bayes` <double[], double[], class<`matrix`>, character, logical, double[], list<double[]>, double, list<any>, any, any, integer> => double[];
type `bFitMod.bootstrap` <double[], double[], class<`matrix`>, character, logical, double, any, any, null, null, double[] | null> => class<`matrix`>;
type `calcGrads` <class<`Mods`>, double[], double[], double, any, any, character, character> => list<double[]>;
type `calcResp` <class<`Mods`>, double[], any, any, any> => class<`matrix`>;
type `calcTD` <character, double[], double, character[], character[], any, any, any, any> => (double | null);
type `calcTDgrad` <character, double[], double, character, any, any, any> => double[];
type `callOptim` <class<`function`>, character, integer, list<any>, double[], double[]> => list<any>;
type `checkAnalyArgs` <any, any, null | class<`data.frame`>, class<`matrix`> | null, character, class<`formula`>, logical, class<`function`>, character[]> => list<any>;
type `checkEntries` <list<null | double | null | double[]>, any, logical> => list<null>;
type `checkInvalid` <double[]> => logical;
type `checkNam` <character> => null;
type `checkPrior` <list<double[]>> => null;
type `checkStand` <character> => null;
type `coef.DRMod` <class<`DRMod`>, logical, ...> => double[];
type `defBnds` <double, double[], double[], class<`matrix`>, class<`matrix`>, class<`matrix`>> => list<double[] | class<`matrix`>>;
type `emax` <double[], double, double, double> => double[];
type `emaxGrad` <double[], double, double, ...> => class<`matrix`>;
type `exponential` <double[], double, double, double> => double[];
type `exponentialGrad` <double[], double, double, ...> => class<`matrix`>;
type `f` <double, double[], any, double[], character, any, class<`matrix`>> => double;
type `filter` <character[]> => logical[];
type `fit.control` <null> => list<double | list<any>>;
type `fitMod` <any, any, class<`data.frame`> | null, character, null | class<`matrix`>, character[], class<`formula`>, logical, any, null, null, class<`function`>> => class<`DRMod`>;
type `fitModel.bndnls` <class<`data.frame`>, character, class<`formula`>, character, double[], null, null, any, any, logical, any> => list<double[]>;
type `fitModel.lin` <class<`data.frame`>, character, class<`formula`>, any, character, any, logical, class<`matrix`>> => list<double[] | null>;
type `fitMod.raw` <double[], double[], any, character, any, character, class<`formula`>, logical, any, any, any, any> => class<`DRMod`>;
type `fullMod` <list<null | double[] | null | double>, double[], double, double, any, any> => list<double[]>;
type `fun` <double[]> => double | <double[], ...> => double;
type `FUN` <double[]> => double | <character> => null | <double[]> => logical | <double, double[], character, any> => double[] | <double[]> => (double | null) | <double[], class<`matrix`>, logical> => class<`matrix`> | <double[]> => double[] | <double[]> => double[] | <character> => double | <double[]> => double[] | <double[]> => double | <double[]> => double[];
type `getAddArgs` <null, double[]> => list<double>;
type `getGrid` <double, class<`matrix`>, double> => class<`matrix`>;
type `getLinPars` <character, any, null | double[], double, double, any, any> => double[];
type `getPrBnds` <list<double[]>> => class<`matrix`>;
type `getResp` <class<`Mods`>, integer[]> => class<`matrix`>;
type `getStandDR` <character, double[], double, any> => double[];
type `getZmat.weighted` <double[], class<`matrix`>, character, any, any> => class<`matrix`>;
type `gradCalc` <character, any, double[], any, any, any> => class<`matrix`>;
type `linear` <double[], double, double> => double[];
type `linearGrad` <double[], ...> => class<`matrix`>;
type `logistic` <double[], double, double, double, double> => double[];
type `logisticGrad` <double[], double, double, double, ...> => class<`matrix`>;
type `MCTtest` <any, any, class<`data.frame`>, class<`Mods`>, null, character[], class<`formula`>, logical, double, null, null, logical> => class<`MCTtest`>;
type `modContr` <class<`matrix`>, null, class<`matrix`>, logical, character, any> => class<`matrix`>;
type `modCount` <class<`Mods`> | list<null | double[] | null | double>, logical> => double;
type `Mods` <..., double[], double, any, character[], null, logical> => class<`Mods`>;
type `mvtnorm.control` <double, double, double, null> => class<`GenzBretz`>;
type `nPars` <character> => double;
type `optContr` <class<`Mods`>, integer[], any, class<`matrix`>, logical, character[]> => class<`optContr`>;
type `optDesign` <class<`Mods`>, double[], any, character, double, logical, any, double[], any, list<any>, character[], double[]> => class<`DRdesign`>;
type `optFunc` <double[], double[], integer[], integer, double[], integer, double, double[], double[], integer, class<`function`>, integer> => double;
type `optGrid` <character, double, class<`matrix`>, list<double>, double[], character, any, double[], class<`matrix`>, logical, any> => list<double>;
type `optLoc` <character, double, class<`matrix`>, double[], any, double[], any, any, logical, character, double, any> => list<double>;
type `plot.bFitMod` <class<`bFitMod`>, character[], double[], character[], double, double, ...> => list<double[] | class<`matrix`>>;
type `plot.DRMod` <class<`DRMod`>, logical, double, character, logical, double, double, ...> => class<`trellis`>;
type `plotFunc` <class<`DRMod`>, logical, double, character, logical, double, double, ...> => class<`trellis`>;
type `plotModels` <class<`Mods`>, double, logical, character, character, null, logical, any, ...> => class<`trellis`>;
type `plot.Mods` <class<`Mods`>, double, logical, character, character, null, logical, any, ...> => class<`trellis`>;
type `predict.bFitMod` <class<`bFitMod`>, character[], class<`function`>, double[], double, ...> => class<`matrix`>;
type `predict.DRMod` <class<`DRMod`>, character, null, double[], logical, ...> => list<double[]>;
type `predSamples` <class<`matrix`>, logical, double[], logical, character, any, any, any> => class<`matrix`>;
type `pValues` <class<`matrix`>, class<`matrix`>, integer, double[], character, class<`GenzBretz`>> => double[];
type `quadratic` <double[], double, double, double> => double[];
type `sepCoef` <class<`DRMod`>> => list<double[]>;
type `strip` <...> => class<`path`, `vpPath`>;
type `TD` <class<`bFitMod`> | class<`Mods`>, double, character[], character[], any> => ^double[];
type `trans` <double[], integer> => double[];
type `vcov.DRMod` <class<`DRMod`>, ...> => class<`matrix`>;
