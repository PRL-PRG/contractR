type `Aggregate` <class<`Node`, `R6`>, character | class<`function`>, any, ...> => double;
type `AreNamesUnique` <class<`Node`, `R6`>> => logical;
type `as.character.orderedSplit` <class<`orderedSplit`>, logical, ...> => character;
type `as.data.frame.Node` <class<`Node`, `R6`>, null, logical, ..., character[], class<`function`> | null, null | class<`function`>, logical> => class<`data.frame`>;
type `as.dendrogram.Node` <class<`Node`, `R6`>, character | class<`function`>, logical, ...> => class<`dendrogram`>;
type `as.igraph.Node` <class<`Node`, `R6`>, character[], character[], logical, character[], ...> => class<`igraph`>;
type `as.list.Node` <class<`Node`, `R6`>, character[], any, character, any, character, null | character, any> => (list<list<list<double>>> | list<double> | list<character | double> | list<character | list<list<character | double>>> | list<character | list<list<character | list<list<character | double>>>>> | list<character | list<character | list<character | double>>> | list<character | list<list<character | list<list<character | list<list<character | integer>>>>>>> | list<character | list<list<character | list<list<character | integer>>>>> | list<character | list<list<character | integer>>> | list<character | list<list<list<list<double>>>>> | list<character | integer> | list<character | list<character | double>> | list<list<double>>);
type `as.Node` <class<`BinaryTree`> | class<`data.frame`> | class<`dendrogram`> | class<`party`> | class<`phylo`> | class<`rpart`> | list<character | list<list<integer>>>, ...> => class<`Node`, `R6`>;
type `as.Node.BinaryTree` <class<`BinaryTree`>, ...> => class<`Node`, `R6`>;
type `as.Node.data.frame` <class<`data.frame`>, ..., character[], character, character, null, logical> => class<`Node`, `R6`>;
type `as.Node.dendrogram` <class<`dendrogram`>, null | character, character, character[], ...> => class<`Node`, `R6`>;
type `as.Node.list` <list<character> | list<list<integer>> | list<character | list<character>> | list<character | list<list<character>>> | list<integer> | list<character | list<list<integer>>>, character[], character, character, any, character[], ...> => class<`Node`, `R6`>;
type `as.Node.party` <class<`party`>, ...> => class<`Node`, `R6`>;
type `as.Node.phylo` <class<`phylo`>, character, logical, logical, ...> => class<`Node`, `R6`>;
type `as.Node.rpart` <class<`rpart`>, double, logical, ...> => class<`Node`, `R6`>;
type `as.phylo.Node` <class<`Node`, `R6`>, class<`function`>, ...> => class<`phylo`>;
type `averageBranchingFactor` <class<`Node`, `R6`>> => double;
type `changeName` <class<`Node`, `R6`>, any, character> => character;
type `CheckNameReservedWord` <character, character[] | logical> => character;
type `Climb` <class<`Node`, `R6`>, ...> => (class<`Node`, `R6`> | null);
type `Clone` <class<`Node`, `R6`>, class<`function`> | null, logical> => class<`Node`, `R6`>;
type `.Clone` <class<`Node`, `R6`>, class<`function`> | null, logical, logical> => class<`Node`, `R6`>;
type `CreateNodeFromSplittingNode` <class<`SplittingNode`> | class<`TerminalNode`>, logical> => class<`Node`, `R6`>;
type `CreateRandomTree` <double, any, any> => (class<`Node`, `R6`> | null);
type `CreateRegularTree` <double, any, any> => (class<`Node`, `R6`> | null);
type `Cumulate` <class<`Node`, `R6`>, character, any, ...> => double;
type `DefaultPlotHeight` <class<`Node`, `R6`>, double> => double;
type `Distance` <class<`Node`, `R6`>, class<`Node`, `R6`>> => double;
type `Do` <list<class<`Node`, `R6`>>, class<`function`>, ...> => list<class<`Node`, `R6`>>;
type `FindNode` <class<`Node`, `R6`>, character | double> => class<`Node`, `R6`>;
type `FormatFixedDecimal` <double | null, double> => character;
type `FormatPercent` <integer, double, character, ...> => character;
type `FromDataFrameNetwork` <class<`data.frame`>, character[]> => class<`Node`, `R6`>;
type `FromDataFrameTable` <class<`data.frame`>, character, character, list<null | character[]> | null, logical, character[]> => class<`Node`, `R6`>;
type `FromListExplicit` <list<character | list<list<character>>>, character, character, null, character[]> => class<`Node`, `R6`>;
type `FromListSimple` <list<character | list<character>>, character, null | character, character[]> => class<`Node`, `R6`>;
type `FromParty` <class<`party`>, class<`partynode`>> => class<`Node`, `R6`>;
type `Get` <list<class<`Node`, `R6`>>, character | class<`function`>, ..., logical | class<`function`>, any, character[] | logical> => (^character[] | class<`matrix`> | ^double[] | list<double> | list<null | character> | list<null | integer> | list<null | list<character | class<`function`>>> | list<null | list<class<`function`> | character | character | double>> | list<character[]> | list<character | null> | list<integer[] | double> | list<null | double> | list<null> | list<null | list<character | double>> | list<null | list<class<`function`> | character>> | list<null | list<character | class<`function`> | character>>);
type `GetAttribute` <class<`Node`, `R6`>, character | class<`function`>, ..., logical | class<`function`>, any, logical> => (character[] | double[] | null | list<character | double> | list<character | class<`function`>> | list<character> | list<class<`function`>> | list<class<`function`> | character>);
type `GetEdgeStyleFactory` <character> => class<`function`>;
type `GetObjectAttribute` <class<`Node`, `R6`>, character> => (null | list<class<`function`>>);
type `GetSplittingNodeLabel` <class<`SplittingNode`> | class<`TerminalNode`>, any> => character;
type `GetStyle` <class<`Node`, `R6`>, character, character, any> => (character | double | null);
type `isLeaf` <class<`Node`, `R6`>> => logical;
type `isRoot` <class<`Node`, `R6`>> => logical;
type `Navigate` <class<`Node`, `R6`>, character[]> => class<`Node`, `R6`>;
type `.parentSeparator` <class<`Node`, `R6`>> => character;
type `plot.Node` <class<`Node`, `R6`>, ..., character[], null, character> => class<`grViz`, `htmlwidget`>;
type `print.Node` <class<`Node`, `R6`>, ..., any, double, class<`function`> | null> => class<`data.frame`>;
type `PrintPruneDist` <class<`Node`, `R6`>, double> => class<`Node`, `R6`>;
type `PrintPruneSimple` <class<`Node`, `R6`>, double> => class<`Node`, `R6`>;
type `Prune` <class<`Node`, `R6`>, class<`function`>> => double;
type `.Prune` <class<`Node`, `R6`>, any, logical> => (double | null);
type `.separator` <class<`Node`, `R6`>> => character;
type `Set` <list<class<`Node`, `R6`>>, ...> => list<class<`Node`, `R6`>>;
type `SetEdgeStyle` <class<`Node`, `R6`>, logical, logical, ...> => logical;
type `SetFormat` <class<`Node`, `R6`>, character, class<`function`>> => class<`function`>;
type `SetGraphStyle` <class<`Node`, `R6`>, logical, ...> => list<character>;
type `SetNodeStyle` <class<`Node`, `R6`>, logical, logical, ...> => logical;
type `SetStyle` <class<`Node`, `R6`>, character, logical, logical, ...> => logical;
type `Sort` <class<`Node`, `R6`>, any, ..., any, any> => (class<`Node`, `R6`> | null);
type `ToDataFrameNetwork` <class<`Node`, `R6`>, ..., character[], null, logical, logical> => class<`data.frame`>;
type `ToDataFrameTable` <class<`Node`, `R6`>, ..., null> => class<`data.frame`>;
type `ToDataFrameTree` <class<`Node`, `R6`>, ..., class<`function`> | null> => class<`data.frame`>;
type `ToDataFrameTypeCol` <class<`Node`, `R6`>, ..., character, character | null, null> => class<`data.frame`>;
type `ToDiagrammeRGraph` <class<`Node`, `R6`>, character[], null> => class<`dgr_graph`>;
type `ToListExplicit` <class<`Node`, `R6`>, logical, character, character, null, ...> => (list<character | list<list<character | double>>> | list<character | list<list<character | list<list<character | double>>>>> | list<character | list<list<character | list<list<character | list<list<character | integer>>>>>>> | list<character | list<list<list<list<double>>>>>);
type `ToListSimple` <class<`Node`, `R6`>, character, null, ...> => list<character | list<character | list<character | double>>>;
type `ToNewick` <class<`Node`, `R6`>, class<`function`> | null, ...> => character;
type `Traverse` <class<`Node`, `R6`>, character[], any, any> => list<any>;
