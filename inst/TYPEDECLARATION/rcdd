type `addHeq` <integer[], character | double, class<`matrix`>> => class<`matrix`>;
type `addHin` <double[], double, class<`matrix`>> => class<`matrix`>;
type `allfaces` <class<`matrix`>> => list<list<integer[] | character[] | double[]>>;
type `d2q` <double[] | class<`bar`, `baz`, `foo`> | class<`matrix`>> => (character[] | class<`bar`, `baz`, `foo`> | class<`matrix`>);
type `FUN` <class<`matrix`> | character[] | integer[], class<`matrix`> | character[] | double> => (class<`matrix`> | character[]);
type `linearity` <class<`matrix`>, character> => integer[];
type `lpcdd` <class<`matrix`>, character[] | double[], character | double, logical, character[]> => list<character[] | character | double[]>;
type `makeH` <any, any, any, any, null | class<`matrix`>> => class<`matrix`>;
type `makeV` <any, any, any, null> => class<`matrix`>;
type `q2d` <class<`matrix`> | character[]> => (class<`matrix`> | double[]);
type `q2q` <character[] | class<`matrix`>> => (character[] | class<`matrix`>);
type `qabs` <class<`matrix`>> => class<`matrix`>;
type `qdq` <character[] | class<`matrix`>, character[] | double[]> => (character[] | class<`matrix`>);
type `qgram` <class<`matrix`>, logical> => class<`matrix`>;
type `qmatmult` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
type `qmax` <character[]> => character;
type `qmin` <character[]> => character;
type `qmq` <class<`matrix`> | character[] | integer[], class<`matrix`> | character[] | double> => (class<`matrix`> | character[]);
type `qneg` <character[] | integer[] | class<`matrix`>> => (character[] | class<`matrix`>);
type `qpq` <character[] | double[], character[] | class<`matrix`>> => character[];
type `qprod` <character[]> => character;
type `qsign` <character[] | integer[]> => integer[];
type `qsum` <character[]> => character;
type `qxq` <character[] | class<`matrix`>, character[] | double[]> => (character[] | class<`matrix`>);
type `redundant` <class<`matrix`>, character[]> => list<class<`matrix`> | integer[]>;
type `scdd` <class<`matrix`>, logical, logical, logical, logical, character[], character[], character[]> => any;
type `validcdd` <class<`matrix`>, character[]> => logical;
type `z2q` <character[] | integer[] | double | class<`matrix`>, character[] | class<`matrix`> | double[], logical> => (character[] | class<`matrix`>);
