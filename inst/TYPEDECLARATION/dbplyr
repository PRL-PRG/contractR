type `==` <class<`character`, `sql`>, double> => class<`character`, `sql`>;
type `::` <class<`SQLiteConnection`>, logical> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`> | <..., character> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | <...> => class<`character`, `sql`> | <...> => class<`character`, `ident`>;
type `[[` <class<`condition`, `error`, `simpleError`>> => logical | <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `add_op_order` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, null> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `add_op_semi_join` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`>, logical, null, null, logical, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `add_op_single` <character, class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, list<class<`formula`, `quosure`>>, list<any>> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `all_calls` <class<`call`> | class<`formula`, `quosure`> | class<`name`> | double> => (character | null);
type `all_names` <class<`call`> | class<`formula`, `quosure`> | class<`name`> | double> => (character | null);
type `arrange.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., logical> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `as.sql` <character | class<`character`, `ident`, `ident_q`>> => (class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>);
type `as.sql.character` <character> => class<`character`, `ident`>;
type `as.sql.ident` <class<`character`, `ident`, `ident_q`>> => class<`character`, `ident`, `ident_q`>;
type `auto_copy.tbl_sql` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`>, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `build_sql` <..., any, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `cache` < > => environment;
type `cache_computation` <character, any> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `c_character` <...> => character[];
type `ceply` <character[] | null | list<class<`character`, `ident`>>, any, ..., environment> => environment;
type `compute.tbl_sql` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, character, logical, null, null, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `copy_env` <environment, null, environment> => environment;
type `copy_lahman` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, ...> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `copy_to.src_sql` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, character | class<`character`, `ident`, `ident_q`>, logical, null, logical, null, null | list<any>, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `db_analyze.DBIConnection` <class<`SQLiteConnection`>, character | class<`character`, `ident`, `ident_q`>, ...> => integer;
type `db_begin.DBIConnection` <class<`SQLiteConnection`>, ...> => logical;
type `db_commit.DBIConnection` <class<`SQLiteConnection`>, ...> => logical;
type `db_compute` <class<`SQLiteConnection`>, character, class<`character`, `sql`>, logical, null, null, logical, ...> => character;
type `db_compute.DBIConnection` <class<`SQLiteConnection`>, character, class<`character`, `sql`>, logical, null, null, logical, ...> => character;
type `db_copy_to` <class<`SQLiteConnection`>, character | class<`character`, `ident`, `ident_q`>, class<`data.frame`>, logical, null, logical, null, null | list<any>, logical, ...> => (character | class<`character`, `ident`, `ident_q`>);
type `db_copy_to.DBIConnection` <class<`SQLiteConnection`>, character | class<`character`, `ident`, `ident_q`>, class<`data.frame`>, logical, null, logical, null, null | list<any>, logical, ...> => (character | class<`character`, `ident`, `ident_q`>);
type `db_create_index.DBIConnection` <class<`SQLiteConnection`>, character, character, null, logical, ...> => integer;
type `db_create_indexes.DBIConnection` <class<`SQLiteConnection`>, any, null | list<any>, logical, ...> => null;
type `db_data_type.DBIConnection` <class<`SQLiteConnection`>, class<`data.frame`>> => character[];
type `db_disconnector` <any, any> => environment;
type `db_has_table.DBIConnection` <class<`SQLiteConnection`>, character> => logical;
type `dbi_quote` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>, any> => class<`SQL`>;
type `dbi_quote.ident` <class<`character`, `ident`>, class<`SQLiteConnection`>> => class<`SQL`>;
type `dbi_quote.ident_q` <class<`character`, `ident`, `ident_q`>, any> => class<`SQL`>;
type `db_list_tables.DBIConnection` <class<`SQLiteConnection`>> => character[];
type `db_location` <null, character> => character;
type `db_query_fields.DBIConnection` <class<`SQLiteConnection`>, class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>, ...> => character[];
type `db_save_query.DBIConnection` <class<`SQLiteConnection`>, class<`character`, `sql`>, character, logical, ...> => character;
type `db_sql_render` <class<`SQLiteConnection`>, class<`op`, `op_select`, `op_single`>, ...> => class<`character`, `sql`>;
type `db_sql_render.DBIConnection` <class<`SQLiteConnection`>, class<`op`, `op_select`, `op_single`>, ...> => class<`character`, `sql`>;
type `db_write_table.DBIConnection` <class<`SQLiteConnection`>, character | class<`character`, `ident`, `ident_q`>, character[], class<`data.frame`>, logical, ...> => (character | class<`character`, `ident`, `ident_q`>);
type `escape` <character | class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`> | double[] | list<class<`character`, `sql`>>, null | logical, character, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape_ansi` <character | class<`character`, `ident`> | class<`character`, `sql`> | double[], null, character> => class<`character`, `sql`>;
type `escape.character` <character, null, character, class<`DBIConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `escape.double` <double[], null, character, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape.ident` <class<`character`, `ident`>, logical | null, character, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape.ident_q` <class<`character`, `ident`, `ident_q`>, logical, character, class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape.integer` <integer[], null, character, class<`DBIConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `escape.list` <list<class<`character`, `sql`>>, logical, character, class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape.sql` <class<`character`, `sql`>, logical | null, null | character, class<`SQLiteConnection`> | class<`DBIConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `f` <null> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`> | <character, character, ...> => any;
type `.f` <character | class<`if`> | class<`call`> | class<`name`>, any> => (character | class<`character`, `sql`>);
type `filter` <character[]> => logical[];
type `filter.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., logical> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `_fseq` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `fun` <...> => null;
type `FUN` <...> => class<`character`, `ident`> | <class<`call`> | class<`formula`, `quosure`> | class<`name`> | double> => (character | null) | <class<`call`> | class<`formula`, `quosure`> | class<`name`> | double> => (character | null) | <character | class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`> | double[] | list<class<`character`, `sql`>>, null | logical, character, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`> | <character | class<`name`> | double | class<`call`>, character[], any> => (character | class<`name`> | double | class<`call`>) | <class<`formula`, `quosure`> | class<`name`>> => class<`character`, `sql`> | <class<`formula`, `quosure`>> => class<`formula`, `quosure`> | <character> => class<`function`>;
type `group_by.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., logical, logical> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `group_vars.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `has_lahman` <character, ...> => logical;
type `ident` <...> => class<`character`, `ident`>;
type `ident_q` <...> => class<`character`, `ident`, `ident_q`>;
type `in_schema` <character, character> => class<`character`, `ident`, `ident_q`>;
type `is.ident` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>> => logical;
type `is.sql` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>> => logical;
type `is.sql_variant` <class<`sql_variant`>> => logical;
type `is_tidy_pronoun` <class<`call`>> => logical;
type `is.wholenumber` <double[]> => logical[];
type `is_writeable` <character> => logical;
type `lahman` <character, ...> => any;
type `lahman_sqlite` <null> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `lahman_tables` < > => character[];
type `names.sql_variant` <class<`sql_variant`>> => character[];
type `names_to_as` <character[] | class<`character`, `sql`> | class<`character`, `ident`, `ident_q`>, character[], class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>> => character[];
type `new_op_select` <class<`op`, `op_filter`, `op_single`>, list<class<`name`>>> => class<`op`, `op_select`, `op_single`>;
type `op_base` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>, character[], character> => class<`op`, `op_base`, `op_base_remote`>;
type `op_base_remote` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>, character[]> => class<`op`, `op_base`, `op_base_remote`>;
type `op_double` <character, class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, list<logical | list<character>>> => class<`op`, `op_double`, `op_semi_join`>;
type `op_frame` <class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_select`, `op_single`>> => null;
type `op_frame.op_base` <class<`op`, `op_base`, `op_base_remote`>> => null;
type `op_frame.op_single` <class<`op`, `op_filter`, `op_single`> | class<`op`, `op_select`, `op_single`>> => null;
type `op_grps` <class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `op_grps.op_base` <class<`op`, `op_base`, `op_base_remote`>> => character[];
type `op_grps.op_select` <class<`op`, `op_select`, `op_single`>> => character[];
type `op_grps.op_single` <class<`op`, `op_filter`, `op_single`>> => character[];
type `op_grps.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `op_select` <class<`op`, `op_filter`, `op_single`>, list<class<`name`>>> => class<`op`, `op_select`, `op_single`>;
type `op_single` <character, class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`>, list<any>, list<any>> => (class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_select`, `op_single`>);
type `op_sort` <class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => null;
type `op_sort.op_base` <class<`op`, `op_base`, `op_base_remote`>> => null;
type `op_sort.op_single` <class<`op`, `op_filter`, `op_single`> | class<`op`, `op_select`, `op_single`>> => null;
type `op_sort.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => null;
type `op_vars` <class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `op_vars.op_base` <class<`op`, `op_base`, `op_base_remote`>> => character[];
type `op_vars.op_single` <class<`op`, `op_filter`, `op_single`>> => character[];
type `op_vars.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `partial_eval` <character | class<`name`> | double | class<`call`>, character[], any> => (character | class<`name`> | double | class<`call`>);
type `partial_eval_call` <class<`call`>, character[], any> => class<`call`>;
type `partial_eval_dots` <class<`list`, `quosures`>, any> => list<any>;
type `partial_eval_sym` <class<`name`>, character[], any> => class<`name`>;
type `register_s3_method` <character, character, character, null> => null;
type `same_src.src_sql` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>> => logical;
type `same_src.tbl_sql` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`>> => logical;
type `select_query` <class<`character`, `ident`> | class<`query`, `select_query`>, class<`character`, `sql`>, class<`character`, `sql`> | character[], character[], character[], character[], null, logical> => class<`query`, `select_query`>;
type `select_query_clauses` <class<`query`, `select_query`>> => class<`factor`, `ordered`>;
type `select.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `semi_join.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`>, null, logical, logical, ..., null> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `set_current_con` <null | class<`SQLiteConnection`>> => (class<`SQLiteConnection`> | null);
type `set_current_context` <character | list<character>> => (character | list<character>);
type `set_win_current_frame` <null> => null;
type `set_win_current_group` <null | character[]> => (character[] | null);
type `set_win_current_order` <null | class<`character`, `sql`>> => (class<`character`, `sql`> | null);
type `simulate_dbi` <character[]> => class<`DBIConnection`, `TestConnection`>;
type `sql` <...> => class<`character`, `sql`>;
type `sql_aggregate` <character, character> => class<`function`>;
type `sql_build` <class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_select`, `op_single`>, any, ...> => (class<`character`, `ident`> | class<`query`, `select_query`>);
type `sql_build.op_base_remote` <class<`op`, `op_base`, `op_base_remote`>, any, ...> => class<`character`, `ident`>;
type `sql_build.op_filter` <class<`op`, `op_filter`, `op_single`>, class<`SQLiteConnection`>, ...> => class<`query`, `select_query`>;
type `sql_build.op_select` <class<`op`, `op_select`, `op_single`>, class<`SQLiteConnection`>, ...> => class<`query`, `select_query`>;
type `sql_cast` <character> => class<`function`>;
type `sql_clause_from` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>, class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `sql_clause_generic` <character, class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | character[] | null, any> => (class<`character`, `sql`> | null);
type `sql_clause_group_by` <character[] | null, any> => null;
type `sql_clause_having` <character[] | null, any> => null;
type `sql_clause_limit` <null, any> => null;
type `sql_clause_order_by` <character[] | null, any> => null;
type `sql_clause_select` <class<`character`, `sql`>, class<`SQLiteConnection`>, logical> => class<`character`, `sql`>;
type `sql_clause_where` <class<`character`, `sql`>, class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `sql_current_con` < > => class<`SQLiteConnection`>;
type `sql_data_mask` <class<`formula`, `quosure`> | class<`name`>, class<`sql_variant`>, class<`SQLiteConnection`>, logical, logical> => environment;
type `sql_escape_ident.SQLiteConnection` <class<`SQLiteConnection`> | class<`DBIConnection`, `TestConnection`>, character[] | class<`character`, `ident`>> => character[];
type `sql_escape_ident.TestConnection` <class<`SQLiteConnection`> | class<`DBIConnection`, `TestConnection`>, character[] | class<`character`, `ident`>> => character[];
type `sql_escape_string.TestConnection` <class<`DBIConnection`, `TestConnection`>, character> => character;
type `sqlite_version` < > => class<`numeric_version`>;
type `sql_optimise` <class<`query`, `select_query`>, any, ...> => class<`query`, `select_query`>;
type `sql_optimise.select_query` <class<`query`, `select_query`>, any, ...> => class<`query`, `select_query`>;
type `sql_paste_infix` <character, character, class<`function`>> => class<`function`>;
type `sql_prefix` <character, null> => class<`function`>;
type `sql_quote` <character[] | class<`character`, `ident`>, character> => character[];
type `sql_render` <class<`character`, `ident`> | class<`op`, `op_select`, `op_single`> | class<`query`, `select_query`>, any, ..., any> => (class<`character`, `ident`> | class<`character`, `sql`>);
type `sql_render.ident` <class<`character`, `ident`>, any, ..., logical> => class<`character`, `ident`>;
type `sql_render.op` <class<`op`, `op_select`, `op_single`>, class<`SQLiteConnection`>, ..., logical> => class<`character`, `sql`>;
type `sql_render.select_query` <class<`query`, `select_query`>, class<`SQLiteConnection`>, ..., any> => class<`character`, `sql`>;
type `sql_select.DBIConnection` <class<`SQLiteConnection`>, class<`character`, `sql`>, class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>, class<`character`, `sql`>, null | character[], null | character[], null | character[], null, logical, ...> => class<`character`, `sql`>;
type `sql_subquery.SQLiteConnection` <class<`SQLiteConnection`>, class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>, null | character, ...> => (class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>);
type `sql_translate_env.SQLiteConnection` <class<`SQLiteConnection`>> => class<`sql_variant`>;
type `sql_translator` <..., list<any>, environment> => environment;
type `sql_variant` <environment, environment, environment> => class<`sql_variant`>;
type `sql_vector` <character[] | class<`character`, `sql`>, logical | null, character | null, class<`SQLiteConnection`> | class<`DBIConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `src_dbi` <class<`SQLiteConnection`>, logical> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `src_memdb` < > => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `src_tbls.src_sql` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, ...> => character[];
type `succeeds` <any, logical> => logical;
type `tbl_sql` <character[], class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, character | class<`character`, `ident`, `ident_q`>, ..., null> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `tbl.src_dbi` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, character | class<`character`, `ident`, `ident_q`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `tbl_vars.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `translate_sql_` <null | list<class<`formula`, `quosure`> | class<`name`>>, any, null | character[], null | class<`character`, `sql`>, null, logical, any> => class<`character`, `sql`>;
type `unique_name` < > => character;
type `unique_table_name` < > => character;
type `uses_window_fun` <list<class<`formula`, `quosure`>>, class<`SQLiteConnection`>> => logical;
type `win_aggregate` <character> => class<`function`>;
type `with_transaction` <class<`SQLiteConnection`>, integer> => logical;
