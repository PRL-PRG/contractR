type `::` <class<`SQLiteConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`>, logical> => (class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`> | class<`src`, `src_Microsoft SQL Server`, `src_dbi`, `src_sql`> | class<`src`, `src_PostgreSQLConnection`, `src_dbi`, `src_sql`> | class<`src`, `src_TestConnection`, `src_dbi`, `src_sql`>) | <...> => class<`character`, `sql`>;
type `add_op_order` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, null | list<class<`formula`, `quosure`>>> => (class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>);
type `add_op_semi_join` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`>, logical, null, null, logical, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `add_op_single` <character, class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, list<any>, list<any>> => (class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>);
type `all_calls` <class<`call`> | class<`formula`, `quosure`> | class<`if`> | class<`name`> | class<`(`> | character | double | null> => (character[] | null);
type `all_names` <class<`call`> | class<`formula`, `quosure`> | class<`if`> | class<`name`> | class<`(`> | character | double | null> => (character[] | null);
type `arrange.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., logical> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `as.sql` <character[] | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>> => (class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>);
type `as.sql.character` <character[]> => class<`character`, `ident`>;
type `as.sql.ident` <class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>> => (class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>);
type `as.sql.sql` <class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>> => (class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>);
type `auto_copy.tbl_sql` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`>, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `build_sql` <..., any, class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `cache` < > => environment;
type `cache_computation` <character, any> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `carry_over` <character[], list<class<`formula`, `quosure`>>> => list<class<`name`> | class<`formula`, `quosure`> | class<`formula`, `quosure`>>;
type `cat_line` <...> => null;
type `c_character` <...> => character[];
type `ceply` <character[] | null | list<any>, any, ..., environment> => environment;
type `check_na_rm` <any, any, logical> => logical;
type `check_summarise_vars` <list<class<`formula`, `quosure`>>> => null;
type `collect.tbl_sql` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., double, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `compute.tbl_sql` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, character, logical, null, null, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `copy_env` <environment, null, environment> => environment;
type `copy_lahman` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, ...> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `copy_to.src_sql` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, character | class<`character`, `ident`, `ident_q`>, logical, null, logical, null, null | list<any>, logical, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `c.sql` <..., logical, class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `db_analyze.DBIConnection` <class<`SQLiteConnection`>, character | class<`character`, `ident`, `ident_q`>, ...> => integer;
type `db_begin.DBIConnection` <class<`SQLiteConnection`>, ...> => logical;
type `db_collect` <class<`SQLiteConnection`>, class<`character`, `sql`>, double, logical, ...> => class<`data.frame`>;
type `db_collect.DBIConnection` <class<`SQLiteConnection`>, class<`character`, `sql`>, double, logical, ...> => class<`data.frame`>;
type `db_commit.DBIConnection` <class<`SQLiteConnection`>, ...> => logical;
type `db_compute` <class<`SQLiteConnection`>, character, class<`character`, `sql`>, logical, null, null, logical, ...> => character;
type `db_compute.DBIConnection` <class<`SQLiteConnection`>, character, class<`character`, `sql`>, logical, null, null, logical, ...> => character;
type `db_copy_to` <class<`SQLiteConnection`>, character | class<`character`, `ident`, `ident_q`>, class<`data.frame`>, logical, null, logical, null, null | list<any>, logical, ...> => (character | class<`character`, `ident`, `ident_q`>);
type `db_copy_to.DBIConnection` <class<`SQLiteConnection`>, character | class<`character`, `ident`, `ident_q`>, class<`data.frame`>, logical, null, logical, null, null | list<any>, logical, ...> => (character | class<`character`, `ident`, `ident_q`>);
type `db_create_index.DBIConnection` <class<`SQLiteConnection`>, character, character[], null, logical, ...> => integer;
type `db_create_indexes.DBIConnection` <class<`SQLiteConnection`>, any, null | list<any>, logical, ...> => null;
type `db_data_type.DBIConnection` <class<`SQLiteConnection`>, class<`data.frame`>> => character[];
type `db_disconnector` <any, any> => environment;
type `db_has_table.DBIConnection` <class<`SQLiteConnection`>, character> => logical;
type `dbi_quote` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`>, any> => class<`SQL`>;
type `dbi_quote.ident` <class<`character`, `ident`>, class<`SQLiteConnection`>> => class<`SQL`>;
type `dbi_quote.ident_q` <class<`character`, `ident`, `ident_q`>, any> => class<`SQL`>;
type `db_list_tables.DBIConnection` <class<`SQLiteConnection`>> => character[];
type `db_location` <null, character> => character;
type `db_query_fields.DBIConnection` <class<`SQLiteConnection`>, class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>, ...> => character[];
type `db_save_query.DBIConnection` <class<`SQLiteConnection`>, class<`character`, `sql`>, character, logical, ...> => character;
type `db_sql_render` <class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>, class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`> | class<`op`, `op_select`, `op_single`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => class<`character`, `sql`>;
type `db_sql_render.DBIConnection` <class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>, class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`> | class<`op`, `op_select`, `op_single`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => class<`character`, `sql`>;
type `db_write_table.DBIConnection` <class<`SQLiteConnection`>, character | class<`character`, `ident`, `ident_q`>, character[], class<`data.frame`>, logical, ...> => (character | class<`character`, `ident`, `ident_q`>);
type `dim.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => ^integer[];
type `escape` <character[] | class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`> | double[] | null | list<any>, null | logical, character | null, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`>> => class<`character`, `sql`>;
type `escape_ansi` <character | class<`character`, `ident`> | class<`character`, `sql`> | double[], null, character> => class<`character`, `sql`>;
type `escape.character` <character[], null, character, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape.double` <double[], null, character, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape.ident` <class<`character`, `ident`>, logical | null, character | null, class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape.ident_q` <class<`character`, `ident`, `ident_q`>, logical, character, class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `escape.integer` <integer[], null, character, class<`DBIConnection`, `TestConnection`> | class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `escape.list` <list<any>, logical, character, class<`SQLiteConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`>> => class<`character`, `sql`>;
type `escape.logical` <null, null, character, class<`DBIConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `escape.sql` <class<`character`, `sql`>, logical | null, null | character, class<`SQLiteConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`>> => class<`character`, `sql`>;
type `f` <null> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `filter.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ..., logical> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `find_fun` <class<`function`>> => character;
type `FUN` <class<`call`> | class<`formula`, `quosure`> | class<`if`> | class<`name`> | class<`(`> | character | double | null> => (character[] | null) | <class<`call`> | class<`formula`, `quosure`> | class<`if`> | class<`name`> | class<`(`> | character | double | null> => (character[] | null) | <character[] | class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`> | double[] | null | list<any>, null | logical, character | null, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`>> => class<`character`, `sql`> | <class<`name`> | character | class<`(`> | class<`call`> | double, any, any> => (character[] | class<`(`> | class<`call`> | class<`name`> | double) | <character[] | class<`(`> | class<`call`> | class<`character`, `ident`> | class<`character`, `sql`> | class<`name`> | double, any> => character | <...> => class<`character`, `ident`>;
type `fun_name` <class<`function`>> => character;
type `group_by_drop_default.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => logical;
type `group_by.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, ..., logical, logical> => (class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>);
type `group_vars.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `has_lahman` <character, ...> => logical;
type `head.tbl_lazy` <class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`>, double, ...> => (class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`>);
type `ident` <...> => class<`character`, `ident`>;
type `ident_q` <...> => class<`character`, `ident`, `ident_q`>;
type `in_schema` <character, character> => class<`character`, `ident`, `ident_q`>;
type `is.ident` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>> => logical;
type `is_infix_base` <character> => logical;
type `is_infix_user` <character> => logical;
type `is.sql` <character[] | class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>> => logical;
type `is.sql_variant` <class<`sql_variant`>> => logical;
type `is_tidy_pronoun` <class<`(`> | class<`call`>> => logical;
type `is.wholenumber` <double[]> => logical[];
type `is_writeable` <character> => logical;
type `lahman` <character, ...> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `lahman_sqlite` <null> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `lahman_tables` < > => character[];
type `lazy_frame` <..., class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`>, null> => (class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>);
type `memdb_frame` <..., character> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `mutate.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, ..., any> => (class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>);
type `names.sql_variant` <class<`sql_variant`>> => character[];
type `names_to_as` <character[] | class<`character`, `ident`> | class<`character`, `sql`> | class<`character`, `ident`, `ident_q`> | class<`SQL`> | list<class<`character`, `sql`>>, any, any> => character[];
type `nest_vars` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, list<class<`formula`, `quosure`>>, character[]> => (class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>);
type `new_op_select` <class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`>, list<class<`name`> | class<`name`> | class<`formula`, `quosure`> | class<`formula`, `quosure`>>> => class<`op`, `op_select`, `op_single`>;
type `op_base` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>, character[], character> => (class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`>);
type `op_base_local` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => class<`op`, `op_base`, `op_base_local`>;
type `op_base_remote` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>, character[]> => class<`op`, `op_base`, `op_base_remote`>;
type `op_double` <character, class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, list<logical | list<character>>> => class<`op`, `op_double`, `op_semi_join`>;
type `op_frame` <class<`op`, `op_frame`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`>> => (double[] | null);
type `op_frame.op_base` <class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`>> => null;
type `op_frame.op_frame` <class<`op`, `op_frame`, `op_single`>> => double[];
type `op_frame.op_single` <class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_filter`, `op_single`>> => (double[] | null);
type `op_grps` <class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_single`, `op_summarise`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`> | class<`op`, `op_frame`, `op_single`>> => character[];
type `op_grps.op_base` <class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`>> => character[];
type `op_grps.op_group_by` <class<`op`, `op_group_by`, `op_single`>> => character[];
type `op_grps.op_select` <class<`op`, `op_select`, `op_single`>> => character[];
type `op_grps.op_single` <class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_frame`, `op_single`>> => character[];
type `op_grps.op_summarise` <class<`op`, `op_single`, `op_summarise`>> => character[];
type `op_grps.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>> => character[];
type `op_select` <class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`>, list<class<`name`> | class<`formula`, `quosure`> | class<`name`> | class<`formula`, `quosure`>>> => class<`op`, `op_select`, `op_single`>;
type `op_single` <character, class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_single`, `op_summarise`> | class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_frame`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`>, list<any>, list<any>> => (class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_head`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_single`, `op_summarise`>);
type `op_sort` <class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => (null | list<class<`formula`, `quosure`>>);
type `op_sort.op_base` <class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`>> => null;
type `op_sort.op_order` <class<`op`, `op_order`, `op_single`>> => list<class<`formula`, `quosure`>>;
type `op_sort.op_single` <class<`op`, `op_select`, `op_single`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`>> => (null | list<class<`formula`, `quosure`>>);
type `op_sort.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => null;
type `op_vars` <class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_single`, `op_summarise`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>> => character[];
type `op_vars.op_base` <class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`>> => character[];
type `op_vars.op_select` <class<`op`, `op_select`, `op_single`>> => character[];
type `op_vars.op_single` <class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_order`, `op_single`>> => character[];
type `op_vars.op_summarise` <class<`op`, `op_single`, `op_summarise`>> => character[];
type `op_vars.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>> => character[];
type `partial_eval` <class<`name`> | character | class<`(`> | class<`call`> | double, any, any> => (character[] | class<`(`> | class<`call`> | class<`name`> | double);
type `partial_eval_call` <class<`(`> | class<`call`>, any, any> => (class<`(`> | class<`call`> | class<`name`> | double);
type `partial_eval_dots` <class<`list`, `quosures`>, any> => list<any>;
type `partial_eval_sym` <class<`name`>, character[], any> => (character[] | class<`name`> | double);
type `register_s3_method` <character, character, character, null> => null;
type `remote_con` <class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => (class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>);
type `remote_name` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => (class<`character`, `ident`> | null);
type `remote_query` <class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`>> => class<`character`, `sql`>;
type `remote_src` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `replace_expr` <character[] | class<`(`> | class<`call`> | class<`character`, `ident`> | class<`character`, `sql`> | class<`name`> | double, any> => character;
type `res_warn_incomplete` <class<`SQLiteResult`>, character> => null;
type `rows` <double, double> => class<`character`, `sql`>;
type `same_src.src_sql` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>> => logical;
type `same_src.tbl_sql` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`>> => logical;
type `select_query` <class<`character`, `ident`> | class<`query`, `select_query`>, class<`character`, `sql`>, character[] | class<`character`, `sql`>, character[] | class<`character`, `sql`>, character[], character[] | class<`character`, `sql`>, double | null, logical> => class<`query`, `select_query`>;
type `select_query_clauses` <class<`query`, `select_query`>> => class<`factor`, `ordered`>;
type `select.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `semi_join.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, class<`data.frame`, `tbl`, `tbl_df`>, null, logical, logical, ..., null> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `set_current_con` <null | class<`DBIConnection`, `TestConnection`> | class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`> | class<`SQLiteConnection`>> => (class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`> | class<`SQLiteConnection`> | null);
type `set_current_context` <character | list<character>> => (character | list<character>);
type `set_win_current_frame` <null | double[]> => (double[] | null);
type `set_win_current_group` <null | character[]> => (character[] | null);
type `set_win_current_order` <null | character | class<`character`, `sql`>> => (character | class<`character`, `sql`> | null);
type `show_query.tbl_lazy` <class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`>, ...> => (class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`>);
type `simulate_access` < > => class<`ACCESS`, `DBIConnection`, `TestConnection`>;
type `simulate_dbi` <character[]> => (class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`>);
type `simulate_mssql` < > => class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`>;
type `simulate_postgres` < > => class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`>;
type `simulate_sqlite` < > => class<`DBIConnection`, `SQLiteConnection`, `TestConnection`>;
type `sql` <...> => class<`character`, `sql`> | <...> => class<`character`, `sql`>;
type `sql_aggregate` <character, character> => class<`function`>;
type `sql_aggregate_2` <character> => class<`function`>;
type `sql_build` <class<`op`, `op_base`, `op_base_local`> | class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_order`, `op_single`> | class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_head`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_single`, `op_summarise`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, any, ...> => (class<`character`, `ident`> | class<`query`, `select_query`>);
type `sql_build.op_arrange` <class<`op`, `op_arrange`, `op_single`>, class<`SQLiteConnection`>, ...> => class<`query`, `select_query`>;
type `sql_build.op_base_local` <class<`op`, `op_base`, `op_base_local`>, any, ...> => class<`character`, `ident`>;
type `sql_build.op_base_remote` <class<`op`, `op_base`, `op_base_remote`>, any, ...> => class<`character`, `ident`>;
type `sql_build.op_filter` <class<`op`, `op_filter`, `op_single`>, class<`SQLiteConnection`>, ...> => class<`query`, `select_query`>;
type `sql_build.op_frame` <class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_order`, `op_single`>, any, ...> => (class<`character`, `ident`> | class<`query`, `select_query`>);
type `sql_build.op_group_by` <class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_order`, `op_single`>, any, ...> => (class<`character`, `ident`> | class<`query`, `select_query`>);
type `sql_build.op_head` <class<`op`, `op_head`, `op_single`>, any, ...> => class<`query`, `select_query`>;
type `sql_build.op_order` <class<`op`, `op_frame`, `op_single`> | class<`op`, `op_group_by`, `op_single`> | class<`op`, `op_order`, `op_single`>, any, ...> => (class<`character`, `ident`> | class<`query`, `select_query`>);
type `sql_build.op_select` <class<`op`, `op_select`, `op_single`>, class<`DBIConnection`, `TestConnection`> | class<`SQLiteConnection`>, ...> => class<`query`, `select_query`>;
type `sql_build.op_summarise` <class<`op`, `op_single`, `op_summarise`>, class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>, ...> => class<`query`, `select_query`>;
type `sql_build.tbl_lazy` <class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, class<`DBIConnection`, `TestConnection`>, ...> => class<`query`, `select_query`>;
type `sql_call2` <character, ..., class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `sql_cast` <character> => class<`function`>;
type `sql_clause_from` <class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>, class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`character`, `sql`>;
type `sql_clause_generic` <character, class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`> | character[] | null, any> => (class<`character`, `sql`> | null);
type `sql_clause_group_by` <class<`character`, `sql`> | character[] | null, any> => (class<`character`, `sql`> | null);
type `sql_clause_having` <character[] | null, any> => null;
type `sql_clause_limit` <double | null, any> => (class<`character`, `sql`> | null);
type `sql_clause_order_by` <class<`character`, `sql`> | character[] | null, any> => (class<`character`, `sql`> | null);
type `sql_clause_select` <class<`character`, `sql`>, class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>, logical> => class<`character`, `sql`>;
type `sql_clause_where` <class<`character`, `sql`> | character[] | null, any> => (class<`character`, `sql`> | null);
type `sql_cot` < > => class<`function`>;
type `sql_current_con` < > => (class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`> | class<`SQLiteConnection`>);
type `sql_data_mask` <class<`call`> | class<`formula`, `quosure`> | class<`name`>, class<`sql_variant`>, any, logical, logical> => environment;
type `sql_escape_ident.SQLiteConnection` <class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`> | class<`ACCESS`, `DBIConnection`, `TestConnection`>, character[] | class<`character`, `ident`>> => (character[] | class<`character`, `ident`>);
type `sql_escape_ident.TestConnection` <class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`> | class<`ACCESS`, `DBIConnection`, `TestConnection`>, character[] | class<`character`, `ident`>> => (character[] | class<`character`, `ident`>);
type `sql_escape_logical` <class<`DBIConnection`, `TestConnection`>, null> => character;
type `sql_escape_logical.DBIConnection` <class<`DBIConnection`, `TestConnection`>, null> => character;
type `sql_escape_string.DBIConnection` <class<`SQLiteConnection`>, character> => class<`SQL`>;
type `sql_escape_string.TestConnection` <class<`DBIConnection`, `TestConnection`>, character[]> => character[];
type `sql_expr` <any, any> => class<`character`, `sql`>;
type `sql_infix` <character, logical> => class<`function`>;
type `sqlite_version` < > => class<`numeric_version`>;
type `sql_log` < > => class<`function`>;
type `sql_not_supported` <character> => class<`function`>;
type `sql_optimise` <class<`character`, `ident`> | class<`query`, `select_query`>, any, ...> => (class<`character`, `ident`> | class<`query`, `select_query`>);
type `sql_optimise.ident` <class<`character`, `ident`>, any, ...> => class<`character`, `ident`>;
type `sql_optimise.select_query` <class<`query`, `select_query`>, any, ...> => class<`query`, `select_query`>;
type `sql_paste` <character, character> => class<`function`>;
type `sql_paste_infix` <character, character, class<`function`>> => class<`function`>;
type `sql_prefix` <character, null> => class<`function`>;
type `sql_quote` <^character[] | class<`character`, `ident`>, character> => (character[] | class<`character`, `ident`>);
type `sql_render` <class<`character`, `ident`> | class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_head`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_single`, `op_summarise`> | class<`query`, `select_query`> | class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`>, any, ..., any> => (class<`character`, `ident`> | class<`character`, `sql`>);
type `sql_render.ident` <class<`character`, `ident`>, any, ..., logical> => (class<`character`, `ident`> | class<`character`, `sql`>);
type `sql_render.op` <class<`op`, `op_arrange`, `op_single`> | class<`op`, `op_base`, `op_base_remote`> | class<`op`, `op_filter`, `op_single`> | class<`op`, `op_head`, `op_single`> | class<`op`, `op_select`, `op_single`> | class<`op`, `op_single`, `op_summarise`>, class<`SQLiteConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`>, ..., any> => class<`character`, `sql`>;
type `sql_render.select_query` <class<`query`, `select_query`>, class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>, ..., any> => class<`character`, `sql`>;
type `sql_render.tbl_lazy` <class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`>, class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`SQLiteConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`>, ..., logical> => class<`character`, `sql`>;
type `sql_select.DBIConnection` <class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>, class<`character`, `sql`>, class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>, character[] | class<`character`, `sql`> | null, character[] | class<`character`, `sql`> | null, character[] | null, character[] | class<`character`, `sql`> | null, double | null, logical, ...> => class<`character`, `sql`>;
type `sql_select.Microsoft SQL Server` <class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`>, class<`character`, `sql`>, class<`character`, `ident`>, character[], character[], character[], character[], double, logical, ..., any> => class<`character`, `sql`>;
type `sql_subquery.DBIConnection` <class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`>, class<`character`, `ident`>, null, ...> => class<`character`, `ident`>;
type `sql_subquery.SQLiteConnection` <class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>, class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>, null | character, ...> => (class<`character`, `ident`> | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>);
type `sql_switch` <class<`character`, `sql`>, ...> => class<`character`, `sql`>;
type `sql_translate_env.ACCESS` <class<`ACCESS`, `DBIConnection`, `TestConnection`>> => class<`sql_variant`>;
type `sql_translate_env.DBIConnection` <class<`DBIConnection`, `TestConnection`>> => class<`sql_variant`>;
type `sql_translate_env.PostgreSQLConnection` <class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`>> => class<`sql_variant`>;
type `sql_translate_env.SQLiteConnection` <class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`SQLiteConnection`>> => class<`sql_variant`>;
type `sql_translator` <..., list<any>, environment> => environment;
type `sql_variant` <environment, environment, environment> => class<`sql_variant`>;
type `sql_vector` <character[] | class<`character`, `sql`> | class<`SQL`> | list<any>, any, null | character, class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`> | class<`SQLiteConnection`> | class<`ACCESS`, `DBIConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `src_dbi` <class<`SQLiteConnection`> | class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`>, logical> => (class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`> | class<`src`, `src_Microsoft SQL Server`, `src_dbi`, `src_sql`> | class<`src`, `src_PostgreSQLConnection`, `src_dbi`, `src_sql`> | class<`src`, `src_TestConnection`, `src_dbi`, `src_sql`>);
type `src_memdb` < > => class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>;
type `src_tbls.src_sql` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, ...> => character[];
type `succeeds` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, logical> => logical;
type `summarise.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`>, ...> => (class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`>);
type `tail.tbl_sql` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, integer, ...> => any;
type `tbl_lazy` <class<`data.frame`, `tbl`, `tbl_df`> | class<`data.frame`>, class<`DBIConnection`, `Microsoft SQL Server`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`>, null> => (class<`tbl`, `tbl_Microsoft SQL Server`, `tbl_lazy`> | class<`tbl`, `tbl_PostgreSQLConnection`, `tbl_lazy`> | class<`tbl`, `tbl_SQLiteConnection`, `tbl_lazy`> | class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>);
type `tbl_memdb` <class<`data.frame`>, character> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `tbl_sql` <character[], class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, character | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>, ..., null> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `tbl.src_dbi` <class<`src`, `src_SQLiteConnection`, `src_dbi`, `src_sql`>, character | class<`character`, `ident`, `ident_q`> | class<`character`, `sql`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `tbl_vars.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>> => character[];
type `translate_sql` <..., class<`ACCESS`, `DBIConnection`, `TestConnection`> | class<`DBIConnection`, `PostgreSQLConnection`, `TestConnection`> | class<`DBIConnection`, `SQLiteConnection`, `TestConnection`> | class<`DBIConnection`, `TestConnection`> | class<`DBIConnection`, `TestCon`, `TestConnection`>, any, null | character, null | character, null, logical> => class<`character`, `sql`>;
type `translate_sql_` <class<`list`, `quosures`> | null | list<any>, any, any, any, any, logical, any> => class<`character`, `sql`>;
type `transmute.tbl_lazy` <class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>, ...> => class<`tbl`, `tbl_SQLiteConnection`, `tbl_dbi`, `tbl_lazy`, `tbl_sql`>;
type `unique_name` < > => character;
type `unique_table_name` < > => character;
type `uses_window_fun` <list<class<`formula`, `quosure`>>, class<`SQLiteConnection`>> => logical;
type `win_aggregate` <character> => class<`function`>;
type `win_aggregate_2` <character> => class<`function`>;
type `win_current_frame` < > => (double[] | null);
type `win_current_group` < > => (character[] | null);
type `win_current_order` < > => (character | class<`character`, `sql`> | null);
type `window_frame` <class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, double, double> => class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>;
type `window_order` <class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>, ...> => class<`tbl`, `tbl_TestConnection`, `tbl_lazy`>;
type `win_over` <class<`character`, `sql`>, character[] | null, class<`character`, `sql`> | null | character[], double[] | null, class<`DBIConnection`, `TestConnection`>> => class<`character`, `sql`>;
type `with_transaction` <class<`SQLiteConnection`>, integer> => logical;
