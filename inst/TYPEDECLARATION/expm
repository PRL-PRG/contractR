type `%^%` <class<`matrix`>, double> => class<`matrix`>;
type `balance` <class<`dgeMatrix`> | class<`matrix`>, character[]> => any;
type `dgebal` <class<`dgeMatrix`> | class<`matrix`>, character[]> => any;
type `expAtv` <class<`dgCMatrix`> | class<`dtCMatrix`> | class<`matrix`>, double[], double, character, double, double, double, double, double, any> => list<double[]>;
type `expm` <class<`dgCMatrix`> | class<`matrix`>, character[], double, logical, any, logical, any> => any;
type `expm.AlMoHi09` <class<`matrix`> | class<`dgeMatrix`>, double> => any;
type `expmCond` <class<`matrix`>, character, logical, double, double, character[]> => (double | list<double | class<`matrix`>>);
type `.expmCond.1` <class<`matrix`>, logical> => (double | list<double | class<`matrix`>>);
type `.expmCond.F` <class<`matrix`>, double, double, double, logical> => list<double | class<`matrix`>>;
type `.expmCond.X` <class<`matrix`>, character, logical> => list<double | class<`matrix`>>;
type `expmFrechet` <class<`matrix`>, class<`matrix`>, any, logical> => list<class<`matrix`>>;
type `.expmFrechet2008.26` <class<`matrix`>, class<`matrix`>, logical> => list<class<`matrix`>>;
type `expm.Higham08` <class<`matrix`> | class<`dgCMatrix`> | class<`dgeMatrix`>, logical> => any;
type `expm.s.Pade.s` <class<`dgCMatrix`> | class<`matrix`>, double, integer> => (class<`dgeMatrix`> | class<`matrix`>);
type `logm` <class<`matrix`>, character[], any> => any;
type `logm.Higham08` <class<`matrix`>> => class<`matrix`>;
type `rootS` <class<`matrix`>> => class<`matrix`>;
type `sqrtm` <class<`matrix`>> => class<`matrix`>;
