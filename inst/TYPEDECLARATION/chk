type `abort_chk` <..., double | null, logical> => any;
type `.anyDuplicated` <character[] | ^double[] | null, logical | null> => integer;
type `backtick_chk` <character> => character;
type `cc` <character[] | double[], character, character, character, integer, logical> => character;
type `check_data` <class<`data.frame`>, null | list<double>, logical, logical, double[], any, null> => any;
type `check_dim` <class<`data.frame`> | double, class<`function`>, double[], null | character, null | character> => any;
type `check_key` <class<`data.frame`>, character[], logical, null | character> => any;
type `check_names` <class<`data.frame`> | double[], character[], logical, logical, character | null> => any;
type `check_values` <double | null, double[], null | character> => any;
type `chk_all` <^logical[] | list<any>, class<`function`>, ..., null> => null;
type `chk_all_equal` <double[] | list<double>, double, null> => any;
type `chk_all_equivalent` <double[] | list<double>, double, null> => any;
type `chk_all_identical` <double[], null> => any;
type `chk_array` <class<`array`> | class<`matrix`>, null> => null;
type `chk_atomic` <double[] | null | list<double>, any> => any;
type `chk_character` <double | character, null> => any;
type `chk_data` <double | class<`data.frame`>, null | character> => any;
type `chk_date` <double | class<`Date`>, null> => any;
type `chk_datetime` <double | class<`POSIXct`, `POSIXt`>, null> => any;
type `chk_dir` <character, null> => any;
type `chk_double` <double, null> => any;
type `chk_environment` <double | environment, null> => any;
type `chk_equal` <double, double, double, null | character> => any;
type `chk_equivalent` <double, double, double, null> => any;
type `chk_ext` <character, character, null> => any;
type `chk_false` <double, null> => any;
type `chk_file` <character, null> => any;
type `chk_flag` <double[], null> => any;
type `chk_function` <double | class<`function`>, null, null> => any;
type `chk_gt` <double[], double, null> => any;
type `chk_gte` <double, double, null> => any;
type `chk_identical` <double[], double[], null> => any;
type `chk_integer` <double, null> => any;
type `chk_join` <class<`data.frame`>, class<`data.frame`>, character, null> => any;
type `chk_lgl` <double | null, null> => any;
type `chk_list` <double | list<any>, null> => any;
type `chk_logical` <double, null> => any;
type `chk_lt` <double[], double, null> => any;
type `chk_lte` <double, double, null> => any;
type `chk_match` <character, character, null> => any;
type `chk_matrix` <class<`array`> | class<`matrix`>, null> => any;
type `chk_named` <class<`data.frame`> | double[] | list<any>, any> => any;
type `chk_not_any_na` <null | character[] | double, any> => any;
type `chk_not_empty` <double[], null> => any;
type `chk_not_null` <null | double, null> => any;
type `chk_null` <double | null, null> => any;
type `chk_number` <double, null> => any;
type `chk_numeric` <character | double, null> => any;
type `chkor` <...> => any;
type `chk_range` <double, double[], null | character> => any;
type `chk_s3_class` <class<`classRepresentation`> | double | character[] | null, character, any> => any;
type `chk_s4_class` <double | class<`classRepresentation`>, character, null> => any;
type `chk_scalar` <integer[] | double | list<double>, null> => any;
type `chk_setequal` <double | integer[], integer[], null> => any;
type `chk_sorted` <integer[], null> => any;
type `chk_string` <double | character, any> => any;
type `chk_subset` <double, double[], null | character> => any;
type `chk_superset` <integer[], double, null> => any;
type `chk_true` <double, null> => any;
type `chk_tz` <character, null> => any;
type `chk_unique` <^double[] | character[], logical | null, null> => any;
type `chk_unused` <...> => any;
type `chk_used` <...> => any;
type `chk_vector` <class<`matrix`> | double[] | list<any>, null> => any;
type `chk_whole_number` <double, null> => any;
type `chk_whole_numeric` <double[], null> => any;
type `deparse_backtick_chk` <character | class<`call`> | class<`name`> | double | null> => character;
type `err` <..., double | null, logical, character | null> => any;
type `expect_chk_error` <any, null, ..., null, null, null> => any;
type `FUN` <double[] | null | list<double>, any> => any | <null | double | logical[]> => logical;
type `message_chk` <..., double | null, logical> => character;
type `msg` <..., double, logical, null> => null;
type `new_duplicated` <class<`data.frame`>, logical, logical, ...> => logical[];
type `p` <..., character, character | null> => character;
type `p0` <..., null | character> => character[];
type `try_chk` <class<`formula`, `quosure`>> => (class<`chk_error`, `condition`, `error`, `rlang_error`> | null);
type `try_msg` <class<`chk_error`, `condition`, `error`, `rlang_error`>> => character;
type `unbacktick_chk` <character> => character;
type `vld_all` <^logical[], class<`function`>, ...> => logical;
type `vld_all_equal` <double[] | list<double>, double> => logical;
type `vld_all_equivalent` <double[] | list<double>, double> => logical;
type `vld_all_identical` <double[]> => logical;
type `vld_array` <class<`array`> | class<`matrix`> | double> => logical;
type `vld_atomic` <character[] | class<`matrix`> | double[] | null | list<double>> => logical;
type `vld_character` <character[] | class<`factor`> | class<`matrix`> | double | null> => logical;
type `vld_data` <class<`data.frame`> | double> => logical;
type `vld_date` <class<`Date`> | class<`POSIXct`, `POSIXt`> | double> => logical;
type `vld_datetime` <character | class<`POSIXct`, `POSIXt`> | double, null> => logical;
type `vld_dir` <character | double> => logical;
type `vld_double` <class<`matrix`> | double[] | null> => logical;
type `vld_environment` <double | environment | list<double>> => logical;
type `vld_equal` <double, double, double> => logical;
type `vld_equivalent` <double, double, double> => logical;
type `vld_ext` <character, character> => logical;
type `vld_false` <double[] | null> => logical;
type `vld_file` <character> => logical;
type `vld_flag` <double[]> => logical;
type `vld_function` <class<`function`> | double | list<double>, any> => logical;
type `vld_gt` <character | ^double[], character | double> => logical;
type `vld_gte` <^double[], double> => logical;
type `vld_identical` <double, double> => logical;
type `vld_integer` <class<`matrix`> | double | integer[] | null> => logical;
type `vld_join` <class<`data.frame`>, class<`data.frame`>, character> => logical;
type `vld_lgl` <null | double | logical[]> => logical;
type `vld_list` <class<`data.frame`> | double | null | list<any>> => logical;
type `vld_logical` <character | class<`matrix`> | double | logical[] | null> => logical;
type `vld_lt` <character | ^double[], character | double> => logical;
type `vld_lte` <^double[], double> => logical;
type `vld_match` <character | null, character> => logical;
type `vld_matrix` <class<`array`> | class<`matrix`> | double> => logical;
type `vld_named` <class<`data.frame`> | double[] | list<any>> => logical;
type `vld_not_any_na` <character[] | ^double[] | null> => logical;
type `vld_not_empty` <character[] | class<`matrix`> | double[] | null | list<any>> => logical;
type `vld_not_null` <double | null> => logical;
type `vld_null` <double | null> => logical;
type `vld_number` <double> => logical;
type `vld_numeric` <character | double | integer[] | null> => logical;
type `vld_range` <^double[], double[]> => logical;
type `vld_s3_class` <character[] | class<`classRepresentation`> | double[] | null, any> => logical;
type `vld_s4_class` <class<`classRepresentation`> | double[], any> => logical;
type `vld_scalar` <double | integer[] | list<double>> => logical;
type `vld_setequal` <double | integer[], double | integer[]> => logical;
type `vld_sorted` <integer[]> => logical;
type `vld_string` <character[] | double | null, null> => logical;
type `vld_subset` <character | double[], character | double[]> => logical;
type `vld_superset` <integer[], double | integer[]> => logical;
type `vld_true` <character | double[] | null> => logical;
type `vld_tz` <character> => logical;
type `vld_unique` <character[] | ^double[] | null, logical | null> => logical;
type `vld_unused` <...> => logical;
type `vld_used` <...> => logical;
type `vld_vector` <class<`matrix`> | double[] | list<any>> => logical;
type `vld_whole_number` <double> => logical;
type `vld_whole_numeric` <double[] | null> => logical;
type `wrn` <..., double, logical, null> => character;
