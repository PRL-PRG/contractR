type `coxme` <class<`formula`>, any, any, any, any, any, any, character[], any, any, any, logical, logical, double, any, any, any, ...> => class<`coxme`>;
type `coxme.control` <double, double, double, class<`call`>, double | null, list<character | list<double>>, double, logical, character, double[], double[], double[]> => list<any>;
type `coxme.fit` <class<`matrix`>, class<`Surv`>, null | double[], double[], null | double[], list<any>, double[], character, any, class<`matrix`>, class<`matrix`>, list<class<`coxmevar`>>, list<list<any>>, double[] | null | list<any>, integer[], class<`matrix`>, double, logical> => list<any>;
type `coxmeFull` <logical> => class<`coxmevar`>;
type `coxmeMlist` <class<`dsCMatrix`> | class<`matrix`> | list<any>, logical, logical, logical> => class<`coxmevar`>;
type `expand.nested` <class<`data.frame`>> => class<`data.frame`>;
type `findIntercept` <class<`call`> | class<`name`> | double> => logical;
type `fixef.coxme` <class<`coxme`>, ...> => double[];
type `fixef.lmekin` <class<`lmekin`>, ...> => double[];
type `formula1` <class<`call`> | class<`formula`> | class<`name`> | class<`(`>> => list<any>;
type `formula2` <class<`(`>> => list<any>;
type `getblock` <class<`dsCMatrix`>, integer, double> => (class<`dsCMatrix`> | double);
type `hasAbar` <class<`formula`>> => logical;
type `lmekin` <class<`formula`>, any, any, any, any, any, any, any, any, character[], logical, logical, logical, any, any, any, ...> => class<`lmekin`>;
type `lmekin.control` <list<character | list<double>>, double[], double[]> => list<double[] | list<character | list<double>>>;
type `print.coxme` <class<`coxme`>, logical, double, ...> => class<`coxme`>;
type `print.lmekin` <class<`lmekin`>, ...> => class<`lmekin`>;
type `ranef.coxme` <class<`coxme`>, ...> => list<double[] | class<`matrix`> | double[] | class<`matrix`>>;
type `ranef.lmekin` <class<`lmekin`>, ...> => list<double[]>;
type `residuals.lmekin` <class<`lmekin`>, ...> => double[];
type `subbar` <class<`(`> | class<`call`> | class<`formula`> | class<`name`>> => (class<`(`> | class<`call`> | class<`formula`> | class<`name`>);
type `VarCorr.coxme` <class<`coxme`> | class<`lmekin`>, ...> => list<class<`matrix`> | double[]>;
type `VarCorr.lmekin` <class<`coxme`> | class<`lmekin`>, ...> => list<class<`matrix`> | double[]>;
type `vcov.coxme` <class<`coxme`>, ...> => class<`matrix`>;
