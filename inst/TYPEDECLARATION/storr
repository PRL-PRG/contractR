type `::` <null | environment, null | character> => any | <class<`R6`, `driver_environment`> | class<`R6`, `driver_DBI`> | class<`R6`, `driver_multistorr`> | class<`R6`, `driver_rds`>, character> => class<`R6`, `storr`>;
type `$` <character[] | class<`data.frame`> | class<`function`> | double[] | list<character>> => raw[] | <raw[]> => character;
type `%||%` <character | null, any> => character;
type `assert_character` <character, any> => null;
type `assert_environment` <environment, any> => null;
type `assert_function` <class<`function`>, any> => null;
type `assert_length` <double[] | list<any>, integer, any> => null;
type `assert_list` <list<environment>, any> => null;
type `assert_logical` <logical, any> => null;
type `assert_probably_storr_driver` <class<`R6`, `driver_environment`> | class<`R6`, `driver_rds`>, any> => (class<`R6`, `driver_environment`> | class<`R6`, `driver_rds`>);
type `assert_raw` <raw[], any> => null;
type `assert_scalar` <character | logical, any> => null;
type `assert_scalar_character` <character, any> => null;
type `assert_scalar_logical` <logical, any> => null;
type `assert_valid_table_name` <character, any> => null;
type `check_external_fetch_hook` <class<`function`>> => class<`function`>;
type `check_length` <character[], character[]> => integer;
type `ConfigError` <character, character, character> => class<`ConfigError`, `condition`, `error`>;
type `dbi_connection_factory` <class<`SQLiteDriver`> | null, character | null> => class<`function`>;
type `dbi_supports_binary` <class<`SQLiteConnection`>> => logical;
type `dbi_use_binary` <class<`SQLiteConnection`>, character, null> => logical;
type `decode64` <character[], character, character, any> => character[];
type `dir_create` <character> => (logical | null);
type `dquote` <character> => character;
type `driver_classes` < > => character[];
type `driver_dbi` <character, character, class<`SQLiteConnection`> | class<`SQLiteDriver`>, null | character, null, null> => class<`R6`, `driver_DBI`>;
type `driver_dbi_dialect` <class<`SQLiteConnection`>> => character;
type `driver_dbi_sql_compat` <character, character, character> => list<character>;
type `driver_environment` <null | environment, null | character> => any;
type `driver_multistorr` <class<`R6`, `driver_environment`>, class<`R6`, `driver_rds`>> => class<`R6`, `driver_multistorr`>;
type `driver_rds` <character, null, logical | null, null, null> => class<`R6`, `driver_rds`>;
type `driver_rds_config` <character, character, null | logical, character | logical, logical> => (character | logical);
type `driver_rds_config_file` <character, character> => character;
type `dummy_test` < > => logical;
type `encode64` <character, character, character, any> => character;
type `exists0` <any, any> => any;
type `export_names` <character[]> => character[];
type `fetch_hook_read` <class<`function`>, class<`function`>> => class<`function`>;
type `file_remove` <character> => logical;
type `FUN` <character[] | class<`data.frame`> | class<`function`> | double[] | list<character>> => raw[] | <raw[]> => character | <character[], character, character, any> => character[] | <any, any> => any;
type `HashError` <character, any> => class<`HashError`, `condition`, `error`>;
type `is_storr` <class<`R6`, `storr`> | class<`R6`, `storr`, `storr_external`> | environment | list<any>> => logical;
type `join_key_namespace` <character[], character[]> => list<integer | character[] | integer | character>;
type `KeyError` <character, character, any> => class<`KeyError`, `condition`, `error`>;
type `KeyErrorExternal` <character, character, class<`condition`, `error`, `simpleError`>> => class<`KeyError`, `KeyErrorExternal`, `condition`, `error`>;
type `make_do_mget` <class<`R6`, `storr`> | class<`R6`, `storr`, `storr_external`> | environment> => class<`function`>;
type `make_do_mset` <class<`R6`, `storr`> | environment | list<any>> => class<`function`>;
type `make_hash_serialized_object` <raw[]> => character | <character, logical> => class<`function`>;
type `make_serialize_object` <character[] | class<`data.frame`> | class<`function`> | double[] | list<character>> => raw[] | <logical, logical, logical, any> => class<`function`>;
type `match_value` <character, character[], character> => character;
type `rm0` <character[], any> => logical[];
type `serialize_to_raw` <character[] | class<`data.frame`> | class<`function`> | double[] | list<double | character>, logical, logical> => raw[];
type `storr` <class<`R6`, `driver_environment`> | class<`R6`, `driver_DBI`> | class<`R6`, `driver_multistorr`> | class<`R6`, `driver_rds`>, character> => class<`R6`, `storr`>;
type `storr_copy` <class<`R6`, `storr`> | environment | list<any>, class<`R6`, `storr`> | class<`R6`, `storr`, `storr_external`> | environment, character | null, character[], any> => list<class<`matrix`> | class<`R6`, `storr`> | class<`matrix`> | environment | class<`matrix`> | list<double[]>>;
type `storr_environment` <null, null, character> => class<`R6`, `storr`>;
type `storr_external` <class<`R6`, `driver_environment`>, class<`function`>, character> => class<`R6`, `storr`, `storr_external`>;
type `storr_gc` <class<`R6`, `driver_environment`> | class<`R6`, `driver_rds`>, any> => character[];
type `storr_mset_hash` <class<`R6`, `storr`>, character[], character[], character[]> => null;
type `storr_rds` <character, null, logical | null, null, null, character> => class<`R6`, `storr`>;
type `storr_traits` <list<character | character | logical>> => list<character | logical>;
type `storr_traits_default` < > => list<character | logical>;
type `storr_used_hashes` <class<`R6`, `driver_environment`> | class<`R6`, `driver_rds`>> => character[];
type `test_driver` <class<`function`>> => class<`data.frame`>;
type `test_driver_finish` <class<`data.frame`>, logical> => class<`data.frame`>;
type `try_write_lines` <character, character, ..., character> => logical;
type `try_write_serialized_rds` <raw[], character, logical, character, double> => logical;
type `unserialize_safe` <raw[]> => (double[] | list<character>);
type `vcapply` <integer[] | character[] | list<any>, class<`function`>, ...> => (^character[] | null);
type `viapply` <character[], class<`function`>, ...> => integer[];
type `vlapply` <any, class<`function`>, ...> => any;
type `write_if_missing` <any, character> => null;
type `write_lines` <character, character, ..., character> => logical;
type `write_serialized_rds` <raw[], character, logical, character, double> => logical;
