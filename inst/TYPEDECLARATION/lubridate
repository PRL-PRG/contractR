type `>` <class<`Duration`>, class<`Duration`>> => logical | <class<`Duration`>, character> => logical;
type `-` <class<`Period`>, class<`Period`>> => class<`Period`> | <class<`Duration`>, class<`Duration`>> => class<`Duration`> | <class<`POSIXct`, `POSIXt`>, class<`Duration`>> => class<`POSIXct`, `POSIXt`> | <class<`Date`>, class<`Period`>> => (class<`Date`> | class<`POSIXlt`, `POSIXt`>) | <class<`Duration`>, any> => class<`Duration`> | <class<`POSIXct`, `POSIXt`>, class<`Period`>> => class<`POSIXct`, `POSIXt`> | <class<`Period`>, any> => class<`Period`>;
type `[` <class<`Interval`>, logical, any, ..., logical> => class<`Interval`> | <class<`Period`>, logical, any, ..., logical> => class<`Period`>;
type `[<-` <class<`Interval`>, logical, any, ..., class<`Interval`>> => class<`Interval`> | <class<`Period`>, logical, any, ..., class<`Period`>> => class<`Period`>;
type `$<-` <class<`Period`>, character, double> => class<`Period`>;
type `*` <integer[], class<`Duration`>> => class<`Duration`> | <integer[], class<`Period`>> => class<`Period`>;
type `+` <class<`POSIXlt`, `POSIXt`>, class<`Period`>> => class<`POSIXlt`, `POSIXt`> | <class<`POSIXct`, `POSIXt`>, class<`Duration`>> => class<`POSIXct`, `POSIXt`> | <class<`POSIXct`, `POSIXt`>, class<`Period`>> => class<`POSIXct`, `POSIXt`> | <class<`Date`>, class<`Duration`>> => (class<`Date`> | class<`POSIXct`, `POSIXt`>) | <class<`Date`>, class<`Period`>> => (class<`Date`> | class<`POSIXlt`, `POSIXt`>) | <class<`Period`>, class<`Period`>> => class<`Period`> | <class<`Duration`>, class<`Duration`>> => class<`Duration`>;
type `add_duration_to_date` <class<`Duration`>, class<`Date`> | class<`POSIXct`, `POSIXt`>> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `add_duration_to_duration` <class<`Duration`>, class<`Duration`>> => class<`Duration`>;
type `add_months` <class<`POSIXlt`, `POSIXt`>, double[]> => class<`POSIXlt`, `POSIXt`>;
type `add_period_to_date` <class<`Period`>, class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>> => (class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>);
type `add_period_to_period` <class<`Period`>, class<`Period`>> => class<`Period`>;
type `.add_truncated` <character, double> => character[];
type `add_with_rollback` <class<`Date`> | class<`POSIXct`, `POSIXt`>, class<`Period`>, logical, logical> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `am` <class<`Date`>> => logical;
type `as_date` <class<`POSIXct`, `POSIXt`>, ...> => class<`Date`> | <class<`POSIXct`, `POSIXt`> | double, ...> => class<`Date`> | <double, ...> => class<`Date`>;
type `as_datetime` <class<`Date`>, ...> => class<`POSIXct`, `POSIXt`> | <class<`Date`> | class<`POSIXct`, `POSIXt`>, ...> => class<`POSIXct`, `POSIXt`> | <class<`POSIXct`, `POSIXt`>, ...> => class<`POSIXct`, `POSIXt`>;
type `as.double` <any, ...> => double[];
type `as.duration` <double, ...> => class<`Duration`> | <character | class<`difftime`> | class<`Interval`> | class<`Period`> | double, ...> => class<`Duration`> | <class<`Interval`>, ...> => class<`Duration`> | <class<`Period`>, ...> => class<`Duration`> | <class<`difftime`>, ...> => class<`Duration`> | <character, ...> => class<`Duration`>;
type `as.interval` <class<`Duration`>, class<`Date`>, ...> => class<`Interval`> | <class<`difftime`> | class<`Duration`> | class<`Period`> | double, class<`Date`>, ...> => class<`Interval`> | <class<`difftime`>, class<`Date`>, ...> => class<`Interval`> | <class<`Period`>, class<`Date`>, ...> => class<`Interval`> | <double, class<`Date`>, ...> => class<`Interval`>;
type `as.numeric` <any, ...> => double[] | <any, ...> => double;
type `as.period` <character, any, ...> => class<`Period`> | <character | class<`Interval`> | class<`Period`>, any, ...> => class<`Period`> | <class<`Interval`>, any, ...> => class<`Period`>;
type `as_POSIXct` <class<`POSIXct`, `POSIXt`>, any> => class<`POSIXct`, `POSIXt`>;
type `.best_formats` <character[], character[], character, any, any> => (character[] | null);
type `.build_formats` <any, character[], character[]> => (character[] | null);
type `c` <any, ...> => class<`Period`>;
type `ceiling_date` <class<`Date`> | class<`POSIXct`, `POSIXt`>, character, logical | null, any> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `ceil_multi_unit` <double, double> => double;
type `ceil_multi_unit1` <double, double> => double;
type `C_force_tz` <class<`POSIXct`, `POSIXt`>, character, logical> => class<`POSIXct`, `POSIXt`>;
type `C_force_tzs` <class<`POSIXct`, `POSIXt`>, character[], character, logical> => class<`POSIXct`, `POSIXt`>;
type `C_local_time` <class<`POSIXct`, `POSIXt`>, character[]> => double[];
type `C_update_dt` <class<`POSIXct`, `POSIXt`>, double | integer[], double | integer[], integer[] | double, double[], integer[] | double, double[], double[], double[], character, logical, double> => class<`POSIXct`, `POSIXt`>;
type `C_valid_tz` <character> => logical;
type `date` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => class<`Date`>;
type `date<-` <class<`POSIXct`, `POSIXt`>, class<`Date`>> => class<`POSIXct`, `POSIXt`> | <class<`POSIXct`, `POSIXt`>, class<`Date`>> => class<`POSIXct`, `POSIXt`>;
type `date_decimal` <double, character> => class<`POSIXct`, `POSIXt`>;
type `date.default` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => class<`Date`>;
type `date_to_posix` <class<`Date`>, character> => class<`POSIXct`, `POSIXt`>;
type `day` <class<`POSIXct`, `POSIXt`> | class<`Date`> | class<`POSIXlt`, `POSIXt`>> => integer[];
type `day<-` <class<`Date`> | class<`POSIXct`, `POSIXt`>, double> => (class<`Date`> | class<`POSIXct`, `POSIXt`>) | <class<`Date`>, double> => class<`Date`> | <class<`POSIXct`, `POSIXt`>, double> => class<`POSIXct`, `POSIXt`>;
type `days` <class<`difftime`> | double[]> => class<`Period`>;
type `ddays` <double> => class<`Duration`>;
type `decimal_date` <class<`Date`>> => double;
type `decimal_date.default` <class<`Date`>> => double;
type `dhours` <double> => class<`Duration`>;
type `.difftime_from_num` <double[], character> => class<`difftime`>;
type `.difftime_from_pieces` <list<double>> => double;
type `dminutes` <double> => class<`Duration`>;
type `dseconds` <double> => class<`Duration`>;
type `dst` <class<`Date`>> => logical;
type `dst.default` <class<`Date`>> => logical;
type `duration` <character | double | null, character, ...> => class<`Duration`>;
type `.duration_from_num` <double, character> => class<`Duration`>;
type `.duration_from_units` <list<double>> => class<`Duration`>;
type `dweeks` <double> => class<`Duration`>;
type `.enclose` <character> => character;
type `.enclosed.na` <character[]> => logical[];
type `f` <class<`difftime`>, double, ...> => double;
type `fast_strptime` <character[], character, character, logical, integer> => class<`POSIXct`, `POSIXt`>;
type `filter` <character[]> => logical[];
type `floor_date` <class<`POSIXct`, `POSIXt`>, character, any> => class<`POSIXct`, `POSIXt`>;
type `floor_multi_unit` <double, double> => double;
type `floor_multi_unit1` <double, double> => double;
type `force_tz` <class<`Date`> | class<`POSIXct`, `POSIXt`>, character, logical> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `force_tzs` <class<`POSIXct`, `POSIXt`>, character[], character, logical> => class<`POSIXct`, `POSIXt`>;
type `fun` <any, any> => null;
type `FUN` <character | class<`Interval`> | class<`Period`>, any, ...> => class<`Period`> | <character[]> => character | <character, character[], logical> => (character[] | null) | <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>> => integer | <character[]> => character[] | <character[] | double> => character[] | <class<`Period`>, any, ...> => class<`Period`> | <character> => (class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>);
type `.get_locale_regs` <character> => list<character[] | list<character[]>>;
type `.get_train_set` <character[]> => character[];
type `guess_formats` <character[], character[], character, logical, logical> => (character[] | null);
type `hm` <..., logical, logical> => class<`Period`>;
type `hms` <..., logical, logical> => class<`Period`>;
type `hour` <class<`POSIXlt`, `POSIXt`> | class<`Date`> | class<`POSIXct`, `POSIXt`>> => integer[];
type `hour<-` <class<`POSIXlt`, `POSIXt`>, double> => class<`POSIXlt`, `POSIXt`> | <class<`Date`>, double> => class<`POSIXlt`, `POSIXt`> | <class<`POSIXct`, `POSIXt`>, double> => class<`POSIXct`, `POSIXt`> | <class<`POSIXct`, `POSIXt`> | class<`Date`> | class<`POSIXlt`, `POSIXt`>, double> => (class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>);
type `hour.default` <class<`POSIXlt`, `POSIXt`> | class<`Date`> | class<`POSIXct`, `POSIXt`>> => integer[];
type `hours` <double | integer[]> => class<`Period`>;
type `initialize` <class<`Period`>, ...> => class<`Period`>;
type `int_aligns` <class<`Interval`>, class<`Interval`>> => logical;
type `int_diff` <class<`POSIXct`, `POSIXt`>> => class<`Interval`>;
type `int_end` <class<`Interval`>> => class<`POSIXct`, `POSIXt`>;
type `int_end<-` <class<`Interval`>, class<`Date`>> => class<`Interval`>;
type `interval` <character | class<`Date`> | class<`POSIXct`, `POSIXt`>, null | class<`Date`> | class<`POSIXct`, `POSIXt`>, character> => class<`Interval`>;
type `int_flip` <class<`Interval`>> => class<`Interval`>;
type `int_length` <class<`Interval`>> => double;
type `int_overlaps` <class<`Interval`>, class<`Interval`>> => logical;
type `int_shift` <class<`Interval`>, class<`Duration`>> => class<`Interval`>;
type `int_standardize` <class<`Interval`>> => class<`Interval`>;
type `int_start` <class<`Interval`>> => class<`POSIXct`, `POSIXt`>;
type `int_start<-` <class<`Interval`>, class<`Date`>> => class<`Interval`>;
type `.int_to_period` <class<`Interval`>> => class<`Period`>;
type `is.Date` <class<`Date`> | class<`difftime`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>> => logical;
type `is.difftime` <class<`Date`> | class<`difftime`>> => logical;
type `is.duration` <class<`Date`> | class<`Duration`>> => logical;
type `is.instant` <class<`Date`> | class<`difftime`> | class<`Duration`> | class<`Period`> | double> => logical;
type `is.interval` <class<`Duration`> | class<`Interval`> | class<`Period`> | double[]> => logical;
type `is.period` <class<`Date`> | class<`Period`>> => logical;
type `is.POSIXct` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => logical;
type `is.POSIXlt` <class<`POSIXct`, `POSIXt`>> => logical;
type `is.POSIXt` <character | class<`Date`> | class<`POSIXct`, `POSIXt`>> => logical;
type `is.timepoint` <class<`Date`> | class<`difftime`> | class<`Duration`> | class<`Period`> | double> => logical;
type `is.timespan` <class<`Date`> | class<`Duration`>> => logical;
type `leap_year` <class<`Date`> | double> => logical;
type `.local` <double> => class<`Duration`> | <class<`POSIXct`, `POSIXt`>, null> => class<`Date`> | <class<`Interval`>> => class<`Duration`> | <character> => class<`Duration`> | <class<`Period`>> => class<`Duration`> | <class<`Period`>, character, ...> => double | <class<`difftime`>> => class<`Duration`> | <class<`Duration`>, character, ...> => double[] | <class<`Date`>, character> => class<`POSIXct`, `POSIXt`> | <class<`POSIXct`, `POSIXt`>, character> => class<`POSIXct`, `POSIXt`> | <double, class<`POSIXct`, `POSIXt`>> => class<`Date`>;
type `.local_parse` <character[], logical> => (class<`POSIXct`, `POSIXt`> | null);
type `local_time` <class<`POSIXct`, `POSIXt`>, character[] | null, character> => class<`difftime`>;
type `%m-%` <class<`Date`>, class<`Period`>> => class<`Date`> | <class<`Date`>, class<`Period`>> => class<`Date`>;
type `%m+%` <class<`Date`>, class<`Period`>> => class<`Date`> | <class<`POSIXct`, `POSIXt`>, class<`Period`>> => class<`POSIXct`, `POSIXt`> | <class<`Date`> | class<`POSIXct`, `POSIXt`>, class<`Period`>> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `make_date` <double, double, integer> => class<`Date`>;
type `make_datetime` <double, double, double, integer, integer, double[], character> => class<`POSIXct`, `POSIXt`>;
type `make_difftime` <double | null, character, ...> => class<`difftime`>;
type `mday` <class<`POSIXct`, `POSIXt`> | class<`Date`> | class<`POSIXlt`, `POSIXt`>> => integer[];
type `mday.default` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>> => integer[];
type `minute` <class<`POSIXlt`, `POSIXt`> | class<`Date`> | class<`POSIXct`, `POSIXt`>> => integer[];
type `minute<-` <class<`POSIXct`, `POSIXt`>, double> => class<`POSIXct`, `POSIXt`> | <class<`POSIXlt`, `POSIXt`>, double> => class<`POSIXlt`, `POSIXt`> | <class<`POSIXct`, `POSIXt`> | class<`Date`> | class<`POSIXlt`, `POSIXt`>, double> => (class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>) | <class<`Date`>, double> => class<`POSIXlt`, `POSIXt`>;
type `minute.default` <class<`POSIXlt`, `POSIXt`> | class<`Date`> | class<`POSIXct`, `POSIXt`>> => integer[];
type `minutes` <double> => class<`Period`>;
type `.mklt` <list<double>, character> => class<`POSIXlt`, `POSIXt`>;
type `month` <class<`Date`> | double[] | class<`Period`> | class<`POSIXct`, `POSIXt`>, logical, any, any> => (class<`factor`, `ordered`> | double[]);
type `month<-` <class<`Date`>, double> => class<`Date`> | <class<`Date`>, double> => class<`Date`>;
type `month.default` <class<`Date`> | class<`POSIXct`, `POSIXt`>, logical, logical, any> => (class<`factor`, `ordered`> | double[]);
type `month.numeric` <double[], logical, any, any> => (class<`factor`, `ordered`> | double[]);
type `month.Period` <class<`Period`>, logical, logical, any> => double[];
type `months.numeric` <double | integer[], any> => class<`Period`>;
type `ms` <..., logical, logical> => class<`Period`>;
type `multiply_duration_by_number` <class<`Duration`>, double | integer[]> => class<`Duration`>;
type `multiply_period_by_number` <class<`Period`>, double | integer[]> => class<`Period`>;
type `now` <character> => class<`POSIXct`, `POSIXt`>;
type `.number_to_interval` <class<`difftime`> | class<`Duration`> | class<`Period`> | double, class<`Date`>, ...> => class<`Interval`>;
type `.num_to_date` <character[] | double> => character[];
type `.parse_date_time` <character[], character[], character, any, any> => class<`POSIXct`, `POSIXt`>;
type `parse_date_time` <character[], any, character, double, any, character, any, logical, logical, logical> => class<`POSIXct`, `POSIXt`>;
type `parse_date_time2` <character, character, character, logical, logical, integer> => (class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>);
type `parse_dt` <character[], character, logical, logical, integer> => (^double[] | null | list<double>);
type `.parse_hms` <..., character, logical> => class<`matrix`>;
type `parse_interval` <character, character> => class<`Interval`>;
type `.parse_iso_dt` <character[], character> => class<`POSIXct`, `POSIXt`>;
type `parse_period` <character[]> => class<`Period`>;
type `parse_period_unit` <character> => list<double | character>;
type `.parse_xxx` <..., character, any, null | character, character, double> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `.parse_xxx_hms` <..., character[], double, any, character, character> => class<`POSIXct`, `POSIXt`>;
type `period` <character | double[] | null, character[], ...> => class<`Period`>;
type `.period_from_num` <double[], character[]> => class<`Period`>;
type `.period_from_units` <list<class<`difftime`> | double[]>> => class<`Period`>;
type `period_to_seconds` <class<`Period`>> => double;
type `pm` <class<`Date`>> => logical;
type `<=.POSIXt` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`POSIXct`, `POSIXt`>> => logical[];
type `<.POSIXt` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`POSIXct`, `POSIXt`>> => logical[];
type `==.POSIXt` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`POSIXct`, `POSIXt`>> => logical[];
type `>=.POSIXt` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`POSIXct`, `POSIXt`>> => logical[];
type `>.POSIXt` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`POSIXct`, `POSIXt`>> => logical[];
type `!=.POSIXt` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`POSIXct`, `POSIXt`>> => logical[];
type `pretty_dates` <class<`Date`>, double, ...> => class<`POSIXct`, `POSIXt`>;
type `pretty_point` <class<`Date`>, character, double, logical, ...> => class<`POSIXct`, `POSIXt`>;
type `pretty_unit` <class<`difftime`>, ...> => character;
type `quarter` <class<`Date`>, logical, double> => double[];
type `.quick_month_add` <class<`Date`> | class<`POSIXct`, `POSIXt`>, double[]> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `reclass_date` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>> => (class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>);
type `reclass_date.Date` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`Date`>> => class<`Date`>;
type `reclass_date_maybe` <class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`Date`> | class<`POSIXct`, `POSIXt`>, any> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `reclass_date.POSIXct` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`POSIXct`, `POSIXt`>> => class<`POSIXct`, `POSIXt`>;
type `reclass_date.POSIXlt` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, class<`POSIXlt`, `POSIXt`>> => class<`POSIXlt`, `POSIXt`>;
type `recognize` <class<`Date`> | double> => logical;
type `.rep_maybe` <class<`POSIXct`, `POSIXt`> | double[], double> => (class<`POSIXct`, `POSIXt`> | double[]);
type `rollback` <class<`Date`> | class<`POSIXct`, `POSIXt`>, logical, logical> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `round_date` <class<`POSIXct`, `POSIXt`>, character, any> => class<`POSIXct`, `POSIXt`>;
type `second` <class<`POSIXlt`, `POSIXt`> | class<`Date`> | class<`POSIXct`, `POSIXt`>> => double[];
type `second<-` <class<`POSIXlt`, `POSIXt`>, double> => class<`POSIXlt`, `POSIXt`> | <class<`POSIXct`, `POSIXt`>, double> => class<`POSIXct`, `POSIXt`> | <class<`Date`>, double> => class<`POSIXlt`, `POSIXt`> | <class<`POSIXct`, `POSIXt`> | class<`Date`> | class<`POSIXlt`, `POSIXt`>, double> => (class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>);
type `second.default` <class<`POSIXlt`, `POSIXt`> | class<`Date`> | class<`POSIXct`, `POSIXt`>> => double[];
type `seconds` <double> => class<`Period`>;
type `seconds_to_unit` <double[], character> => double[];
type `.select_formats` <integer[], logical> => character[];
type `semester` <class<`Date`>, logical> => double[];
type `.shift_wday_names` <character[], integer> => character[];
type `standardise_date_names` <character[]> => character[];
type `standardise_difftime_names` <character[]> => character[];
type `standardise_period_names` <character> => character;
type `.strptime` <character[], character, character, any, any> => (class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>);
type `.substitute_formats` <character, character[], logical> => (character[] | null);
type `.train_formats` <character[], character[], any> => integer[];
type `trunc_multi_unit` <class<`POSIXct`, `POSIXt`>, character, double> => class<`POSIXlt`, `POSIXt`>;
type `trunc_one` <character> => character[];
type `tz` <character | class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>> => character;
type `tz.default` <character | class<`Date`> | class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>> => character;
type `.units_within_seconds` <double, character> => list<double>;
type `update.Date` <class<`Date`>, ...> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `update.POSIXt` <class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>, ..., logical, double, logical | null> => (class<`POSIXct`, `POSIXt`> | class<`POSIXlt`, `POSIXt`>);
type `validityMethod` <class<`Duration`>> => logical | <class<`Period`>> => logical | <class<`Interval`>> => logical;
type `wday` <class<`Date`> | double[] | class<`POSIXct`, `POSIXt`>, logical, any, any, any> => (class<`factor`, `ordered`> | double[]);
type `wday.default` <class<`Date`> | class<`POSIXct`, `POSIXt`>, logical, logical, double, any> => (class<`factor`, `ordered`> | double[]);
type `wday.numeric` <double[], logical, any, double, any> => (class<`factor`, `ordered`> | double[]);
type `.with_tz` <class<`POSIXct`, `POSIXt`>, character> => class<`POSIXct`, `POSIXt`>;
type `with_tz` <class<`POSIXct`, `POSIXt`>, character> => class<`POSIXct`, `POSIXt`>;
type `yday` <class<`Date`>> => double;
type `yday<-` <class<`Date`>, double> => class<`Date`>;
type `yday.default` <class<`Date`>> => double;
type `year` <class<`Date`> | class<`Period`> | class<`POSIXct`, `POSIXt`>> => double[];
type `year.default` <class<`Date`> | class<`POSIXct`, `POSIXt`>> => double[];
type `year.Period` <class<`Period`>> => double[];
type `years` <double> => class<`Period`>;
type `ymd` <..., logical, null | character, character, double> => (class<`Date`> | class<`POSIXct`, `POSIXt`>);
type `ymd_hms` <..., logical, character, character, double> => class<`POSIXct`, `POSIXt`>;
