type `an` <double> => complex;
type `Arma` <double[], double[]> => class<`Arma`>;
type `as.Arma` <class<`Zpg`>, ...> => class<`Arma`>;
type `as.Arma.Zpg` <class<`Zpg`>, ...> => class<`Arma`>;
type `bartlett` <double> => double[];
type `bilinear` <class<`Zpg`> | complex[], ...> => class<`Zpg`>;
type `bilinear.default` <complex[], complex[], complex, double, ...> => class<`Zpg`>;
type `bilinear.Zpg` <class<`Zpg`>, double, ...> => class<`Zpg`>;
type `blackman` <double> => double[];
type `boxcar` <double> => double[];
type `butter` <class<`FilterOfOrder`> | double, ...> => class<`Arma`>;
type `butter.default` <double, double, character[], character[], ...> => class<`Arma`>;
type `butter.FilterOfOrder` <class<`FilterOfOrder`>, ...> => class<`Arma`>;
type `buttord` <double, double, double, double> => class<`FilterOfOrder`>;
type `cheb` <double, double[]> => double[];
type `cheb1ord` <double, double, double, double> => class<`FilterOfOrder`>;
type `chebwin` <double, double> => double[];
type `cheby1` <class<`FilterOfOrder`> | double, ...> => class<`Arma`>;
type `cheby1.default` <double, double, double, character[], character[], ...> => class<`Arma`>;
type `cheby1.FilterOfOrder` <class<`FilterOfOrder`>, double, double, character, ...> => class<`Arma`>;
type `cheby2` <double, ...> => class<`Arma`>;
type `cheby2.default` <double, double, double, character[], character[], ...> => class<`Arma`>;
type `chirp` <double[], double, double, double, character[], double> => double[];
type `conv` <complex[], complex[]> => complex[];
type `decimate` <double[], double, double, character> => double[];
type `ellip` <class<`FilterOfOrder`> | double, ...> => class<`Arma`>;
type `ellip.default` <double, double, double, double, character[], character[], ...> => class<`Arma`>;
type `ellip.FilterOfOrder` <class<`FilterOfOrder`>, double, double, double, character, ...> => class<`Arma`>;
type `ellipke` <double[], double> => list<class<`array`>>;
type `ellipord` <double, double, double, double> => class<`FilterOfOrder`>;
type `ellip_ws` <double, double, double> => double;
type `f` <double> => double;
type `fftfilt` <class<`Ma`> | double[], double[], null> => double[];
type `filter` <double[] | class<`Arma`> | class<`MedianFilter`>, ...> => (class<`ts`> | double[]) | <character[]> => logical[];
type `filter.Arma` <class<`Arma`>, double[], ...> => class<`ts`>;
type `filter.default` <double[], double[], double[], any, any, any, ...> => class<`ts`>;
type `filter.MedianFilter` <class<`MedianFilter`>, double[], ...> => double[];
type `FilterOfOrder` <double, double[], character, ...> => class<`FilterOfOrder`>;
type `filtfilt` <class<`Arma`> | double[], ...> => double[];
type `filtfilt.Arma` <class<`Arma`>, double[], ...> => double[];
type `filtfilt.default` <double[], double[], double[], ...> => double[];
type `fir1` <double, double[], character[], double[], character | logical> => class<`Ma`>;
type `fir2` <double, double[], double[], double, double, double[]> => class<`Ma`>;
type `flattopwin` <double, character[]> => double[];
type `freqs` <double[], ...> => class<`freqs`>;
type `freqs.default` <double[], double[], double[], ...> => class<`freqs`>;
type `freqz` <class<`Arma`> | class<`Ma`> | double[], ...> => class<`freqz`>;
type `freqz.Arma` <class<`Arma`>, ...> => class<`freqz`>;
type `freqz.default` <class<`Ma`> | double[], double[], double, null, double, ...> => class<`freqz`>;
type `freqz.Ma` <class<`Ma`>, ...> => class<`freqz`>;
type `gausswin` <double, double> => double[];
type `grpdelay` <class<`Arma`> | complex[], ...> => class<`grpdelay`>;
type `grpdelay.Arma` <class<`Arma`>, ...> => class<`grpdelay`>;
type `grpdelay.default` <complex[], complex[], double, logical, double, ...> => class<`grpdelay`>;
type `hamming` <double> => double[];
type `hanning` <double> => double[];
type `ifft` <complex[]> => complex[];
type `impz` <class<`Arma`> | double[], ...> => class<`impz`>;
type `impz.Arma` <class<`Arma`>, ...> => class<`impz`>;
type `impz.default` <double[], double[], null, double, ...> => class<`impz`>;
type `interp` <double[], double, double, double> => double[];
type `interp1` <integer[], double[], double[], character, logical, ...> => ^double[];
type `kaiser` <double, double> => double[];
type `kaiserord` <double[], double[], double, double> => class<`FilterOfOrder`>;
type `lookup` <integer[], double[]> => double[] | <integer[], double[]> => double[];
type `Ma` <class<`Ma`> | double[]> => class<`Ma`>;
type `medfilt1` <double[], double, ...> => double[];
type `MedianFilter` <double> => class<`MedianFilter`>;
type `mkpp` <integer[], class<`matrix`>, double> => class<`pp`>;
type `myacosh` <complex[]> => complex[];
type `ncauer` <double, double, double> => class<`Zpg`>;
type `pchip` <integer[], double[], double[]> => double[];
type `pchip_deriv` <integer[], double[]> => double[];
type `plot.grpdelay` <class<`grpdelay`>, character, character, character, ...> => null;
type `poly` <complex[] | class<`matrix`>> => complex[];
type `polyval` <double[] | class<`Ma`>, complex[]> => complex[];
type `postpad` <complex[] | class<`Ma`>, double> => complex[];
type `ppval` <class<`pp`>, double[]> => double[];
type `print.grpdelay` <class<`grpdelay`>, ...> => class<`grpdelay`>;
type `remez` <double, double[], double[], double[], character[], double> => class<`Ma`>;
type `resample` <double[], integer, double, double> => double[];
type `roots` <double[], character[]> => complex[];
type `sftrans` <class<`Zpg`>, ...> => class<`Zpg`>;
type `sftrans.default` <complex[], complex[], complex, double, logical, ...> => class<`Zpg`>;
type `sftrans.Zpg` <class<`Zpg`>, double, logical, ...> => class<`Zpg`>;
type `sgolay` <double, double, double, any> => class<`sgolayFilter`>;
type `sgolayfilt` <double[], double, double, double, double> => double[];
type `sinc` <double[]> => double[];
type `specgram` <class<`matrix`> | double[], double, double, double[], double> => class<`specgram`>;
type `triang` <double> => double[];
type `unwrap` <double[], double, double> => double[];
type `Zpg` <complex[], complex[], complex> => class<`Zpg`>;
type `zplane` <class<`Arma`> | class<`Zpg`> | double[], ...> => null;
type `zplane.Arma` <class<`Arma`>, ...> => null;
type `zplane.default` <double[], double[], ...> => null;
type `zplane.Zpg` <class<`Zpg`>, ...> => null;
