type `%||%` <character[] | integer | null, any> => (character[] | integer | null);
type `altrep_vals` < > => integer[];
type `as.col_spec` <character | null | list<class<`collector`, `collector_double`> | class<`collector`, `collector_character`> | class<`collector`, `collector_double`>>> => class<`col_spec`>;
type `as.col_spec.character` <character> => class<`col_spec`>;
type `as.col_spec.list` <list<class<`collector`, `collector_double`> | class<`collector`, `collector_character`> | class<`collector`, `collector_double`>>> => class<`col_spec`>;
type `as.col_spec.NULL` <null> => class<`col_spec`>;
type `check_encoding` <character> => logical;
type `check_path` <character> => character;
type `check_tz` <character> => logical;
type `chr_to_file` <character, environment> => character;
type `col_character` <...> => class<`collector`, `collector_character`>;
type `col_date` <character, ...> => class<`collector`, `collector_date`>;
type `col_datetime` <character, ...> => class<`collector`, `collector_datetime`>;
type `col_double` <...> => class<`collector`, `collector_double`>;
type `col_guess` <...> => class<`collector`, `collector_guess`>;
type `col_integer` <...> => class<`collector`, `collector_integer`>;
type `collapse_transformer` <character, ...> => class<`function`>;
type `collector` <character, ...> => (class<`collector`, `collector_character`> | class<`collector`, `collector_date`> | class<`collector`, `collector_datetime`> | class<`collector`, `collector_double`> | class<`collector`, `collector_guess`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_logical`> | class<`collector`, `collector_number`> | class<`collector`, `collector_skip`> | class<`collector`, `collector_time`>);
type `col_number` <...> => class<`collector`, `collector_number`>;
type `cols` <..., class<`collector`, `collector_guess`> | class<`collector`, `collector_skip`>, null> => class<`col_spec`>;
type `cols_condense` <class<`col_spec`>> => class<`col_spec`>;
type `col_skip` <...> => class<`collector`, `collector_skip`>;
type `cols_only` <...> => class<`col_spec`>;
type `col_spec` <list<any>, class<`collector`, `collector_guess`> | class<`collector`, `collector_skip`>, null> => class<`col_spec`>;
type `col_time` <character, ...> => class<`collector`, `collector_time`>;
type `col_types_standardise` <class<`col_spec`>, character[], class<`formula`, `quosure`> | class<`list`, `quosures`>> => class<`col_spec`>;
type `date_names_lang` <character> => class<`date_names`>;
type `default_locale` < > => class<`locale`>;
type `env_to_logical` <character, logical> => logical;
type `filter` <character[]> => logical[];
type `fmt_num` <integer> => character;
type `fun` <any, character> => logical | <...> => null;
type `FUN` <class<`collector`, `collector_character`> | class<`collector`, `collector_double`>> => character | <class<`collector`, `collector_character`> | class<`collector`, `collector_double`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_number`> | class<`collector`, `collector_skip`> | class<`collector`, `collector_guess`>> => logical | <character[]> => class<`character`, `glue`> | <class<`table`>> => integer | <double[] | character | class<`Date`> | class<`POSIXct`, `POSIXt`>> => (double[] | character) | <list<character[]>> => class<`table`> | <class<`table`>> => integer | <character> => character | <character> => (class<`collector`, `collector_character`> | class<`collector`, `collector_double`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_number`> | class<`collector`, `collector_skip`>) | <class<`collector`, `collector_character`> | class<`collector`, `collector_double`> | class<`collector`, `collector_skip`>> => character;
type `fwf_col_names` <character[], integer> => character[];
type `fwf_cols` <...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `fwf_empty` <character, double, character[], character, integer> => list<^integer[] | character[]>;
type `fwf_positions` <double[], double[], character[]> => class<`data.frame`, `tbl`, `tbl_df`>;
type `fwf_widths` <double[], character[]> => class<`data.frame`, `tbl`, `tbl_df`>;
type `gen_character` <double, double, double, character[], ...> => character[];
type `gen_character_` <double, double, double, character, double, double> => character[];
type `gen_date` <double, class<`Date`>, class<`Date`>, ...> => class<`Date`>;
type `gen_datetime` <double, class<`POSIXct`, `POSIXt`>, class<`POSIXct`, `POSIXt`>, character, ...> => class<`POSIXct`, `POSIXt`>;
type `gen_double` <double, class<`function`>, ...> => double[];
type `gen_factor` <double, null, logical, integer, ...> => class<`factor`>;
type `gen_integer` <double, class<`Date`> | integer, class<`Date`> | integer, null, ...> => (class<`Date`> | integer[]);
type `gen_logical` <double, ...> => logical[];
type `gen_name` <integer> => character[];
type `gen_tbl` <double, double, character | null | list<class<`collector`, `collector_double`>>, any, double> => class<`data.frame`, `tbl`, `tbl_df`>;
type `gen_time` <double, double, class<`difftime`, `hms`>, logical, ...> => class<`difftime`, `hms`>;
type `get` <character, ...> => class<`collector`, `collector_date`> | <character, ...> => class<`collector`, `collector_datetime`> | <...> => class<`collector`, `collector_double`> | <...> => class<`collector`, `collector_number`> | <character, ...> => class<`collector`, `collector_time`> | <...> => class<`collector`, `collector_logical`>;
type `get_vroom_write_opts` <character, character, logical> => integer;
type `guess_type` <character[], character[], class<`locale`>, logical> => (class<`collector`, `collector_date`> | class<`collector`, `collector_datetime`> | class<`collector`, `collector_double`> | class<`collector`, `collector_logical`> | class<`collector`, `collector_number`> | class<`collector`, `collector_time`>);
type `guess_type_` <character[], character[], class<`locale`>, logical> => character;
type `has_trailing_newline` <character> => logical;
type `is.collector` <class<`collector`, `collector_character`> | class<`collector`, `collector_double`> | class<`collector`, `collector_integer`> | class<`collector`, `collector_number`> | class<`collector`, `collector_skip`> | class<`collector`, `collector_guess`>> => logical;
type `is.date_names` <class<`date_names`>> => logical;
type `is_named` <character> => logical;
type `is_url` <character> => logical;
type `locale` <character, character, character, character, character, character, character> => class<`locale`>;
type `make_names` <null | character[], double> => character[];
type `output_column` <double[] | character | class<`Date`> | class<`POSIXct`, `POSIXt`>> => (double[] | character);
type `output_column.character` <character | double[]> => (character | double[]);
type `output_column.default` <class<`Date`>> => character;
type `output_column.double` <character | double[]> => (character | double[]);
type `output_column.POSIXt` <class<`POSIXct`, `POSIXt`>> => character;
type `s3_register` <character, character, null> => null;
type `show_spec_summary` <class<`data.frame`, `tbl`, `tbl_df`>, integer, class<`locale`>> => class<`data.frame`, `tbl`, `tbl_df`>;
type `spec` <class<`data.frame`, `tbl`, `tbl_df`>> => class<`col_spec`>;
type `standardise_one_path` <character, logical> => character;
type `standardise_path` <character> => list<character>;
type `.transformer` <character, environment> => (character | class<`character`, `glue`>);
type `vroom` <character, character | null, logical, null | character | list<class<`collector`, `collector_double`> | class<`collector`, `collector_character`>>, any, null, double, double, character[], character, character, logical> => class<`data.frame`, `tbl`, `tbl_df`>;
type `vroom_` <list<character>, character | null, character, logical, logical, logical, character, double, double, logical, logical | character, class<`col_spec`>> => list<any>;
type `vroom_altrep` <character[] | logical | null> => class<`vroom_altrep`>;
type `vroom_enquo` <class<`formula`, `quosure`>> => (class<`formula`, `quosure`> | class<`list`, `quosures`>);
type `vroom_example` <character> => character;
type `vroom_examples` <null> => character[];
type `vroom_fwf` <character, class<`data.frame`, `tbl`, `tbl_df`> | list<^integer[] | character[]>, null, null, null, class<`locale`>, character[], character, logical, double, double, double> => class<`data.frame`, `tbl`, `tbl_df`>;
type `vroom_fwf_` <list<character>, double[], ^integer[] | double[], logical, character[], class<`col_spec`>, class<`formula`, `quosure`>, double, character, double, null, character[]> => list<character[]>;
type `vroom_lines` <character, double, double, logical, any, integer, logical> => character[];
type `vroom_materialize` <class<`data.frame`>, logical> => class<`data.frame`>;
type `vroom_progress` < > => logical;
type `vroom_select` <class<`data.frame`, `tbl`, `tbl_df`>, class<`formula`, `quosure`> | class<`list`, `quosures`>, any> => class<`data.frame`, `tbl`, `tbl_df`>;
type `vroom_str` <character[] | class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`> | double[]> => null;
type `vroom_str_` <character[] | double[]> => character;
type `vroom_str.data.frame` <class<`data.frame`> | class<`data.frame`, `tbl`, `tbl_df`>> => null;
type `vroom_str.default` <character[] | double[]> => null;
type `vroom_threads` < > => integer;
type `vroom_use_altrep_big_int` < > => logical;
type `vroom_use_altrep_chr` < > => logical;
type `vroom_use_altrep_date` < > => logical;
type `vroom_use_altrep_dbl` < > => logical;
type `vroom_use_altrep_dttm` < > => logical;
type `vroom_use_altrep_fct` < > => logical;
type `vroom_use_altrep_int` < > => logical;
type `vroom_use_altrep_num` < > => logical;
type `vroom_use_altrep_time` < > => logical;
type `vroom_write` <class<`data.frame`>, character, character, character, logical, logical, character[], character[], logical, integer, logical> => class<`data.frame`>;
type `vroom_write_` <class<`data.frame`>, character, character, character, logical, logical, integer, integer, logical, double> => null;
type `vroom_write_opts` < > => integer[];
type `whitespace_columns_` <character, double, integer, character> => list<integer[]>;
