type `::` <character, null, logical, null | character, null, null, double, double, character[], character, character, logical, logical, logical, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, character, integer, logical> => struct<`package`:character[], `ondiskversion`:character[], `loadedversion`:^character[], `path`:character[], `loadedpath`:^character[], `attached`:logical[], `is_base`:logical[], `date`:double[], `source`:character[], `md5ok`:^logical[], `library`:character[]>;
type `.transformer` <character, environment> => character;
type `%||%` <null | character[] | integer, language | integer> => character[] | integer;
type `altrep_opts_vals` < > => integer[];
type `as.col_spec.character` <character> => struct<`cols`:tuple<tuple<>>, `default`:tuple<>> | struct<`cols`:list<tuple<>>, `default`:tuple<>>;
type `as.col_spec.col_spec` <struct<`cols`:tuple<>, `default`:tuple<>> | struct<`cols`:tuple<tuple<>, tuple<>, tuple<>, tuple<>>, `default`:tuple<>> | struct<`cols`:tuple<struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>>, `default`:tuple<>>> => struct<`cols`:tuple<>, `default`:tuple<>> | struct<`cols`:tuple<tuple<>, tuple<>, tuple<>, tuple<>>, `default`:tuple<>> | struct<`cols`:tuple<struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>>, `default`:tuple<>>;
type `as.col_spec.list` <tuple<tuple<>, tuple<>> | tuple<struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>> | struct<`gear`:struct<`levels`:character[], `ordered`:logical, `include_na`:logical>> | struct<`hp`:character> | struct<`hp`:tuple<>, `cyl`:tuple<>, `gear`:struct<`levels`:null, `ordered`:logical, `include_na`:logical>>> => struct<`cols`:tuple<tuple<>, tuple<>>, `default`:tuple<>> | struct<`cols`:tuple<struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>>, `default`:tuple<>> | struct<`cols`:struct<`gear`:struct<`levels`:character[], `ordered`:logical, `include_na`:logical>>, `default`:tuple<>> | struct<`cols`:struct<`hp`:tuple<>>, `default`:tuple<>>;
type `as.col_spec.NULL` <null> => struct<`cols`:tuple<>, `default`:tuple<>>;
type `chr_to_file` <character, environment> => character;
type `col_character` <null> => tuple<>;
type `col_date` <character, null> => struct<`format`:character>;
type `col_double` <null | any => any> => tuple<> | struct<`f`:any => any, `min`:double, `max`:double>;
type `col_factor` <null | character[], logical, logical, null> => struct<`levels`:character[], `ordered`:logical, `include_na`:logical> | struct<`levels`:null, `ordered`:logical, `include_na`:logical>;
type `col_guess` <null> => tuple<>;
type `col_integer` <null> => tuple<>;
type `col_number` <null> => tuple<>;
type `col_skip` <null> => tuple<>;
type `col_spec` <tuple<> | tuple<tuple<>> | list<tuple<>> | tuple<struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>> | struct<`a`:tuple<>> | struct<`column_one`:tuple<>, `column_two`:tuple<>> | struct<`column_three`:tuple<>> | struct<`gear`:struct<`levels`:character[], `ordered`:logical, `include_na`:logical>> | struct<`hp`:tuple<>>, tuple<>> => struct<`cols`:tuple<>, `default`:tuple<>> | struct<`cols`:tuple<tuple<>>, `default`:tuple<>> | struct<`cols`:list<tuple<>>, `default`:tuple<>> | struct<`cols`:tuple<struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>>, `default`:tuple<>> | struct<`cols`:struct<`a`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`column_one`:tuple<>, `column_two`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`column_three`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`gear`:struct<`levels`:character[], `ordered`:logical, `include_na`:logical>>, `default`:tuple<>> | struct<`cols`:struct<`hp`:tuple<>>, `default`:tuple<>>;
type `col_time` <character, null> => struct<`format`:character>;
type `col_types_standardise` <struct<`cols`:tuple<tuple<>, tuple<>, tuple<>, tuple<>>, `default`:tuple<>> | struct<`cols`:tuple<>, `default`:tuple<>> | struct<`cols`:tuple<struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>>, `default`:tuple<>>, character[], language> => struct<`cols`:struct<`X1`:tuple<>, `X2`:tuple<>, `X3`:tuple<>, `X4`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`X1`:struct<`f`:any => any, `min`:double, `max`:double>, `X2`:struct<`f`:any => any, `min`:double, `max`:double>, `X3`:struct<`f`:any => any, `min`:double, `max`:double>, `X4`:struct<`f`:any => any, `min`:double, `max`:double>>, `default`:tuple<>>;
type `collapse_transformer` <character, character> => any => any;
type `collector` <character, null | null | any => any | character[]> => tuple<> | struct<`f`:any => any, `min`:double, `max`:double> | struct<`format`:character> | struct<`levels`:character[], `ordered`:logical, `include_na`:logical> | struct<`levels`:null, `ordered`:logical, `include_na`:logical>;
type `cols` <character | language, tuple<>> => struct<`cols`:struct<`a`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`column_one`:tuple<>, `column_two`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`column_three`:tuple<>>, `default`:tuple<>>;
type `cols_condense` <struct<`cols`:struct<`model`:tuple<>, `mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>>> => struct<`cols`:struct<`model`:tuple<>>, `default`:tuple<>>;
type `cols_only` <language> => struct<`cols`:struct<`a`:tuple<>>, `default`:tuple<>>;
type `date_names_lang` <character> => struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>;
type `default_locale` < > => struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>;
type `env_to_logical` <character, logical> => logical;
type `f` <integer, integer> => integer;
type `filter` <character[]> => logical[];
type `fmt_num` <integer> => character;
type `fun` <symbol, character> => null | logical | list<character | any => any>;
type `FUN` <tuple<> | struct<`f`:any => any, `min`:double, `max`:double> | struct<`levels`:character[], `ordered`:logical, `include_na`:logical> | struct<`levels`:null, `ordered`:logical, `include_na`:logical> | character[] | tuple<character[], character[]> | struct<`format`:character>> => tuple<> | struct<`levels`:null, `ordered`:logical, `include_na`:logical> | character | integer[];
type `fwf_col_names` <character[], integer> => character[];
type `fwf_cols` <double[]> => struct<`begin`:integer[], `end`:integer[], `col_names`:character[]>;
type `fwf_empty` <character, double, character[], character, integer> => struct<`begin`:integer[], `end`:^integer[], `col_names`:character[]>;
type `fwf_positions` <double[], double[], character[]> => struct<`begin`:double[], `end`:double[], `col_names`:character[]>;
type `fwf_widths` <double[], character[]> => struct<`begin`:double[], `end`:double[], `col_names`:character[]>;
type `gen_character` <double, double, double, character[], null> => character[];
type `gen_character_` <double, double, double, character, double, double> => character[];
type `gen_date` <double, double, double, character | null> => double[];
type `gen_datetime` <double, double, double, character, null> => double[];
type `gen_double` <double, any => any, null | double> => double[];
type `gen_factor` <double, null, logical, integer, null> => integer[];
type `gen_integer` <double, double, double, null, null> => double[];
type `gen_logical` <double, null> => logical[];
type `gen_name` <integer> => character[];
type `gen_tbl` <double, double, null | character | tuple<struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>, struct<`f`:any => any, `min`:double, `max`:double>>, language, double> => struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[]>;
type `gen_time` <double, double, double, logical, character | null> => double[];
type `get` <character | null, null> => struct<`format`:character> | tuple<>;
type `get_vroom_write_opts` <character, character, logical> => integer;
type `guess_type` <character[], character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => tuple<> | struct<`format`:character>;
type `guess_type_` <^character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, logical> => character;
type `has_trailing_newline` <character> => logical;
type `is_named` <character[]> => logical;
type `is_url` <character> => logical;
type `is.collector` <tuple<>> => logical;
type `is.date_names` <struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>> => logical;
type `locale` <character, character, character, character, character, character, character> => struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>;
type `make_names` <null, double> => character[];
type `output_column.character` <character[]> => character[];
type `output_column.default` <double> => character;
type `output_column.double` <double[]> => double[];
type `output_column.POSIXt` <double> => character;
type `s3_register` <character, character, null> => null;
type `show_spec_summary` <struct<`a`:double, `b`:double>, integer, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>> => struct<`a`:double, `b`:double>;
type `spec` <struct<`a`:double, `b`:double>> => struct<`cols`:struct<`a`:tuple<>, `b`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`first`:tuple<>, `last`:tuple<>, `state`:tuple<>, `ssn`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`model`:tuple<>, `mpg`:tuple<>, `cyl`:tuple<>, `disp`:tuple<>, `hp`:tuple<>, `drat`:tuple<>, `wt`:tuple<>, `qsec`:tuple<>, `vs`:tuple<>, `am`:tuple<>, `gear`:tuple<>, `carb`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`name`:tuple<>, `ssn`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`package`:tuple<>, `ondiskversion`:tuple<>, `loadedversion`:tuple<>, `path`:tuple<>, `loadedpath`:tuple<>, `attached`:tuple<>, `is_base`:tuple<>, `date`:struct<`format`:character>, `source`:tuple<>, `md5ok`:tuple<>, `library`:tuple<>>, `default`:tuple<>> | struct<`cols`:struct<`x`:tuple<>, `y`:tuple<>>, `default`:tuple<>>;
type `standardise_one_path` <character, logical> => character | integer;
type `standardise_path` <character[]> => tuple<character> | struct<`mtcars_4.csv`:character, `mtcars_6.csv`:character, `mtcars_8.csv`:character>;
type `vroom` <character[], null | character, logical, null | struct<`gear`:struct<`levels`:character[], `ordered`:logical, `include_na`:logical>> | character[] | struct<`hp`:tuple<>, `cyl`:tuple<>, `gear`:struct<`levels`:null, `ordered`:logical, `include_na`:logical>> | tuple<tuple<>, tuple<>>, null | language | environment, null | character, double, double | environment, character[], character, character, logical, logical, logical, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, character[], integer, logical> => struct<`a`:double, `b`:double>;
type `vroom_` <tuple<character> | struct<`mtcars_4.csv`:character, `mtcars_6.csv`:character, `mtcars_8.csv`:character>, null | character, character, logical, logical, logical, character, double, double, logical, logical | character, null | struct<`gear`:struct<`levels`:character[], `ordered`:logical, `include_na`:logical>> | character[] | struct<`hp`:tuple<>, `cyl`:tuple<>, `gear`:struct<`levels`:null, `ordered`:logical, `include_na`:logical>> | tuple<tuple<>, tuple<>>, language | struct<``:language, ``:language, ``:language> | struct<`car`:language, ``:language>, null | character, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, integer, integer> => struct<`a`:double, `b`:double> | struct<`disp`:double[], `drat`:double[]> | struct<`model`:character[], `cyl`:double[], `gear`:double[]> | struct<`package`:character[], `ondiskversion`:character[], `loadedversion`:^character[], `path`:character[], `loadedpath`:^character[], `attached`:logical[], `is_base`:logical[], `date`:double[], `source`:character[], `md5ok`:^logical[], `library`:character[]> | struct<`package`:character[], `op`:character[], `type`:character[], `time`:double[], `size`:double[], `rows`:double[], `cols`:double[]> | struct<`V1`:character[]> | struct<`x`:double[], `y`:character[]> | struct<`x`:double[], `y`:double[]>;
type `vroom_altrep_opts` <null | character[] | logical> => integer;
type `vroom_enquo` <language> => language;
type `vroom_example` <character> => character;
type `vroom_examples` <null> => character[];
type `vroom_fwf` <character, struct<`begin`:integer[], `end`:^integer[], `col_names`:character[]> | struct<>, null, null, null, struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, character[], character, logical, double, double, double, character, integer, logical, character> => struct<`first`:character[], `last`:character[], `state`:character[], `ssn`:character[]>;
type `vroom_fwf_` <tuple<character>, double[], ^integer[] | double[], logical, character[], null, language, double, character, double, null, character[], struct<`date_names`:struct<`mon`:character[], `mon_ab`:character[], `day`:character[], `day_ab`:character[], `am_pm`:character[]>, `date_format`:character, `time_format`:character, `decimal_mark`:character, `grouping_mark`:character, `tz`:character, `encoding`:character>, double, integer, integer, logical> => struct<`first`:character[], `last`:character[], `state`:character[], `ssn`:character[]> | struct<`name`:character[], `ssn`:character[]>;
type `vroom_lines` <character, double, double, character, integer, logical> => character[];
type `vroom_materialize` <struct<`model`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, logical> => struct<`model`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `vroom_progress` < > => logical;
type `vroom_select` <struct<`a`:double, `b`:double>, language | struct<`car`:language, ``:language> | struct<``:language, ``:language, ``:language>> => struct<`a`:double, `b`:double>;
type `vroom_str_` <character[] | double[]> => character;
type `vroom_str.data.frame` <struct<`model`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> => null;
type `vroom_str.default` <character[] | double[]> => null;
type `vroom_threads` < > => integer;
type `vroom_use_altrep_chr` < > => logical;
type `vroom_use_altrep_date` < > => logical;
type `vroom_use_altrep_dbl` < > => logical;
type `vroom_use_altrep_dttm` < > => logical;
type `vroom_use_altrep_fct` < > => logical;
type `vroom_use_altrep_int` < > => logical;
type `vroom_use_altrep_num` < > => logical;
type `vroom_use_altrep_time` < > => logical;
type `vroom_write` <struct<`model`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character | integer, character, character, logical, logical, character[], character[], logical, integer, logical> => struct<`model`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>;
type `vroom_write_` <struct<`model`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, character, character, character, logical, logical, integer, integer, logical, double> => null;
type `vroom_write_connection_` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, integer, character, character, logical, integer, integer, logical, double, logical> => null;
type `vroom_write_opts` < > => integer[];
type `whitespace_columns_` <character, double, integer, character> => struct<`begin`:integer[], `end`:integer[]>;
