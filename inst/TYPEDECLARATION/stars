type `[.dimension` <struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null> | struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:struct<`start`:integer[], `end`:integer[]>> | struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null>, ??? | double[], ???> => struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null> | struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:struct<`start`:integer[], `end`:integer[]>> | struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null>;
type `[.dimensions` <struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `band`:struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:struct<`start`:integer[], `end`:integer[]>>> | struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `band`:struct<`from`:integer, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null>>, character[] | integer, ???, ???, logical> => struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>>;
type `[.intervals` <struct<`start`:integer[], `end`:integer[]>, double[], ???> => struct<`start`:integer[], `end`:integer[]>;
type `[.stars` <struct<`L7_ETMs.tif`:double[]>, logical, integer[] | ???, logical, language> => struct<`L7_ETMs.tif`:double[]>;
type `adrop.stars` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:integer[]>, integer[], ???> => struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:^integer[]>;
type `as_intervals` <integer[], logical> => struct<`start`:integer[], `end`:integer[]>;
type `as_tibble.stars` <struct<`L7_ETMs.tif`:double[]>, ???, logical, null> => struct<`x`:double[], `y`:double[], `band`:integer[], `L7_ETMs.tif`:double[]>;
type `c.stars` <struct<`L7_ETMs.tif`:double[]>, ? double> => struct<`L7_ETMs.tif`:double[]>;
type `combine_dimensions` <tuple<struct<`L7_ETMs.tif`:double[]>, struct<`L7_ETMs.tif`:double[]>>, double> => struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `band`:struct<`from`:double, `to`:double, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null>>;
type `contour.stars` <struct<`A1`:^double[]>, logical> => null;
type `create_dimension` <double, double, ? double, ? double, ? character, ? logical, null, logical> => struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null> | struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null> | struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>;
type `create_dimensions` <struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`x`:struct<`from`:double, `to`:integer, `offset`:integer, `delta`:integer, `refsys`:null, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:integer, `offset`:integer, `delta`:integer, `refsys`:null, `point`:logical, `values`:null>> | tuple<struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>>, struct<`affine`:double[], `dimensions`:^character[], `curvilinear`:logical>> => struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`x`:struct<`from`:double, `to`:integer, `offset`:integer, `delta`:integer, `refsys`:null, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:integer, `offset`:integer, `delta`:integer, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>>;
type `create_dimensions_from_gdal_meta` <integer[], struct<`filename`:character, `driver`:character[], `cols`:double[], `rows`:double[], `bands`:integer[], `proj_wkt`:character, `proj4string`:character, `geotransform`:double[], `datatype`:character, `sub`:null, `meta`:character, `band_meta`:list<character[]>, `point`:logical>> => struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `band`:struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null>>;
type `cut.array` <double[], double[], ???> => integer[];
type `cut.stars` <struct<`L7_ETMs.tif`:double[]>, double[], ???> => struct<`L7_ETMs.tif`:integer[]>;
type `dim.dimensions` <struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>> => integer[];
type `dim.stars` <struct<`L7_ETMs.tif`:^integer[]> | struct<`L7_ETMs.tif`:double[]> | struct<`A1`:^double[]>> => integer[];
type `expand_dimensions.dimensions` <struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>, ???, logical, ? logical> => struct<`x`:double[], `y`:double[]> | struct<`X1`:double[], `X2`:double[]>;
type `expand_dimensions.stars` <struct<`L7_ETMs.tif`:^integer[]> | struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:double[]>, ? logical | ???> => struct<`x`:double[], `y`:double[]> | struct<`X1`:double[], `X2`:double[]>;
type `filter` <character[]> => logical[];
type `flatten` <struct<`L7_ETMs.tif`:integer[]>, integer> => struct<`L7_ETMs.tif`:^integer[]>;
type `fun` <symbol, symbol> => ? list<character | any => any>;
type `FUN` <struct<`L7_ETMs.tif`:double[]> | double[] | struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null> | character | struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null> | struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, character> => ? double[];
type `geom_stars` <null, struct<`L7_ETMs.tif`:double[]>, ???, double, logical> => environment;
type `get_breaks` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:integer[]>, character, double, null> => double[];
type `get_data_units` <double[]> => double[];
type `get_dimension_values` <struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null> | struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null> | struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null> | struct<`from`:double, `to`:double, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null> | struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:struct<`start`:integer[], `end`:integer[]>>, double, ? double[], ? character> => double[];
type `get_downsample` <integer[], double[]> => double;
type `get_geotransform` <struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>> => double[];
type `get_raster` <double[], ^character[], logical> => struct<`affine`:double[], `dimensions`:^character[], `curvilinear`:logical>;
type `get_val` <character, character> => character;
type `has_raster` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:double[]> | struct<`L7_ETMs.tif`:^integer[]> | struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>> => logical;
type `has_rotate_or_shear` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:double[]> | struct<`L7_ETMs.tif`:^integer[]> | struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `band`:struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null>>> => logical;
type `has_sfc` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:^integer[]> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>>> => logical;
type `identical_dimensions` <tuple<struct<`L7_ETMs.tif`:double[]>, struct<`L7_ETMs.tif`:double[]>>> => logical;
type `image.stars` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:^integer[]>, double[], double, double, null, null, language, character, character, double[], double[], logical, logical, logical, logical, ? symbol, logical, symbol | language, symbol | double> => null;
type `is_curvilinear` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:double[]> | struct<`L7_ETMs.tif`:^integer[]> | struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>> => logical;
type `is_rectilinear` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:^integer[]> | struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `band`:struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null>>> => logical;
type `is_regular_grid` <struct<`A1`:^double[]> | struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `band`:struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:null>>> => logical;
type `make_intervals` <integer[], integer[]> => struct<`start`:integer[], `end`:integer[]>;
type `make_label` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:integer[]>, double> => character;
type `Math.stars` <struct<`L7_ETMs.tif`:double[]>, double | ???> => struct<`L7_ETMs.tif`:double[]>;
type `maybe_normalizePath` <character, logical> => character;
type `Ops.stars` <double | struct<`L7_ETMs.tif`:double[]>, struct<`L7_ETMs.tif`:double[]> | double> => struct<`L7_ETMs.tif`:double[]>;
type `parse_gdal_meta` <struct<`filename`:character, `driver`:character[], `cols`:double[], `rows`:double[], `bands`:integer[], `proj_wkt`:character, `proj4string`:character, `geotransform`:double[], `datatype`:character, `sub`:null, `meta`:character, `band_meta`:list<character[]>>> => struct<`filename`:character, `driver`:character[], `cols`:double[], `rows`:double[], `bands`:integer[], `proj_wkt`:character, `proj4string`:character, `geotransform`:double[], `datatype`:character, `sub`:null, `meta`:character, `band_meta`:list<character[]>, `point`:logical>;
type `plot.stars` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:integer[]>, ???, ???, logical, character, logical, logical, double | character, character, character[], double, character, double, logical, language | character, logical, null> => ? struct<`xlog`:logical, `ylog`:logical, `adj`:double, `ann`:logical, `ask`:logical, `bg`:character, `bty`:character, `cex`:double, `cex.axis`:double, `cex.lab`:double, `cex.main`:double, `cex.sub`:double, `col`:character, `col.axis`:character, `col.lab`:character, `col.main`:character, `col.sub`:character, `crt`:double, `err`:integer, `family`:character, `fg`:character, `fig`:double[], `fin`:double[], `font`:integer, `font.axis`:integer, `font.lab`:integer, `font.main`:integer, `font.sub`:integer, `lab`:integer[], `las`:integer, `lend`:character, `lheight`:double, `ljoin`:character, `lmitre`:double, `lty`:character, `lwd`:double, `mai`:double[], `mar`:double[], `mex`:double, `mfcol`:integer[], `mfg`:integer[], `mfrow`:integer[], `mgp`:double[], `mkh`:double, `new`:logical, `oma`:double[], `omd`:double[], `omi`:double[], `pch`:integer, `plt`:double[], `ps`:integer, `pty`:character, `smo`:double, `srt`:double, `tck`:null, `tcl`:double, `usr`:double[], `xaxp`:double[], `xaxs`:character, `xaxt`:character, `xpd`:logical, `yaxp`:double[], `yaxs`:character, `yaxt`:character, `ylbias`:double>;
type `propagate_units` <struct<`L7_ETMs.tif`:double[]>, struct<`L7_ETMs.tif`:double[]>> => struct<`L7_ETMs.tif`:double[]>;
type `read_stars` <character, ???, character[], language, logical, logical, null, null, tuple<>, logical, character[], logical> => struct<`L7_ETMs.tif`:double[]>;
type `register_all_s3_methods` < > => null;
type `register_s3_method` <character, character, character, null> => null;
type `regular_intervals` <double[], double> => logical;
type `slice.stars` <struct<`L7_ETMs.tif`:double[]>, character, integer[], ???, logical> => struct<`L7_ETMs.tif`:double[]>;
type `st_as_stars.default` <^double[], ???, null> => struct<`A1`:^double[]>;
type `st_as_stars.list` <struct<`A1`:^double[]> | tuple<double[]> | struct<`L7_ETMs.tif`:double[]> | struct<`L7_ETMs.tif`:^integer[]>, ???, struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>> | struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>>> => struct<`A1`:^double[]> | tuple<double[]> | struct<`L7_ETMs.tif`:double[]> | struct<`L7_ETMs.tif`:^integer[]>;
type `st_bbox.dimensions` <struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>, ???> => double[];
type `st_bbox.stars` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:^integer[]>, ???> => double[];
type `st_coordinates.stars` <struct<`L7_ETMs.tif`:double[]>, ???, logical, null> => struct<`x`:double[], `y`:double[], `band`:integer[]>;
type `st_crs.stars` <struct<`L7_ETMs.tif`:^integer[]> | struct<`A1`:^double[]>, ???> => struct<`epsg`:null, `proj4string`:character> | struct<`epsg`:null, `proj4string`:null>;
type `st_dimensions.default` <??? | double[], double[], ???, double[], logical, logical> => struct<`x`:struct<`from`:double, `to`:integer, `offset`:integer, `delta`:integer, `refsys`:null, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:integer, `offset`:integer, `delta`:integer, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>>;
type `st_dimensions.dimensions` <struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>, ???> => struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>;
type `st_dimensions.stars` <struct<`L7_ETMs.tif`:^integer[]> | struct<`L7_ETMs.tif`:double[]> | struct<`A1`:^double[]>, ???> => struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>>;
type `st_downsample` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:integer[]>, double[]> => struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:integer[]>;
type `st_get_dimension_values` <struct<`L7_ETMs.tif`:integer[]>, double, ???, logical, logical> => integer[];
type `st_set_dimensions` <struct<`A1`:^double[]>, double, null, null, null, ???, double> => struct<`A1`:^double[]>;
type `st_stars` <tuple<double[]> | struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:double[]> | struct<`L7_ETMs.tif`:^integer[]>, struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:null, `values`:null>> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>> | struct<`x`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>, `y`:struct<`from`:double, `to`:double, `offset`:double, `delta`:double, `refsys`:character, `point`:logical, `values`:null>>> => tuple<double[]> | struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:double[]> | struct<`L7_ETMs.tif`:^integer[]>;
type `st_upfront` <struct<`A1`:^double[]>, character[]> => struct<`A1`:^double[]>;
type `values_get_start` <struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:struct<`start`:integer[], `end`:integer[]>>> => integer[];
type `values_get_where` <struct<`from`:double, `to`:integer, `offset`:null, `delta`:null, `refsys`:null, `point`:null, `values`:struct<`start`:integer[], `end`:integer[]>>, double> => integer[];
type `which_sfc` <struct<`A1`:^double[]> | struct<`L7_ETMs.tif`:^integer[]> | struct<`X1`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>, `X2`:struct<`from`:double, `to`:integer, `offset`:double, `delta`:double, `refsys`:null, `point`:logical, `values`:null>>> => integer[];
type `xy_from_colrow` <^double[], double[]> => ^double[];
