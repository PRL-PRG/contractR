type `correctPath` <character> => character;
type `filter` <character[]> => logical[];
type `FUN` <list<character | class<`data.frame`> | class<`matrix`>>, character> => logical | <character[]> => character | <character, list<any>, character[], any> => character[] | <character[]> => character | <character, list<character | double | class<`name`> | character | class<`name`> | double>, any> => character | <character, list<character | double[] | class<`name`> | character | class<`name`> | logical | character | class<`name`> | double[]>, any> => character | <character> => logical | <character, list<any>> => character[] | <list<character | class<`data.frame`> | class<`matrix`>>> => character | <any> => logical | <character, logical, logical, logical> => list<character | class<`data.frame`> | class<`matrix`>> | <character, list<any>> => logical | <character, character | null> => character | <character[]> => character | <character, list<character[] | class<`name`> | logical | character | class<`name`> | logical | character | double[] | class<`name`>>, any> => character;
type `gdaladdo` <character, double[], character, any, any, any, any, logical, logical> => null;
type `gdalbuildvrt` <any, character, any, any, any, any, any, logical, any, any, any, any> => null;
type `gdal_check_validity` <character, character> => logical;
type `gdal_chooseInstallation` <any> => integer;
type `gdal_cmd_builder` <character, list<list<character[] | character[] | null>>, list<any>, character[], character[], any, any, double, logical, logical> => character;
type `gdal_contour` <character, character, any, character, any, any, any, double, character, any, any, any> => class<`SpatialLinesDataFrame`>;
type `gdaldem` <character, character, character, any, any, any, any, any, any, any, any, any> => class<`RasterBrick`>;
type `gdal_drivers` <character, logical> => class<`data.frame`>;
type `gdal_grid` <character, character, character, character, double[], double[], double[], any, any, any, any, character> => class<`RasterBrick`>;
type `gdalinfo` <character, any, any, any, any, any, any, any, any, any, any, any> => (character[] | list<double | character | class<`matrix`>>);
type `gdal_installation` <logical, logical, logical, logical, logical, null, logical, logical> => list<list<character | class<`data.frame`> | class<`matrix`>>>;
type `gdallocationinfo` <character, any, any, any, any, any, any, any, any, any, any, any> => (character[] | class<`matrix`>);
type `gdalmanage` <character, character, any, any, any, any, logical, logical> => character;
type `gdal_path` <null, logical, logical, logical, logical, any, logical, logical> => character;
type `gdal_python_utilities` <character> => class<`matrix`>;
type `gdal_rasterize` <character, character, double[], any, any, double[], any, any, any, character, any, any> => class<`RasterBrick`>;
type `gdal_setInstallation` <null, logical, any, logical> => null;
type `gdalsrsinfo` <character, any, any, any, logical, logical, logical> => (character | class<`CRS`>);
type `gdaltindex` <character, character[], any, any, any, any, any, any, any, any, logical, logical> => class<`SpatialPolygonsDataFrame`>;
type `gdaltransform` <any, any, class<`matrix`>, character, character, any, any, any, any, any, any, any> => class<`matrix`>;
type `gdal_translate` <character, character, any, any, character, any, any, any, any, any, any, any> => (class<`RasterBrick`> | null);
type `gdal_version` <character, null, logical> => class<`data.frame`>;
type `gdalwarp` <character, character, any, character, any, any, any, any, any, any, any, any> => class<`RasterBrick`>;
type `is.Raster` <character | class<`RasterBrick`> | class<`RasterLayer`>> => logical;
type `mosaic_rasters` <character[], character, null, logical, logical, null, double, list<character>, null, logical, ...> => null;
type `ogrinfo` <any, any, any, any, any, any, any, any, any, any, any, any> => character[];
type `ogrtindex` <character, character[], any, any, any, any, any, any, logical, logical, logical, logical> => class<`SpatialPolygonsDataFrame`>;
type `qm` <character[] | double[]> => character[];
type `remove_file_extension` <character, character> => character;
type `trim.trailing` <character[]> => character[];
