type `D1ss` <double[], double[], double[], double, null> => double[];
type `filter` <character[]> => logical[];
type `D2ss` <double[], double[], double[], double, null> => struct<`x`:double[], `y`:double[], `spl.spar`:double[], `spar.offset`:double[]>;
type `::` <double, double[], null | logical, null, language | logical, double, null, null, tuple<>, logical, double, logical, logical, logical, double, double | language, null, null, double> => double[];
type `FUN` <double[]> => double[] | character[];
type `pretty10exp` <double[], logical, character | double[], double, null, character[], character[]> => expression;
type `roundfixS` <double[], character[]> => double[];
type `seqXtend` <double[], double, character, null, null> => double[];
type `XY` <character> => character;
type `mult.fig` <double, null, null, language | double[], double[], double[], double[], null | character, double, double | language, double | language, character | language, integer | language, null> => struct<`new.par`:struct<`mfrow`:integer[], `mfcol`:integer[], `oma`:double[], `mar`:double[], `mgp`:double[]>, `old.par`:struct<`mfrow`:integer[], `oma`:double[], `mar`:double[], `mgp`:double[]>>;
type `%||%` <null | character[], null | language | character[]> => null | character[];
type `as.intBase` <character[] | ^double[], double> => double[];
type `as.integer.basedInt` <^double[], null> => double[];
type `AsciiToInt` <character[]> => ^integer[];
type `axTexpr` <double, double[], null, null, null, logical> => expression;
type `bi2int` <list<integer[]> | struct<`1`:double[], `2`:double[], `3`:double[], `4`:double[], `5`:double[], `6`:double[], `7`:double[], `8`:double[], `9`:double[], `10`:double[], `11`:double[], `12`:double[], `13`:double[], `14`:double[], `15`:double[], `16`:double[], `17`:double[], `18`:double[], `19`:double[], `20`:double[], `21`:double[], `22`:double[], `23`:double[], `24`:double[], `25`:double[], `26`:double[], `27`:double[]>, double> => double[];
type `capture.and.write` <^double[], double, double, null | double, null, character, double> => character[];
type `catDots` <double> => null;
type `chars8bit` <integer[]> => character[];
type `colVars` <^double[], double[], logical> => double[];
type `compresid2way` <struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `contrasts`:struct<`wool`:character, `tension`:character>, `xlevels`:struct<`wool`:character[], `tension`:character[]>, `call`:language, `terms`:language, `model`:struct<`breaks`:double[], `wool`:integer[], `tension`:integer[]>> | language | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `contrasts`:struct<`nitrogen`:character, `potash`:character, `pos`:character>, `xlevels`:struct<`nitrogen`:character[], `potash`:character[], `pos`:character[]>, `call`:language, `terms`:language, `model`:struct<`yield`:double[], `nitrogen`:integer[], `potash`:integer[], `pos`:integer[]>>, null | struct<>, integer[] | character[], logical, logical, null, null, null, double[], double[], double[] | character[]> => struct<`compy`:struct<`part.breaks`:double[], `eff.wool`:double[], `eff.tension`:double[]>, `coef`:struct<`(Intercept)`:double, `wool`:double[], `tension`:double[]>> | struct<`compy`:struct<`part.yield`:double[], `eff.nitrogen`:double[], `eff.potash`:double[]>, `coef`:struct<`(Intercept)`:double, `nitrogen`:double[], `potash`:double[]>> | struct<`compy`:struct<`part.yield`:double[], `eff.P`:double[], `eff.K`:double[]>, `coef`:struct<`(Intercept)`:double, `P`:double[], `K`:double[]>>;
type `cum.Vert.funkt` <double[], logical, logical, logical, logical, character, character, null> => struct<`t`:double[], `y`:double[]>;
type `D1D2` <double[], double[], double[], double, integer[], null> => struct<`x`:double[], `D1`:double[], `D2`:double[], `spar`:double, `df`:double>;
type `dDA` <struct<`x`:double[], `y`:double[]> | ^double[], double[], logical> => struct<`call`:language, `cl0`:integer, `n`:integer, `p`:integer, `K`:integer, `means`:^double[], `vars`:^double[], `nk`:integer[], `pool`:logical>;
type `diagDA` <struct<`x`:double[], `y`:double[]>, double[], struct<`x`:double[], `y`:double[]>, logical> => integer[];
type `diagX` <double> => ^double[];
type `digitsBase` <double[], double, double> => ^double[];
type `Duplicated` <integer[], logical, logical, null> => ^integer[];
type `eaxis` <double, double[], null | logical | expression, null, language | logical, double | language, null | logical, null, tuple<> | struct<`col`:character> | language, logical, double, logical, logical, logical, double, language | double, null, null | double, double> => null | double[];
type `ecdf.ksCI` <double[], null, null, character, character, null> => struct<`t`:double[], `y`:double[]>;
type `ellipsePoints` <double, double, double, double[], double, logical> => ^double[];
type `empty.dimnames` <^double[]> => ^double[];
type `errbar` <integer[], double[], double[], double[], double, double[], character, character, character> => null;
type `KSd` <integer[] | double> => double[];
type `lseq` <double, double, double> => double[];
type `mk.main` < > => character;
type `n.plot` <struct<`x`:double[], `y`:double[]> | double[], null | double[], null | character, logical, null | character, null | character, character, double, character, null | character> => character[];
type `p.datum` <logical, double, null> => null;
type `plotStep` <double[], null, logical, logical, logical, logical, logical, logical, integer, character, character, character, null> => struct<`t`:double[], `y`:double[]>;
type `polyn.eval` <double[], double> => double;
type `predict.dDA` <struct<`call`:language, `cl0`:integer, `n`:integer, `p`:integer, `K`:integer, `means`:^double[], `vars`:^double[], `nk`:integer[], `pool`:logical>, struct<`x`:double[], `y`:double[]> | ^double[], logical, null> => integer[];
type `QUnif` <double, double, double, double, double, double, logical> => ^double[];
type `sHalton` <double, double, double, double> => double[];
type `strcodes` <character[], character[]> => list<integer> | list<null | integer> | struct<`a`:integer[], `ch`:integer[], `place`:^integer[]>;
type `sum.na` <double[]> => double;
type `TA.plot` <struct<`coefficients`:^double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `contrasts`:struct<`Method`:character, `Physique`:character, `Team`:character>, `xlevels`:struct<`Method`:character[], `Physique`:character[], `Team`:character[]>, `call`:language, `terms`:language, `model`:struct<`rounds`:double[], `Method`:integer[], `Physique`:integer[], `Team`:integer[]>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`skips`:double[], `Opening`:integer[], `Solder`:integer[], `Mask`:integer[], `PadType`:integer[], `Panel`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`Opening`:integer[], `Solder`:integer[], `Mask`:integer[], `PadType`:integer[], `Panel`:integer[], `skips`:double[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`Opening`:character, `Solder`:character, `Mask`:character, `PadType`:character, `Panel`:character>, `xlevels`:struct<`Opening`:character[], `Solder`:character[], `Mask`:character[], `PadType`:character[], `Panel`:character[]>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`Kyphosis`:integer[], `poly(Age# 2)`:^double[], `Start`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`Kyphosis`:integer[], `Age`:integer[], `Number`:integer[], `Start`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `na.action`:integer[], `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`Ozone`:integer[], `Solar.R`:integer[], `Wind`:double[], `Temp`:integer[], `Month`:integer[], `Day`:integer[]>> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`stack.loss`:double[], `stack.x`:^double[]>>, double[], double[], null | character, character, character, logical, logical, logical, null, null, struct<`lty`:double, `col`:character>, struct<`lwd`:double, `lty`:double, `col`:double>, struct<`lwd`:double, `lty`:double, `col`:double>, logical, null | double> => null;
type `u.Datumvonheute` <double, logical> => character;
type `x` <double[]> => double[];
