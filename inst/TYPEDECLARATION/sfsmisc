type `%||%` <character[] | null, any> => character[];
type `AsciiToInt` <character[]> => ^integer[];
type `as.intBase` <character[] | class<`basedInt`>, double> => double[];
type `as.integer.basedInt` <class<`basedInt`>, ...> => double[];
type `axTexpr` <double, double[], null, null, null, logical> => expression;
type `bi2int` <class<`array`> | list<integer[]>, double> => double[];
type `capture.and.write` <class<`matrix`>, double, double, double | null, any, character, double> => character[];
type `catDots` <double> => null;
type `chars8bit` <integer[]> => character[];
type `colVars` <class<`matrix`>, double[], logical> => double[];
type `compresid2way` <class<`aov`, `lm`> | class<`formula`>, null | class<`data.frame`>, integer[] | character[], logical, logical, null, null, null, double[], double[], character[] | double[]> => list<class<`data.frame`> | list<double[]>>;
type `cum.Vert.funkt` <double[], logical, logical, logical, logical, character, character, ...> => list<double[]>;
type `D1D2` <double[], double[], double[], double, integer[], null> => list<double[]>;
type `D1ss` <double[], double[], double[], double, null> => double[];
type `D2ss` <double[], double[], double[], double, null> => list<double[]>;
type `dDA` <class<`data.frame`> | class<`matrix`>, double[], logical> => class<`dDA`>;
type `diagDA` <class<`data.frame`>, double[], class<`data.frame`>, logical> => integer[];
type `diagX` <double> => class<`matrix`>;
type `digitsBase` <double[], double, double> => class<`basedInt`>;
type `Duplicated` <integer[], logical, logical, null> => ^integer[];
type `eaxis` <double, double[], logical | null | expression, null, any, any, null | logical, null, any, logical, double, logical> => (double[] | null);
type `ecdf.ksCI` <double[], null, null, character, character, ...> => list<double[]>;
type `ellipsePoints` <double, double, double, double[], double, logical> => class<`matrix`>;
type `empty.dimnames` <class<`basedInt`> | class<`matrix`>> => (class<`basedInt`> | class<`matrix`>);
type `errbar` <integer[], double[], double[], double[], double, double[], character, character, ...> => null;
type `factorize` <double[], logical> => list<class<`matrix`>>;
type `filter` <character[]> => logical[];
type `f.robftest` <class<`lm`, `rlm`>, double> => class<`htest`>;
type `FUN` <integer[], integer[]> => logical[] | <double[]> => double | <double[]> => double | <integer> => character[];
type `funEnv` <..., null, environment, logical, integer> => environment;
type `KSd` <integer> => double;
type `lseq` <double, double, double> => double[];
type `mult.fig` <double, any, any, double[], double[], double[], double[], null, double, any, any, any> => list<list<double[]>>;
type `n.plot` <class<`data.frame`>, null, null, logical, null, null, character, double, character, ...> => character[];
type `p.datum` <logical, double, ...> => null;
type `plotStep` <double[], any, logical, logical, logical, logical, logical, logical, integer, character, character, character> => list<double[]>;
type `polyn.eval` <double[], double> => double;
type `predict.dDA` <class<`dDA`>, class<`data.frame`> | class<`matrix`>, logical, ...> => integer[];
type `pretty10exp` <double[], logical, character | double[], double, any, character[], character[]> => expression;
type `primes` <integer, null> => integer[];
type `strcodes` <character[], character[]> => list<integer | null | ^integer[]>;
type `sum.na` <double[]> => double;
type `u.Datumvonheute` <double, logical> => character;
type `XY` <character> => character;
