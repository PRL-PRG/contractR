type `%||%` <character[] | null, any> => (character[] | null);
type `AsciiToInt` <character[]> => ^integer[];
type `as.intBase` <character[] | class<`basedInt`>, any> => double[];
type `as.integer.basedInt` <class<`basedInt`>, ...> => double[];
type `axTexpr` <double, double[], null, null, null, logical> => expression;
type `bi2int` <list<integer[]> | class<`array`>, any> => double[];
type `capture.and.write` <class<`matrix`>, double, double, double | null, any, character, double> => character[];
type `ccat` <...> => character;
type `chars8bit` <integer[]> => character[];
type `code2n` <character[], double, character[]> => double[];
type `compresid2way` <class<`aov`, `lm`> | class<`formula`>, null | class<`data.frame`>, integer[] | character[], logical, logical, null, null, null> => list<class<`data.frame`> | list<double[]>>;
type `cum.Vert.funkt` <double[], logical, logical, logical, logical, character, character, ...> => list<double[]>;
type `D1D2` <double[], double[], double[], double, integer[], null> => list<double[]>;
type `D1ss` <double[], double[], double[], double, null> => double[];
type `D2ss` <double[], double[], double[], double, null> => list<double[]>;
type `dDA` <class<`data.frame`> | class<`matrix`>, double[], logical> => class<`dDA`>;
type `dev.latex` <character, class<`function`>, double, double, logical, logical, character, null> => list<list<double[]>>;
type `diagDA` <class<`matrix`> | class<`data.frame`>, double[], class<`matrix`> | class<`data.frame`>, logical> => ^integer[];
type `diagX` <double> => class<`matrix`>;
type `digitsBase` <double[], double, double> => class<`basedInt`>;
type `Duplicated` <integer[], logical, logical, null> => ^integer[];
type `eaxis` <double, double[], logical | null | expression, null, any, any, null | logical, null> => (double[] | null);
type `ecdf.ksCI` <double[], null, null, character, character, ...> => list<double[]>;
type `ellipsePoints` <double, double, double, double[], double, logical> => class<`matrix`>;
type `empty.dimnames` <class<`basedInt`> | class<`matrix`>> => (class<`basedInt`> | class<`matrix`>);
type `errbar` <integer[], double[], double[], double[], double, double[], character, character> => null;
type `factorize` <double[], logical> => list<class<`matrix`>>;
type `f.robftest` <class<`lm`, `rlm`>, double> => class<`htest`>;
type `funEnv` <..., null, environment, logical, integer> => environment;
type `hatMat` <integer[], logical, class<`function`>, ...> => (class<`matrix`> | double);
type `histBxp` <double[], any, any, logical, logical, character, ..., double> => null;
type `integrate.xy` <double[], double[], any, any, logical, double> => double;
type `inv.seq` <double[]> => class<`call`>;
type `is.whole` <class<`array`> | class<`matrix`> | complex[], any> => (class<`array`> | class<`matrix`> | logical[]);
type `iterate.lin.recursion` <double | integer[], double[], double, double> => double[];
type `KSd` <double[]> => double[];
type `last` <^double[], double, logical> => (^double[] | null);
type `linesHyperb.lm` <class<`lm`>, double, logical, double, character | double, double, logical> => null;
type `lseq` <double, double, double> => double[];
type `margin2table` <class<`matrix`> | class<`table`>, character, logical> => class<`margin2table`, `table`>;
type `mat2tex` <class<`matrix`>, character | class<`connection`, `terminal`>, character, character, character[], logical, double, any> => null;
type `missingCh` <character, environment> => logical;
type `mpl` <class<`data.frame`>, ...> => double[];
type `mult.fig` <any, any, any, double[], double[], double[], double[], character | expression | null> => list<list<double[]>>;
type `n.code` <double[], double, character[]> => character[];
type `nearcor` <class<`matrix`>, double, double, double, double, logical> => class<`nearcor`>;
type `n.plot` <class<`data.frame`> | double[], null | double[], null | character, logical, null | character, null | character, character, double> => character[];
type `nr.sign.chg` <integer[]> => integer;
type `p.arrows` <double[], double[], double[], double[], double, double, character, ...> => null;
type `paste.vec` <integer[], integer> => character;
type `p.datum` <logical, double, ...> => null;
type `p.dchisq` <double, character, ...> => null;
type `p.dgamma` <integer, character, ...> => null;
type `p.dnorm` <double, double, character, logical, character, ...> => null;
type `p.hboxp` <double[], double[], any, double, double, double, double, double> => null;
type `pkgLibs` <character[], character> => list<list<character[]>>;
type `plotDS` <double[], double[], double[] | list<double[]>, character, character, double[], logical, logical> => null;
type `plotStep` <double[], any, logical, logical, logical, logical, logical, logical> => list<double[]>;
type `polyn.eval` <class<`matrix`> | double[], any> => (class<`matrix`> | double[]);
type `posdefify` <class<`matrix`>, character[], logical, class<`eigen`>, double> => class<`matrix`>;
type `p.profileTraces` <class<`profile`, `profile.nls`>, double, character> => null;
type `predict.dDA` <class<`dDA`>, class<`matrix`> | class<`data.frame`>, logical, ...> => ^integer[];
type `p.res.2fact` <class<`factor`>, class<`factor`>, double[], any, logical, null | character, null | character, character> => null;
type `p.res.2x` <class<`formula`> | double[], ...> => null;
type `p.res.2x.default` <double[], double[], double[], null | double, double, double, character[] | integer[], character | null> => null;
type `p.res.2x.formula` <class<`formula`>, class<`lm`>, character, null, null, ...> => null;
type `pretty10exp` <double[], logical, double[] | character, double, any, character[], character[]> => (character[] | expression);
type `primes` <double, null> => integer[];
type `print.margin2table` <class<`margin2table`, `table`>, double, logical, logical, ...> => class<`margin2table`, `table`>;
type `printTable2` <class<`table`>, double> => list<class<`table`> | class<`matrix`> | double>;
type `p.scales` <double, double> => class<`matrix`>;
type `ps.end` <logical, character, any> => character;
type `ps.latex` <character, double, double, logical, logical, character, null, double[]> => list<list<double[]>>;
type `p.tachoPlot` <double[], double[], double[], double[], any, character[], logical, logical> => null;
type `p.ts` <class<`matrix`, `mts`, `ts`> | class<`ts`> | double[], double, any, null | class<`Date`>, logical, logical, any, null> => null;
type `quadrant` <class<`matrix`>, null> => double[];
type `QUnif` <double, double, double, double, double, double, logical> => class<`matrix`>;
type `read.org.table` <any, logical, double, character, character, character, ...> => class<`data.frame`>;
type `repChar` <character, double> => character;
type `rot2` <class<`matrix`> | double[], double> => class<`matrix`>;
type `rotn` <character[], double> => character[];
type `roundfixS` <class<`difftime`> | double[], character[]> => (class<`difftime`> | double[]);
type `rrange` <double[], double, double, logical> => double[];
type `seqXtend` <class<`Date`> | double[], double, character[], null, null> => (class<`Date`> | double[]);
type `sessionInfoX` <character | null, logical, logical> => class<`sessionInfoX`>;
type `.set.eps_view` < > => list<null>;
type `sHalton` <double, double, double, double> => double[];
type `signi` <double[], double> => double[];
type `sourceAttach` <character, double, character, logical, logical> => environment;
type `strcodes` <character[], character[]> => (list<integer | null> | list<^integer[]>);
type `str_data` <character[], any, ...> => list<list<any>>;
type `Sys.cpuinfo` < > => class<`simple.list`>;
type `Sys.memGB` <character> => double;
type `Sys.MIPS` < > => double;
type `Sys.procinfo` <character> => class<`simple.list`>;
type `Sys.ps` <integer, character[], logical, character, logical, any> => character[];
type `Sys.ps.cmd` < > => character;
type `Sys.sizes` <integer, character> => integer[];
type `TA.plot` <class<`aov`, `lm`> | class<`glm`, `lm`> | class<`lm`>, double[], double[], null | character, character, character, logical, logical> => null;
type `tapplySimpl` <double[], list<class<`factor`, `ordered`>>, class<`function`>, ...> => class<`array`>;
type `toLatex.numeric` <double[], double, logical, character, ...> => character[];
type `u.boxplot.x` <double, double[], double> => double[];
type `u.date` <logical> => character;
type `u.datumdecode` <double[], character[]> => (class<`matrix`> | double[]);
type `u.Datumvonheute` <double, double> => character;
type `u.log` <double[], double> => double[];
type `unif` <double, double> => double[];
type `uniqueL` <double[], logical[], logical> => list<double[]>;
type `u.sys` <..., logical> => character[];
type `vcat` <double[], character> => character;
type `wrapFormula` <class<`formula`>, class<`data.frame`>, character> => class<`formula`>;
type `xy.grid` <integer[], double[]> => class<`matrix`>;
type `xy.unique.x` <double[], integer[], any, class<`function`>, ...> => class<`matrix`>;
