type `addLocalFunDef` <character, class<`<-`>, list<any>> => list<null | pairlist>;
type `anyMissing` <class<`call`> | null> => logical;
type `apdef` <class<`call`>> => list<class<`call`>>;
type `checkCall` <class<`function`>, class<`call`>, any> => logical;
type `checkDotsAssignVar` <character, any> => logical;
type `checkPrimopCall` <character, class<`<-`> | class<`(`> | class<`{`> | class<`call`> | class<`for`> | class<`if`> | class<`while`>, any, any> => logical;
type `checkSymOrString` <class<`name`>, any> => class<`name`>;
type `checkUsage` <class<`function`>, character, class<`function`>, logical, logical, logical, logical, logical, logical, logical, logical, character[], logical> => null;
type `checkUsageEnv` <environment, ...> => null;
type `checkUsagePackage` <character, ...> => null;
type `collectUsage` <class<`function`>, character, ...> => null;
type `collectUsageArgs` <class<`(`> | class<`call`> | class<`if`> | class<`while`>, any> => null;
type `collectUsageFun` <character, null | pairlist, class<`call`> | class<`if`> | class<`(`> | class<`{`> | class<`for`> | class<`name`> | logical | null, list<any>> => null;
type `constantFold` <class<`call`> | class<`name`> | double, null | character, null | logical> => (double | null);
type `constantFoldEnv` <class<`call`> | logical | class<`name`>, any, null> => (logical | null);
type `dropMissings` <null | pairlist | class<`call`>> => list<any>;
type `evalseq` <class<`call`> | class<`name`>> => list<class<`name`> | class<`call`> | class<`name`>>;
type `exitFolder` <any, list<class<`function`>>> => any;
type `findFuncLocals` <null | pairlist, class<`{`> | class<`call`> | class<`if`> | class<`<-`> | class<`(`> | class<`name`> | logical | null | class<`for`>> => character[];
type `findGlobals` <class<`function`>, logical> => (character[] | list<character[]>);
type `findLocals` <class<`<-`> | class<`{`> | class<`call`>, environment | character> => character[];
type `findLocalsList` <list<any>, environment | character> => character[];
type `findOwnerEnv` <character, environment, environment | null, any> => (environment | null);
type `flattenAssignment` <class<`call`> | class<`name`>> => list<null | list<class<`name`> | class<`call`> | class<`call`> | class<`name`> | class<`call`>>>;
type `FUN` <character, environment> => logical;
type `getAssignedVar` <class<`<-`>> => character;
type `getLocalUsageEntry` <character, list<any>> => environment;
type `getLocalUsageValue` <character, character, list<any>> => (class<`data.frame`> | double | null | list<null | pairlist>);
type `incLocalSrcInfo` <character, list<any>> => class<`data.frame`>;
type `incLocalUsageValue` <character, character, list<any>> => double;
type `is.baseenv` <environment | null> => logical;
type `isBaseVar` <character, environment> => logical;
type `isClosureFunDef` <class<`<-`>, any> => logical;
type `isDDSym` <character | class<`name`>> => logical;
type `is.emptyenv` <environment> => logical;
type `isSimpleFunDef` <class<`<-`>, any> => logical;
type `isStatsVar` <character, environment> => logical;
type `isUtilsVar` <character, environment> => logical;
type `makeAssgnFcn` <class<`call`> | class<`name`>> => (class<`call`> | class<`name`>);
type `makeCodeWalker` <..., class<`function`>, class<`function`>, class<`function`>> => list<any>;
type `makeConstantFolder` <..., class<`function`>, class<`function`>, class<`function`>, class<`function`>, class<`function`>, any, class<`function`>, class<`function`>> => list<class<`function`>>;
type `makeLocalsCollector` <..., class<`function`>, class<`function`>, class<`function`>, any, class<`function`>> => list<class<`function`>>;
type `makeUsageCollector` <class<`function`>, ..., null, class<`function`>, class<`function`>, class<`function`>, class<`function`>, class<`function`>, class<`function`>, class<`function`>> => list<any>;
type `matchCall` <class<`function`>, class<`call`>, ...> => class<`call`>;
type `mkHash` < > => environment;
type `showTree` <class<`call`> | class<`<-`>, class<`function`>> => (character | null);
type `suppressVar` <any, logical> => logical;
type `walkCode` <character | class<`<-`> | class<`call`> | class<`name`> | double | null | class<`(`> | class<`if`> | class<`{`> | class<`for`> | class<`while`>, list<any>> => any;
