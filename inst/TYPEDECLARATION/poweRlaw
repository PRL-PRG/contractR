type `.local` <logical, logical, ??? | double, ???> => struct<`x`:integer[], `y`:double[]>;
type `$` <??? | double[] | struct<`gof`:double, `xmin`:double, `pars`:double, `ntail`:double, `distance`:character>, ? double> => ? double[] | struct<`pars`:double, `value`:double, `counts`:integer[], `convergence`:integer, `message`:character> | struct<`gof`:double, `xmin`:double, `pars`:double, `ntail`:double, `distance`:character> | any => any;
type `check_ctn_data` <double[]> => null;
type `check_discrete_data` <integer[]> => null;
type `dist_cdf` <? double[], logical> => double[];
type `dist_data_cdf` <logical, double> => double[];
type `dist_ll` < > => double;
type `dist_pdf` <double[], logical> => double[];
type `dist_rand` <double> => double[];
type `dplcon` <double[], double, double, logical> => double[];
type `dpldis` <double[], double, double, logical> => double[];
type `estimate_xmin` <null, null, double, character> => struct<`gof`:double, `xmin`:double, `pars`:double, `ntail`:double, `distance`:character>;
type `filter` <character[]> => logical[];
type `fn` <double> => double;
type `FUN` <double> => double[];
type `get_data_cdf_probs` <integer[], logical> => double[];
type `get_distance_statistic` <double, character> => double;
type `get_gof` <double[], double[], character> => double;
type `get_n` < > => integer;
type `get_xmin_est` <^double[], double[]> => struct<`gof`:double, `xmin`:double, `pars`:double, `ntail`:double>;
type `lines` <???> => struct<`x`:double[], `y`:double[]>;
type `lseq` <double, integer, double> => double[];
type `plot` <???, ???> => struct<`x`:integer[], `y`:double[]>;
type `plot.compare_distributions` <struct<`test_statistic`:double, `p_one_sided`:double, `p_two_sided`:double, `ratio`:struct<`x`:double[], `ratio`:double[]>>, ???> => struct<`x`:double[], `y`:double[]>;
type `pplcon` <double[], double, double, logical> => double[];
type `ppldis` <double[], double, double, logical> => double[];
type `rplcon` <double, double, double> => double[];
type `rpldis` <double, double, double, double> => double[];
