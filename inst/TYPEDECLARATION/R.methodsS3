type `::` <...> => class<`function`>;
type `:::` <class<`function`>, logical> => class<`function`>;
type `appendVarArgs` <...> => class<`function`>;
type `appendVarArgs.function` <class<`function`>, ...> => class<`function`>;
type `export` <class<`function`>> => class<`function`>;
type `export<-` <class<`function`>, logical> => class<`function`>;
type `filter` <character[]> => logical[];
type `findDispatchMethodsS3` <...> => list<any>;
type `findDispatchMethodsS3.default` <character, character, logical, ...> => list<any>;
type `.findFunction` <character, environment | list<environment>, logical[]> => list<class<`function`> | character | class<`standardGeneric`> | character | null>;
type `fun` <any, character> => null;
type `FUN` <...> => logical | <...> => logical;
type `getDispatchMethodS3` <...> => any;
type `getDispatchMethodS3.default` <character, character, ...> => any;
type `getGenericS3` <...> => class<`function`>;
type `getGenericS3.default` <character, environment, logical, ...> => class<`function`>;
type `getMethodS3` <...> => class<`function`>;
type `getMethodS3.default` <character, character, environment, ...> => class<`function`>;
type `hasVarArgs` <...> => logical;
type `hasVarArgs.function` <class<`function`>, ...> => logical;
type `isGenericS3` <...> => logical;
type `isGenericS3.default` <character | class<`function`>, any, ...> => logical;
type `isGenericS4` <...> => logical;
type `isGenericS4.default` <character | class<`function`>, any, ...> => logical;
type `isNameInternalGenericS3` <character, ...> => logical;
type `isPrimitive` <class<`function`> | class<`standardGeneric`>, ...> => logical;
type `knownInternalGenericS3` <any, integer[], ...> => character[];
type `noexport` <class<`function`>> => class<`function`>;
type `pkgStartupMessage` <...> => null;
type `pkgStartupMessage.default` <..., logical | null> => null;
type `rccValidateFunctionName` <character, ...> => null;
type `R.methodsS3_export<-` <class<`function`>, logical> => class<`function`>;
type `S3class<-` <class<`function`>, character> => class<`function`>;
type `setGenericS3` <...> => any;
type `setGenericS3.default` <character, any, environment, any, null | list<class<`function`>>, logical, ...> => any;
type `setMethodS3` <...> => null;
type `setMethodS3.default` <character, character, any, logical, logical, logical, logical, logical, logical, logical, environment, logical> => null;
type `throw` <...> => any;
type `throw.default` <...> => any;
type `validator` <character, ...> => null;
