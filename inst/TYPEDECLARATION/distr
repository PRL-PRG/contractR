type `AbscontDistribution` <class<`function`> | null, class<`function`> | null, class<`function`> | null, class<`function`> | null, class<`matrix`> | null, null, class<`Reals`>, logical> => class<`AbscontDistribution`>;
type `acPart` <class<`UnivarLebDecDistribution`> | class<`AffLinUnivarLebDecDistribution`>> => (class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Chisq`> | class<`DExp`> | class<`Norm`> | class<`Unif`>) | <class<`UnivarLebDecDistribution`>> => (class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Chisq`> | class<`DExp`> | class<`Norm`> | class<`Unif`>) | <class<`AffLinUnivarLebDecDistribution`>> => class<`AffLinAbscontDistribution`>;
type `acWeight` <class<`AffLinUnivarLebDecDistribution`>> => double | <class<`AffLinUnivarLebDecDistribution`> | class<`UnivarLebDecDistribution`>> => double | <class<`UnivarLebDecDistribution`>> => double;
type `Arcsine` < > => class<`Arcsine`>;
type `Beta` <double, double, double> => class<`Beta`>;
type `Binom` <double, double> => class<`Binom`>;
type `.BinomCI.in` <double, double, double, double, class<`Chisq`> | class<`Norm`>, double, double> => double;
type `Cauchy` <double, double> => class<`Cauchy`>;
type `Chisq` <double, double> => class<`Chisq`>;
type `CompoundDistribution` <class<`DiscreteDistribution`> | class<`Pois`>, class<`Norm`> | class<`UnivarDistrList`>, logical, logical> => class<`CompoundDistribution`>;
type `.confqq` <double[], class<`Chisq`>, logical, logical, logical, double, character, double> => list<class<`matrix`> | logical[]>;
type `.consolidategaps` <class<`matrix`>> => class<`matrix`>;
type `.convDiscrDiscr` <class<`Binom`> | class<`LatticeDistribution`>, class<`AffLinLatticeDistribution`> | class<`LatticeDistribution`> | class<`Binom`>> => class<`DiscreteDistribution`>;
type `convpow` <class<`Norm`>, ...> => class<`Norm`> | <class<`AbscontDistribution`>, ...> => class<`AbscontDistribution`> | <class<`AbscontDistribution`> | class<`Norm`>, ...> => (class<`AbscontDistribution`> | class<`Norm`>);
type `d` <double[], logical> => double[] | <double[], logical> => double[] | <integer[], logical> => double[] | <^double[], logical> => ^double[] | <double[], logical, ...> => double[] | <integer[], logical> => double[] | <double[], logical> => double[] | <double[], logical> => double[] | <double, logical> => double | <double, logical> => double | <double[], logical> => double[] | <double, logical> => double | <class<`Beta`>> => class<`function`> | <double[], logical, ...> => double[] | <double[], logical, ...> => double[] | <double[], logical, ...> => double[] | <double[], logical> => double[] | <double[], logical> => double[] | <double, logical> => double | <double, logical> => double | <double[], logical> => double[] | <class<`AffLinAbscontDistribution`>> => class<`function`> | <class<`Logis`>> => class<`function`> | <double[], logical> => double[] | <class<`Cauchy`>> => class<`function`> | <double, logical> => double | <double[], logical> => double[] | <double, logical> => double | <double[], logical> => double[] | <double[], logical> => double[] | <double[], logical> => double[] | <double[], logical> => double[] | <class<`Pois`>> => class<`function`> | <double[], logical> => double[] | <double, logical> => double | <integer[], logical> => double[] | <double[], logical, ...> => double[] | <class<`DiscreteDistribution`>> => class<`function`> | <double[], logical> => double[] | <double[], logical> => double[] | <class<`Nbinom`>> => class<`function`> | <double[], logical> => double[] | <integer[] | double, logical> => double[] | <double[], logical> => double[] | <double, logical> => double | <double[], logical> => double[] | <double, logical> => double | <class<`Binom`>> => class<`function`> | <class<`AbscontDistribution`>> => class<`function`> | <double, logical> => double | <double[], logical, ...> => double[] | <double[], logical> => double[] | <double[], logical, ...> => double[] | <class<`Lnorm`>> => class<`function`> | <double, logical> => double | <class<`AffLinDiscreteDistribution`>> => class<`function`> | <class<`Norm`>> => class<`function`> | <double[], logical> => double[] | <double[], logical> => double[] | <class<`LatticeDistribution`>> => class<`function`> | <double[], logical> => double[] | <double, logical> => double | <class<`Arcsine`>> => class<`function`> | <integer[], logical> => double[] | <class<`Gammad`>> => class<`function`> | <class<`Dirac`>> => class<`function`> | <class<`Geom`>> => class<`function`> | <class<`Fd`>> => class<`function`> | <double[], logical> => double[] | <double, logical> => double | <double[], logical> => double[] | <double[], logical> => double[] | <class<`Chisq`>> => class<`function`> | <double, logical> => double | <class<`Weibull`>> => class<`function`> | <double[], logical> => double[] | <double[], logical> => double[] | <double[], logical> => double[] | <class<`DExp`>> => class<`function`> | <double[], logical, ...> => double[] | <class<`Td`>> => class<`function`> | <double[], logical> => double[] | <double[], logical, ...> => double[] | <class<`Exp`>> => class<`function`> | <class<`AffLinLatticeDistribution`>> => class<`function`> | <double[], logical> => double[] | <double[], logical> => double[] | <class<`Unif`>> => class<`function`> | <class<`Hyper`>> => class<`function`> | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`AffLinLatticeDistribution`> | class<`Beta`> | class<`Binom`> | class<`Cauchy`> | class<`Chisq`> | class<`DExp`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Fd`> | class<`Gammad`> | class<`Geom`> | class<`Hyper`> | class<`LatticeDistribution`> | class<`Lnorm`> | class<`Logis`> | class<`Nbinom`> | class<`Norm`> | class<`Pois`> | class<`Td`> | class<`Unif`> | class<`Weibull`> | class<`Arcsine`>> => class<`function`> | <double[], logical> => double[] | <double[], logical> => double[] | <double, logical> => double | <double, logical> => double | <double, logical> => double | <double, logical> => double;
type `.D2P` <class<`function`>, any, double, double, double> => class<`function`>;
type `d.discrete` <^double[], logical> => ^double[] | <double[], logical> => double[] | <double[], logical> => double[] | <double[], logical> => double[] | <class<`UnivarLebDecDistribution`>, ...> => class<`function`> | <class<`UnivarLebDecDistribution`>, ...> => class<`function`>;
type `decomposePM` <class<`UnivarLebDecDistribution`>> => list<list<class<`UnivarLebDecDistribution`> | double | class<`Dirac`> | double>> | <class<`AbscontDistribution`>> => list<list<class<`AbscontDistribution`> | double>> | <class<`DiscreteDistribution`>> => list<list<class<`Dirac`> | double | class<`DiscreteDistribution`> | double>> | <class<`Norm`>> => list<list<class<`AbscontDistribution`> | double>> | <class<`LatticeDistribution`>> => list<list<class<`DiscreteDistribution`> | double | class<`Dirac`> | double>> | <class<`AbscontDistribution`> | class<`Norm`> | class<`DiscreteDistribution`> | class<`LatticeDistribution`> | class<`UnivarLebDecDistribution`>> => (list<list<class<`AbscontDistribution`> | double>> | list<list<class<`Dirac`> | double | class<`DiscreteDistribution`> | double>> | list<list<class<`DiscreteDistribution`> | double | class<`Dirac`> | double>> | list<list<class<`UnivarLebDecDistribution`> | double | class<`Dirac`> | double>>);
type `.del0dmixfun` <class<`UnivarLebDecDistribution`>> => class<`UnivarLebDecDistribution`>;
type `.deleteItemsMCL` <list<double[] | character>> => list<double[] | character>;
type `devNew` <...> => null;
type `DExp` <double> => class<`DExp`>;
type `df` <class<`TParameter`>, ...> => double | <class<`Chisq`>, ...> => double | <class<`ChisqParameter`>, ...> => double | <class<`Chisq`> | class<`ChisqParameter`> | class<`Td`> | class<`TParameter`>, ...> => double | <class<`Td`>, ...> => double;
type `df<-` <class<`TParameter`>, double> => class<`TParameter`> | <class<`Chisq`>, double> => class<`Chisq`> | <class<`Td`>, double> => class<`Td`> | <class<`Chisq`> | class<`Td`> | class<`TParameter`>, double> => (class<`Chisq`> | class<`Td`> | class<`TParameter`>);
type `df1` <class<`FParameter`>> => double | <class<`Fd`>> => double | <class<`Fd`> | class<`FParameter`>> => double;
type `df1<-` <class<`Fd`>, double> => class<`Fd`> | <class<`Fd`>, double> => class<`Fd`>;
type `df2` <class<`Fd`> | class<`FParameter`>> => double | <class<`Fd`>> => double | <class<`FParameter`>> => double;
type `df2<-` <class<`FParameter`>, double> => class<`FParameter`> | <class<`FParameter`>, double> => class<`FParameter`>;
type `dimension` <class<`Reals`>> => double | <class<`EuclideanSpace`>> => double | <class<`EuclideanSpace`> | class<`Reals`>> => double;
type `dimension<-` <class<`EuclideanSpace`>, double> => class<`EuclideanSpace`> | <class<`EuclideanSpace`>, double> => class<`EuclideanSpace`>;
type `Dirac` <double> => class<`Dirac`>;
type `DiscreteDistribution` <double[], any, logical, logical, logical, logical, logical, any> => class<`DiscreteDistribution`>;
type `discretePart` <class<`AffLinUnivarLebDecDistribution`> | class<`UnivarLebDecDistribution`>> => (class<`AffLinDiscreteDistribution`> | class<`Binom`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`LatticeDistribution`> | class<`Nbinom`> | class<`Pois`>) | <class<`UnivarLebDecDistribution`>> => (class<`Binom`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`LatticeDistribution`> | class<`Nbinom`> | class<`Pois`>) | <class<`AffLinUnivarLebDecDistribution`>> => class<`AffLinDiscreteDistribution`>;
type `discretePart<-` <class<`UnivarLebDecDistribution`>, class<`Dirac`>> => class<`UnivarLebDecDistribution`> | <class<`UnivarLebDecDistribution`>, class<`Dirac`>> => class<`UnivarLebDecDistribution`>;
type `discreteWeight` <class<`UnivarLebDecDistribution`>> => double | <class<`UnivarLebDecDistribution`>> => double;
type `.discretizeP` <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Chisq`> | class<`Exp`> | class<`Norm`> | class<`Td`>, double, double, double> => double[];
type `distrARITH` <null> => null;
type `DistrList` <..., any> => class<`DistrList`>;
type `distrMASK` <null> => null;
type `distroptions` <...> => list<double>;
type `DistrSymmList` <...> => class<`DistrSymmList`>;
type `.dmixfun` <any, double[], logical, null | double[]> => class<`function`>;
type `EllipticalSymmetry` <double> => class<`EllipticalSymmetry`>;
type `EmpiricalDistribution` <double[], logical, logical, logical, logical, logical, any, double> => class<`DiscreteDistribution`>;
type `.EuclidAlgo` <double, double> => double;
type `EuclideanSpace` <double> => class<`EuclideanSpace`>;
type `Exp` <double> => class<`Exp`>;
type `.expm.c` <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`>> => class<`AbscontDistribution`>;
type `Fd` <double, double, double> => class<`Fd`>;
type `.fillList` <class<`call`> | list<class<`call`>> | list<expression | character> | expression | list<expression>, integer> => (list<class<`call`>> | list<expression | character> | list<expression>);
type `flat.LCD` <..., double[], any> => class<`UnivarLebDecDistribution`>;
type `flat.mix` <class<`CompoundDistribution`> | class<`UnivarMixingDistribution`>> => (class<`AbscontDistribution`> | class<`UnivarLebDecDistribution`>);
type `.fM` <double, class<`function`>> => double;
type `Gammad` <double, double> => class<`Gammad`>;
type `gaps` <class<`Chisq`>> => (class<`matrix`> | null) | <class<`AbscontDistribution`>> => (class<`matrix`> | null) | <class<`UnivarMixingDistribution`>> => null | <class<`DExp`>> => null | <class<`Exp`>> => null | <class<`AffLinAbscontDistribution`>> => (class<`matrix`> | null) | <class<`AffLinUnivarLebDecDistribution`>> => null | <class<`Unif`>> => null | <class<`Norm`>> => null | <class<`Cauchy`>> => null | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Chisq`> | class<`UnivarLebDecDistribution`> | class<`Binom`> | class<`Dirac`> | class<`Pois`> | class<`AffLinUnivarLebDecDistribution`> | class<`Cauchy`> | class<`DExp`> | class<`Exp`> | class<`Norm`> | class<`Unif`> | class<`UnivarMixingDistribution`>> => any | <class<`UnivarLebDecDistribution`>> => (class<`matrix`> | null);
type `Geom` <double> => class<`Geom`>;
type `.getCommonWidth` <double, double, double> => double;
type `getdistrOption` <character> => double;
type `getLabel` <class<`Exp`> | class<`Norm`> | class<`Weibull`>, logical> => character;
type `getLow` <class<`Cauchy`>, ...> => double | <class<`Chisq`>, ...> => double | <class<`Nbinom`>, ...> => double | <class<`Binom`>, ...> => integer | <class<`Norm`>, ...> => double | <class<`AffLinUnivarLebDecDistribution`>, ...> => double | <class<`Unif`>, ...> => double | <class<`Td`>, ...> => double | <class<`DiscreteDistribution`>, ...> => double | <class<`AffLinDiscreteDistribution`>, ...> => double | <class<`AbscontDistribution`>, ...> => (class<`Integer`> | double) | <class<`LatticeDistribution`>, ...> => double | <class<`Exp`>, ...> => double | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`AffLinLatticeDistribution`> | class<`AffLinUnivarLebDecDistribution`> | class<`Cauchy`> | class<`Chisq`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`LatticeDistribution`> | class<`Nbinom`> | class<`Norm`> | class<`Pois`> | class<`Td`> | class<`Unif`> | class<`Binom`> | class<`Geom`>, ...> => (class<`Integer`> | double) | <class<`Dirac`>, ...> => double | <class<`AffLinLatticeDistribution`>, ...> => double | <class<`Geom`>, ...> => integer | <class<`AffLinAbscontDistribution`>, ...> => double | <class<`Pois`>, ...> => double;
type `.getObjName` <double> => character;
type `getUp` <class<`AffLinLatticeDistribution`>, ...> => double | <class<`Exp`>, ...> => double | <class<`DiscreteDistribution`>, ...> => double | <class<`Td`>, ...> => double | <class<`Pois`>, ...> => double | <class<`AffLinAbscontDistribution`>, ...> => double | <class<`Unif`>, ...> => double | <class<`Binom`>, ...> => integer | <class<`Nbinom`>, ...> => double | <class<`AffLinDiscreteDistribution`>, ...> => double | <class<`Dirac`>, ...> => double | <class<`Geom`>, ...> => double | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`AffLinLatticeDistribution`> | class<`AffLinUnivarLebDecDistribution`> | class<`Cauchy`> | class<`Chisq`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Geom`> | class<`LatticeDistribution`> | class<`Nbinom`> | class<`Norm`> | class<`Pois`> | class<`Td`> | class<`Unif`> | class<`Binom`>, ...> => (class<`Integer`> | double) | <class<`Chisq`>, ...> => double | <class<`Cauchy`>, ...> => double | <class<`AffLinUnivarLebDecDistribution`>, ...> => double | <class<`Norm`>, ...> => double | <class<`AbscontDistribution`>, ...> => (class<`Integer`> | double) | <class<`LatticeDistribution`>, ...> => double;
type `Huberize` <class<`Norm`>, ...> => class<`AffLinUnivarLebDecDistribution`> | <class<`Norm`>, ...> => class<`AffLinUnivarLebDecDistribution`>;
type `Hyper` <double, double, double> => class<`Hyper`>;
type `img` <class<`AffLinUnivarLebDecDistribution`>> => class<`Reals`> | <class<`AffLinUnivarLebDecDistribution`>> => class<`Reals`>;
type `.inArgs` <character, class<`function`>> => logical;
type `.inGaps` <double[], null> => logical[];
type `.inWithTol` <double[], double[], double> => logical[];
type `.isEqual` <double[] | class<`Integer`>, double, double> => logical[];
type `.isEqual01` <double[]> => logical[];
type `.isIn` <double[], class<`matrix`>, double> => logical[];
type `.isInteger` <double[] | class<`Integer`>, double> => logical[];
type `.isNatural` <double, double> => logical;
type `.isNatural0` <double, double> => logical;
type `isOldVersion` <class<`AffLinAbscontDistribution`>> => logical | <class<`Exp`>> => logical | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Cauchy`> | class<`Chisq`> | class<`Exp`> | class<`Norm`>> => logical | <class<`AbscontDistribution`>> => logical | <class<`Cauchy`>> => logical | <class<`Norm`>> => logical | <class<`Chisq`>> => logical;
type `.is.vector.lattice` <double[]> => logical;
type `k` <class<`Hyper`>> => double | <class<`HyperParameter`>> => double | <class<`Hyper`> | class<`HyperParameter`>> => double;
type `lambda` <class<`Pois`>> => double | <class<`PoisParameter`>> => double | <class<`Pois`> | class<`PoisParameter`>> => double;
type `lambda<-` <class<`Pois`> | class<`PoisParameter`>, double> => (class<`Pois`> | class<`PoisParameter`>) | <class<`Pois`>, double> => class<`Pois`> | <class<`PoisParameter`>, double> => class<`PoisParameter`>;
type `lattice` <class<`Dirac`>> => class<`Lattice`> | <class<`AffLinLatticeDistribution`>> => class<`Lattice`> | <class<`Nbinom`>> => class<`Lattice`> | <class<`Binom`>> => class<`Lattice`> | <class<`Pois`>> => class<`Lattice`> | <class<`Geom`>> => class<`Lattice`> | <class<`AffLinLatticeDistribution`> | class<`Binom`> | class<`Dirac`> | class<`Geom`> | class<`LatticeDistribution`> | class<`Nbinom`> | class<`Pois`>> => class<`Lattice`> | <class<`LatticeDistribution`>> => class<`Lattice`>;
type `Lattice` <double, double, double, character> => class<`Lattice`>;
type `LatticeDistribution` <class<`Lattice`> | null, null | double[], null | double[], logical, logical, class<`AffLinDiscreteDistribution`> | null | class<`DiscreteDistribution`>, logical, class<`NoSymmetry`>> => (class<`AffLinLatticeDistribution`> | class<`LatticeDistribution`>);
type `Length` <class<`Lattice`>> => double | <class<`Lattice`>> => double;
type `liesIn` <class<`EuclideanSpace`> | class<`Naturals`> | class<`Reals`>, double[]> => logical | <class<`EuclideanSpace`>, double[]> => logical | <class<`Reals`>, double[]> => logical | <class<`Naturals`>, double[]> => logical;
type `liesInSupport` <class<`AbscontDistribution`> | class<`AffLinLatticeDistribution`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Pois`> | class<`UnivarLebDecDistribution`>, double[], ...> => logical[] | <class<`Exp`>, double[], ...> => logical[] | <class<`AbscontDistribution`>, double[], ...> => logical[] | <class<`UnivarLebDecDistribution`>, double[], ...> => logical[] | <class<`AffLinLatticeDistribution`>, double[], ...> => logical[] | <class<`Pois`>, integer[], ...> => logical[] | <class<`Pois`>, double[], ...> => logical[] | <class<`DiscreteDistribution`>, double[], ...> => logical[];
type `.List` <list<class<`call`>> | class<`call`> | list<expression | character> | list<expression> | expression> => (list<class<`call`>> | list<expression | character> | list<expression>);
type `Lnorm` <double, double> => class<`Lnorm`>;
type `location` <class<`DiracParameter`> | class<`Cauchy`> | class<`CauchyParameter`> | class<`Dirac`> | class<`Logis`> | class<`LogisParameter`>> => (class<`Integer`> | double) | <class<`CauchyParameter`>> => double | <class<`Dirac`>> => double | <class<`Logis`>> => double | <class<`LogisParameter`>> => double | <class<`DiracParameter`>> => (class<`Integer`> | double) | <class<`Cauchy`>> => double;
type `location<-` <class<`DiracParameter`>, double> => class<`DiracParameter`> | <class<`Cauchy`> | class<`CauchyParameter`> | class<`Dirac`> | class<`DiracParameter`> | class<`Logis`>, double> => (class<`Cauchy`> | class<`CauchyParameter`> | class<`Dirac`> | class<`DiracParameter`> | class<`Logis`>) | <class<`CauchyParameter`>, double> => class<`CauchyParameter`> | <class<`Dirac`>, double> => class<`Dirac`> | <class<`Cauchy`>, double> => class<`Cauchy`> | <class<`Logis`>, double> => class<`Logis`>;
type `.logExact` <class<`UnivarLebDecDistribution`>> => logical | <class<`AffLinUnivarLebDecDistribution`>> => logical | <class<`DiscreteDistribution`>> => logical | <class<`AffLinDiscreteDistribution`>> => logical | <class<`Norm`>> => logical | <class<`AbscontDistribution`>> => logical | <class<`LatticeDistribution`>> => logical | <class<`AffLinAbscontDistribution`>> => logical | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`AffLinUnivarLebDecDistribution`> | class<`DiscreteDistribution`> | class<`Geom`> | class<`LatticeDistribution`> | class<`Norm`> | class<`UnivarLebDecDistribution`>> => logical | <class<`Geom`>> => logical;
type `Logis` <double, double> => class<`Logis`>;
type `.logm.c` <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`>> => class<`AbscontDistribution`>;
type `.logm.d` <class<`DiscreteDistribution`>> => class<`DiscreteDistribution`>;
type `.loupmixfun` <class<`UnivarDistrList`> | list<class<`AbscontDistribution`>> | list<class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`>> | list<class<`AbscontDistribution`> | class<`DExp`>> | list<class<`Chisq`> | class<`AbscontDistribution`>> | list<class<`Norm`> | class<`AbscontDistribution`>> | list<class<`Norm`>> | list<class<`Unif`>>> => list<double>;
type `.lowerExact` <class<`Norm`>> => logical | <class<`AbscontDistribution`>> => logical | <class<`Nbinom`>> => logical | <class<`AffLinAbscontDistribution`>> => logical | <class<`UnivarLebDecDistribution`>> => logical | <class<`Binom`>> => logical | <class<`LatticeDistribution`>> => logical | <class<`Chisq`>> => logical | <class<`AffLinDiscreteDistribution`>> => logical | <class<`Dirac`>> => logical | <class<`Geom`>> => logical | <class<`AffLinUnivarLebDecDistribution`>> => logical | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`AffLinUnivarLebDecDistribution`> | class<`Binom`> | class<`Chisq`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`Geom`> | class<`LatticeDistribution`> | class<`Nbinom`> | class<`Norm`> | class<`UnivarLebDecDistribution`>> => logical | <class<`DiscreteDistribution`>> => logical;
type `m` <class<`HyperParameter`>> => double | <class<`Hyper`> | class<`HyperParameter`>> => double | <class<`Hyper`>> => double;
type `m<-` <class<`HyperParameter`>, double> => class<`HyperParameter`> | <class<`Hyper`>, double> => class<`Hyper`> | <class<`Hyper`> | class<`HyperParameter`>, double> => (class<`Hyper`> | class<`HyperParameter`>);
type `makeAbscontDistribution` <class<`AffLinUnivarLebDecDistribution`>, null, null, null, logical, double, any> => class<`AbscontDistribution`>;
type `.makeD` <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Gammad`> | class<`Norm`>, class<`call`>, class<`call`> | class<`Integer`> | double | null, class<`(`> | null | class<`call`>> => class<`function`>;
type `.makeDNew` <double[], class<`matrix`> | class<`table`> | double[], double | null, logical, character> => class<`function`>;
type `.makedotsL` <null> => null;
type `.makedotsLowLevel` <null | pairlist> => (null | pairlist);
type `.makedotsPt` <null | pairlist> => (null | list<double>);
type `.make.lattice.es.vector` <double[]> => class<`Lattice`>;
type `.makeLenAndOrder` <character[] | double, integer[]> => (character[] | double[]);
type `.makeP` <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Gammad`> | class<`Norm`>, class<`call`>, logical, any, class<`(`> | null | double, class<`call`> | null> => class<`function`>;
type `.makePNew` <double[], class<`table`> | double[] | null, double | null, logical, logical, null | class<`function`>, null | class<`matrix`>, null | class<`matrix`>> => class<`function`>;
type `.makeQ` <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Gammad`>, class<`call`>, logical, logical> => class<`function`>;
type `.makeQNew` <double[], double[], any, logical, any, double, logical> => class<`function`>;
type `Max` <class<`Unif`>> => double | <class<`UnifParameter`>> => double | <class<`Unif`> | class<`UnifParameter`>> => double;
type `Max<-` <class<`UnifParameter`>, double> => class<`UnifParameter`> | <class<`UnifParameter`>, double> => class<`UnifParameter`>;
type `Maximum` <class<`Dirac`>, class<`UnivarLebDecDistribution`>, ...> => class<`AffLinUnivarLebDecDistribution`> | <class<`Unif`>, class<`AbscontDistribution`>, ...> => class<`AffLinAbscontDistribution`> | <class<`Unif`> | class<`Dirac`>, class<`AbscontDistribution`> | class<`UnivarLebDecDistribution`>, ...> => (class<`AffLinAbscontDistribution`> | class<`AffLinUnivarLebDecDistribution`>);
type `mean` <class<`NormParameter`>, ...> => double | <class<`Norm`>, ...> => double | <class<`UniNormParameter`>, ...> => double;
type `meanlog` <class<`LnormParameter`>> => double | <class<`Lnorm`>> => double | <class<`Lnorm`> | class<`LnormParameter`>> => double;
type `meanlog<-` <class<`Lnorm`>, double> => class<`Lnorm`> | <class<`LnormParameter`>, double> => class<`LnormParameter`> | <class<`Lnorm`> | class<`LnormParameter`>, double> => (class<`Lnorm`> | class<`LnormParameter`>);
type `.mergegaps` <class<`matrix`> | null, any> => (class<`matrix`> | null);
type `.mergegaps2` <null, any> => null;
type `Min` <class<`Unif`>> => double | <class<`Unif`> | class<`UnifParameter`>> => double | <class<`UnifParameter`>> => double;
type `Min<-` <class<`Unif`>, double> => class<`Unif`> | <class<`Unif`>, double> => class<`Unif`>;
type `Minimum` <class<`Exp`>, double, ...> => class<`AbscontDistribution`> | <class<`AffLinAbscontDistribution`>, class<`Dirac`>, ...> => class<`UnivarLebDecDistribution`> | <class<`Norm`>, class<`Dirac`>, ...> => class<`UnivarLebDecDistribution`> | <class<`Norm`>, class<`Pois`>, ...> => class<`UnivarLebDecDistribution`> | <class<`Unif`>, class<`AffLinAbscontDistribution`>, ...> => class<`AbscontDistribution`> | <class<`Exp`> | class<`Unif`> | class<`Dirac`> | class<`AffLinAbscontDistribution`> | class<`Norm`>, double | class<`AffLinAbscontDistribution`> | class<`Unif`> | class<`Dirac`> | class<`AffLinUnivarLebDecDistribution`> | class<`Pois`>, ...> => (class<`AbscontDistribution`> | class<`DiscreteDistribution`> | class<`UnivarLebDecDistribution`>) | <class<`Unif`>, class<`Unif`>, ...> => class<`AbscontDistribution`> | <class<`Dirac`>, class<`Dirac`>, ...> => class<`DiscreteDistribution`> | <class<`Dirac`>, class<`AffLinUnivarLebDecDistribution`>, ...> => class<`UnivarLebDecDistribution`>;
type `mixCoeff` <class<`CompoundDistribution`> | class<`UnivarMixingDistribution`>> => double[] | <class<`CompoundDistribution`>> => double[] | <class<`UnivarMixingDistribution`>> => double[];
type `mixDistr` <class<`CompoundDistribution`>> => class<`UnivarDistrList`> | <class<`UnivarLebDecDistribution`>> => class<`UnivarDistrList`> | <class<`UnivarMixingDistribution`>> => class<`UnivarDistrList`> | <class<`CompoundDistribution`> | class<`UnivarLebDecDistribution`> | class<`UnivarMixingDistribution`>> => class<`UnivarDistrList`>;
type `.modifyqgaps` <class<`function`>, class<`function`>, class<`matrix`>, character> => class<`function`>;
type `.multm` <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Gammad`> | class<`AffLinDiscreteDistribution`> | class<`DiscreteDistribution`>, class<`Integer`> | double, character> => (class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`DiscreteDistribution`>);
type `n` <class<`Hyper`>> => double | <class<`Hyper`> | class<`HyperParameter`>> => double | <class<`HyperParameter`>> => double;
type `name` <class<`Lattice`>> => character | <class<`Lattice`>> => character;
type `Naturals` < > => class<`Naturals`>;
type `Nbinom` <double, double> => class<`Nbinom`>;
type `ncp` <class<`FParameter`>> => double | <class<`TParameter`>> => double | <class<`Beta`> | class<`BetaParameter`> | class<`Chisq`> | class<`ChisqParameter`> | class<`Fd`> | class<`FParameter`> | class<`Td`> | class<`TParameter`>> => double | <class<`BetaParameter`>> => double | <class<`Fd`>> => double | <class<`ChisqParameter`>> => double | <class<`Chisq`>> => double | <class<`Beta`>> => double | <class<`Td`>> => double;
type `ncp<-` <class<`Beta`> | class<`ChisqParameter`>, double> => (class<`Beta`> | class<`ChisqParameter`>) | <class<`ChisqParameter`>, double> => class<`ChisqParameter`> | <class<`Beta`>, double> => class<`Beta`>;
type `Norm` <double, double> => class<`Norm`>;
type `NoSymmetry` < > => class<`NoSymmetry`>;
type `.NotInSupport` <double[], class<`Chisq`> | class<`Norm`>> => logical[];
type `.notwithLArg` <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinLatticeDistribution`> | class<`Binom`> | class<`Chisq`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Norm`> | class<`Pois`> | class<`Td`> | class<`Unif`>> => logical;
type `p` <class<`matrix`> | double[], logical, logical> => (class<`matrix`> | double[]) | <double[], logical, logical> => double[] | <^double[] | class<`matrix`>, logical, logical> => ^double[] | <double[], logical, logical> => double[] | <^double[], logical, logical, ...> => ^double[] | <^double[], logical, logical> => ^double[] | <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <^double[] | class<`matrix`>, logical, logical> => ^double[] | <^double[], logical, logical> => ^double[] | <double[], logical, logical> => double[] | <^double[] | class<`matrix`>, logical, logical, ...> => (^double[] | class<`matrix`>) | <^double[] | class<`matrix`>, logical, logical> => ^double[] | <class<`matrix`> | double[], logical, logical> => (class<`matrix`> | double[]) | <double, logical, logical> => double | <class<`AffLinDiscreteDistribution`>> => class<`function`> | <class<`Beta`>> => class<`function`> | <double, logical, logical> => double | <class<`AbscontDistribution`>> => class<`function`> | <double, logical, logical> => double | <class<`Gammad`>> => class<`function`> | <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <^double[], logical, logical> => ^double[] | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double, logical, logical> => double | <class<`Binom`>> => class<`function`> | <class<`Logis`>> => class<`function`> | <class<`Nbinom`>> => class<`function`> | <class<`DExp`>> => class<`function`> | <double, logical, logical> => double | <class<`LatticeDistribution`>> => class<`function`> | <class<`Pois`>> => class<`function`> | <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <class<`matrix`> | double[], logical, logical> => (class<`matrix`> | double[]) | <double[], logical, logical> => double[] | <class<`Dirac`>> => class<`function`> | <class<`Td`>> => class<`function`> | <class<`Chisq`>> => class<`function`> | <double[] | class<`matrix`>, logical, logical> => (double[] | class<`matrix`>) | <class<`Cauchy`>> => class<`function`> | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double, logical, logical> => double | <double[], logical, logical> => double[] | <class<`Weibull`>> => class<`function`> | <double, logical, logical> => double | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double, logical, logical> => double | <class<`Exp`>> => class<`function`> | <class<`Unif`>> => class<`function`> | <double, logical, logical> => double | <class<`Geom`>> => class<`function`> | <class<`DiscreteDistribution`>> => class<`function`> | <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <class<`AffLinLatticeDistribution`>> => class<`function`> | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`AffLinLatticeDistribution`> | class<`AffLinUnivarLebDecDistribution`> | class<`Beta`> | class<`Binom`> | class<`Cauchy`> | class<`Chisq`> | class<`DExp`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Fd`> | class<`Gammad`> | class<`Geom`> | class<`Hyper`> | class<`LatticeDistribution`> | class<`Lnorm`> | class<`Logis`> | class<`Nbinom`> | class<`Norm`> | class<`Pois`> | class<`Td`> | class<`Unif`> | class<`UnivarLebDecDistribution`> | class<`Weibull`> | class<`Arcsine`> | class<`CompoundDistribution`>> => class<`function`> | <class<`AffLinUnivarLebDecDistribution`>> => class<`function`> | <class<`matrix`> | double[], logical, logical> => double[] | <double, logical, logical> => double | <double[], logical, logical> => double[] | <class<`CompoundDistribution`>> => class<`function`> | <double, logical, logical> => double | <class<`Hyper`>> => class<`function`> | <double, logical, logical> => double | <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double[], logical, logical> => double[] | <class<`Fd`>> => class<`function`> | <class<`AffLinAbscontDistribution`>> => class<`function`> | <integer[], logical, logical> => double[] | <double[], logical, logical> => double[] | <double[] | class<`matrix`>, logical, logical, ...> => double[] | <class<`Lnorm`>> => class<`function`> | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double[], logical, logical> => double[] | <class<`UnivarLebDecDistribution`>> => class<`function`> | <double, logical, logical> => double | <class<`Arcsine`>> => class<`function`> | <class<`Norm`>> => class<`function`> | <double[] | class<`matrix`>, logical, logical, ...> => (double[] | class<`matrix`>);
type `.P2D` <class<`function`>, any, double, double, double> => class<`function`>;
type `.P2Q` <class<`function`>, any, double, double, double, double, double> => class<`function`>;
type `p.ac` <^double[] | class<`matrix`>, logical, logical> => ^double[] | <class<`UnivarLebDecDistribution`>, ...> => class<`function`> | <class<`UnivarLebDecDistribution`>, ...> => class<`function`>;
type `.panel.mingle` <pairlist, character> => (class<`call`> | list<class<`call`>> | list<expression>);
type `param` <class<`Binom`>> => class<`BinomParameter`> | <class<`Hyper`>> => class<`HyperParameter`> | <class<`Geom`>> => class<`NbinomParameter`> | <class<`Cauchy`>> => class<`CauchyParameter`> | <class<`Norm`>> => class<`UniNormParameter`> | <class<`Fd`>> => class<`FParameter`> | <class<`Gammad`>> => class<`GammaParameter`> | <class<`Lnorm`>> => class<`LnormParameter`> | <class<`AffLinUnivarLebDecDistribution`>> => null | <class<`Pois`>> => class<`PoisParameter`> | <class<`Dirac`>> => class<`DiracParameter`> | <class<`Unif`>> => class<`UnifParameter`> | <class<`Weibull`>> => class<`WeibullParameter`> | <class<`Td`>> => class<`TParameter`> | <class<`Exp`>> => class<`ExpParameter`> | <class<`UnivarLebDecDistribution`>> => null | <class<`AbscontDistribution`>> => null | <class<`DiscreteDistribution`>> => null | <class<`DExp`>> => class<`ExpParameter`> | <class<`Beta`>> => class<`BetaParameter`> | <class<`Chisq`>> => class<`ChisqParameter`> | <class<`AffLinAbscontDistribution`>> => null | <class<`LatticeDistribution`>> => null | <class<`AffLinDiscreteDistribution`>> => null | <class<`Beta`> | class<`Binom`> | class<`Cauchy`> | class<`Chisq`> | class<`Dirac`> | class<`DExp`> | class<`Exp`> | class<`Fd`> | class<`Gammad`> | class<`Hyper`> | class<`Lnorm`> | class<`Logis`> | class<`Geom`> | class<`Nbinom`> | class<`Pois`> | class<`Td`> | class<`Unif`> | class<`Norm`> | class<`Weibull`> | class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`> | class<`AffLinUnivarLebDecDistribution`> | class<`DiscreteDistribution`> | class<`LatticeDistribution`> | class<`UnivarLebDecDistribution`>> => (class<`BetaParameter`> | class<`BinomParameter`> | class<`CauchyParameter`> | class<`ChisqParameter`> | class<`DiracParameter`> | class<`ExpParameter`> | class<`FParameter`> | class<`GammaParameter`> | class<`HyperParameter`> | class<`LnormParameter`> | class<`LogisParameter`> | class<`NbinomParameter`> | class<`PoisParameter`> | class<`TParameter`> | class<`UnifParameter`> | class<`UniNormParameter`> | class<`WeibullParameter`> | null) | <class<`Logis`>> => class<`LogisParameter`> | <class<`Nbinom`>> => class<`NbinomParameter`>;
type `pivot` <class<`Lattice`>> => double | <class<`Lattice`>> => double;
type `pivot<-` <class<`Lattice`>, double> => class<`Lattice`> | <class<`Lattice`>, double> => class<`Lattice`>;
type `.pk2` <double, double> => double;
type `.pks2` <double, double> => double;
type `p.l` <double[], logical, logical> => double[] | <double[] | class<`matrix`>, logical, logical> => (double[] | class<`matrix`>) | <double[], logical, logical> => double[] | <class<`Binom`>> => class<`function`> | <class<`AffLinAbscontDistribution`>> => class<`function`> | <double[], logical, logical> => double[] | <class<`Chisq`>> => class<`function`> | <class<`Dirac`>> => class<`function`> | <class<`DExp`>> => class<`function`> | <class<`Unif`>> => class<`function`> | <class<`Geom`>> => class<`function`> | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Chisq`> | class<`DExp`> | class<`Norm`> | class<`Unif`> | class<`Binom`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`Geom`> | class<`Nbinom`> | class<`Pois`> | class<`UnivarLebDecDistribution`> | class<`UnivarMixingDistribution`>> => class<`function`> | <class<`UnivarMixingDistribution`>> => class<`function`> | <class<`UnivarLebDecDistribution`>> => class<`function`> | <class<`Nbinom`>> => class<`function`> | <class<`DiscreteDistribution`>> => class<`function`> | <class<`Norm`>> => class<`function`> | <class<`Pois`>> => class<`function`> | <class<`AbscontDistribution`>> => class<`function`>;
type `plot` <class<`DiscreteDistribution`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`AffLinUnivarLebDecDistribution`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`Cauchy`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`UnivarLebDecDistribution`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`UnivarDistrList`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`Chisq`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`Binom`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`DistrList`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`Pois`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`Nbinom`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`CompoundDistribution`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`AffLinAbscontDistribution`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`Exp`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Norm`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`Norm`>, any, ...> => class<`DiagnInfo`, `plotInfo`> | <class<`LatticeDistribution`>, any, ...> => class<`DiagnInfo`, `plotInfo`>;
type `.plusm` <class<`AffLinAbscontDistribution`> | class<`Exp`> | class<`DiscreteDistribution`>, double, character> => (class<`AffLinAbscontDistribution`> | class<`AffLinDiscreteDistribution`>);
type `.pmixfun` <any, double[], character> => class<`function`>;
type `Pois` <double> => class<`Pois`>;
type `PosDefSymmMatrix` <class<`matrix`> | double> => class<`PosDefSymmMatrix`>;
type `PosSemDefSymmMatrix` <class<`matrix`> | double> => class<`PosSemDefSymmMatrix`>;
type `p.r` <double[] | class<`matrix`>, logical, logical> => (double[] | class<`matrix`>) | <class<`Norm`>> => class<`function`> | <class<`Norm`>> => class<`function`>;
type `.presubs` <character | expression | logical, character[], character[]> => expression;
type `prob` <class<`Binom`>> => double | <class<`NbinomParameter`>> => double | <class<`Geom`>> => double | <class<`BinomParameter`>> => double | <class<`DiscreteDistribution`>> => double[] | <class<`Nbinom`>> => double | <class<`Binom`> | class<`BinomParameter`> | class<`Geom`> | class<`Nbinom`> | class<`NbinomParameter`> | class<`DiscreteDistribution`>> => double[];
type `prob<-` <class<`Geom`>, double> => class<`Geom`> | <class<`Geom`>, double> => class<`Geom`>;
type `q` <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double, logical, logical> => double | <class<`Hyper`>, double, logical> => class<`function`> | <class<`Lnorm`>, double, logical> => class<`function`> | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <class<`Gammad`>, double, logical> => class<`function`> | <class<`AbscontDistribution`>, double, logical> => class<`function`> | <class<`UnivarLebDecDistribution`>, double, logical> => class<`function`> | <double, logical, logical> => double | <class<`Fd`>, double, logical> => class<`function`> | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <class<`Binom`>, double, logical> => class<`function`> | <class<`LatticeDistribution`>, double, logical> => class<`function`> | <double, logical, logical> => double | <class<`Cauchy`>, double, logical> => class<`function`> | <double, logical, logical> => double | <class<`Pois`>, double, logical> => class<`function`> | <class<`Logis`>, double, logical> => class<`function`> | <class<`DExp`>, double, logical> => class<`function`> | <double, logical, logical> => double | <class<`Weibull`>, double, logical> => class<`function`> | <class<`Dirac`>, double, logical> => class<`function`> | <double, logical, logical> => double | <class<`Chisq`>, double, logical> => class<`function`> | <double, logical, logical> => double | <class<`Beta`>, double, logical> => class<`function`> | <class<`Nbinom`>, double, logical> => class<`function`> | <double, logical, logical> => double | <class<`Td`>, double, logical> => class<`function`> | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <class<`Arcsine`>, double, logical> => class<`function`> | <double, logical, logical> => double | <class<`Exp`>, double, logical> => class<`function`> | <class<`Geom`>, double, logical> => class<`function`> | <class<`Norm`>, double, logical> => class<`function`> | <double, logical, logical> => double | <double[], logical, logical> => ^double[] | <class<`Unif`>, double, logical> => class<`function`> | <class<`DiscreteDistribution`>, double, logical> => class<`function`>;
type `.q2kolmogorov` <double, any, logical, any> => double;
type `.Q2P` <class<`function`>, double> => class<`function`>;
type `.q2pw` <double[], double[], class<`Chisq`> | class<`Norm`>, any, double, logical, any, any> => class<`matrix`>;
type `q.l` <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical, ...> => double | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical, ...> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical, ...> => (class<`Integer`> | double) | <double, logical, logical, ...> => double | <double, logical, logical> => double | <double[], logical, logical> => double[] | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double, logical, logical> => double | <double[], logical, logical> => double[] | <double, logical, logical> => double | <class<`Binom`>> => class<`function`> | <class<`Geom`>> => class<`function`> | <double, logical, logical> => double | <class<`Chisq`>> => class<`function`> | <class<`LatticeDistribution`>> => class<`function`> | <double, logical, logical, ...> => double | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`AffLinLatticeDistribution`> | class<`AffLinUnivarLebDecDistribution`> | class<`Binom`> | class<`Cauchy`> | class<`Chisq`> | class<`Dirac`> | class<`DiscreteDistribution`> | class<`Exp`> | class<`Geom`> | class<`LatticeDistribution`> | class<`Nbinom`> | class<`Norm`> | class<`Pois`> | class<`Td`> | class<`Unif`> | class<`UnivarLebDecDistribution`>> => class<`function`> | <class<`AffLinAbscontDistribution`>> => class<`function`> | <double, logical, logical> => double | <class<`Td`>> => class<`function`> | <class<`DiscreteDistribution`>> => class<`function`> | <class<`Exp`>> => class<`function`> | <double, logical, logical> => double | <class<`Nbinom`>> => class<`function`> | <class<`AffLinLatticeDistribution`>> => class<`function`> | <class<`AffLinUnivarLebDecDistribution`>> => class<`function`> | <class<`Cauchy`>> => class<`function`> | <class<`UnivarLebDecDistribution`>> => class<`function`> | <class<`Pois`>> => class<`function`> | <class<`Norm`>> => class<`function`> | <double, logical, logical> => double | <double[], logical, logical> => double[] | <class<`Unif`>> => class<`function`> | <class<`AbscontDistribution`>> => class<`function`> | <double, logical, logical> => double | <double, logical, logical> => double | <class<`Dirac`>> => class<`function`> | <double, logical, logical> => double | <double[], logical, logical> => double[];
type `.qmixfun` <class<`UnivarDistrList`> | list<class<`AbscontDistribution`>> | list<class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`>> | list<class<`AbscontDistribution`> | class<`DExp`>> | list<class<`Chisq`> | class<`AbscontDistribution`>> | list<class<`Norm`> | class<`AbscontDistribution`>> | list<class<`Norm`>> | list<class<`Unif`>>, double[], logical, class<`function`>, null, character> => class<`function`>;
type `qqbounds` <double[], class<`Chisq`> | class<`Norm`>, double, double, logical, logical, logical, logical> => list<class<`matrix`> | logical[]>;
type `qqplot` <class<`Norm`>, class<`Chisq`>, ...> => class<`DiagnInfo`, `qqplotInfo`> | <class<`Norm`>, class<`Chisq`>, ...> => class<`DiagnInfo`, `qqplotInfo`>;
type `q.r` <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <double[], logical, logical> => double[] | <class<`Chisq`> | class<`Norm`> | class<`DiscreteDistribution`> | class<`Geom`>> => class<`function`> | <class<`Geom`>> => class<`function`> | <double[], logical, logical> => double[] | <class<`Norm`>> => class<`function`> | <class<`DiscreteDistribution`>> => class<`function`> | <class<`Chisq`>> => class<`function`>;
type `r` <double> => double[] | <class<`Cauchy`>> => class<`function`> | <class<`Chisq`>> => class<`function`> | <double> => double | <double> => double | <class<`Pois`>> => class<`function`> | <double> => double | <class<`Fd`>> => class<`function`> | <class<`Norm`>> => class<`function`> | <class<`DiscreteDistribution`>> => class<`function`> | <class<`Nbinom`>> => class<`function`> | <double> => double[] | <class<`Td`>> => class<`function`> | <double> => double | <double> => double | <double> => double[] | <class<`Logis`>> => class<`function`> | <class<`AbscontDistribution`>> => class<`function`> | <double> => integer | <double> => double[] | <double> => double | <double> => double[] | <double> => double | <class<`Beta`>> => class<`function`> | <class<`Exp`>> => class<`function`> | <class<`Unif`>> => class<`function`> | <class<`Gammad`>> => class<`function`> | <double> => double[] | <class<`DExp`>> => class<`function`> | <class<`Geom`>> => class<`function`> | <class<`Lnorm`>> => class<`function`> | <class<`UnivarLebDecDistribution`>> => class<`function`> | <double> => double | <class<`Binom`>> => class<`function`> | <class<`Hyper`>> => class<`function`> | <class<`LatticeDistribution`>> => class<`function`> | <double> => integer | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Beta`> | class<`Binom`> | class<`Cauchy`> | class<`Chisq`> | class<`DExp`> | class<`Dirac`> | class<`Exp`> | class<`Fd`> | class<`Gammad`> | class<`Geom`> | class<`Hyper`> | class<`Lnorm`> | class<`Logis`> | class<`Nbinom`> | class<`Norm`> | class<`Pois`> | class<`Td`> | class<`Unif`> | class<`Weibull`> | class<`Arcsine`> | class<`DiscreteDistribution`> | class<`LatticeDistribution`> | class<`UnivarLebDecDistribution`>> => class<`function`> | <double> => integer | <double> => double | <double> => double | <double> => integer | <double> => double[] | <class<`Weibull`>> => class<`function`> | <double> => double | <double, ...> => double[] | <double> => double | <double> => double[] | <double> => double | <class<`AffLinAbscontDistribution`>> => class<`function`> | <double> => integer | <double> => double[] | <class<`Dirac`>> => class<`function`> | <double> => double | <class<`Arcsine`>> => class<`function`> | <double> => double[];
type `rate` <class<`DExp`>> => double | <class<`ExpParameter`>> => double | <class<`Exp`>> => double | <class<`DExp`> | class<`Exp`> | class<`ExpParameter`>> => double;
type `rate<-` <class<`Exp`>, double> => class<`Exp`> | <class<`DExp`>, double> => class<`DExp`> | <class<`ExpParameter`>, double> => class<`ExpParameter`> | <class<`DExp`> | class<`Exp`> | class<`ExpParameter`>, double> => (class<`DExp`> | class<`Exp`> | class<`ExpParameter`>);
type `Reals` < > => class<`Reals`>;
type `.rmixfun` <any, double[]> => class<`function`>;
type `RtoDPQ` <any, any, double, double[] | null> => list<class<`function`>>;
type `RtoDPQ.d` <class<`function`>, double> => list<class<`function`>>;
type `RtoDPQ.LC` <class<`function`>, double, double, null> => class<`UnivarLebDecDistribution`>;
type `scale` <class<`GammaParameter`>, logical, logical> => double | <class<`CauchyParameter`>, logical, logical> => double | <class<`Chisq`>, logical, logical> => double | <class<`Logis`>, logical, logical> => double | <class<`Weibull`>, logical, logical> => double | <class<`Cauchy`>, logical, logical> => double | <class<`LogisParameter`>, logical, logical> => double | <class<`Gammad`>, logical, logical> => double | <class<`WeibullParameter`>, logical, logical> => double;
type `scale<-` <class<`Gammad`> | class<`LogisParameter`>, double> => (class<`Gammad`> | class<`LogisParameter`>) | <class<`Gammad`>, double> => class<`Gammad`> | <class<`LogisParameter`>, double> => class<`LogisParameter`>;
type `sd` <class<`Norm`> | class<`NormParameter`> | class<`UniNormParameter`> | double[], ...> => double | <double[], ...> => double | <class<`Norm`>, ...> => double | <class<`NormParameter`>, ...> => double | <class<`UniNormParameter`>, ...> => double;
type `sd<-` <class<`UniNormParameter`>, double> => class<`UniNormParameter`> | <class<`Norm`> | class<`NormParameter`> | class<`UniNormParameter`>, double> => (class<`Norm`> | class<`NormParameter`> | class<`UniNormParameter`>) | <class<`NormParameter`>, double> => class<`NormParameter`> | <class<`Norm`>, double> => class<`Norm`>;
type `sdlog` <class<`Lnorm`>> => double | <class<`LnormParameter`>> => double | <class<`Lnorm`> | class<`LnormParameter`>> => double;
type `.setEqual` <double[], double[], double> => double[];
type `setgaps` <class<`Chisq`>, ...> => null | <class<`AbscontDistribution`> | class<`Chisq`>, ...> => null | <class<`AbscontDistribution`>, ...> => null;
type `shape` <class<`Chisq`> | class<`Gammad`> | class<`GammaParameter`> | class<`Weibull`> | class<`WeibullParameter`>> => double | <class<`Gammad`>> => double | <class<`WeibullParameter`>> => double | <class<`GammaParameter`>> => double | <class<`Chisq`>> => double | <class<`Weibull`>> => double;
type `shape<-` <class<`Weibull`>, double> => class<`Weibull`> | <class<`GammaParameter`> | class<`Weibull`> | class<`WeibullParameter`>, double> => (class<`GammaParameter`> | class<`Weibull`> | class<`WeibullParameter`>) | <class<`WeibullParameter`>, double> => class<`WeibullParameter`> | <class<`GammaParameter`>, double> => class<`GammaParameter`>;
type `shape1` <class<`BetaParameter`>> => double | <class<`Beta`>> => double | <class<`Beta`> | class<`BetaParameter`>> => double;
type `shape1<-` <class<`Beta`>, double> => class<`Beta`> | <class<`Beta`>, double> => class<`Beta`>;
type `shape2` <class<`Beta`> | class<`BetaParameter`>> => double | <class<`BetaParameter`>> => double | <class<`Beta`>> => double;
type `shape2<-` <class<`BetaParameter`>, double> => class<`BetaParameter`> | <class<`BetaParameter`>, double> => class<`BetaParameter`>;
type `simplifyD` <class<`CompoundDistribution`>> => (class<`AbscontDistribution`> | class<`UnivarLebDecDistribution`>) | <class<`CompoundDistribution`> | class<`UnivarLebDecDistribution`> | class<`UnivarMixingDistribution`>> => (class<`AbscontDistribution`> | class<`UnivarLebDecDistribution`>) | <class<`UnivarLebDecDistribution`>> => (class<`AbscontDistribution`> | class<`UnivarLebDecDistribution`>) | <class<`UnivarMixingDistribution`>> => class<`UnivarLebDecDistribution`>;
type `simplifyr` <class<`AffLinAbscontDistribution`>, double> => class<`function`> | <class<`AffLinAbscontDistribution`>, double> => class<`function`>;
type `.SingleDiscrete` <double[], class<`Chisq`> | class<`Norm`>> => double[];
type `size` <class<`NbinomParameter`>> => double | <class<`Geom`>> => double | <class<`BinomParameter`>> => double | <class<`Binom`>> => double | <class<`Binom`> | class<`BinomParameter`> | class<`Geom`> | class<`Nbinom`> | class<`NbinomParameter`>> => double | <class<`Nbinom`>> => double;
type `size<-` <class<`BinomParameter`>, double> => class<`BinomParameter`> | <class<`Binom`> | class<`BinomParameter`> | class<`Nbinom`> | class<`NbinomParameter`>, double> => (class<`Binom`> | class<`BinomParameter`> | class<`Nbinom`> | class<`NbinomParameter`>) | <class<`Binom`>, double> => class<`Binom`> | <class<`NbinomParameter`>, double> => class<`NbinomParameter`> | <class<`Nbinom`>, double> => class<`Nbinom`>;
type `SphericalSymmetry` <double> => class<`SphericalSymmetry`>;
type `standardMethods` <character, logical, any> => null;
type `support` <class<`Pois`>> => double[] | <class<`UnivarLebDecDistribution`>> => (class<`Integer`> | double[]) | <class<`Dirac`> | class<`UnivarLebDecDistribution`> | class<`AffLinDiscreteDistribution`> | class<`AffLinLatticeDistribution`> | class<`AffLinUnivarLebDecDistribution`> | class<`DiscreteDistribution`> | class<`LatticeDistribution`> | class<`Nbinom`> | class<`Pois`> | class<`UnivarMixingDistribution`> | class<`Binom`> | class<`Geom`> | class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Chisq`> | class<`DExp`> | class<`Norm`> | class<`Unif`>> => any | <class<`UnivarMixingDistribution`>> => double[] | <class<`LatticeDistribution`>> => double[] | <class<`Geom`>> => integer[] | <class<`AffLinLatticeDistribution`>> => double[] | <class<`DiscreteDistribution`>> => double[] | <class<`Dirac`>> => (class<`Integer`> | double) | <class<`Nbinom`>> => double[] | <class<`AffLinDiscreteDistribution`>> => double[] | <class<`Binom`>> => integer[] | <class<`AffLinUnivarLebDecDistribution`>> => double[];
type `SymmCenter` <class<`SphericalSymmetry`>> => double | <class<`SphericalSymmetry`>> => double;
type `Symmetry` <class<`Binom`>> => class<`NoSymmetry`> | <class<`Norm`>> => class<`SphericalSymmetry`> | <class<`Binom`> | class<`Norm`>> => (class<`NoSymmetry`> | class<`SphericalSymmetry`>);
type `Td` <double, double> => class<`Td`>;
type `Truncate` <class<`LatticeDistribution`>, ...> => class<`LatticeDistribution`> | <class<`AbscontDistribution`> | class<`AffLinAbscontDistribution`> | class<`Norm`> | class<`Geom`> | class<`LatticeDistribution`>, ...> => (class<`AbscontDistribution`> | class<`LatticeDistribution`>) | <class<`Geom`>, ...> => class<`LatticeDistribution`> | <class<`AbscontDistribution`>, ...> => class<`AbscontDistribution`> | <class<`AffLinAbscontDistribution`>, ...> => class<`AbscontDistribution`> | <class<`Norm`>, ...> => class<`AbscontDistribution`>;
type `.trunc.low` <class<`Geom`> | class<`Norm`>, double> => list<class<`function`>>;
type `.trunc.up` <class<`AbscontDistribution`> | class<`Norm`>, double> => list<class<`function`>>;
type `.ULC.cast` <class<`CompoundDistribution`> | class<`AbscontDistribution`> | class<`Norm`> | class<`Pois`> | class<`UnivarLebDecDistribution`>> => (class<`AbscontDistribution`> | class<`UnivarLebDecDistribution`>);
type `Unif` <double, double> => class<`Unif`>;
type `UnivarDistrList` <..., any> => class<`UnivarDistrList`>;
type `UnivarLebDecDistribution` <any, any, any, any, null, null, null, null> => class<`UnivarLebDecDistribution`>;
type `UnivarMixingDistribution` <..., any, any, logical> => (class<`UnivarLebDecDistribution`> | class<`UnivarMixingDistribution`>);
type `Weibull` <double, double> => class<`Weibull`>;
type `width` <class<`Lattice`>> => double | <class<`Lattice`>> => double;
type `width<-` <class<`Lattice`>, double> => class<`Lattice`> | <class<`Lattice`>, double> => class<`Lattice`>;
