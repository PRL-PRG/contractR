type `abbreviate` <class<`itemMatrix`>, ...> => class<`itemMatrix`> | <character[], ...> => character[] | <character[] | class<`itemMatrix`> | class<`transactions`>, ...> => (character[] | class<`itemMatrix`>) | <class<`transactions`>, ...> => class<`itemMatrix`>;
type `addAggregate` <class<`transactions`>, character, character> => class<`transactions`>;
type `addComplement` <class<`transactions`>, character[], null | character> => class<`transactions`> | <class<`transactions`>, character[], null | character> => class<`transactions`>;
type `affinity` <class<`matrix`> | class<`transactions`>> => class<`ar_similarity`> | <class<`matrix`>> => class<`ar_similarity`> | <class<`transactions`>> => class<`ar_similarity`>;
type `aggregate` <class<`rules`>, ...> => class<`rules`> | <class<`transactions`>, ...> => class<`transactions`> | <class<`itemMatrix`>, ...> => class<`itemMatrix`>;
type `%ain%` <class<`transactions`>, character[]> => logical[] | <class<`itemMatrix`> | class<`transactions`>, character[]> => logical[] | <class<`itemMatrix`>, character[]> => logical[];
type `apriori` <class<`transactions`>, list<double | character> | list<character | double> | null | list<double>, null | list<character[]>, list<logical> | null> => (class<`itemsets`> | class<`rules`>);
type `.aremtypes` < > => character[];
type `.barplot_horiz` <double[], ..., double, character, null, null> => class<`matrix`>;
type `.barplot_vert` <double[], ..., double, null, character, null> => class<`matrix`>;
type `.basicItemsetMeasures` <class<`itemsets`>, any, class<`transactions`>, any, ...> => double[];
type `.basicRuleMeasure` <any, character, list<double[]>, logical, logical, ...> => double[];
type `.combineMeta` <class<`itemMatrix`> | class<`itemsets`> | class<`rules`> | class<`transactions`>, class<`itemMatrix`> | class<`itemsets`> | class<`rules`> | class<`transactions`>, character, ...> => class<`data.frame`>;
type `coverage` <class<`rules`>, any, logical> => double[] | <class<`rules`>, any, logical> => double[];
type `crossTable` <class<`itemMatrix`>, ...> => class<`matrix`> | <class<`transactions`>, ...> => class<`matrix`> | <class<`itemMatrix`> | class<`transactions`>, ...> => class<`matrix`>;
type `DATAFRAME` <class<`rules`> | class<`transactions`>, ...> => class<`data.frame`> | <class<`rules`>, ...> => class<`data.frame`> | <class<`transactions`>, ...> => class<`data.frame`>;
type `decode` <list<integer[]>, ...> => list<character[]> | <list<integer[]>, ...> => list<character[]>;
type `.density_Matrix` <class<`ngCMatrix`>> => double;
type `discretize` <any, character, double[], character[] | null, logical, logical, double, logical, logical, logical, null, ...> => any;
type `discretizeDF` <class<`data.frame`>, null | list<list<double | character[]>> | class<`data.frame`> | list<null | list<double[] | character[]>>, null | list<double | character[]> | list<character>> => class<`data.frame`>;
type `dissimilarity` <class<`itemMatrix`>, null, character, list<class<`transactions`>>, ...> => class<`dist`> | <class<`rules`>, null, character, list<class<`transactions`>>, ...> => class<`dist`> | <class<`matrix`>, class<`matrix`> | null, null | character, any, ...> => (class<`ar_cross_dissimilarity`> | class<`dist`>) | <class<`transactions`>, class<`transactions`> | null, null | character, null, ...> => (class<`ar_cross_dissimilarity`> | class<`dist`>) | <class<`matrix`> | class<`transactions`> | class<`itemMatrix`> | class<`rules`>, class<`matrix`> | class<`transactions`> | null, null | character, any, ...> => (class<`ar_cross_dissimilarity`> | class<`dist`>);
type `duplicated` <class<`itemMatrix`>, any, ...> => logical[] | <class<`itemsets`>, any, ...> => logical[] | <class<`transactions`>, any, ...> => logical[] | <class<`rules`>, logical, ...> => logical[];
type `eclat` <class<`transactions`>, null | list<double> | list<character | double>, null | list<logical>> => class<`itemsets`>;
type `encode` <list<character[]> | list<integer[]> | character[] | integer[], ...> => (class<`itemMatrix`> | integer[]) | <list<character[]> | list<integer[]>, ...> => class<`itemMatrix`>;
type `filterAggregate` <class<`rules`>> => class<`rules`>;
type `generatingItemsets` <class<`rules`>> => class<`itemsets`> | <class<`rules`>> => class<`itemsets`>;
type `.getCounts` <class<`rules`>, class<`transactions`>, logical> => list<double[]>;
type `hits` <class<`transactions`>, integer, null, character[], logical> => double[];
type `.hyperConfidence` <class<`rules`>, class<`transactions`>, logical, logical, logical, ...> => double[];
type `.hyperLift` <class<`rules`>, class<`transactions`>, logical, double, ...> => double[];
type `.imbalance` <class<`rules`>, class<`transactions`>, logical> => double[];
type `.improvement` <class<`rules`>, any, logical, character> => double[];
type `%in%` <class<`transactions`>, character> => logical[] | <class<`itemMatrix`>, character> => logical[] | <class<`itemsets`>, class<`itemsets`>> => integer[] | <class<`transactions`>, class<`transactions`>> => logical[] | <class<`rules`>, class<`rules`>> => integer[];
type `inspect` <class<`transactions`>, ...> => (class<`data.frame`> | null) | <class<`itemMatrix`>, ...> => (class<`data.frame`> | null) | <class<`rules`>, ...> => (class<`data.frame`> | null) | <class<`itemsets`>, ...> => (class<`data.frame`> | null) | <class<`itemMatrix`> | class<`itemsets`> | class<`rules`> | class<`tidLists`> | class<`transactions`>, ...> => (class<`data.frame`> | null) | <class<`tidLists`>, ...> => class<`data.frame`>;
type `.installed` <character> => logical;
type `interestMeasure` <class<`itemsets`>, any, any, logical, ...> => (class<`data.frame`> | double[]) | <class<`rules`>, any, any, any, ...> => (class<`data.frame`> | ^double[] | null) | <class<`itemsets`> | class<`rules`>, any, any, any, ...> => (class<`data.frame`> | ^double[] | null);
type `intersect` <class<`rules`>, class<`rules`>> => class<`rules`>;
type `is.closed` <class<`itemsets`>> => logical[] | <class<`itemsets`>> => logical[];
type `is.element` <class<`itemMatrix`>, class<`itemMatrix`>> => logical[];
type `is.maximal` <class<`itemsets`>, ...> => logical[] | <class<`itemMatrix`>, ...> => logical[] | <class<`itemMatrix`> | class<`itemsets`>, ...> => logical[];
type `is.redundant` <class<`rules`>, ...> => logical[] | <class<`rules`>, ...> => logical[];
type `is.significant` <class<`rules`>, class<`transactions`>, character, double, character> => logical[] | <class<`rules`>, class<`transactions`>, character, double, character> => logical[];
type `is.subset` <class<`itemMatrix`> | class<`itemsets`>, class<`itemsets`> | null | class<`transactions`>, logical, logical, ...> => (class<`matrix`> | class<`ngCMatrix`>) | <class<`itemsets`>, class<`itemsets`> | null | class<`transactions`>, logical, logical, ...> => (class<`matrix`> | class<`ngCMatrix`>) | <class<`itemMatrix`>, class<`itemsets`> | null | class<`transactions`>, logical, logical, ...> => (class<`matrix`> | class<`ngCMatrix`>);
type `.is.subset_sparse` <class<`itemMatrix`>, class<`itemMatrix`> | class<`transactions`> | null, logical> => class<`ngCMatrix`>;
type `is.superset` <class<`itemsets`>, class<`itemsets`> | null, logical, logical, ...> => (class<`matrix`> | class<`ngCMatrix`>) | <class<`itemsets`>, class<`itemsets`> | null, logical, logical, ...> => (class<`matrix`> | class<`ngCMatrix`>);
type `itemFrequency` <class<`transactions`>, ...> => double[] | <class<`transactions`> | class<`itemMatrix`>, ...> => double[] | <class<`itemMatrix`>, ...> => double[];
type `itemFrequencyPlot` <class<`transactions`>, ...> => class<`matrix`> | <class<`transactions`>, ...> => class<`matrix`>;
type `itemInfo` <class<`itemMatrix`>> => class<`data.frame`> | <class<`itemMatrix`> | class<`transactions`> | class<`rules`>> => class<`data.frame`> | <class<`transactions`>> => class<`data.frame`> | <class<`rules`>> => class<`data.frame`>;
type `itemInfo<-` <class<`transactions`>, class<`data.frame`>> => class<`transactions`> | <class<`itemMatrix`>, class<`data.frame`>> => class<`itemMatrix`> | <class<`itemMatrix`> | class<`transactions`>, class<`data.frame`>> => (class<`itemMatrix`> | class<`transactions`>);
type `itemIntersect` <class<`itemMatrix`>, class<`itemMatrix`>> => class<`itemMatrix`> | <class<`itemMatrix`>, class<`itemMatrix`>> => class<`itemMatrix`>;
type `itemLabels` <class<`rules`> | class<`itemMatrix`> | class<`itemsets`> | class<`tidLists`> | class<`transactions`>, ...> => (character[] | class<`factor`>) | <class<`itemMatrix`>, ...> => character[] | <class<`transactions`>, ...> => character[] | <class<`itemsets`>, ...> => character[] | <class<`tidLists`>, ...> => (character[] | class<`factor`>);
type `itemLabels<-` <class<`transactions`>, character[]> => class<`transactions`> | <class<`transactions`>, character[]> => class<`transactions`>;
type `items` <class<`itemsets`> | class<`rules`>> => class<`itemMatrix`> | <class<`rules`>> => class<`itemMatrix`> | <class<`itemsets`>> => class<`itemMatrix`>;
type `itemSetdiff` <class<`itemMatrix`>, class<`itemMatrix`>> => class<`itemMatrix`> | <class<`itemMatrix`>, class<`itemMatrix`>> => class<`itemMatrix`>;
type `itemsetInfo` <class<`itemMatrix`>> => class<`data.frame`> | <class<`transactions`>> => class<`data.frame`> | <class<`itemMatrix`> | class<`transactions`>> => class<`data.frame`>;
type `itemsetInfo<-` <class<`transactions`>, class<`data.frame`>> => class<`transactions`> | <class<`itemMatrix`> | class<`transactions`>, class<`data.frame`>> => (class<`itemMatrix`> | class<`transactions`>) | <class<`itemMatrix`>, class<`data.frame`>> => class<`itemMatrix`>;
type `itemUnion` <class<`itemMatrix`>, class<`itemMatrix`>> => class<`itemMatrix`> | <class<`itemMatrix`>, class<`itemMatrix`>> => class<`itemMatrix`>;
type `.joinedList` <class<`rules`>> => list<double[]>;
type `.kulc` <class<`rules`>, class<`transactions`>, logical> => double[];
type `labels` <class<`itemMatrix`>, ...> => character[] | <class<`rules`>, ...> => character[] | <class<`transactions`>, ...> => character[] | <class<`tidLists`>, ...> => character[] | <class<`itemsets`>, ...> => character[];
type `lhs` <class<`rules`>> => class<`itemMatrix`> | <class<`rules`>> => class<`itemMatrix`>;
type `LIST` <class<`itemMatrix`> | class<`transactions`> | class<`tidLists`>, ...> => list<any> | <class<`itemMatrix`>, ...> => list<any> | <class<`tidLists`>, ...> => (list<character[]> | list<integer[]>) | <class<`transactions`>, ...> => (list<character[]> | list<integer[]>);
type `.list2object` <list<double> | list<double | character> | list<character | double>, character> => (class<`APcontrol`> | class<`APparameter`> | class<`ECcontrol`> | class<`ECparameter`>);
type `match` <class<`itemMatrix`>, class<`itemMatrix`>, null | double, null> => ^integer[] | <class<`itemsets`>, class<`itemsets`>, double | null, null> => integer[] | <class<`rules`>, class<`rules`>, integer | null, null> => integer[] | <class<`transactions`>, class<`transactions`>, null, null> => ^integer[];
type `.maxConf` <class<`rules`>, class<`transactions`>, logical> => double[];
type `merge` <class<`transactions`>, class<`matrix`> | class<`transactions`>, ...> => class<`transactions`> | <class<`itemMatrix`>, class<`itemMatrix`>, ...> => class<`itemMatrix`>;
type `nitems` <class<`itemMatrix`> | class<`transactions`>, ...> => integer | <class<`transactions`>, ...> => integer | <class<`itemMatrix`>, ...> => integer;
type `%oin%` <class<`transactions`>, character> => logical[] | <class<`transactions`>, character> => logical[];
type `%pin%` <class<`itemMatrix`>, character[]> => any | <class<`transactions`>, character> => logical[] | <class<`itemMatrix`> | class<`transactions`>, character[]> => any;
type `predict` <class<`transactions`>, ...> => integer[];
type `quality` <class<`itemsets`>> => class<`data.frame`> | <class<`rules`>> => class<`data.frame`> | <class<`itemsets`> | class<`rules`>> => class<`data.frame`>;
type `quality<-` <class<`itemsets`> | class<`rules`>, class<`data.frame`>> => (class<`itemsets`> | class<`rules`>) | <class<`itemsets`>, class<`data.frame`>> => class<`itemsets`> | <class<`rules`>, class<`data.frame`>> => class<`rules`>;
type `random.patterns` <double, double, null, double, double, double, double, null, logical> => class<`itemsets`>;
type `random.transactions` <double, double, character, ..., logical> => class<`transactions`>;
type `.random.transactions_agrawal` <double, double, double, class<`itemsets`>, ..., logical> => class<`transactions`>;
type `.random.transactions_independent` <double, double, double, double[], any> => class<`transactions`>;
type `read.PMML` <character> => class<`rules`>;
type `.read.PMML.arules` <class<`RXMLAbstractNode`, `XMLAbstractNode`, `XMLNode`, `oldClass`>> => class<`rules`>;
type `read.transactions` <character | class<`connection`, `file`>, character[], logical, character, null | character[] | double[], logical, character, double, character> => class<`transactions`>;
type `recode` <class<`itemMatrix`>, ...> => class<`itemMatrix`> | <class<`transactions`>, ...> => class<`transactions`> | <class<`itemMatrix`> | class<`transactions`>, ...> => (class<`itemMatrix`> | class<`transactions`>);
type `.rediscretizeDF` <class<`data.frame`>, class<`data.frame`>> => class<`data.frame`>;
type `rhs` <class<`rules`>> => class<`itemMatrix`> | <class<`rules`>> => class<`itemMatrix`>;
type `.rhsSupport` <class<`rules`>, class<`transactions`>, logical> => double[];
type `.RLD` <class<`rules`>, class<`transactions`>, logical> => (^double[] | null);
type `ruleInduction` <class<`itemsets`>, ...> => any | <class<`itemsets`>, ...> => any;
type `ruleInduction.apriori` <any, class<`transactions`>, any, any> => class<`rules`>;
type `ruleInduction.index` <class<`itemsets`>, any, any> => any;
type `ruleInduction.ptree` <class<`itemsets`>, class<`transactions`>, double, logical, logical> => class<`rules`>;
type `sample` <class<`transactions`>, double, logical, null, ...> => class<`transactions`>;
type `setequal` <class<`rules`>, class<`rules`>> => logical;
type `size` <class<`itemMatrix`>, ...> => integer[] | <class<`itemMatrix`> | class<`itemsets`> | class<`rules`> | class<`tidLists`> | class<`transactions`>, ...> => integer[] | <class<`transactions`>, ...> => integer[] | <class<`tidLists`>, ...> => integer[] | <class<`itemsets`>, ...> => integer[] | <class<`rules`>, ...> => integer[];
type `sort` <class<`rules`>, logical, ...> => (class<`rules`> | integer[]) | <class<`itemsets`>, logical, ...> => class<`itemsets`>;
type `subset` <class<`rules`>, ...> => class<`rules`> | <class<`itemsets`>, ...> => class<`itemsets`>;
type `support` <class<`itemMatrix`>, class<`transactions`>, ...> => any | <class<`rules`>, class<`transactions`>, ...> => double[] | <class<`itemsets`>, class<`transactions`>, ...> => any | <class<`itemMatrix`> | class<`itemsets`> | class<`rules`>, class<`transactions`>, ...> => any;
type `supportingTransactions` <class<`itemsets`>, class<`transactions`>, ...> => class<`tidLists`> | <class<`itemsets`>, class<`transactions`>, ...> => class<`tidLists`>;
type `support.ptree` <class<`itemMatrix`>, class<`transactions`>, list<character> | null> => integer[];
type `support.tidlists` <class<`itemMatrix`>, class<`transactions`>, list<character>> => integer[];
type `support.weighted` <class<`itemMatrix`>, class<`transactions`>, null> => double[];
type `tidLists` <class<`itemsets`>> => (class<`tidLists`> | null) | <class<`itemsets`>> => (class<`tidLists`> | null);
type `transactionInfo` <class<`transactions`>> => class<`data.frame`> | <class<`tidLists`>> => class<`data.frame`> | <class<`tidLists`> | class<`transactions`>> => class<`data.frame`>;
type `transactionInfo<-` <class<`transactions`>, class<`data.frame`>> => class<`transactions`> | <class<`tidLists`>, class<`data.frame`>> => class<`tidLists`> | <class<`tidLists`> | class<`transactions`>, class<`data.frame`>> => (class<`tidLists`> | class<`transactions`>);
type `.translate_index` <double[] | character[], any, any> => integer[];
type `.types` <character> => character[];
type `union` <class<`rules`>, class<`rules`>> => class<`rules`>;
type `unique` <class<`itemMatrix`>, logical, ...> => class<`itemMatrix`> | <class<`itemsets`>, logical, ...> => class<`itemsets`> | <class<`rules`>, logical, ...> => class<`rules`> | <class<`transactions`>, logical, ...> => class<`transactions`>;
type `weclat` <class<`transactions`>, null | list<double>, list<logical>> => class<`itemsets`>;
type `write` <class<`transactions`>, character, ...> => (character[] | class<`data.frame`>) | <class<`transactions`> | character[] | class<`rules`>, character, ...> => (character[] | class<`data.frame`> | null) | <class<`rules`>, character, ...> => null | <character[], character, ...> => null;
type `write.PMML` <class<`rules`>, character> => character;
