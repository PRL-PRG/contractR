type `[` <class<`Partition`>, character, any, ..., logical> => (class<`factor`> | double[] | ^integer[] | null) | <class<`LongData3d`>, character, any, ..., logical> => (character[] | class<`array`> | integer[]) | <class<`ParLongData`>, character, any, ..., logical> => (^character[] | double) | <class<`ListPartition`>, character, any, ..., logical> => (character | logical | list<any>) | <class<`LongData`>, character, any, ..., logical> => (character[] | class<`matrix`> | integer[]);
type `[<-` <class<`Partition`>, character, any, ..., null> => class<`Partition`> | <class<`ListPartition`>, character, any, ..., class<`Partition`>> => class<`ListPartition`> | <class<`ParLongData`>, character, any, ..., ^character[] | double> => class<`ParLongData`>;
type `adjustGraph3d` <character, character> => null;
type `bisector` <integer, double, integer, double, double, double> => double[];
type `distFrechet` <integer[], double[], integer[], double[], double, character> => double;
type `expandParLongData` <class<`ParLongData`>, integer> => class<`ParLongData`> | <class<`ParLongData`>, class<`Partition`>> => class<`ParLongData`> | <class<`ParLongData`>, double> => class<`ParLongData`> | <class<`ParLongData`>, class<`Partition`> | double> => class<`ParLongData`>;
type `filter` <character[]> => logical[];
type `FUN` <^double[]> => logical | <integer[]> => ^integer[] | <class<`matrix`>> => double | <^double[], double[]> => double[] | <class<`Partition`>> => double | <list<double>> => list<double | null> | <class<`Partition`>> => double | <list<double>> => double | <^double[]> => double[] | <^double[]> => double[] | <^double[]> => double[] | <^double[], double[]> => double[] | <^double[], any> => double[] | <^double[], double[]> => double[] | <^double[]> => double[] | <^double[]> => double[] | <class<`Partition`>> => double | <double> => double | <class<`Partition`>> => double | <character> => integer | <^double[], double[]> => double[] | <^double[], any> => double[] | <^double[]> => integer | <^double[]> => double[] | <^double[], any> => double[] | <^double[]> => double[] | <^double[]> => double[] | <double> => double | <class<`matrix`> | double[]> => double | <class<`Partition`>> => double | <^double[]> => double[];
type `imputation` <class<`matrix`>, character, character | null, character | null> => class<`matrix`> | <class<`matrix`>, character, character | null, character | null> => class<`matrix`>;
type `imput_copyMean_bisector` <class<`matrix`>> => class<`matrix`>;
type `imput_copyMean_global` <class<`matrix`>> => class<`matrix`>;
type `imput_copyMean_local` <class<`matrix`>> => class<`matrix`>;
type `imput_copyMean_locf` <class<`matrix`>> => class<`matrix`>;
type `imput_copyMean_middleTraj` <^double[], any> => ^double[];
type `imput_copyMean_middleTrajAux` <^double[], any> => double[];
type `imput_crossHotDeck` <class<`matrix`>, logical> => class<`matrix`>;
type `imput_crossMean` <class<`matrix`>, logical> => class<`matrix`>;
type `imput_crossMedian` <class<`matrix`>, logical> => class<`matrix`>;
type `imput_linearInterpol_bisector` <class<`matrix`>> => class<`matrix`>;
type `imput_linearInterpol_global` <class<`matrix`>> => class<`matrix`>;
type `imput_linearInterpol_local` <class<`matrix`>> => class<`matrix`>;
type `imput_linearInterpol_locf` <class<`matrix`>> => class<`matrix`>;
type `imput_linearInterpol_middleTraj` <^double[]> => ^double[];
type `imput_linearInterpol_middleTrajAux` <^double[]> => double[];
type `imput_locf` <class<`matrix`>> => class<`matrix`>;
type `imput_locf_traj` <^double[]> => double[];
type `imput_nocb` <class<`matrix`>> => class<`matrix`>;
type `imput_spline` <class<`matrix`>> => class<`matrix`>;
type `imput_trajHotDeck` <class<`matrix`>> => class<`matrix`>;
type `imput_trajMean` <class<`matrix`>> => class<`matrix`>;
type `imput_trajMedian` <class<`matrix`>> => class<`matrix`>;
type `initializePartition` <double, double, character, any> => ^double[];
type `is.na` <any> => logical;
type `listPartition` < > => class<`ListPartition`>;
type `.local` <class<`LongData`>, character, any, any> => (character[] | class<`matrix`> | integer[]) | <class<`ListPartition`>, character, any, any> => (character | logical | list<any>) | <class<`Partition`>, character, any, any> => (class<`factor`> | double[] | ^integer[] | null) | <class<`ParLongData`>, character, any, ^character[] | double> => class<`ParLongData`> | <class<`Partition`>, character, any, null> => class<`Partition`> | <class<`ParLongData`>, character, any, any> => (^character[] | double) | <class<`ListPartition`>, character, any, class<`Partition`>> => class<`ListPartition`> | <class<`LongData3d`>, character, any, any> => (character[] | class<`array`> | integer[]);
type `longData` <class<`data.frame`>, any, any, any, any, any> => class<`LongData`>;
type `longData3d` <class<`data.frame`>, any, any, list<^double[]>, any, any> => class<`LongData3d`>;
type `ordered` <class<`ListPartition`>, ...> => class<`matrix`>;
type `parLongData` <character, character, character, double, double, character, character> => class<`ParLongData`>;
type `parMEAN` <character, character, character, double, double, character, character> => class<`ParLongData`>;
type `partition` <^integer[], any, character[]> => class<`Partition`> | <^double[], any, character[]> => class<`Partition`> | <character[] | ^double[], any, character[]> => class<`Partition`> | <character[], any, character[]> => class<`Partition`> | <character[], class<`matrix`>, character[]> => class<`Partition`>;
type `parTRAJ` <character, character, character, double, double, character, character> => class<`ParLongData`>;
type `plotAllCriterion` <class<`ListPartition`>, character[], logical> => null | <class<`ListPartition`>, character[], logical> => null;
type `plotCriterion` <class<`ListPartition`>, character, double> => null | <class<`ListPartition`>, character, double> => null;
type `plotTrajMeans` <class<`LongData`>, class<`Partition`> | null, class<`ParLongData`>, any, ...> => null;
type `plotTrajMeans3d` <class<`LongData3d`>, null, double, double, class<`ParLongData`>, any, ...> => null;
type `qualityCriterion` <class<`matrix`>, double[], character> => list<double[] | class<`matrix`>> | <class<`matrix`>, double[], character> => list<double[] | class<`matrix`>>;
type `regroup` <class<`ListPartition`>> => class<`ListPartition`>;
type `restoreRealData` <class<`LongData3d`>> => null | <class<`LongData3d`>> => null;
type `scale` <class<`LongData3d`>, logical, logical> => null;
type `sdcNA` <double[]> => double;
type `sdNA` <^double[]> => double;
type `validityMethod` <class<`Partition`>> => logical | <any> => logical | <class<`LongData3d`>> => null | <class<`LongData`>> => null;
type `varNumAndName` <double, character[]> => list<double | character>;
