type `adjustGraph3d` <character, character> => null;
type `bisector` <integer, double, integer, double, double, double> => double[];
type `calculTrajMean` <class<`matrix`>, class<`factor`>, class<`function`>> => class<`matrix`>;
type `calculTrajMean3d` <class<`array`>, class<`factor`>, class<`function`>> => class<`array`>;
type `calculTrajMeanPoint` <class<`matrix`>, double> => class<`matrix`>;
type `canonicalizeAndMergeScene` <class<`Triangles3D`>, ...> => class<`Triangles3D`>;
type `colorScene` <class<`Triangles3D`>> => class<`Triangles3D`>;
type `colorTriangles` <class<`Triangles3D`>> => class<`Triangles3D`>;
type `distFrechet` <integer[], double[], integer[], double[], double, character> => double;
type `expandParLongData` <class<`ParLongData`>, integer> => class<`ParLongData`> | <class<`ParLongData`>, class<`Partition`>> => class<`ParLongData`> | <class<`ParLongData`>, double> => class<`ParLongData`> | <class<`ParLongData`>, class<`Partition`> | double> => class<`ParLongData`>;
type `imputation` <class<`matrix`>, character, character | null, character | null> => class<`matrix`> | <class<`matrix`>, character, character | null, character | null> => class<`matrix`>;
type `imput_copyMean_bisector` <class<`matrix`>> => class<`matrix`>;
type `imput_copyMean_global` <class<`matrix`>> => class<`matrix`>;
type `imput_copyMean_local` <class<`matrix`>> => class<`matrix`>;
type `imput_copyMean_locf` <class<`matrix`>> => class<`matrix`>;
type `imput_copyMean_middleTraj` <^double[], any> => ^double[];
type `imput_copyMean_middleTrajAux` <^double[], any> => double[];
type `imput_crossHotDeck` <class<`matrix`>, logical> => class<`matrix`>;
type `imput_crossMean` <class<`matrix`>, logical> => class<`matrix`>;
type `imput_crossMedian` <class<`matrix`>, logical> => class<`matrix`>;
type `imput_linearInterpol_bisector` <class<`matrix`>> => class<`matrix`>;
type `imput_linearInterpol_global` <class<`matrix`>> => class<`matrix`>;
type `imput_linearInterpol_local` <class<`matrix`>> => class<`matrix`>;
type `imput_linearInterpol_locf` <class<`matrix`>> => class<`matrix`>;
type `imput_linearInterpol_middleTraj` <^double[]> => ^double[];
type `imput_linearInterpol_middleTrajAux` <^double[]> => double[];
type `imput_locf` <class<`matrix`>> => class<`matrix`>;
type `imput_locf_traj` <^double[]> => double[];
type `imput_nocb` <class<`matrix`>> => class<`matrix`>;
type `imput_spline` <class<`matrix`>> => class<`matrix`>;
type `imput_trajHotDeck` <class<`matrix`>> => class<`matrix`>;
type `imput_trajMean` <class<`matrix`>> => class<`matrix`>;
type `imput_trajMedian` <class<`matrix`>> => class<`matrix`>;
type `initializePartition` <double, double, character, any> => ^double[];
type `is.Triangles3D` <class<`Triangles3D`>> => logical;
type `listPartition` < > => class<`ListPartition`>;
type `longData` <class<`data.frame`> | class<`matrix`>, any, any, any, any, any> => class<`LongData`>;
type `longData3d` <class<`array`> | class<`data.frame`>, any, any, any, any, any> => class<`LongData3d`>;
type `longDataFrom3d` <class<`LongData3d`>, character | double> => class<`LongData`>;
type `longDataTo3d` <class<`LongData`>> => class<`LongData3d`>;
type `longToWide` <class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>> => (class<`data.frame`> | class<`data.frame`, `groupedData`, `nfGroupedData`, `nfnGroupedData`>);
type `makeLatexFile` <character, character> => null;
type `misc3dLine` <double[], double[], character, double, double> => class<`data.frame`>;
type `misc3dLines` <double[], double[], double[], character, double, double> => class<`data.frame`>;
type `misc3dPave` <double[], double[], double[], double[], character, double> => class<`data.frame`>;
type `misc3dPlan` <double[], double[], double[]> => class<`data.frame`>;
type `ordered` <class<`ListPartition`>, ...> => class<`matrix`>;
type `parLongData` <character, character | double, character, double, double, character, character> => class<`ParLongData`>;
type `parMEAN` <character, character, character, double, double, character, character> => class<`ParLongData`>;
type `partition` <character[], any, character[]> => class<`Partition`> | <^integer[], any, character[]> => class<`Partition`> | <^double[], any, character[]> => class<`Partition`> | <integer[], class<`matrix`>, character[]> => class<`Partition`> | <any, any, any> => any | <any, any, any> => class<`Partition`> | <character[], any, any> => any | <character[], class<`matrix`>, character[]> => class<`Partition`>;
type `parTRAJ` <character, character, character, double, double, character, character> => class<`ParLongData`>;
type `parWindows` <double, double, logical, logical> => class<`ParWindows`>;
type `plot3dPdf` <class<`LongData3d`>, class<`Partition`>, double, double> => class<`Triangles3D`> | <class<`LongData3d`>, class<`Partition`>, double, double> => class<`Triangles3D`>;
type `plotAllCriterion` <class<`ListPartition`>, character[], logical> => null | <class<`ListPartition`>, character[], logical> => null;
type `plotCriterion` <class<`ListPartition`>, character, double> => null | <class<`ListPartition`>, character, double> => null;
type `plotTrajMeans` <class<`LongData`>, class<`Partition`> | null, class<`ParLongData`>, any, ...> => null;
type `plotTrajMeans3d` <class<`LongData3d`>, class<`Partition`> | null, double, double, class<`ParLongData`>, any, ...> => null;
type `qualityCriterion` <class<`LongData`>, class<`Partition`>, character> => list<double[] | class<`matrix`>> | <class<`matrix`>, double[], character> => list<double[] | class<`matrix`>> | <class<`matrix`>, integer[], any> => list<double[] | class<`matrix`>> | <class<`array`>, integer[], any> => list<double[] | class<`matrix`>> | <class<`array`> | class<`LongData`> | class<`LongData3d`> | class<`matrix`>, class<`Partition`> | double[], any> => list<double[] | class<`matrix`>> | <class<`LongData3d`>, class<`Partition`>, character> => list<double[] | class<`matrix`>>;
type `regroup` <class<`ListPartition`>> => class<`ListPartition`>;
type `restoreRealData` <class<`LongData3d`>> => null | <class<`LongData3d`>> => null;
type `saveTrianglesAsASY` <class<`Triangles3D`>, character> => null;
type `scale` <class<`matrix`>> => class<`matrix`> | <class<`LongData3d`>, double[], double[]> => null;
type `sdcNA` <double[]> => double;
type `sdNA` <^double[]> => double;
type `t2ve` <class<`Triangles3D`>> => list<class<`matrix`>>;
type `varNumAndName` <double | character, character[]> => (list<double | character> | list<integer | character>);
type `wideToLong` <class<`data.frame`>, double[]> => class<`data.frame`>;
type `windowsCut` <double, logical, logical> => class<`ParWindows`>;
