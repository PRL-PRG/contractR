type `count_tokens` <class<`call`>> => integer[];
type `find_breaks` <integer[], any, any, any, any> => (list<integer | null> | list<integer[] | null> | list<integer[]> | list<null>);
type `fix_parse_data` <class<`data.frame`>, any> => class<`data.frame`>;
type `mask_comments` <character[], any, logical, logical> => character[];
type `mask_line_break` <character[]> => character[];
type `overflow_message` <integer[], integer, integer, character> => character;
type `parse_only` <character[]> => expression;
type `parse_source` <character[]> => expression;
type `reflow_comments` <character[], any> => character[];
type `reindent_lines` <character[], double> => character[];
type `restore_encoding` <character[], character[]> => character[];
type `special_encoding` <character[]> => character[];
type `tidy_block` <character[], integer, logical> => character[];
type `tidy_dir` <character, logical, ...> => null;
type `tidy_eval` <character, ..., character, character, environment> => null;
type `tidy_file` <character[], ...> => null;
type `tidy_source` <any, logical, logical, logical, logical, double, any, logical, character[] | null, integer, ...> => list<character[]>;
type `tidy_usage` <character, character[], double, double, character> => character;
type `trimws` <character[], character> => character[];
type `unmask_source` <character[]> => character[];
type `usage` <character | class<`function`>, double, logical, logical, logical, character[]> => character[];
