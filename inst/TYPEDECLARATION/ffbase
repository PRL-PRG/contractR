type `addfforder` <class<`ff`, `ff_vector`>, logical, ...> => class<`ff`, `ff_vector`>;
type `any.ff` <class<`ff`, `ff_vector`>, ..., logical, null> => logical;
type `as.character.ff` <class<`ff`, `ff_vector`>, ...> => class<`ff`, `ff_vector`>;
type `as.ffdf.ffdf` <class<`ffdf`>, ...> => class<`ffdf`>;
type `as.ffdf.list` <list<class<`ff`, `ff_vector`>>> => class<`ffdf`>;
type `binned_sum` <double[], class<`factor`> | integer[], any, ...> => class<`matrix`>;
type `binned_sum.default` <double[], class<`factor`> | integer[], any, ...> => class<`matrix`>;
type `binned_tabulate.ff` <class<`ff`, `ff_vector`>, class<`ff`, `ff_vector`>, any, double, ...> => class<`matrix`>;
type `bySum` <double[], class<`factor`> | class<`data.frame`>, logical, null, ...> => (class<`array`> | class<`matrix`>);
type `c.ff` <...> => class<`ff`, `ff_vector`>;
type `checkRange` <null, class<`ff`, `ff_vector`>> => class<`ri`>;
type `chunkexpr` <class<`call`> | expression, character[], character, character> => expression;
type `coerce_to_allowNA` <character[]> => list<character[]>;
type `coerce_to_highest_vmode` <class<`ffdf`> | class<`ff`, `ff_vector`>, class<`ffdf`> | class<`ff`, `ff_vector`> | integer[], logical> => (class<`ffdf`> | class<`ff`, `ff_vector`>);
type `cummax.ff` <class<`ff`, `ff_vector`>, ...> => class<`ff`, `ff_vector`>;
type `cummin.ff` <class<`ff`, `ff_vector`>, ...> => class<`ff`, `ff_vector`>;
type `cumprod.ff` <class<`ff`, `ff_vector`>, ...> => class<`ff`, `ff_vector`>;
type `cumsum.ff` <class<`ff`, `ff_vector`>, ...> => class<`ff`, `ff_vector`>;
type `cut.ff` <class<`ff`, `ff_vector`>, double, ...> => class<`ff`, `ff_vector`>;
type `duplicated.ff` <class<`ff`, `ff_vector`>, logical, logical, logical, ...> => class<`ff`, `ff_vector`>;
type `duplicated.ffdf` <class<`ffdf`>, logical, logical, logical, ...> => class<`ff`, `ff_vector`>;
type `expand.ffgrid` <..., logical, logical> => class<`ffdf`>;
type `[<-.ff` <class<`ff`, `ff_vector`>, class<`ff`, `ff_vector`> | class<`ri`> | class<`which`> | double | integer[], logical, logical, class<`ff`, `ff_vector`> | ^character[] | class<`factor`> | double[] | ^integer[] | null> => class<`ff`, `ff_vector`>;
type `[.ff` <class<`ff`, `ff_vector`>, any, logical> => (class<`Date`> | class<`factor`> | class<`ff`, `ff_vector`> | class<`POSIXct`, `POSIXt`> | ^double[] | null);
type `%ff:%` <integer, integer> => class<`ff`, `ff_vector`>;
type `ffappend` <class<`ff`, `ff_vector`> | null, class<`ff`, `ff_vector`> | class<`Date`> | class<`factor`> | class<`POSIXct`, `POSIXt`> | double[] | ^integer[] | null, logical, ...> => (class<`ff`, `ff_vector`> | null);
type `ffbaseffdfindexget` <class<`ffdf`>, class<`ff`, `ff_vector`>, null, ...> => class<`ffdf`>;
type `[<-.ffdf` <class<`ffdf`>, class<`ff`, `ff_vector`> | class<`hi`>, any, class<`ffdf`>> => class<`ffdf`>;
type `[.ffdf` <class<`ffdf`>, any, any, logical> => (class<`data.frame`> | class<`ffdf`> | class<`ff`, `ff_vector`> | double[]);
type `ffdfappend` <class<`ffdf`> | null, class<`data.frame`> | class<`ffdf`>, logical, logical, ...> => class<`ffdf`>;
type `ffdfdply` <class<`ffdf`>, class<`ff`, `ff_vector`>, class<`function`>, double, integer, logical, ...> => class<`ffdf`>;
type `ffdfget_columnwise` <class<`ffdf`>, class<`ff`, `ff_vector`>> => class<`data.frame`>;
type `ffdfmatch` <class<`ffdf`>, class<`ffdf`>, integer | null, null, logical, ...> => class<`ff`, `ff_vector`>;
type `ffdfrbind.fill` <..., logical> => class<`ffdf`>;
type `ffdfwith` <class<`ffdf`>, any, ...> => class<`ff`, `ff_vector`>;
type `ffifelse` <class<`ff`, `ff_vector`>, class<`Date`> | class<`factor`> | logical, class<`factor`> | class<`ff`, `ff_vector`> | null> => class<`ff`, `ff_vector`>;
type `ffmatch` <class<`ff`, `ff_vector`>, class<`ff`, `ff_vector`>, integer | null, null, logical, ...> => class<`ff`, `ff_vector`>;
type `ffordered` <class<`ff`, `ff_vector`>> => class<`ff`, `ff_vector`>;
type `ffrandom` <double, class<`function`>, ..., null> => class<`ff`, `ff_vector`>;
type `ffrep.int` <class<`ff`, `ff_vector`> | integer, class<`ff`, `ff_vector`> | double> => class<`ff`, `ff_vector`>;
type `ffseq` <double, double, any, double | null, null | double, ...> => class<`ff`, `ff_vector`>;
type `ffseq_len` <double> => class<`ff`, `ff_vector`>;
type `<.ff_vector` <class<`ff`, `ff_vector`> | double, double | class<`ff`, `ff_vector`>> => class<`ff`, `ff_vector`>;
type `>.ff_vector` <class<`ff`, `ff_vector`> | double, double | class<`ff`, `ff_vector`>> => class<`ff`, `ff_vector`>;
type `*.ff_vector` <class<`ff`, `ff_vector`>, double> => class<`ff`, `ff_vector`>;
type `+.ff_vector` <class<`ff`, `ff_vector`> | double, double | class<`ff`, `ff_vector`>> => class<`ff`, `ff_vector`>;
type `ffwhich` <class<`ffdf`> | class<`ff`, `ff_vector`>, any, ...> => (class<`ff`, `ff_vector`> | null);
type `ffwhich.ffdf` <class<`ffdf`>, any, ..., environment> => class<`ff`, `ff_vector`>;
type `ffwhich.ff_vector` <class<`ff`, `ff_vector`>, any, ..., environment> => (class<`ff`, `ff_vector`> | null);
type `grouprunningcumsum` <integer[], double> => integer[];
type `grouprunningcumsumindex` <double[], double, double> => list<integer[]>;
type `ikey` <class<`ffdf`>, ...> => class<`ff`, `ff_vector`>;
type `%in%` <class<`ffdf`> | class<`ff`, `ff_vector`> | character[] | class<`factor`> | integer[], class<`ffdf`> | class<`ff`, `ff_vector`> | character[] | class<`factor`> | double[]> => (class<`ff`, `ff_vector`> | logical[]);
type `is.na<-.ff` <class<`ff`, `ff_vector`>, ..., class<`ff`, `ff_vector`> | double | integer[]> => class<`ff`, `ff_vector`>;
type `is.na.ff` <class<`ff`, `ff_vector`>, ...> => class<`ff`, `ff_vector`>;
type `load.ffdf` <character, environment> => environment;
type `max.ff` <class<`ff`, `ff_vector`>, ..., logical, null> => (double | null);
type `mean.ff` <class<`ff`, `ff_vector`>, double, ..., null> => double;
type `merge.ffdf` <class<`ffdf`>, class<`ffdf`>, any, character, character, logical, logical, logical, logical, any, null, logical, ...> => class<`ffdf`>;
type `min.ff` <class<`ff`, `ff_vector`>, ..., logical, null> => (integer | null);
type `move.ffdf` <class<`ffdf`>, character, character, logical> => class<`ffdf`>;
type `opsff_arith` <class<`ff`, `ff_vector`> | double, double | class<`ff`, `ff_vector`>, character> => class<`ff`, `ff_vector`>;
type `opsff_compare_logic` <class<`ff`, `ff_vector`> | double, double | class<`ff`, `ff_vector`>, character> => class<`ff`, `ff_vector`>;
type `pack.ffdf` <character, ...> => integer;
type `range.ff` <class<`ff`, `ff_vector`>, ..., logical, null> => ^integer[];
type `save.ffdf` <..., character, logical, logical, logical> => null;
type `sum.ff` <class<`ff`, `ff_vector`>, ..., logical, null> => integer;
type `table` <..., any, any, any, double> => class<`table`>;
type `tabulate.ff` <class<`ff`, `ff_vector`>, double> => integer[];
type `transform.ffdf` <class<`ffdf`>, ...> => class<`ffdf`>;
type `unique.ff` <class<`ff`, `ff_vector`>, logical, logical, logical, ...> => class<`ff`, `ff_vector`>;
type `unique.ffdf` <class<`ffdf`>, logical, logical, logical, ...> => class<`ffdf`>;
type `unpack.ffdf` <character, null, environment> => environment;
type `with.ffdf` <class<`ffdf`>, any, ...> => class<`ff`, `ff_vector`>;
type `within.ffdf` <class<`ffdf`>, any, ...> => class<`ffdf`>;
