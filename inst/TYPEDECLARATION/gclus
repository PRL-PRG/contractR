type `filter` <character[]> => logical[];
type `ac` <double[], double[], null> => double;
type `between.order` <^double[], list<integer[]>> => integer[];
type `clus2memship` <tuple<double[], double[], double> | list<integer[]>> => double[];
type `colpairs` <^double[], any => any, double, logical, any => any | null> => ^double[];
type `cpairs` <struct<`CONT`:double[], `INTG`:double[], `DMNR`:double[], `DILG`:double[], `CFMG`:double[], `DECI`:double[], `PREP`:double[], `FAMI`:double[], `ORAL`:double[], `WRIT`:double[], `PHYS`:double[], `RTEN`:double[]> | ^double[], null | integer[], ^character[], character, logical, character | null | double> => null;
type `cparcoord` <struct<`GNP.deflator`:double[], `GNP`:double[], `Unemployed`:double[], `Armed.Forces`:double[], `Population`:double[], `Year`:integer[], `Employed`:double[]> | ^double[], null | integer[], ^character[], double, double, logical, null | double[], null> => null;
type `diag.off` <^character[] | ^double[], double> => character[] | double[];
type `diameter` <double[], double[], null> => double;
type `dmat.color` <^double[], character[], null | logical, double[]> => ^character[];
type `f` <double[], double[], integer[] | null, any => any, any => any, null> => double;
type `flocal` <integer, integer> => double;
type `FUN` <double[] | character> => double[];
type `gfun` <double[], double[], null> => double;
type `imageinfo` <^character[]> => struct<`x`:integer[], `y`:integer[], `z`:^integer[], `col`:character[]>;
type `lower.panel` <double[], double[], character[] | null> => null;
type `lower2upper.tri.inds` <double> => double[];
type `memship2clus` <double[]> => tuple<integer[], integer[], integer[], integer[]> | list<integer[]>;
type `order.clusters` <double[], double[], any => any, any => any, null> => integer[];
type `order.endlink` <^double[], null> => integer[];
type `order.hclust` <^double[], logical, character | null> => integer[];
type `order.single` <^double[], null> => integer[];
type `partition.crit` <double[], double[], character[], any => any, any => any, null> => double;
type `pclen` <double[], double[]> => double;
type `plotcolors` <^character[] | ^integer[], character, null | character[], logical | character[], logical | character[], character, character, double, double, double, null> => null;
type `reorder.hclust` <struct<`merge`:^integer[], `height`:double[], `order`:integer[], `labels`:character[], `method`:character, `call`:language, `dist.method`:character> | struct<`merge`:^integer[], `height`:double[], `order`:integer[], `labels`:character[], `method`:character, `call`:language, `dist.method`:null>, ^double[], null> => struct<`merge`:^integer[], `height`:double[], `order`:integer[], `labels`:character[], `method`:character, `call`:language, `dist.method`:character> | struct<`merge`:^integer[], `height`:double[], `order`:integer[], `labels`:character[], `method`:character, `call`:language, `dist.method`:null>;
type `sil` <double[], double[], character[], null> => double;
type `text.panel` <double, double, character, double, double> => null;
type `upper.panel` <double[], double[], character[] | null> => null;
type `vec2dist` <integer[]> => double[];
type `vec2distm` <character[] | integer[]> => ^character[] | ^double[];
type `within.order` <^double[], null> => integer[];
