type `all_identical` <list<character[]>> => logical;
type `behavr` <class<`data.frame`, `data.table`>, class<`data.frame`, `data.table`>> => class<`behavr`, `data.frame`, `data.table`>;
type `[.behavr` <class<`behavr`, `data.frame`, `data.table`>, ..., logical, logical> => (class<`behavr`, `data.frame`, `data.table`> | class<`data.frame`, `data.table`> | double);
type `bin_apply` <class<`behavr`, `data.frame`, `data.table`>, any, character | class<`function`>, double, null | double, class<`function`>, ...> => class<`data.frame`, `data.table`>;
type `bin_apply_all` <class<`behavr`, `data.frame`, `data.table`>, ...> => class<`behavr`, `data.frame`, `data.table`>;
type `bind_behavr_list` <list<class<`behavr`, `data.frame`, `data.table`>>> => class<`behavr`, `data.frame`, `data.table`>;
type `bin_var` <double[], double, double | null> => double[];
type `check_conform` <class<`behavr`, `data.frame`, `data.table`> | class<`data.frame`, `data.table`>, null | class<`data.frame`, `data.table`>> => null;
type `days` <double> => double;
type `is.behavr` <class<`behavr`, `data.frame`, `data.table`>> => logical;
type `meta` <class<`behavr`, `data.frame`, `data.table`>> => class<`data.frame`, `data.table`>;
type `mins` <double> => double;
type `print.behavr` <class<`behavr`, `data.frame`, `data.table`>, ...> => class<`behavr`, `data.frame`, `data.table`>;
type `rejoin` <class<`behavr`, `data.frame`, `data.table`>> => class<`data.frame`, `data.table`>;
type `setbehavr` <class<`data.frame`, `data.table`> | class<`behavr`, `data.frame`, `data.table`>, class<`data.frame`, `data.table`>> => class<`behavr`, `data.frame`, `data.table`>;
type `setmeta` <class<`behavr`, `data.frame`, `data.table`>, class<`data.frame`, `data.table`>> => class<`behavr`, `data.frame`, `data.table`>;
type `simulate_animal_activity` <double, double, class<`function`>, ...> => class<`data.frame`, `data.table`>;
type `sleepContiguous` <logical[], double, double> => logical[];
type `stitch_on` <class<`behavr`, `data.frame`, `data.table`>, character, character, logical, character> => class<`behavr`, `data.frame`, `data.table`>;
type `summary.behavr` <class<`behavr`, `data.frame`, `data.table`>, logical, ...> => null;
type `toy_activity_data` <class<`data.frame`> | null, double, double[], double, double, ...> => class<`behavr`, `data.frame`, `data.table`>;
type `toy_dam_data` <...> => class<`behavr`, `data.frame`, `data.table`>;
type `toy_ethoscope_data` <...> => class<`behavr`, `data.frame`, `data.table`>;
type `velocityFromMovement` <class<`behavr`, `data.frame`, `data.table`>, double> => class<`data.frame`, `data.table`>;
type `within_data_table` < > => logical;
type `xmv` <any> => (character[] | double[]);
