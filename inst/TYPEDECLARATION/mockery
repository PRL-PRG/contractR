type `build_function_tree` <environment, class<`function`>, character, double> => list<list<list<environment>>>;
type `expect_args` <class<`mock`>, double, ...> => logical;
type `expect_call` <class<`mock`>, double, any> => logical;
type `expect_called` <class<`mock`>, double> => class<`condition`, `expectation`, `expectation_success`>;
type `filter` <character[]> => logical[];
type `format_call` <class<`call`>> => character;
type `is_mock` <class<`mock`>> => logical;
type `length.mock` <class<`mock`>> => integer;
type `mock` <..., logical, environment> => class<`mock`>;
type `mock_args` <class<`mock`>> => list<list<class<`data.frame`>>>;
type `mock_calls` <class<`mock`>> => list<class<`call`>>;
type `mock_through_tree` <list<list<list<environment>>>, character, class<`mock`>> => null;
type `ordinal` <integer> => character;
type `override_seperators` <character, any> => character;
type `stub` <class<`function`>, character, class<`mock`>, double> => null;
type `summary` <...> => (null | logical);
type `UseMethod` <...> => (null | logical);
