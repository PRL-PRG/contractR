type `::` <logical> => null | <double[] | class<`matrix`> | class<`array`>, any> => double | <double> => class<`matrix`> | <class<`size_t`> | double[], any> => class<`matrix`> | <class<`matrix`>, ...> => (class<`array`> | class<`matrix`>) | <double, double, double> => double[] | <class<`array`> | class<`matrix`> | double[], any> => (class<`size_t`> | integer) | <class<`array`>, integer> => integer | <class<`matrix`>, double> => class<`matrix`> | <...> => class<`matrix`> | <logical> => (double | null) | <class<`matrix`> | double[]> => (class<`matrix`> | double[]) | <...> => class<`matrix`> | <double | class<`matrix`>, double> => (double | class<`matrix`>) | <double> => (double[] | null) | <class<`array`>, any> => class<`size_t`> | <double[]> => double[] | <class<`matrix`> | integer[] | double, double[]> => (class<`matrix`> | double[]) | <integer[], any> => class<`size_t`> | <double[], any> => class<`size_t`> | <...> => class<`matrix`> | <class<`array`> | class<`matrix`> | integer[]> => integer | <class<`matrix`>, integer> => integer | <class<`matrix`>, any> => class<`size_t`> | <class<`matrix`> | character | double[], ...> => (class<`array`> | class<`matrix`> | double[]) | <class<`array`> | class<`matrix`> | double[]> => logical | <integer[] | double, any, any, double> => list<class<`matrix`> | class<`array`> | double>;
type `as.size_t` <integer[]> => class<`size_t`>;
type `ceil` <double[]> => double[];
type `cell` <...> => class<`matrix`>;
type `circularPad` <class<`matrix`>, double[], character> => character[];
type `constantPad` <class<`array`> | class<`matrix`>, double[], double, character> => (class<`array`> | class<`matrix`>);
type `createCellArray` <integer[]> => class<`matrix`>;
type `doublyEvenOrder` <double> => class<`matrix`>;
type `eye` <class<`size_t`> | double[], any> => class<`matrix`>;
type `factors` <double> => double[];
type `fileparts` <character> => list<character[]>;
type `filter` <character[]> => logical[];
type `find` <double[]> => integer[];
type `fix` <class<`matrix`> | double[]> => (class<`matrix`> | double[]);
type `fliplr` <class<`matrix`> | double[]> => (class<`matrix`> | double[]) | <integer[]> => integer[] | <class<`matrix`>> => class<`matrix`>;
type `flipud` <integer[]> => integer[] | <class<`matrix`> | double[]> => (class<`matrix`> | double[]) | <class<`matrix`>> => class<`matrix`>;
type `fullfile` <...> => character;
type `fun` <double> => class<`matrix`> | <any, any> => null | <any, any> => null;
type `FUN` <integer, class<`matrix`>, class<`factor`>> => character;
type `get.gca.colororder` < > => character[];
type `getLengthOfDimension` <class<`array`> | class<`matrix`>, integer> => integer;
type `hasTrailingSep` <character> => logical;
type `hilb` <double> => class<`matrix`>;
type `imagesc` <class<`matrix`>, integer[], any, character[], ...> => null;
type `isempty` <class<`array`> | class<`matrix`> | double[]> => logical;
type `isprime` <double[] | class<`matrix`>> => integer[];
type `is.size_t` <class<`matrix`> | class<`size_t`> | double[]> => logical;
type `jet` <integer> => class<`matrix`>;
type `jet.colors` <double> => character[];
type `linspace` <double, double, double> => double[];
type `logspace` <double, double, double> => double[];
type `magic` <double> => class<`matrix`>;
type `meshgrid` <integer[] | double, any, any, double> => list<class<`matrix`> | class<`array`> | double>;
type `meshgrid.2d` <integer[] | double, any> => list<class<`matrix`> | double>;
type `meshgrid.3d` <integer[], integer[], integer[]> => list<class<`array`>>;
type `mkconstarray` <character, double, class<`matrix`> | double> => (class<`array`> | class<`matrix`>);
type `mod` <class<`matrix`> | integer[] | double, double[]> => (class<`matrix`> | double[]);
type `multiline.plot.colors` < > => character[];
type `ndims` <class<`array`> | class<`matrix`> | integer[]> => integer;
type `nextpow2` <double[] | class<`matrix`>> => (double[] | class<`matrix`>);
type `numel` <double[] | class<`matrix`> | class<`array`>, any> => double;
type `oddOrder` <double> => class<`matrix`>;
type `ones` <...> => class<`matrix`>;
type `padarray` <character[] | class<`matrix`> | integer[] | class<`array`>, double[], character | double, character[]> => (character[] | class<`matrix`> | integer[] | class<`array`>) | <integer[], double[], double, character[]> => class<`matrix`> | <class<`matrix`>, double[], double, character[]> => class<`matrix`> | <integer[], double[], double, character[]> => class<`matrix`> | <class<`matrix`>, double[], character, character[]> => (character[] | class<`matrix`> | integer[]) | <integer[], double[], double, character> => class<`matrix`> | <character[], double[], character, character[]> => character[] | <character[], double[], character, character> => character[] | <integer[], double[], character, character> => (integer[] | class<`matrix`>);
type `padarray0` <class<`matrix`> | class<`array`>, character, double[], null | double, character> => (character[] | class<`array`> | class<`matrix`> | integer[]);
type `pascal` <double, double> => class<`matrix`>;
type `pow2` <complex[], any> => complex[];
type `pretty.axp` <character, ...> => double[];
type `primes` <double> => (double[] | null);
type `rem` <double | class<`matrix`>, double> => (double | class<`matrix`>);
type `replicatePad` <class<`matrix`>, double[], character> => (character[] | class<`matrix`>);
type `repmat` <class<`matrix`> | character | double[], ...> => (class<`array`> | class<`matrix`> | double[]);
type `reshape` <class<`matrix`>, ...> => (class<`array`> | class<`matrix`>);
type `rosser` < > => class<`matrix`>;
type `rot180` <class<`matrix`>> => class<`matrix`>;
type `rot270` <class<`matrix`>> => class<`matrix`>;
type `rot90` <class<`matrix`>, double> => class<`matrix`> | <class<`matrix`>> => class<`matrix`>;
type `singlyEvenOrder` <double> => class<`matrix`>;
type `size` <class<`array`> | class<`matrix`> | double[], any> => (class<`size_t`> | integer) | <class<`array`>, integer> => integer | <class<`array`>, any> => class<`size_t`> | <integer[], any> => class<`size_t`> | <class<`matrix`>, integer> => integer | <class<`matrix`>, any> => class<`size_t`> | <class<`matrix`>, double> => integer;
type `size_t` <integer[]> => class<`size_t`>;
type `std` <integer[] | class<`matrix`>, double> => double;
type `strcmp` <character[], character[]> => logical;
type `sum` <class<`matrix`>, logical> => integer[] | <class<`matrix`> | integer[], logical> => integer[] | <class<`matrix`>, logical> => integer[] | <integer[], logical> => integer | <integer[], logical> => integer;
type `symmetricPad` <class<`matrix`>, double[], character> => (character[] | class<`matrix`> | integer[]);
type `tic` <logical> => null;
type `toc` <logical> => (double | null);
type `vander` <complex[]> => class<`matrix`>;
type `wouldExpandTilde` <character> => logical;
type `zeros` <...> => class<`matrix`>;
