type `as.size_t` <integer[]> => class<`size_t`>;
type `ceil` <double[]> => double[];
type `cell` <...> => class<`matrix`>;
type `circularPad` <class<`matrix`>, double[], character> => character[];
type `colorbar` <class<`matrix`>, character, ...> => null;
type `constantPad` <class<`array`> | class<`matrix`>, double[], double, character> => (class<`array`> | class<`matrix`>);
type `eye` <double, any> => class<`matrix`>;
type `factors` <double> => double[];
type `fileparts` <character> => list<character>;
type `find` <double[]> => integer[];
type `fix` <double[]> => double[];
type `fliplr` <class<`matrix`> | integer[]> => (class<`matrix`> | integer[]) | <integer[]> => integer[] | <class<`matrix`>> => class<`matrix`>;
type `flipud` <integer[]> => integer[] | <class<`matrix`> | integer[]> => (class<`matrix`> | integer[]) | <class<`matrix`>> => class<`matrix`>;
type `fullfile` <...> => character;
type `getLengthOfDimension` <class<`array`> | class<`matrix`>, integer> => integer;
type `hilb` <double> => class<`matrix`>;
type `imagesc` <class<`matrix`>, integer[], any, character[], ...> => null;
type `isempty` <class<`array`> | integer[]> => logical;
type `isprime` <double[]> => integer[];
type `is.size_t` <class<`matrix`> | class<`size_t`> | double[]> => logical;
type `jet` <integer> => class<`matrix`>;
type `jet.colors` <double> => character[];
type `linspace` <double, double, double> => double[];
type `logspace` <double, double, double> => double[];
type `magic` <double> => class<`matrix`>;
type `meshgrid` <integer[], any, any, double> => (list<class<`array`>> | list<class<`matrix`>>);
type `mkconstarray` <character, double, class<`matrix`>> => (class<`array`> | class<`matrix`>);
type `mod` <double, double> => double;
type `multiline.plot.colors` < > => character[];
type `ndims` <class<`array`> | class<`matrix`> | integer[]> => integer;
type `nextpow2` <double[]> => double[];
type `numel` <class<`matrix`> | integer[], any> => double;
type `ones` <...> => class<`matrix`>;
type `padarray` <character[] | class<`matrix`> | integer[] | class<`array`>, double[], character | double, character[]> => (character[] | class<`matrix`> | integer[] | class<`array`>) | <integer[], double[], double, character[]> => class<`matrix`> | <class<`matrix`>, double[], double, character[]> => class<`matrix`> | <integer[], double[], double, character[]> => class<`matrix`> | <class<`matrix`>, double[], character, character[]> => (character[] | class<`matrix`> | integer[]) | <integer[], double[], double, character> => class<`matrix`> | <character[], double[], character, character[]> => character[] | <character[], double[], character, character> => character[] | <integer[], double[], character, character> => integer[];
type `padarray0` <class<`matrix`> | class<`array`>, character, double[], null | double, character> => (character[] | class<`array`> | class<`matrix`> | integer[]);
type `pascal` <double, double> => class<`matrix`>;
type `pow2` <complex | double[], any> => (complex | double[]);
type `primes` <double> => double[];
type `rem` <double, double> => double;
type `replicatePad` <class<`matrix`>, double[], character> => (character[] | class<`matrix`>);
type `repmat` <class<`matrix`> | double, ...> => class<`matrix`>;
type `reshape` <class<`matrix`>, ...> => (class<`array`> | class<`matrix`>);
type `rosser` < > => class<`matrix`>;
type `rot90` <class<`matrix`>> => class<`matrix`> | <class<`matrix`>, double> => class<`matrix`>;
type `size` <class<`array`> | class<`matrix`> | double[], any> => (class<`size_t`> | integer) | <class<`matrix`>, any> => class<`size_t`> | <class<`array`>, integer> => integer | <class<`matrix`>, double> => integer | <class<`array`>, any> => class<`size_t`> | <integer[], any> => class<`size_t`> | <class<`matrix`>, integer> => integer;
type `size_t` <integer[]> => class<`size_t`>;
type `std` <integer[], double> => double;
type `strcmp` <character[], character[]> => logical;
type `sum` <class<`matrix`>, logical> => integer[] | <class<`matrix`> | integer[], logical> => integer[] | <class<`matrix`>, logical> => integer[] | <integer[], logical> => integer | <integer[], logical> => integer;
type `symmetricPad` <class<`matrix`>, double[], character> => (character[] | class<`matrix`> | integer[]);
type `tic` <logical> => null;
type `toc` <logical> => null;
type `vander` <integer[]> => class<`matrix`>;
type `zeros` <...> => class<`matrix`>;
