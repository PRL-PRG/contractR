type `append_break` <character[]> => character[];
type `evaluate` <class<`connection`, `file`> | character, any, null, logical, double, logical, logical, logical, class<`output_handler`>, null, logical> => list<any>;
type `evaluate_call` <expression | null, character, any, any, logical, logical, any, any, any, class<`output_handler`>, any> => list<any>;
type `FUN` <class<`recordedplot`> | character | class<`condition`, `error`, `simpleError`> | class<`condition`, `message`, `simpleMessage`> | class<`condition`, `simpleWarning`, `warning`> | class<`source`> | null | list<any>> => (class<`recordedplot`> | null | list<null | class<`recordedplot`> | null>);
type `inject_funs` <...> => list<any>;
type `is.empty` <class<`recordedplot`>> => logical;
type `is_par_change` <null, class<`recordedplot`>> => logical;
type `line_prompt` <character, character, any> => character;
type `new_source` <character> => class<`source`>;
type `parse_all` <character[] | class<`connection`, `file`>, null | character, logical> => class<`data.frame`>;
type `parse_all.character` <character[], null | character, logical> => class<`data.frame`>;
type `parse_all.connection` <class<`connection`, `file`>, null, ...> => class<`data.frame`>;
type `plot_calls` <class<`recordedplot`> | null> => (character[] | null);
type `plot_snapshot` <logical> => (class<`recordedplot`> | null);
type `remove_hooks` <list<class<`function`>>> => null;
type `render` <null | class<`FOO_BAR`>> => null;
type `replay` <class<`recordedplot`> | character | class<`condition`, `error`, `simpleError`> | class<`condition`, `message`, `simpleMessage`> | class<`condition`, `simpleWarning`, `warning`> | class<`source`> | null | list<any>> => (class<`recordedplot`> | null | list<null | class<`recordedplot`> | null>);
type `replay.character` <character> => null;
type `replay.default` <null> => null;
type `replay.error` <class<`condition`, `error`, `simpleError`>> => null;
type `replay.list` <list<any>> => list<null | class<`recordedplot`> | null>;
type `replay.message` <class<`condition`, `message`, `simpleMessage`>> => null;
type `replay.recordedplot` <class<`recordedplot`>> => class<`recordedplot`>;
type `replay.source` <class<`source`>> => null;
type `replay.warning` <class<`condition`, `simpleWarning`, `warning`>> => null;
type `set_hooks` <list<class<`function`> | list<any>>, character> => list<list<any>>;
type `value_handler` <null | class<`FOO_BAR`>> => null;
type `watchout` <logical> => list<class<`function`>>;
