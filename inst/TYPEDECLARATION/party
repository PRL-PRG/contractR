type `:::` <list<any>, character[] | null, any> => (class<`SplittingNode`> | class<`TerminalNode`>);
type `@` <class<`LearningSampleFormula`> | class<`LearningSample`>, class<`ForestControl`>, null, ...> => class<`RandomForest`> | <class<`LearningSampleFormula`> | class<`LearningSample`>, class<`TreeControl`>, null, ...> => class<`BinaryTree`>;
type `cforest` <class<`formula`>, class<`data.frame`>, null, null | class<`matrix`>, class<`ForestControl`>, class<`function`>, class<`function`>, null> => class<`RandomForest`>;
type `cforest_classical` <...> => class<`ForestControl`>;
type `cforest_control` <character, character, double, logical, double, double, logical, double, logical, ...> => class<`ForestControl`>;
type `cforestfit` <class<`LearningSampleFormula`> | class<`LearningSample`>, class<`ForestControl`>, null, ...> => class<`RandomForest`>;
type `cforest_unbiased` <...> => class<`ForestControl`>;
type `coef.mob` <class<`mob`>, null, ...> => class<`matrix`>;
type `conditional_perm` <character[], character[], any, list<null | double[] | list<any> | null | double | list<any>>, logical[]> => integer[];
type `copyslots` <class<`TreeControl`>, class<`ForestControl`>> => class<`ForestControl`>;
type `create_cond_list` <logical, any, any, any> => (character[] | null);
type `ctree` <class<`formula`>, class<`data.frame`>, null, null, class<`TreeControl`>, class<`function`>, class<`function`>, null> => class<`BinaryTree`>;
type `ctree_control` <character[], character[], double, double, double, logical, double, double, double, logical, double, logical> => class<`TreeControl`>;
type `ctreefit` <class<`LearningSampleFormula`> | class<`LearningSample`>, class<`TreeControl`>, null, ...> => class<`BinaryTree`>;
type `cutpoints_list` <list<null | double[] | list<any> | null | double | list<any>>, integer> => (double[] | null);
type `deviance.mob` <class<`mob`>, null, ...> => double;
type `dostep` <double[], double[]> => list<double[]>;
type `ExpectCovarInfluence` <class<`matrix`>, double[]> => class<`ExpectCovarInfluence`>;
type `ExpectCovarLinearStatistic` <class<`matrix`>, class<`matrix`>, double[]> => class<`ExpectCovar`>;
type `factor_trafo` <class<`factor`> | class<`factor`, `ordered`>> => class<`matrix`>;
type `ff_trafo` <class<`factor`> | class<`factor`, `ordered`>> => class<`matrix`>;
type `fitted.mob` <class<`mob`>, ...> => double[];
type `FUN` <list<any>, character[] | null, null | list<any>> => (class<`orderedSplit`> | class<`nominalSplit`>);
type `initVariableFrame` <class<`data.frame`> | class<`matrix`>, ...> => (class<`ResponseFrame`> | class<`VariableFrame`>) | <class<`data.frame`>, ...> => (class<`ResponseFrame`> | class<`VariableFrame`>) | <class<`matrix`>, ...> => class<`VariableFrame`>;
type `isequal` <class<`factor`> | class<`matrix`> | double[] | list<class<`survfit`> | double[]>, class<`factor`> | class<`matrix`> | double[] | list<class<`survfit`> | double[]>> => logical;
type `LearningSample` <class<`matrix`>, ...> => class<`LearningSample`> | <class<`matrix`>, ...> => class<`LearningSample`>;
type `LinearStatistic` <class<`matrix`>, class<`matrix`>, double[]> => double[];
type `logLik.mob` <class<`mob`>, null, ...> => class<`logLik`>;
type `maxabsTestStatistic` <double[], double[], class<`matrix`>, double> => double;
type `maxdepth` <class<`SplittingNode`> | class<`TerminalModelNode`> | class<`TerminalNode`>> => double;
type `mob` <class<`formula`>, any, class<`data.frame`>, class<`standardGeneric`>, class<`StatModel`>, class<`mob_control`>, ...> => class<`mob`>;
type `mob_control` <double, logical, double, double, class<`function`>, logical, null, logical> => class<`mob_control`>;
type `mob_fit_checksplit` <logical[], double[], double> => logical;
type `mob_fit_childweights` <class<`SplittingNode`>, class<`ModelEnvFormula`>, double[]> => list<double[]>;
type `mob_fit_fluctests` <class<`glinearModel`, `glm`, `lm`> | class<`linearModel`, `lm`>, class<`ModelEnvFormula`>, double, double, logical, null> => list<double[]>;
type `mob_fit_getlevels` <class<`factor`> | class<`factor`, `ordered`>> => class<`matrix`>;
type `mob_fit_getobjfun` <class<`glinearModel`, `glm`, `lm`> | class<`linearModel`, `lm`>, any, double[], logical[], class<`function`>> => double;
type `mob_fit_setupnode` <any, any, double[], class<`mob_control`>> => (class<`SplittingNode`> | class<`TerminalModelNode`>);
type `mob_fit_splitnode` <class<`factor`, `ordered`> | double[] | class<`factor`>, any, any, double[], double, any, any> => (class<`orderedSplit`> | logical);
type `MPinv` <class<`matrix`>, double> => class<`matrix`>;
type `mysurvfit` <class<`Surv`>, double[], ...> => class<`survfit`>;
type `newinputs` <class<`LearningSample`> | class<`LearningSampleFormula`>, class<`matrix`> | class<`data.frame`> | null> => class<`VariableFrame`>;
type `node_boxplot` <class<`BinaryTree`>, character, any, double, null, double, double, logical> => class<`function`>;
type `node_hist` <class<`BinaryTree`>, character, character, logical, logical, double[] | null, double, double, logical, ...> => class<`function`>;
type `nodes` <class<`BinaryTree`>, double[], ...> => list<class<`SplittingNode`>> | <class<`mob`>, integer[], ...> => list<class<`TerminalModelNode`>> | <class<`mob`>, double, ...> => list<class<`TerminalModelNode`>> | <class<`BinaryTree`>, integer[], ...> => list<class<`SplittingNode`> | class<`TerminalNode`>> | <class<`BinaryTree`> | class<`mob`>, double[], ...> => list<class<`SplittingNode`> | class<`TerminalModelNode`> | class<`TerminalNode`>>;
type `node_surv` <class<`BinaryTree`>, double, logical, ...> => class<`function`>;
type `nterminal` <class<`SplittingNode`> | class<`TerminalModelNode`> | class<`TerminalNode`>> => double;
type `PermutedLinearStatistic` <class<`matrix`>, class<`matrix`>, integer[], integer[]> => double[];
type `plot.BinaryTree` <class<`mob`> | class<`BinaryTree`>, null, character[], class<`grapcon_generator`> | class<`function`> | null, any, class<`grapcon_generator`>, list<any>, class<`grapcon_generator`> | class<`function`>, any, logical, double, logical, logical, ...> => null;
type `plot.mob` <class<`mob`>, class<`grapcon_generator`>, double | null, ...> => null;
type `plotTree` <class<`SplittingNode`> | class<`TerminalModelNode`> | class<`TerminalNode`>, double[], double[], any, any, class<`function`>, any, any, double, any, logical> => null;
type `predict.BinaryTree` <class<`BinaryTree`>, ...> => (class<`factor`> | class<`matrix`> | integer[] | list<double[]>);
type `predict.mob` <class<`mob`>, null, character[], ...> => double[];
type `predict.RandomForest` <class<`RandomForest`>, logical, logical, ...> => class<`factor`>;
type `prettysplit` <list<any>, character[] | null, null | list<any>> => (class<`orderedSplit`> | class<`nominalSplit`>);
type `prettytree` <list<any>, character[] | null, any> => (class<`SplittingNode`> | class<`TerminalNode`>);
type `print.BinaryTree` <class<`BinaryTree`>, ...> => null;
type `print.orderedSplit` <class<`orderedSplit`>, logical, ...> => null;
type `print.SplittingNode` <class<`SplittingNode`>, double, ...> => null;
type `print.TerminalNode` <class<`TerminalNode`>, double, ...> => null;
type `proximity` <class<`RandomForest`>, null> => class<`matrix`>;
type `ptrafo` <class<`data.frame`>, any, any, any, any, null> => class<`matrix`>;
type `qsvd` <class<`matrix`>> => list<class<`matrix`> | double[]>;
type `quadformTestStatistic` <double[], double[], class<`matrix`>, double> => double;
type `.resample` <integer[], ...> => integer[];
type `residuals.mob` <class<`mob`>, ...> => double[];
type `response` <class<`mob`>, ...> => class<`data.frame`> | <class<`BinaryTree`>, ...> => class<`data.frame`> | <class<`mob`> | class<`BinaryTree`>, ...> => class<`data.frame`>;
type `reweight` <class<`glinearModel`, `glm`, `lm`> | class<`linearModel`, `lm`>, double[], ...> => (class<`glinearModel`, `glm`, `lm`> | class<`linearModel`, `lm`>);
type `reweight.glinearModel` <class<`glinearModel`, `glm`, `lm`>, double[], ...> => class<`glinearModel`, `glm`, `lm`>;
type `reweight.linearModel` <class<`linearModel`, `lm`>, double[], ...> => class<`linearModel`, `lm`>;
type `.R_get_nodeID` <class<`SplittingNode`>, class<`VariableFrame`>, any> => integer[];
type `.R_predict` <list<null | double[] | list<any> | null | double | list<any>>, class<`VariableFrame`>, double, integer> => list<double[]>;
type `sctest.mob` <class<`mob`>, double, ...> => class<`matrix`>;
type `summary.mob` <class<`mob`>, double | null, ...> => (class<`summary.lm`> | list<class<`summary.glm`> | class<`summary.lm`>>);
type `terminal_nodeIDs` <class<`SplittingNode`> | class<`TerminalModelNode`>> => integer[];
type `terminal_panel` <class<`BinaryTree`>, character, any, double, null, double, double, logical> => class<`function`> | <class<`BinaryTree`>, double, logical, ...> => class<`function`>;
type `treeresponse` <class<`RandomForest`> | class<`BinaryTree`>, ...> => list<class<`matrix`> | class<`survfit`> | double[]> | <class<`BinaryTree`>, ...> => list<class<`survfit`> | double[]> | <class<`RandomForest`>, ...> => list<class<`matrix`> | class<`survfit`>>;
type `varIDs` <list<null | double[] | list<any> | null | double | list<any>>> => integer[];
type `varimp` <class<`RandomForest`>, double, logical, double, double, logical, any> => double[];
type `weights.BinaryTree` <class<`BinaryTree`>, null, ...> => list<double[]>;
type `weights.mob` <class<`mob`>, null, ...> => double[];
type `where` <class<`BinaryTree`>, ...> => integer[] | <class<`BinaryTree`>, ...> => integer[];
