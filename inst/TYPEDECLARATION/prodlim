type `atRisk` <class<`prodlim`>, class<`data.frame`> | null, double[], any, character[] | double[], double | null, any, any> => list<null>;
type `backGround` <any, any, character[], character, double[], null | double[], character> => null;
type `centerBoxes` <double, double[], double, double[]> => double[];
type `checkCauses` <character[] | integer[] | double, class<`prodlim`>> => any;
type `confInt` <class<`prodlim`>, double[], null | class<`data.frame`>, character, character, character | null, double | character[] | integer[], double[]> => list<null>;
type `crModel` < > => class<`lvm`>;
type `dimColor` <character | double | null, double> => character;
type `EventHistory.frame` <class<`formula`>, class<`data.frame`> | class<`data.frame`, `data.table`> | list<double[]>, logical, character[], logical, logical, character[], any> => class<`EventHistory.frame`>;
type `extract.name.from.special` <character[], character> => character[];
type `findArrow` <double[], double[], double[], double[], logical> => list<double[]>;
type `getEvent` <class<`Hist`>, character, character> => class<`factor`>;
type `getStates` <class<`prodlim`> | class<`Hist`>, ...> => character[];
type `getStates.Hist` <class<`Hist`>, ...> => character[];
type `getStates.prodlim` <class<`prodlim`>, ...> => character[];
type `Hist` <double[] | list<^double[]>, any, null | double[], null | double[], character | double, logical> => class<`Hist`>;
type `[.Hist` <class<`Hist`>, any, any, logical> => (class<`Hist`> | double[]);
type `IntIndex` <class<`matrix`>, double[], double[]> => list<integer[] | class<`matrix`>>;
type `jackknife` <class<`prodlim`>, double[], any, logical, ...> => class<`matrix`>;
type `jackknife.competing.risks` <class<`prodlim`>, double[], character, logical, ...> => class<`matrix`>;
type `jackknife.survival` <class<`prodlim`>, double[], logical, ...> => class<`matrix`>;
type `leaveOneOut.competing.risks` <class<`prodlim`>, double[], character, ...> => class<`matrix`>;
type `leaveOneOut.survival` <class<`prodlim`>, double[], double, ...> => class<`matrix`>;
type `lifeTab` <class<`prodlim`>, ...> => (class<`matrix`> | list<class<`matrix`>> | list<list<class<`matrix`>>>);
type `lifeTab.competing.risks` <class<`prodlim`>, double[], character[], null | class<`data.frame`>, list<character[]> | null, integer, logical, logical> => (list<class<`matrix`>> | list<list<class<`matrix`>>>);
type `lifeTab.survival` <class<`prodlim`>, double[], any, list<character[]> | null, integer, logical, logical> => (class<`matrix`> | list<class<`matrix`>>);
type `List2Matrix` <list<class<`matrix`>> | list<class<`data.frame`>> | list<list<class<`matrix`>>>, double, character[]> => (class<`matrix`> | class<`data.frame`>);
type `meanNeighbors` <integer[], double[], ...> => class<`data.frame`>;
type `model.design` <class<`formula`, `terms`>, class<`data.frame`>, null | list<integer[]>, logical, double, any, logical, logical | character> => (list<class<`data.frame`>> | list<class<`data.frame`> | class<`matrix`>> | list<class<`matrix`> | class<`data.frame`>> | list<class<`matrix`>> | list<null | class<`data.frame`>> | list<null | class<`matrix`>>);
type `neighborhood` <double[], null, character> => class<`neighborhood`>;
type `neighbors` <integer[], double[], ...> => list<class<`neighborhood`> | list<double[]>>;
type `parseSpecialNames` <character[], character, any> => (null | list<list<double | character>> | list<null> | list<list<character>> | list<list<character | double | character>> | list<list<double>> | list<list<character | character | null>> | list<list<character | double>>);
type `PercentAxis` <double, double[], ...> => double[];
type `PetoInt` <double[], double[], double[]> => class<`matrix`>;
type `plotCompetingRiskModel` <any, logical, ...> => list<list<any>>;
type `plot.Hist` <class<`Hist`>, any, any, any, any, character, character, any> => list<list<any>>;
type `plotIllnessDeathModel` <any, double, logical, ...> => list<list<any>>;
type `plot.prodlim` <class<`prodlim`>, any, any, any, any, logical, any, any> => any;
type `predictAbsrisk` <class<`prodlim`>, double[], any, double, any, character | double, ...> => any;
type `predictList` <class<`prodlim`>, double[], any, double> => list<any>;
type `predict.prodlim` <class<`prodlim`>, double[], any, double, any, character, logical, any> => any;
type `predictSurv` <class<`prodlim`>, double[], any, double, character, any> => (class<`matrix`> | ^double[] | list<^double[]>);
type `predictSurvIndividual` <class<`prodlim`>, double> => double[];
type `print.Hist` <class<`Hist`>, ...> => list<double[] | class<`table`> | class<`data.frame`>>;
type `print.prodlim` <class<`prodlim`>, ...> => null;
type `print.quantile.prodlim` <class<`quantile.prodlim`>, double, character, ...> => class<`quantile.prodlim`>;
type `print.summary.prodlim` <class<`summary.prodlim`>, double, ...> => (class<`matrix`> | list<class<`matrix`>>);
type `prodlim` <class<`formula`>, class<`data.frame`> | class<`data.frame`, `data.table`> | list<double[]>, any, null, logical, double, null, any> => class<`prodlim`>;
type `prodlimIcensSurv` <class<`Hist`>, any, double, double, logical, any> => class<`prodlim`>;
type `quantile.prodlim` <class<`prodlim`>, any, double, ...> => class<`quantile.prodlim`>;
type `redist` <double[], double[]> => list<class<`prodlim`> | class<`matrix`>>;
type `row.match` <class<`data.frame`> | character[], class<`data.frame`>, null> => integer[];
type `SimCompRisk` <double, ...> => class<`data.frame`>;
type `SimSurv` <double, ...> => class<`data.frame`>;
type `sindex` <double[], double[], character, logical> => integer[];
type `SmartControl` <list<any>, character[], any, list<class<`data.frame`>> | list<class<`data.frame`> | list<double[]>> | list<list<any>>, any, any, logical, any> => list<list<any>>;
type `stopTime` <class<`Hist`> | class<`Surv`>, double> => (class<`Hist`> | class<`Surv`>);
type `strip.terms` <class<`formula`, `terms`>, character[], null | list<character[]>, character | null, list<list<double>> | null | list<null> | list<list<character>>, logical> => class<`formula`, `terms`>;
type `summary.Hist` <class<`Hist`>, logical, ...> => (list<class<`table`> | class<`data.frame`>> | list<double[] | class<`table`> | class<`data.frame`>>);
type `summary.prodlim` <class<`prodlim`>, any, any, double, any, any, logical, logical> => any;
type `survModel` < > => class<`lvm`>;
