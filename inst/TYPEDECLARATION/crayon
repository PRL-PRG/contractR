type `::` <logical | any => any | character[], logical | null, logical, double> => any => any | double | integer[] | character[];
type `ansi256` <^integer[], logical, logical> => struct<`open`:character, `close`:character>;
type `filter` <character[]> => logical[];
type `finish.crayon` <any => any, null> => character;
type `fun` <symbol, symbol> => double;
type `get_terminal_colors` < > => double;
type `i_num_colors` < > => double;
type `inside_emacs` < > => logical;
type `is_builtin_style` <character> => logical;
type `is_r_color` <character> => logical;
type `is_string` <character> => logical;
type `make_crayon` <struct<`#999999`:struct<`open`:character, `close`:character>> | struct<`#CCCCCC`:struct<`open`:character, `close`:character>> | struct<`bold`:struct<`open`:character, `close`:character>> | struct<`italic`:struct<`open`:character, `close`:character>> | struct<`red`:struct<`open`:character, `close`:character>> | struct<`underline`:struct<`open`:character, `close`:character>> | struct<`yellow`:struct<`open`:character, `close`:character>> | struct<`#202020`:struct<`open`:character, `close`:character>> | struct<`#e8e8e8`:struct<`open`:character, `close`:character>> | struct<`#f8f8f8`:struct<`open`:character, `close`:character>> | struct<`bgRed`:struct<`open`:character, `close`:character>> | struct<`blue`:struct<`open`:character, `close`:character>> | struct<`brown`:struct<`open`:character, `close`:character>> | struct<`cyan`:struct<`open`:character, `close`:character>> | struct<`darkgrey`:struct<`open`:character, `close`:character>> | struct<`darkolivegreen`:struct<`open`:character, `close`:character>> | struct<`green`:struct<`open`:character, `close`:character>> | struct<`grey`:struct<`open`:character, `close`:character>> | struct<`magenta`:struct<`open`:character, `close`:character>> | struct<`orange`:struct<`open`:character, `close`:character>> | struct<`tomato3`:struct<`open`:character, `close`:character>> | struct<`white`:struct<`open`:character, `close`:character>> | struct<`#ED30A6`:struct<`open`:character, `close`:character>> | struct<`bgCyan`:struct<`open`:character, `close`:character>> | struct<`bgMaroon`:struct<`open`:character, `close`:character>> | struct<`new_style`:struct<`open`:character, `close`:character>> | struct<`pink`:struct<`open`:character, `close`:character>> | struct<`red4`:struct<`open`:character, `close`:character>> | struct<`darkorange`:struct<`open`:character, `close`:character>>> => any => any;
type `num_colors` <logical> => double;
type `os_type` < > => character;
type `scale` <integer, double[], double[], logical> => double;
type `start.crayon` <any => any, null> => character;
type `style_8_from_rgb` <^integer[], logical> => struct<`open`:character, `close`:character>;
type `style_from_r_color` <character, logical, double, logical | symbol> => struct<`open`:character, `close`:character>;
type `style_from_rgb` <^integer[], logical, double, logical> => struct<`open`:character, `close`:character>;
type `%+%` <character[], character[]> => character[];
type `$` <character[], logical, logical, double> => character[] | any => any;
type `capitalize` <character> => character;
type `col_align` <character[], double, character, character> => character[];
type `col_nchar` <character[], character | null> => integer[];
type `col_substr` <character[], double[], double[]> => character[];
type `combine_styles` <any => any | character> => any => any;
type `FUN` <character | any => any | ^double[], logical> => any => any | ^double[];
type `make_space` <double[], character> => character[];
type `make_style` <character, logical, logical, double> => any => any;
type `map_to_ansi` <symbol, tuple<^double[]> | list<^double[]>> => any => any;
type `mapper` <integer[]> => double[];
type `mypaste` <character[], character> => character[];
type `new_fmt` <character[]> => character[];
type `non_matching` <tuple<^double[]> | list<^double[]>, character[], logical> => tuple<^double[]> | list<^double[]>;
type `orig_fmt` <character[]> => character[];
type `re_table` <character> => tuple<^double[]> | list<^double[]>;
type `strip_style` <character[]> => character[];
type `strrep` <character, double[]> => character[];
type `style` <character[], character | any => any, null | character> => character[];
type `styles` < > => struct<`reset`:struct<`open`:character, `close`:character>, `bold`:struct<`open`:character, `close`:character>, `blurred`:struct<`open`:character, `close`:character>, `italic`:struct<`open`:character, `close`:character>, `underline`:struct<`open`:character, `close`:character>, `inverse`:struct<`open`:character, `close`:character>, `hidden`:struct<`open`:character, `close`:character>, `strikethrough`:struct<`open`:character, `close`:character>, `black`:struct<`open`:character, `close`:character>, `red`:struct<`open`:character, `close`:character>, `green`:struct<`open`:character, `close`:character>, `yellow`:struct<`open`:character, `close`:character>, `blue`:struct<`open`:character, `close`:character>, `magenta`:struct<`open`:character, `close`:character>, `cyan`:struct<`open`:character, `close`:character>, `white`:struct<`open`:character, `close`:character>, `silver`:struct<`open`:character, `close`:character>, `bgBlack`:struct<`open`:character, `close`:character>, `bgRed`:struct<`open`:character, `close`:character>, `bgGreen`:struct<`open`:character, `close`:character>, `bgYellow`:struct<`open`:character, `close`:character>, `bgBlue`:struct<`open`:character, `close`:character>, `bgMagenta`:struct<`open`:character, `close`:character>, `bgCyan`:struct<`open`:character, `close`:character>, `bgWhite`:struct<`open`:character, `close`:character>>;
type `$.crayon` <any => any, character> => any => any;
type `alert` <character> => character;
type `as` <character> => character;
type `bg` <character> => character;
type `bgMaroon` <character> => character;
type `blue` <character> => character;
type `bold` <character> => character;
type `chr` <integer[], null> => character[];
type `col_strsplit` <character, character, null> => tuple<character[]>;
type `col_substring` <character, double[], double[]> => character[];
type `define_style` <character, struct<`open`:character, `close`:character>> => struct<`open`:character, `close`:character>;
type `drop_style` <character> => null;
type `error` <character> => character;
type `green` <character> => character;
type `has_style` <character> => logical;
type `note` <character> => character;
type `pink` <character> => character;
type `red` <character> => character;
type `underline` <character> => character;
type `use_or_make_style` <null | character | any => any, logical> => any => any;
type `warn` <character> => character;
type `(` <character> => character;
type `silver` <character> => character;
