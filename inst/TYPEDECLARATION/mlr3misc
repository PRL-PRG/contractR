type `::` <struct<`nr`:integer[], `resample_result`:tuple<environment, environment, environment, environment>, `task_id`:character[], `learner_id`:character[], `resampling_id`:character[], `iters`:integer[], `classif.ce`:double[], `method`:^character[], `xval`:^integer[]>, character, null> => struct<`nr`:integer[], `resample_result`:tuple<environment, environment, environment, environment>, `task_id`:character[], `learner_id`:character[], `resampling_id`:character[], `iters`:integer[], `classif.ce`:double[], `method`:^character[], `xval`:^integer[]>;
type `%nin%` <character[], ? character[]> => logical[];
type `$` <? character[], environment | ???, ???, character[]> => environment | struct<`classif.ce`:environment> | struct<`classif.debug`:environment, `classif.featureless`:environment, `classif.rpart`:environment> | struct<`regr.featureless`:environment, `regr.rpart`:environment> | struct<`regr.mse`:environment> | character[] | logical | struct<`a`:environment, `b`:environment>;
type `as_factor` <character[] | integer[], character[], logical> => integer[];
type `as_short_string` <struct<`xval`:integer> | struct<`a`:double, `b`:null, ``:character, `c`:integer[]>, integer, character> => character;
type `catf` <character[], ??? | character | integer, character> => null;
type `dictionary_get` <environment, character, ???> => environment;
type `dictionary_initialize_item` <symbol, struct<`value`:environment, `pars`:tuple<>, `required_args`:character[]> | struct<`value`:environment, `pars`:struct<`type`:character>, `required_args`:character[]> | struct<`value`:environment, `pars`:struct<`id`:character, `stages`:character[]>, `required_args`:character[]> | struct<`value`:any => any, `pars`:tuple<>, `required_args`:character[]>, tuple<> | struct<`costs`:^double[]> | struct<`id`:character>> => environment;
type `dictionary_retrieve_item` <environment, character> => struct<`value`:any => any, `pars`:tuple<>, `required_args`:character[]> | struct<`value`:environment, `pars`:tuple<>, `required_args`:character[]> | struct<`value`:environment, `pars`:struct<`id`:character, `stages`:character[]>, `required_args`:character[]> | struct<`value`:environment, `pars`:struct<`type`:character>, `required_args`:character[]>;
type `distinct_values.default` <character[] | integer[], logical, logical> => character[] | integer[];
type `distinct_values.factor` <^integer[], logical, logical> => ^character[];
type `encapsulate` <character, any => any, struct<`n`:double>, tuple<>, character[], ? double> => struct<`result`:environment, `log`:struct<`class`:integer[], `msg`:character[]>, `elapsed`:double> | struct<`result`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:integer>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `log`:struct<`class`:integer[], `msg`:character[]>, `elapsed`:double> | struct<`result`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:integer>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `log`:struct<`class`:integer[], `msg`:character[]>, `elapsed`:double> | struct<`result`:struct<`location`:double, `dispersion`:double, `features`:character[]>, `log`:struct<`class`:integer[], `msg`:character[]>, `elapsed`:double> | struct<`result`:struct<`response`:character, `task_train`:environment>, `log`:struct<`class`:integer[], `msg`:character[]>, `elapsed`:double> | struct<`result`:struct<`tab`:integer[], `features`:character[]>, `log`:struct<`class`:integer[], `msg`:character[]>, `elapsed`:double> | struct<`result`:double, `log`:struct<`class`:integer[], `msg`:character[]>, `elapsed`:double>;
type `every` <tuple<character, character> | list<character>, any => any, character> => logical;
type `filter` <character[]> => logical[];
type `formulate` <? character, character[], null> => language;
type `fun` <symbol, character> => logical;
type `FUN` <? struct<`method`:character> | struct<`xval`:integer> | struct<`a`:double, `b`:double> | character[] | language | struct<> | double[], ???> => environment | struct<`method`:character> | struct<`xval`:integer> | struct<`a`:double, `b`:double> | character[] | double[] | tuple<character, character, character[]>;
type `insert_named.data.table` <struct<`hair`:logical[], `feathers`:logical[], `eggs`:logical[], `milk`:logical[], `airborne`:logical[], `aquatic`:logical[], `predator`:logical[], `toothed`:logical[], `backbone`:logical[], `breathes`:logical[], `venomous`:logical[], `fins`:logical[], `legs`:integer[], `tail`:logical[], `domestic`:logical[], `catsize`:logical[], `type`:integer[], `..row_id`:character[]>, struct<`..row_id`:character[]> | struct<`y`:double[]> | struct<`..row_id`:integer[]> | struct<> | struct<`classes`:integer[]>> => struct<`hair`:logical[], `feathers`:logical[], `eggs`:logical[], `milk`:logical[], `airborne`:logical[], `aquatic`:logical[], `predator`:logical[], `toothed`:logical[], `backbone`:logical[], `breathes`:logical[], `venomous`:logical[], `fins`:logical[], `legs`:integer[], `tail`:logical[], `domestic`:logical[], `catsize`:logical[], `type`:integer[], `..row_id`:character[]>;
type `insert_named.default` <tuple<> | struct<`folds`:integer> | struct<`hair`:null, `feathers`:null, `eggs`:null, `milk`:null, `airborne`:null, `aquatic`:null, `predator`:null, `toothed`:null, `backbone`:null, `breathes`:null, `venomous`:null, `fins`:null, `legs`:null, `tail`:null, `domestic`:null, `catsize`:null, `type`:null, `..row_id`:null> | struct<`key`:character, `task_type`:character, `nrow`:integer, `ncol`:integer> | struct<`make`:null, `address`:null, `all`:null, `num3d`:null, `our`:null, `over`:null, `remove`:null, `internet`:null, `order`:null, `mail`:null, `receive`:null, `will`:null, `people`:null, `report`:null, `addresses`:null, `free`:null, `business`:null, `email`:null, `you`:null, `credit`:null, `your`:null, `font`:null, `num000`:null, `money`:null, `hp`:null, `hpl`:null, `george`:null, `num650`:null, `lab`:null, `labs`:null, `telnet`:null, `num857`:null, `data`:null, `num415`:null, `num85`:null, `technology`:null, `num1999`:null, `parts`:null, `pm`:null, `direct`:null, `cs`:null, `meeting`:null, `original`:null, `project`:null, `re`:null, `edu`:null, `table`:null, `conference`:null, `charSemicolon`:null, `charRoundbracket`:null, `charSquarebracket`:null, `charExclamation`:null, `charDollar`:null, `charHash`:null, `capitalAve`:null, `capitalLong`:null, `capitalTotal`:null, `type`:null, `..row_id`:null> | struct<`pregnant`:null, `glucose`:null, `pressure`:null, `triceps`:null, `insulin`:null, `mass`:null, `pedigree`:null, `age`:null, `diabetes`:null, `..row_id`:null> | struct<`ratio`:double> | struct<`Sepal.Length`:null, `Sepal.Width`:null, `Petal.Length`:null, `Petal.Width`:null, `Species`:null, `..row_id`:null> | struct<`status`:null, `duration`:null, `credit_history`:null, `purpose`:null, `amount`:null, `savings`:null, `employment_duration`:null, `installment_rate`:null, `personal_status_sex`:null, `other_debtors`:null, `present_residence`:null, `property`:null, `age`:null, `other_installment_plans`:null, `housing`:null, `number_credits`:null, `job`:null, `people_liable`:null, `telephone`:null, `foreign_worker`:null, `credit_risk`:null, `..row_id`:null> | struct<`town`:null, `tract`:null, `lon`:null, `lat`:null, `medv`:null, `cmedv`:null, `crim`:null, `zn`:null, `indus`:null, `chas`:null, `nox`:null, `rm`:null, `age`:null, `dis`:null, `rad`:null, `tax`:null, `ptratio`:null, `b`:null, `lstat`:null, `..row_id`:null> | struct<`type`:null, `alcohol`:null, `malic`:null, `ash`:null, `alcalinity`:null, `magnesium`:null, `phenols`:null, `flavanoids`:null, `nonflavanoids`:null, `proanthocyanins`:null, `color`:null, `hue`:null, `dilution`:null, `proline`:null, `..row_id`:null> | struct<`V1`:null, `V2`:null, `V3`:null, `V4`:null, `V5`:null, `V6`:null, `V7`:null, `V8`:null, `V9`:null, `V10`:null, `V11`:null, `V12`:null, `V13`:null, `V14`:null, `V15`:null, `V16`:null, `V17`:null, `V18`:null, `V19`:null, `V20`:null, `V21`:null, `V22`:null, `V23`:null, `V24`:null, `V25`:null, `V26`:null, `V27`:null, `V28`:null, `V29`:null, `V30`:null, `V31`:null, `V32`:null, `V33`:null, `V34`:null, `V35`:null, `V36`:null, `V37`:null, `V38`:null, `V39`:null, `V40`:null, `V41`:null, `V42`:null, `V43`:null, `V44`:null, `V45`:null, `V46`:null, `V47`:null, `V48`:null, `V49`:null, `V50`:null, `V51`:null, `V52`:null, `V53`:null, `V54`:null, `V55`:null, `V56`:null, `V57`:null, `V58`:null, `V59`:null, `V60`:null, `Class`:null, `..row_id`:null> | struct<`x.1`:null, `x.2`:null, `classes`:null, `..row_id`:null> | struct<`xval`:integer> | struct<`a`:double, `b`:double> | integer[], struct<`costs`:^double[]> | struct<`folds`:double> | struct<`type`:character[]> | struct<`id`:character> | integer[] | struct<`diabetes`:character[]> | struct<`ratio`:double> | struct<`Species`:character[]> | struct<`status`:character[], `credit_history`:character[], `purpose`:character[], `savings`:character[], `employment_duration`:character[], `personal_status_sex`:character[], `other_debtors`:character[], `property`:character[], `other_installment_plans`:character[], `housing`:character[], `job`:character[], `telephone`:character[], `foreign_worker`:character[], `credit_risk`:character[]> | struct<`town`:character[], `chas`:character[]> | struct<`Class`:character[]> | struct<`classes`:character[]> | struct<`cp`:double> | struct<`b`:double, `c`:double> | double> => struct<`costs`:^double[]> | struct<`folds`:double> | struct<`hair`:null, `feathers`:null, `eggs`:null, `milk`:null, `airborne`:null, `aquatic`:null, `predator`:null, `toothed`:null, `backbone`:null, `breathes`:null, `venomous`:null, `fins`:null, `legs`:null, `tail`:null, `domestic`:null, `catsize`:null, `type`:character[], `..row_id`:null> | struct<`id`:character> | struct<`key`:character, `task_type`:character, `nrow`:integer, `ncol`:integer, `lgl`:integer, `int`:integer, `dbl`:integer, `chr`:integer, `fct`:integer, `ord`:integer, `pxc`:integer> | struct<`make`:null, `address`:null, `all`:null, `num3d`:null, `our`:null, `over`:null, `remove`:null, `internet`:null, `order`:null, `mail`:null, `receive`:null, `will`:null, `people`:null, `report`:null, `addresses`:null, `free`:null, `business`:null, `email`:null, `you`:null, `credit`:null, `your`:null, `font`:null, `num000`:null, `money`:null, `hp`:null, `hpl`:null, `george`:null, `num650`:null, `lab`:null, `labs`:null, `telnet`:null, `num857`:null, `data`:null, `num415`:null, `num85`:null, `technology`:null, `num1999`:null, `parts`:null, `pm`:null, `direct`:null, `cs`:null, `meeting`:null, `original`:null, `project`:null, `re`:null, `edu`:null, `table`:null, `conference`:null, `charSemicolon`:null, `charRoundbracket`:null, `charSquarebracket`:null, `charExclamation`:null, `charDollar`:null, `charHash`:null, `capitalAve`:null, `capitalLong`:null, `capitalTotal`:null, `type`:character[], `..row_id`:null> | struct<`pregnant`:null, `glucose`:null, `pressure`:null, `triceps`:null, `insulin`:null, `mass`:null, `pedigree`:null, `age`:null, `diabetes`:character[], `..row_id`:null> | struct<`ratio`:double> | struct<`Sepal.Length`:null, `Sepal.Width`:null, `Petal.Length`:null, `Petal.Width`:null, `Species`:character[], `..row_id`:null> | struct<`status`:character[], `duration`:null, `credit_history`:character[], `purpose`:character[], `amount`:null, `savings`:character[], `employment_duration`:character[], `installment_rate`:null, `personal_status_sex`:character[], `other_debtors`:character[], `present_residence`:null, `property`:character[], `age`:null, `other_installment_plans`:character[], `housing`:character[], `number_credits`:null, `job`:character[], `people_liable`:null, `telephone`:character[], `foreign_worker`:character[], `credit_risk`:character[], `..row_id`:null> | struct<`town`:character[], `tract`:null, `lon`:null, `lat`:null, `medv`:null, `cmedv`:null, `crim`:null, `zn`:null, `indus`:null, `chas`:character[], `nox`:null, `rm`:null, `age`:null, `dis`:null, `rad`:null, `tax`:null, `ptratio`:null, `b`:null, `lstat`:null, `..row_id`:null> | struct<`type`:character[], `alcohol`:null, `malic`:null, `ash`:null, `alcalinity`:null, `magnesium`:null, `phenols`:null, `flavanoids`:null, `nonflavanoids`:null, `proanthocyanins`:null, `color`:null, `hue`:null, `dilution`:null, `proline`:null, `..row_id`:null> | struct<`V1`:null, `V2`:null, `V3`:null, `V4`:null, `V5`:null, `V6`:null, `V7`:null, `V8`:null, `V9`:null, `V10`:null, `V11`:null, `V12`:null, `V13`:null, `V14`:null, `V15`:null, `V16`:null, `V17`:null, `V18`:null, `V19`:null, `V20`:null, `V21`:null, `V22`:null, `V23`:null, `V24`:null, `V25`:null, `V26`:null, `V27`:null, `V28`:null, `V29`:null, `V30`:null, `V31`:null, `V32`:null, `V33`:null, `V34`:null, `V35`:null, `V36`:null, `V37`:null, `V38`:null, `V39`:null, `V40`:null, `V41`:null, `V42`:null, `V43`:null, `V44`:null, `V45`:null, `V46`:null, `V47`:null, `V48`:null, `V49`:null, `V50`:null, `V51`:null, `V52`:null, `V53`:null, `V54`:null, `V55`:null, `V56`:null, `V57`:null, `V58`:null, `V59`:null, `V60`:null, `Class`:character[], `..row_id`:null> | struct<`x.1`:null, `x.2`:null, `classes`:character[], `..row_id`:null> | struct<`xval`:integer, `cp`:double> | struct<`a`:double, `b`:double, `c`:double> | double[];
type `invoke` <symbol | language, language | ??? | symbol | logical, tuple<> | struct<`xval`:integer> | tuple<integer[]> | struct<`n`:double> | struct<`x`:integer[]> | tuple<double[], character[]>, struct<`warnPartialMatchArgs`:logical, `warnPartialMatchAttr`:logical, `warnPartialMatchDollar`:logical> | tuple<>, ? double> => ^double[] | environment | struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:integer>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]> | struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:integer>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]> | struct<`location`:double, `dispersion`:double, `features`:character[]> | struct<`response`:character, `task_train`:environment> | struct<`tab`:integer[], `features`:character[]> | struct<`x`:^double[], `classes`:integer[]> | struct<`x`:^double[], `y`:double[]> | struct<>;
type `is_scalar_na` <? character> => logical;
type `keep_in_bounds` <integer[], double, double> => integer[];
type `load_dataset` <character, character, logical> => struct<`hair`:logical[], `feathers`:logical[], `eggs`:logical[], `milk`:logical[], `airborne`:logical[], `aquatic`:logical[], `predator`:logical[], `toothed`:logical[], `backbone`:logical[], `breathes`:logical[], `venomous`:logical[], `fins`:logical[], `legs`:integer[], `tail`:logical[], `domestic`:logical[], `catsize`:logical[], `type`:integer[]>;
type `map` <tuple<> | list<environment> | integer[] | tuple<environment> | tuple<struct<`test`:environment>, struct<`test`:environment>, struct<`test`:environment>> | list<struct<`test`:environment>> | character[] | tuple<struct<`learner_state`:struct<`log`:struct<`stage`:integer[], `class`:integer[], `msg`:character[]>, `train_time`:double, `predict_time`:double>, `prediction`:struct<`test`:environment>>, struct<`learner_state`:struct<`log`:struct<`stage`:integer[], `class`:integer[], `msg`:character[]>, `train_time`:double, `predict_time`:double>, `prediction`:struct<`test`:environment>>, struct<`learner_state`:struct<`log`:struct<`stage`:integer[], `class`:integer[], `msg`:character[]>, `train_time`:double, `predict_time`:double>, `prediction`:struct<`test`:environment>>> | list<struct<`learner_state`:struct<`log`:struct<`stage`:integer[], `class`:integer[], `msg`:character[]>, `train_time`:double, `predict_time`:double>, `prediction`:struct<`test`:environment>>> | struct<`message_train`:environment, `message_predict`:environment, `warning_train`:environment, `warning_predict`:environment, `error_train`:environment, `error_predict`:environment, `segfault_train`:environment, `segfault_predict`:environment, `predict_missing`:environment, `save_tasks`:environment, `x`:environment> | struct<`method`:environment> | struct<`minsplit`:environment, `cp`:environment, `maxcompete`:environment, `maxsurrogate`:environment, `maxdepth`:environment, `xval`:environment> | struct<`robust`:environment> | struct<`stratify`:environment, `folds`:environment> | tuple<character[], character, character[]> | tuple<struct<`message`:character, `call`:language>> | struct<> | struct<`d`:environment, `f`:environment, `i`:environment> | struct<`letters`:environment> | struct<`ratio`:environment>, any => any | character, ??? | environment> => tuple<> | list<character> | tuple<struct<`row_id`:integer[], `rep`:integer[], `fold`:integer[]>, struct<`row_id`:integer[], `rep`:integer[], `fold`:integer[]>> | tuple<struct<`row_id`:integer[], `truth`:integer[], `response`:integer[]>, struct<`row_id`:integer[], `truth`:integer[], `response`:integer[]>, struct<`row_id`:integer[], `truth`:integer[], `response`:integer[]>> | list<struct<`row_id`:integer[], `truth`:integer[], `response`:integer[]>> | tuple<environment> | list<environment> | tuple<tuple<>, tuple<>> | tuple<null, null, null> | list<null> | tuple<struct<`classif.ce`:double>, struct<`classif.ce`:double>> | tuple<struct<`key`:character, `feature_types`:tuple<character[]>, `packages`:tuple<character[]>, `properties`:tuple<character[]>, `predict_types`:tuple<character[]>>, struct<`key`:character, `feature_types`:tuple<character[]>, `packages`:tuple<character[]>, `properties`:tuple<character[]>, `predict_types`:tuple<character[]>>, struct<`key`:character, `feature_types`:tuple<character[]>, `packages`:tuple<character>, `properties`:tuple<character[]>, `predict_types`:tuple<character[]>>, struct<`key`:character, `feature_types`:tuple<character[]>, `packages`:tuple<character>, `properties`:tuple<character[]>, `predict_types`:tuple<character[]>>, struct<`key`:character, `feature_types`:tuple<character[]>, `packages`:tuple<character>, `properties`:tuple<character[]>, `predict_types`:tuple<character>>> | list<struct<`key`:character, `params`:tuple<character[]>, `iters`:integer>> | list<struct<`key`:character, `task_type`:character, `nrow`:integer, `ncol`:integer, `lgl`:integer, `int`:integer, `dbl`:integer, `chr`:integer, `fct`:integer, `ord`:integer, `pxc`:integer>> | list<struct<`key`:character, `task_type`:character, `packages`:tuple<character[]>, `predict_type`:character, `task_properties`:tuple<character[]>> | struct<`key`:character, `task_type`:null, `packages`:tuple<character[]>, `predict_type`:character, `task_properties`:tuple<character[]>>> | tuple<struct<`learner`:tuple<environment>, `prediction`:tuple<struct<`test`:environment>>>, struct<`learner`:tuple<environment>, `prediction`:tuple<struct<`test`:environment>>>, struct<`learner`:tuple<environment>, `prediction`:tuple<struct<`test`:environment>>>> | list<struct<`learner`:tuple<environment>, `prediction`:tuple<struct<`test`:environment>>>> | tuple<struct<`method`:character>, struct<`xval`:integer>, struct<`method`:character>, struct<`xval`:integer>> | tuple<struct<`msg`:character[]>> | list<struct<`msg`:character[]>> | struct<`message_train`:character, `message_predict`:character, `warning_train`:character, `warning_predict`:character, `error_train`:character, `error_predict`:character, `segfault_train`:character, `segfault_predict`:character, `predict_missing`:character, `save_tasks`:character[], `x`:character> | struct<`method`:character> | struct<`method`:environment> | struct<`minsplit`:character, `cp`:character, `maxcompete`:character, `maxsurrogate`:character, `maxdepth`:character, `xval`:character> | struct<`minsplit`:environment, `cp`:environment, `maxcompete`:environment, `maxsurrogate`:environment, `maxdepth`:environment, `xval`:environment> | struct<`robust`:character> | struct<`stratify`:character[], `folds`:character> | tuple<character[], character[], character[]> | struct<`Sepal.Length`:double[]> | struct<`Species`:character[]> | tuple<double[], character[]> | struct<`d`:character[], `f`:character[], `i`:character[]> | struct<`letters`:character> | struct<`letters`:environment> | struct<`ratio`:character> | struct<`ratio`:struct<`ratio`:double[]>, `letters`:struct<`letters`:character[]>> | struct<`ratio`:double, `letters`:integer> | struct<`ratio`:environment>;
type `map_chr` <tuple<> | list<environment> | struct<> | tuple<environment> | character[] | tuple<language, language> | struct<`ratio`:environment, `letters`:environment>, character | any => any, ???> => character[];
type `map_dbl` <character[] | tuple<> | tuple<environment> | struct<`classif.ce`:environment>, any => any, ???> => double[];
type `map_dtr` <tuple<environment, environment> | character[] | tuple<struct<`learner_state`:struct<`log`:struct<`stage`:integer[], `class`:integer[], `msg`:character[]>, `train_time`:double, `predict_time`:double>, `prediction`:struct<`test`:environment>>, struct<`learner_state`:struct<`log`:struct<`stage`:integer[], `class`:integer[], `msg`:character[]>, `train_time`:double, `predict_time`:double>, `prediction`:struct<`test`:environment>>, struct<`learner_state`:struct<`log`:struct<`stage`:integer[], `class`:integer[], `msg`:character[]>, `train_time`:double, `predict_time`:double>, `prediction`:struct<`test`:environment>>> | list<struct<`learner_state`:struct<`log`:struct<`stage`:integer[], `class`:integer[], `msg`:character[]>, `train_time`:double, `predict_time`:double>, `prediction`:struct<`test`:environment>>> | integer[] | list<environment> | tuple<struct<`message`:character, `call`:language>>, any => any, ??? | environment, logical> => struct<>;
type `map_int` <tuple<environment, environment> | struct<> | tuple<character, character, character[]>, any => any, ???> => integer[];
type `map_lgl` <character[] | tuple<character, character> | list<character> | struct<`message_train`:character, `message_predict`:character, `warning_train`:character, `warning_predict`:character, `error_train`:character, `error_predict`:character, `segfault_train`:character, `segfault_predict`:character, `predict_missing`:character, `save_tasks`:character[], `x`:character> | struct<`minsplit`:character, `cp`:character, `maxcompete`:character, `maxsurrogate`:character, `maxdepth`:character, `xval`:character> | struct<`stratify`:character[], `folds`:character> | struct<`stratify`:character[], `ratio`:character> | struct<`warnPartialMatchArgs`:logical, `warnPartialMatchAttr`:logical, `warnPartialMatchDollar`:logical> | struct<`warnPartialMatchArgs`:null, `warnPartialMatchAttr`:null, `warnPartialMatchDollar`:null> | struct<`method`:character> | struct<`robust`:character> | struct<`xval`:integer> | struct<`a`:double, `b`:double> | struct<> | tuple<double[], character[]> | struct<`d`:character[], `f`:character[], `i`:character[]> | struct<`ratio`:struct<`ratio`:double[]>, `letters`:struct<`letters`:character[]>> | struct<`ratio`:environment, `letters`:environment>, any => any | character, logical | character | ??? | environment> => logical[];
type `map_mold` <tuple<> | list<environment> | struct<> | tuple<environment> | character[] | struct<`classif.ce`:environment> | tuple<character, character> | list<character> | struct<`message_train`:character, `message_predict`:character, `warning_train`:character, `warning_predict`:character, `error_train`:character, `error_predict`:character, `segfault_train`:character, `segfault_predict`:character, `predict_missing`:character, `save_tasks`:character[], `x`:character> | struct<`minsplit`:character, `cp`:character, `maxcompete`:character, `maxsurrogate`:character, `maxdepth`:character, `xval`:character> | struct<`stratify`:character[], `folds`:character> | struct<`stratify`:character[], `ratio`:character> | struct<`warnPartialMatchArgs`:logical, `warnPartialMatchAttr`:logical, `warnPartialMatchDollar`:logical> | struct<`warnPartialMatchArgs`:null, `warnPartialMatchAttr`:null, `warnPartialMatchDollar`:null> | struct<`method`:character> | struct<`robust`:character> | struct<`xval`:integer> | tuple<language, language> | struct<`a`:double, `b`:double> | struct<`ratio`:environment, `letters`:environment> | tuple<double[], character[]> | struct<`d`:character[], `f`:character[], `i`:character[]> | struct<`ratio`:struct<`ratio`:double[]>, `letters`:struct<`letters`:character[]>>, character | any => any, null, ??? | logical | character | environment> => character[] | double[];
type `map_values` <character[], character[], character[]> => character[];
type `names2` <tuple<> | pairlist | struct<`costs`:^double[]> | struct<`folds`:double> | struct<`id`:character> | struct<`predict_sets`:character> | struct<`predict_type`:character> | struct<`ratio`:double> | struct<`xval`:integer> | character[] | integer[] | struct<`a`:double, `b`:null, ``:character, `c`:integer[]> | struct<`x`:double>, ? character> => character[];
type `pmap` <struct<`task`:integer[], `resampling`:integer[]>, any => any, ???> => tuple<environment, environment> | tuple<null, character[], null, null> | list<? character[]> | list<null>;
type `pmap_dbl` <struct<`prediction`:tuple<struct<`test`:environment>, struct<`test`:environment>, struct<`test`:environment>>, `task`:tuple<environment, environment, environment>, `learner`:tuple<environment, environment, environment>, `resampling`:tuple<environment, environment, environment>, `iteration`:integer[]>, any => any, ???> => double[];
type `pmap_dtr` <struct<`task`:tuple<environment, environment>, `learner`:tuple<environment, environment>, `resampling`:tuple<environment, environment>>, any => any, ???, logical> => struct<`task`:tuple<environment, environment, environment, environment>, `learner`:tuple<environment, environment, environment, environment>, `resampling`:tuple<environment, environment, environment, environment>, `iteration`:integer[], `uhash`:character[]>;
type `rbindlist2` <tuple<struct<`method`:character>, struct<`xval`:integer>, struct<`method`:character>, struct<`xval`:integer>> | tuple<struct<`a`:double, `b`:double>, struct<`a`:double, `b`:double>>> => struct<`method`:^character[], `xval`:^integer[]>;
type `rcbind` <struct<`nr`:integer[], `resample_result`:tuple<environment, environment, environment, environment>, `task_id`:character[], `learner_id`:character[], `resampling_id`:character[], `iters`:integer[], `classif.ce`:double[], `method`:^character[], `xval`:^integer[]>, struct<`method`:^character[], `xval`:^integer[]>> => struct<`nr`:integer[], `resample_result`:tuple<environment, environment, environment, environment>, `task_id`:character[], `learner_id`:character[], `resampling_id`:character[], `iters`:integer[], `classif.ce`:double[], `method`:^character[], `xval`:^integer[]>;
type `remove_named.data.table` <struct<`method`:^character[], `xval`:^integer[]>, character[]> => struct<`method`:^character[], `xval`:^integer[]>;
type `require_namespaces` <character[], character> => character[];
type `seq_along0` <integer[]> => integer[];
type `seq_col` <^double[]> => integer[];
type `seq_len0` <double> => integer[];
type `seq_row` <struct<`important1`:double[], `important2`:double[], `important3`:double[], `important4`:double[], `important5`:double[], `unimportant1`:double[], `unimportant2`:double[], `unimportant3`:double[], `unimportant4`:double[], `unimportant5`:double[], `y`:double[]>> => integer[];
type `set_class` <struct<`location`:double, `dispersion`:double, `features`:character[]> | struct<`response`:character, `task_train`:environment> | struct<`tab`:integer[], `features`:character[]> | tuple<>, character[]> => struct<`location`:double, `dispersion`:double, `features`:character[]> | struct<`response`:character, `task_train`:environment> | struct<`tab`:integer[], `features`:character[]> | tuple<>;
type `set_names` <double[] | tuple<> | tuple<character[]> | tuple<environment> | struct<`message_train`:character, `message_predict`:character, `warning_train`:character, `warning_predict`:character, `error_train`:character, `error_predict`:character, `segfault_train`:character, `segfault_predict`:character, `predict_missing`:character, `save_tasks`:character[], `x`:character> | list<environment> | struct<`method`:character> | struct<`minsplit`:character, `cp`:character, `maxcompete`:character, `maxsurrogate`:character, `maxdepth`:character, `xval`:character> | struct<`robust`:character> | list<character[]> | struct<`stratify`:character[], `folds`:character> | struct<`stratify`:character[], `ratio`:character> | character[] | ^logical[] | struct<> | struct<`d`:character[], `f`:character[], `i`:character[]>, character[] | any => any, ???> => double[] | tuple<> | struct<`..row_id`:character[]> | struct<`Class`:character[]> | struct<`classes`:character[]> | struct<`classif.ce`:environment> | struct<`classif.debug`:environment, `classif.featureless`:environment, `classif.rpart`:environment> | struct<`d`:environment> | struct<`diabetes`:character[]> | struct<`message_train`:character, `message_predict`:character, `warning_train`:character, `warning_predict`:character, `error_train`:character, `error_predict`:character, `segfault_train`:character, `segfault_predict`:character, `predict_missing`:character, `save_tasks`:character[], `x`:character> | struct<`message_train`:environment, `message_predict`:environment, `warning_train`:environment, `warning_predict`:environment, `error_train`:environment, `error_predict`:environment, `segfault_train`:environment, `segfault_predict`:environment, `predict_missing`:environment, `save_tasks`:environment, `x`:environment> | struct<`method`:character> | struct<`method`:environment> | struct<`minsplit`:character, `cp`:character, `maxcompete`:character, `maxsurrogate`:character, `maxdepth`:character, `xval`:character> | struct<`minsplit`:environment, `cp`:environment, `maxcompete`:environment, `maxsurrogate`:environment, `maxdepth`:environment, `xval`:environment> | struct<`regr.featureless`:environment, `regr.rpart`:environment> | struct<`regr.mse`:environment> | struct<`robust`:character> | struct<`robust`:environment> | struct<`sd`:environment> | struct<`sd1`:environment, `sd2`:environment> | struct<`Species`:character[]> | struct<`status`:character[], `credit_history`:character[], `purpose`:character[], `savings`:character[], `employment_duration`:character[], `personal_status_sex`:character[], `other_debtors`:character[], `property`:character[], `other_installment_plans`:character[], `housing`:character[], `job`:character[], `telephone`:character[], `foreign_worker`:character[], `credit_risk`:character[]> | struct<`stratify`:character[], `folds`:character> | struct<`stratify`:character[], `ratio`:character> | struct<`stratify`:environment, `folds`:environment> | struct<`town`:character[], `chas`:character[]> | struct<`type`:character[]> | character[] | ^logical[] | struct<`a`:environment, `b`:environment> | struct<> | struct<`d`:character[], `f`:character[], `i`:character[]> | struct<`i`:environment> | struct<`letters`:environment> | struct<`ratio`:environment>;
type `shuffle` <integer[] | double, double, ???> => integer[] | double;
type `str_collapse` <character[] | logical, character, character, double, character> => character;
type `str_indent` <character, character[] | logical, double, integer, ???> => character[];
type `str_trunc` <character, double, character> => character;
type `.subset2` < > => environment;
type `chunk` <integer, double, null, logical> => integer[];
type `chunk_vector` <integer[], double, null, logical> => tuple<integer[], integer[]>;
type `cite_bib` <character, character> => character;
type `compute_mode` <double[], character, logical> => double;
type `cross_join` <struct<`sorted`:integer[], `b`:character[]> | struct<`ratio`:double[], `letters`:character[]>, logical, logical> => struct<`sorted`:integer[], `b`:character[]>;
type `did_you_mean` <character, character[]> => character;
type `distinct_values.logical` <logical, logical, logical> => logical[];
type `enframe` <integer[], character, character> => struct<`name`:character[], `x_values`:integer[]>;
type `extract_vars` <language> => struct<`lhs`:character, `rhs`:character[]>;
type `ids` <struct<`a`:struct<`id`:character, `a`:double>, `bar`:struct<`id`:character, `a`:double>>> => character[];
type `modify_at.default` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, double | character, any => any, ???> => struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>;
type `modify_if.default` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, any => any, any => any, ???> => struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]>;
type `named_vector` <character[], null> => ^logical[];
type `parse_callr` <character> => struct<`class`:character, `msg`:character>;
type `parse_evaluate` <tuple<struct<`src`:character>, struct<`message`:character, `call`:language>>> => struct<`class`:character, `msg`:character>;
type `probe` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, any => any, ???> => logical[];
type `remove_named.default` <struct<`a`:double, `b`:double>, character> => struct<`a`:double>;
type `rowwise_table` <language, null> => struct<`a`:double[], `b`:character[]>;
type `topo_sort` <struct<`id`:character[], `parents`:tuple<character, character, character[]>>> => struct<`id`:character[], `depth`:integer[]>;
type `transpose_list` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]> | tuple<struct<`a`:double, `b`:double>, struct<`a`:double, `b`:double>>> => tuple<struct<`Sepal.Length`:double, `Sepal.Width`:double, `Petal.Length`:double, `Petal.Width`:double, `Species`:integer>, struct<`Sepal.Length`:double, `Sepal.Width`:double, `Petal.Length`:double, `Petal.Width`:double, `Species`:integer>> | struct<`a`:tuple<double, double>, `b`:tuple<double, double>>;
type `unnest` <struct<`id`:integer[], `a`:double[], `b`:double[]>, character, null> => struct<`id`:integer[], `a`:double[], `b`:double[]>;
type `which_max` <? ^double[], character, logical> => ? integer[];
type `which_min` <double[], character, logical> => integer;
type `imap` <tuple<> | struct<`ratio`:double[], `letters`:double[]>, any => any, ???> => tuple<> | struct<`ratio`:double[], `letters`:character[]>;
type `map_dtc` <character[] | struct<`ratio`:environment, `letters`:environment>, any => any, ???> => struct<`NA.`:double[], `NA..1`:character[]>;
