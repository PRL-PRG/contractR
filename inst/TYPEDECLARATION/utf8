type `::` <^character[], integer, logical, ? logical | character, null, logical, null> => integer[] | ^character[];
type `as_option` <character | symbol, logical> => logical;
type `as_output_utf8` <character, logical> => logical;
type `filter` <character[]> => logical[];
type `with_rethrow` <logical> => logical;
type `as_enum` <symbol, character, character[]> => character;
type `as_integer_scalar` <character | symbol, double, logical> => integer;
type `as_integer_vector` <symbol, double, logical> => integer;
type `as_justify` <character, character> => character;
type `as_character_scalar` <symbol, character, logical> => character;
type `as_character_vector` <symbol, character, logical> => character;
type `as_chars` <character, double> => integer;
type `as_print_gap` <character, null> => null;
type `as_style` <character, character> => character;
type `as_utf8` <character[], logical> => character[];
type `element_width` <character, logical, symbol, logical> => integer;
type `output_ansi` < > => logical;
type `print_matrix` <^character[], logical, null, integer, logical, integer, character, character, null, logical, logical, logical> => integer;
type `print_table` <^character[], integer, logical, null, integer, logical, integer, ? character, ? character, null, logical, logical, logical> => integer;
type `print_vector` <character, logical, null, integer, logical, integer, null, null, null, logical, logical, logical> => integer;
type `print_vector_unnamed` <character, logical, null, integer, logical, integer, null, null, null, logical, logical, logical> => integer;
type `set_dimnames` <^character[]> => ^character[];
type `utf8_encode` <character[], integer, logical, character, ? character, logical, null> => character[];
type `utf8_format` <^character[], logical, ? double, character, ? double, logical, logical, null, null, ? logical, ???> => ^character[];
type `utf8_normalize` <character[], logical, logical, logical, logical> => character[];
type `utf8_print` <^character[], ? double, logical, null, null, logical, null, ? character, ? character, null, logical, logical, null, ???> => ^character[];
type `utf8_valid` <character[]> => logical[];
type `utf8_width` <character[], logical, logical, ? logical> => ^integer[];
