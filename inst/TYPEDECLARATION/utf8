type `as_character_scalar` <any, character | null, logical> => (character | null);
type `as_character_vector` <any, character, logical> => character;
type `as_chars` <any, double | null> => (integer | null);
type `as_enum` <any, character, character[]> => character;
type `as_integer_scalar` <any, double | null, logical> => (integer | null);
type `as_integer_vector` <any, double, logical> => integer;
type `as_justify` <character, character> => character;
type `as_max_print` <any, double | null> => (integer | null);
type `as_na_print` <character, null> => null;
type `as_nonnegative` <any, double | null> => (integer | null);
type `as_option` <any, logical> => logical;
type `as_output_utf8` <character, logical | null> => logical;
type `as_print_gap` <character, null> => null;
type `as_style` <character, character | null> => (character | null);
type `as_utf8` <character[], logical> => character[];
type `element_width` <character, logical, any, logical> => integer;
type `output_ansi` < > => logical;
type `output_utf8` < > => logical;
type `print_matrix` <class<`matrix`>, logical, null, integer, logical, integer, character, character, null, logical, logical, logical> => integer;
type `print_table` <class<`matrix`>, integer, logical, null, integer, logical, integer, character | null, character | null, null, logical, logical, logical> => integer;
type `print_vector` <character, logical, null, integer, logical, integer, null, null, null, logical, logical, logical> => integer;
type `print_vector_unnamed` <character, logical, null, integer, logical, integer, null, null, null, logical, logical, logical> => integer;
type `set_dimnames` <class<`matrix`>> => class<`matrix`>;
type `utf8_encode` <character[], integer, logical, character, null | character, logical, null> => character[];
type `utf8_format` <character[] | class<`matrix`>, logical, double | null, character, double | null, logical, logical, null, null, null | logical, ...> => (character[] | class<`matrix`>);
type `utf8_normalize` <character[], logical, logical, logical, logical> => character[];
type `utf8_print` <character | class<`matrix`>, double | null, logical, null, null, logical, null, null | character, null | character, null, logical, logical, null, ...> => (character | class<`matrix`>);
type `utf8_valid` <character[]> => logical[];
type `utf8_width` <character[], logical, logical, null | logical> => ^integer[];
type `with_rethrow` <logical> => logical;
