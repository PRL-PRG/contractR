type `filter` <character[]> => logical[];
type `.check_for_unknown_fields` <? character[]> => null;
type `.check_value` <character | symbol, struct<`type`:character, `alternatives`:character[], `default`:character, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:character[], `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | symbol | struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:any => any, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>, ? double | character[]> => null;
type `.field_exists` <? character[]> => logical[];
type `.FUNCall` <symbol> => any => any;
type `.get_entries` <character> => ? struct<`Frears_Joe`:struct<`last`:character, `first`:character[], `address`:character, `mobile`:null, `home`:character, `age`:null, `type`:character>> | struct<`Myers_John`:struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character>> | struct<`Slater_Christian`:struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:integer, `type`:character>> | struct<`Slater_Christian`:struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character>> | struct<`Smith_Mary`:struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character>> | struct<`Smith_Peter`:struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:integer, `type`:character>> | struct<`Smith_Peter`:struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character>> | struct<`test_1`:struct<`index`:character, `index2`:integer, `X`:logical, `Y`:character>> | struct<`test`:struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double>> | struct<`test2`:struct<`names`:character, `X`:logical, `Y`:character, `Z`:double>> | struct<`test3`:struct<`names`:character, `X`:logical, `Y`:character, `Z`:character>> | struct<`the key`:struct<`Key`:character, `Value`:double>>;
type `.get_entry_indices` <tuple<character> | struct<`last`:character, `first`:character> | struct<`names`:character>, symbol | logical, ? any => any, null> => integer[];
type `.get_field` <character> => struct<`type`:character, `alternatives`:character[], `default`:character, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:character[], `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:any => any, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>;
type `.get_field_defaults` < > => struct<`Key`:null, `Value`:null> | struct<`last`:null, `first`:null, `address`:null, `mobile`:null, `home`:null, `age`:null, `type`:character> | struct<`names`:null, `X`:null, `Y`:null, `Z`:double> | struct<`X`:null, `Y`:null, `index`:null, `index2`:null>;
type `.get_field_names` < > => ? character[];
type `.get_index_fields` < > => character[];
type `.get_mandatory_fields` < > => character[];
type `.labels` <struct<`last`:character, `first`:character[], `address`:character, `mobile`:null, `home`:character, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character> | struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double, `New`:double, `New2`:null, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:character, `New`:null, `New2`:null, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:double, `New`:character, `New2`:null, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:null, `Z`:double, `New`:null, `New2`:double, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:null, `Z`:double, `New`:null, `New2`:null, `New3`:character>> => struct<`last`:character, `first`:character[], `address`:character, `mobile`:null, `home`:character, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character> | struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double, `New`:double, `New2`:null, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:character, `New`:null, `New2`:null, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:double, `New`:character, `New2`:null, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:null, `Z`:double, `New`:null, `New2`:double, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:null, `Z`:double, `New`:null, `New2`:null, `New3`:character>;
type `.make_entry` <struct<`X`:logical, `Y`:character, `index`:character[], `index2`:integer> | struct<`Key`:character, `Value`:double> | struct<`last`:character, `first`:character[], `address`:character, `home`:character, `mobile`:null, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `home`:character, `type`:character, `age`:integer, `mobile`:null> | struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:character> | struct<`names`:character, `X`:logical, `New2`:double, `Y`:null, `Z`:double, `New`:null> | struct<`names`:character, `X`:logical, `New3`:character, `Y`:null, `Z`:double, `New`:null, `New2`:null>> => struct<`index`:character[], `index2`:integer, `X`:logical, `Y`:character> | struct<`Key`:character, `Value`:double> | struct<`last`:character, `first`:character[], `address`:character, `mobile`:null, `home`:character, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character> | struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:character> | struct<`names`:character, `X`:logical, `Y`:null, `Z`:double, `New`:null, `New2`:double> | struct<`names`:character, `X`:logical, `Y`:null, `Z`:double, `New`:null, `New2`:null, `New3`:character>;
type `.make_field` <? character, ? character[], ? character | double, logical, logical, logical, ? any => any, any => any, tuple<>> => struct<`type`:character, `alternatives`:character[], `default`:character, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:character[], `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:any => any, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>;
type `[.registry` <struct<`get_field`:any => any, `get_fields`:any => any, `get_field_names`:any => any, `set_field`:any => any, `has_entry`:any => any, `get_entry`:any => any, `get_entries`:any => any, `get_entry_names`:any => any, `grep_entries`:any => any, `set_entry`:any => any, `modify_entry`:any => any, `delete_entry`:any => any, `n_of_entries`:any => any, `get_field_entries`:any => any, `get_permissions`:any => any, `restrict_permissions`:any => any, `seal_entries`:any => any, `get_sealed_field_names`:any => any>, character> => struct<`test_1`:struct<`index`:character, `index2`:integer, `X`:logical, `Y`:character>, `test_2`:struct<`index`:character[], `index2`:integer, `X`:logical, `Y`:character>> | struct<`the key`:struct<`Key`:character, `Value`:double>, `key`:struct<`Key`:character, `Value`:double>>;
type `[[.registry` <struct<`get_field`:any => any, `get_fields`:any => any, `get_field_names`:any => any, `set_field`:any => any, `has_entry`:any => any, `get_entry`:any => any, `get_entries`:any => any, `get_entry_names`:any => any, `grep_entries`:any => any, `set_entry`:any => any, `modify_entry`:any => any, `delete_entry`:any => any, `n_of_entries`:any => any, `get_field_entries`:any => any, `get_permissions`:any => any, `restrict_permissions`:any => any, `seal_entries`:any => any, `get_sealed_field_names`:any => any>, character> => ? struct<`index`:character, `index2`:integer, `X`:logical, `Y`:character> | struct<`Key`:character, `Value`:double> | struct<`last`:character, `first`:character[], `address`:character, `mobile`:null, `home`:character, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character> | struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:character>;
type `$` <??? | logical | character[]> => ? character[] | integer | tuple<> | tuple<struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:integer, `type`:character>> | tuple<struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double, `New`:double>> | tuple<struct<`names`:character, `X`:logical, `Y`:character, `Z`:double, `New`:character>> | logical[] | struct<`index`:character, `index2`:integer, `X`:logical, `Y`:character> | struct<`Key`:character, `Value`:double> | struct<`last`:character, `first`:character[], `address`:character, `mobile`:null, `home`:character, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character> | struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:character> | struct<`names`:struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>, `X`:struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>, `Y`:struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>, `Z`:struct<`type`:null, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>> | struct<`Smith_Mary`:struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character>> | struct<`test_1`:struct<`index`:character, `index2`:integer, `X`:logical, `Y`:character>> | struct<`test`:struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double>> | struct<`the key`:struct<`Key`:character, `Value`:double>> | struct<`type`:character, `alternatives`:character[], `default`:character, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>;
type `as.data.frame.registry` <struct<`get_field`:any => any, `get_fields`:any => any, `get_field_names`:any => any, `set_field`:any => any, `has_entry`:any => any, `get_entry`:any => any, `get_entries`:any => any, `get_entry_names`:any => any, `grep_entries`:any => any, `set_entry`:any => any, `modify_entry`:any => any, `delete_entry`:any => any, `n_of_entries`:any => any, `get_field_entries`:any => any, `get_permissions`:any => any, `restrict_permissions`:any => any, `seal_entries`:any => any, `get_sealed_field_names`:any => any>, ???> => struct<`last`:integer[], `first`:integer[], `address`:integer[], `mobile`:^character[], `home`:^integer[], `age`:^integer[], `type`:integer[]>;
type `f` <??? | logical | character[], ? character | logical | ???, ? character[] | logical, ? character | double, ? logical, logical, logical, ? any => any, any => any, ???> => ? tuple<> | struct<`type`:character, `alternatives`:character[], `default`:character, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`index`:character, `index2`:integer, `X`:logical, `Y`:character> | struct<`Key`:character, `Value`:double> | struct<`last`:character, `first`:character[], `address`:character, `mobile`:null, `home`:character, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character> | struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:character> | struct<`Smith_Mary`:struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character>> | struct<`names`:struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>, `X`:struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>, `Y`:struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>, `Z`:struct<`type`:null, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>> | logical[] | tuple<struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:integer, `type`:character>> | tuple<struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double, `New`:double>> | tuple<struct<`names`:character, `X`:logical, `Y`:character, `Z`:double, `New`:character>> | character[] | struct<`test_1`:struct<`index`:character, `index2`:integer, `X`:logical, `Y`:character>> | struct<`test`:struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double>> | struct<`the key`:struct<`Key`:character, `Value`:double>> | integer;
type `FUN` <? struct<`type`:character, `alternatives`:character[], `default`:character, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:character[], `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:any => any, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:null, `type`:character> | struct<`last`:character, `first`:character, `address`:character, `mobile`:null, `home`:character, `age`:integer, `type`:character> | struct<`last`:character, `first`:character[], `address`:character, `mobile`:null, `home`:character, `age`:null, `type`:character> | struct<`names`:character, `X`:logical, `Y`:null, `Z`:double, `New`:null, `New2`:double, `New3`:null> | struct<`names`:character, `X`:logical, `Y`:null, `Z`:double, `New`:null, `New2`:null, `New3`:character> | character[] | double | struct<`index`:character[], `index2`:integer, `X`:logical, `Y`:character> | struct<`Key`:character, `Value`:double> | struct<`last`:character, `first`:character, `address`:character, `mobile`:character, `home`:null, `age`:integer, `type`:character> | struct<`names`:character[], `X`:logical, `Y`:character, `Z`:double> | struct<`names`:character, `X`:logical, `Y`:character, `Z`:character>> => ? character | double | struct<> | logical[];
type `length.registry` <struct<`get_field`:any => any, `get_fields`:any => any, `get_field_names`:any => any, `set_field`:any => any, `has_entry`:any => any, `get_entry`:any => any, `get_entries`:any => any, `get_entry_names`:any => any, `grep_entries`:any => any, `set_entry`:any => any, `modify_entry`:any => any, `delete_entry`:any => any, `n_of_entries`:any => any, `get_field_entries`:any => any, `get_permissions`:any => any, `restrict_permissions`:any => any, `seal_entries`:any => any, `get_sealed_field_names`:any => any>> => integer;
type `print.registry` <struct<`get_field`:any => any, `get_fields`:any => any, `get_field_names`:any => any, `set_field`:any => any, `has_entry`:any => any, `get_entry`:any => any, `get_entries`:any => any, `get_entry_names`:any => any, `grep_entries`:any => any, `set_entry`:any => any, `modify_entry`:any => any, `delete_entry`:any => any, `n_of_entries`:any => any, `get_field_entries`:any => any, `get_permissions`:any => any, `restrict_permissions`:any => any, `seal_entries`:any => any, `get_sealed_field_names`:any => any>, ???> => struct<`get_field`:any => any, `get_fields`:any => any, `get_field_names`:any => any, `set_field`:any => any, `has_entry`:any => any, `get_entry`:any => any, `get_entries`:any => any, `get_entry_names`:any => any, `grep_entries`:any => any, `set_entry`:any => any, `modify_entry`:any => any, `delete_entry`:any => any, `n_of_entries`:any => any, `get_field_entries`:any => any, `get_permissions`:any => any, `restrict_permissions`:any => any, `seal_entries`:any => any, `get_sealed_field_names`:any => any>;
type `print.registry_field` <struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>, ???> => struct<`type`:character, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:double, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>> | struct<`type`:null, `alternatives`:null, `default`:null, `is_mandatory`:logical, `is_modifiable`:logical, `is_key`:logical, `validity_FUN`:null, `index_FUN`:any => any, `index_FUN_args`:tuple<>>;
type `registry` <? character, ? character, ? symbol, logical> => struct<`get_field`:any => any, `get_fields`:any => any, `get_field_names`:any => any, `set_field`:any => any, `has_entry`:any => any, `get_entry`:any => any, `get_entries`:any => any, `get_entry_names`:any => any, `grep_entries`:any => any, `set_entry`:any => any, `modify_entry`:any => any, `delete_entry`:any => any, `n_of_entries`:any => any, `get_field_entries`:any => any, `get_permissions`:any => any, `restrict_permissions`:any => any, `seal_entries`:any => any, `get_sealed_field_names`:any => any>;
type `summary.registry` <struct<`get_field`:any => any, `get_fields`:any => any, `get_field_names`:any => any, `set_field`:any => any, `has_entry`:any => any, `get_entry`:any => any, `get_entries`:any => any, `get_entry_names`:any => any, `grep_entries`:any => any, `set_entry`:any => any, `modify_entry`:any => any, `delete_entry`:any => any, `n_of_entries`:any => any, `get_field_entries`:any => any, `get_permissions`:any => any, `restrict_permissions`:any => any, `seal_entries`:any => any, `get_sealed_field_names`:any => any>, ???> => struct<`last`:integer[], `first`:integer[], `address`:integer[], `mobile`:^character[], `home`:^integer[], `age`:^integer[], `type`:integer[]>;
