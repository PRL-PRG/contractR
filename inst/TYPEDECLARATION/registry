type `$` <...> => any;
type `as.data.frame.registry` <class<`Addressbook`, `registry`> | class<`registry`>, ...> => class<`data.frame`>;
type `.check_for_unknown_fields` <character[] | null> => any;
type `.check_value` <any, any, double | character[] | null> => any;
type `f` <character, character | logical | null, null | character[], double | character | null, null | logical, logical, logical, null | class<`function`>, class<`function`>, ...> => any | <character> => class<`registry_field`> | <...> => (class<`Address`, `registry_entry`> | class<`registry_entry`> | class<`registry_entry`, `simple.list`> | null) | <...> => any | <character, ...> => list<class<`Address`, `registry_entry`>> | <...> => (null | list<class<`Address`, `registry_entry`> | class<`registry_entry`> | class<`registry_entry`, `simple.list`>>) | < > => list<class<`registry_field`>> | < > => logical[] | <...> => any | < > => character[] | <...> => any | <logical, logical, logical, logical> => logical | < > => integer;
type `.field_exists` <character[] | null> => logical[];
type `filter` <character[]> => logical[];
type `FUN` <class<`registry_field`>> => (character | double | null) | <class<`Address`, `registry_entry`> | class<`registry_entry`, `simple.list`>> => class<`data.frame`> | <character[] | integer | null> => logical | <class<`registry_field`>> => logical | <class<`Address`, `registry_entry`>> => logical | <class<`registry_field`>> => logical | <character[] | double | null> => (character | double | null) | <class<`registry_entry`> | class<`registry_entry`, `simple.list`> | class<`Address`, `registry_entry`>> => logical[];
type `.FUNCall` <any> => class<`function`>;
type `.get_entries` <...> => (null | list<class<`Address`, `registry_entry`> | class<`registry_entry`> | class<`registry_entry`, `simple.list`>>);
type `.get_entry_indices` <list<any>, any, any, null> => any;
type `.get_field` <character> => class<`registry_field`>;
type `.get_field_defaults` < > => list<null | null | character | null | double>;
type `.get_field_names` < > => (character[] | null);
type `.get_index_fields` < > => character[];
type `.get_mandatory_fields` < > => character[];
type `.labels` <class<`Address`, `registry_entry`> | class<`registry_entry`, `simple.list`>> => (class<`Address`, `registry_entry`> | class<`registry_entry`, `simple.list`>);
type `length.registry` <class<`Addressbook`, `registry`>> => integer;
type `.make_entry` <list<any>> => (class<`Address`, `registry_entry`> | class<`registry_entry`> | class<`registry_entry`, `simple.list`>);
type `.make_field` <character | null, character[] | null, character | null | double, logical, logical, logical, null | class<`function`>, class<`function`>, list<any>> => class<`registry_field`>;
type `print.registry` <class<`registry`>, ...> => class<`registry`>;
type `print.registry_field` <class<`registry_field`>, ...> => class<`registry_field`>;
type `registry` <character | null, character | null, any, logical> => (class<`Addressbook`, `registry`> | class<`registry`>);
type `[.registry` <class<`registry`>, ...> => list<class<`registry_entry`>>;
type `[[.registry` <class<`Addressbook`, `registry`> | class<`registry`>, ...> => (class<`Address`, `registry_entry`> | class<`registry_entry`> | class<`registry_entry`, `simple.list`> | null);
type `summary.registry` <class<`Addressbook`, `registry`> | class<`registry`>, ...> => class<`data.frame`>;
