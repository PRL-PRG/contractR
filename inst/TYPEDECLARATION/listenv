type `all.equal.listenv` <class<`environment`, `listenv`>, class<`environment`, `listenv`> | class<`array`> | list<double | null | null | double>, logical, logical, ...> => (character[] | logical);
type `as.listenv` <...> => class<`environment`, `listenv`>;
type `as.listenv.default` <double[] | environment, ...> => class<`environment`, `listenv`>;
type `as.listenv.environment` <double[] | environment, ...> => class<`environment`, `listenv`>;
type `as.listenv.list` <class<`array`> | class<`matrix`> | list<any>, ...> => class<`environment`, `listenv`>;
type `as.listenv.listenv` <class<`environment`, `listenv`>, ...> => class<`environment`, `listenv`>;
type `as.list.listenv` <class<`environment`, `listenv`>, logical, logical, ...> => (class<`array`> | class<`matrix`> | list<any>);
type `as.matrix.listenv` <class<`environment`, `listenv`>, ...> => class<`environment`, `listenv`>;
type `assign_by_index` <any, double | class<`matrix`> | class<`array`> | integer[], any> => any;
type `assign_by_name` <any, character[], any> => any;
type `as.vector.listenv` <class<`environment`, `listenv`>, character> => (character[] | class<`array`> | class<`matrix`> | complex[] | raw[] | list<integer>);
type `dim<-.listenv` <class<`environment`, `listenv`>, null | double[]> => class<`environment`, `listenv`>;
type `dim.listenv` <class<`environment`, `listenv`>> => (integer[] | null);
type `dim_na<-` <class<`environment`, `listenv`> | integer[], ^double[]> => (class<`environment`, `listenv`> | class<`matrix`>);
type `dimnames<-.listenv` <class<`environment`, `listenv`>, null | list<any>> => any;
type `dimnames.listenv` <class<`environment`, `listenv`>> => (null | list<any>);
type `filter` <character[]> => logical[];
type `FUN` <null | character[]> => character[] | <integer> => logical | <integer> => integer[] | <any> => logical;
type `get_variable` <...> => any;
type `get_variable.listenv` <class<`environment`, `listenv`>, class<`matrix`> | character[] | complex, logical, any, ...> => any;
type `hpaste` <..., character, character, null | character, double, double, character> => character[];
type `is.array.listenv` <class<`environment`, `listenv`>, ...> => logical;
type `is_empty` <any> => logical;
type `is.matrix.listenv` <class<`environment`, `listenv`>, ...> => logical;
type `length<-.listenv` <class<`environment`, `listenv`>, double> => class<`environment`, `listenv`>;
type `length.listenv` <class<`environment`, `listenv`>> => integer;
type `lengths.listenv` <class<`environment`, `listenv`>, logical> => integer[];
type `listenv` <...> => any;
type `[<-.listenv` <class<`environment`, `listenv`>, ..., double[] | null | list<double | null | null | null | double>> => any;
type `[.listenv` <class<`environment`, `listenv`>, ..., logical> => any;
type `[[<-.listenv` <class<`environment`, `listenv`>, ..., character | double | integer[] | null | list<null>> => any;
type `[[.listenv` <class<`environment`, `listenv`>, ...> => any;
type `$<-.listenv` <class<`environment`, `listenv`>, character, class<`environment`, `listenv`> | double | integer[] | null | list<integer[]>> => class<`environment`, `listenv`>;
type `$.listenv` <class<`environment`, `listenv`>, character> => (character | double | integer[] | null);
type `mapping` <class<`environment`, `listenv`>, ...> => (^character[] | null);
type `mapping<-` <class<`environment`, `listenv`>, ^character[] | null> => class<`environment`, `listenv`>;
type `names<-.listenv` <class<`environment`, `listenv`>, character[] | null> => any;
type `names.listenv` <class<`environment`, `listenv`>> => (character[] | null);
type `new_variable` <class<`environment`, `listenv`>, character | double | integer[] | null | list<null>, logical> => character;
type `parse_env_subset` <any, environment | class<`environment`, `listenv`>, logical> => any;
type `print.listenv` <class<`environment`, `listenv`>, ...> => null;
type `remove_by_index` <class<`environment`, `listenv`>, double> => class<`environment`, `listenv`>;
type `remove_by_name` <class<`environment`, `listenv`>, character> => class<`environment`, `listenv`>;
type `stopf` <character, ..., logical, null> => any;
type `stop_if_not` <...> => null;
type `to_index` <class<`environment`, `listenv`>, list<any>> => any;
type `undim` <class<`environment`, `listenv`> | class<`matrix`>, ...> => (class<`environment`, `listenv`> | double[] | list<double>);
type `undim.default` <class<`environment`, `listenv`> | class<`matrix`>, ...> => (class<`environment`, `listenv`> | double[] | list<double>);
type `undim.listenv` <class<`environment`, `listenv`>, ...> => class<`environment`, `listenv`>;
type `unlist.listenv` <class<`environment`, `listenv`>, logical, logical> => (integer[] | null | list<integer[]>);
type `warnf` <character, ..., logical, null> => any;
