type `combinations` <character[] | double | null, double, null, null, null | double[], logical, null | character, double, null | double, null | double[], null | double, null> => (class<`matrix`> | list<integer[]>);
type `compositions` <double, double | null, logical, character | null, integer, null, null, null, null> => (class<`matrix`> | list<integer[]>);
type `icombinations` <double, double, null, null, null, logical, null> => class<`Arrangements`, `Combinations`, `R6`, `abstractiter`, `iter`>;
type `icompositions` <double, double | null, logical, null> => class<`Arrangements`, `Compositions`, `R6`, `abstractiter`, `iter`>;
type `ipartitions` <double, double | null, logical, logical, null> => class<`Arrangements`, `Partitions`, `R6`, `abstractiter`, `iter`>;
type `ipermutations` <double, double, null, null, null, logical, null> => class<`Arrangements`, `Permutations`, `R6`, `abstractiter`, `iter`>;
type `ncombinations` <double | character[] | null, double, null, null, null | double[], logical, logical> => (class<`bigz`> | integer);
type `ncompositions` <double, null | double, logical> => (class<`bigz`> | integer);
type `npartitions` <double, null | double, logical, logical> => (class<`bigz`> | integer);
type `npermutations` <double | character[] | null, double | null, null, null, null | double[], logical, logical> => (class<`bigz`> | integer);
type `partitions` <double, double | null, logical, logical, character | null, integer, null, null, null, null> => (class<`matrix`> | list<integer[]>);
type `permutations` <character[] | double | null, double | null, null, null, null | double[], logical, null | character, double, null | double, null | double[], null | double, null> => (class<`matrix`> | list<integer[]>);
type `validate_n_value` <double, double, null, null, null, logical> => integer;
