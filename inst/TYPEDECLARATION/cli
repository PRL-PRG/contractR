type `::` <character, character | class<`ansi_string`>, character, double | character | class<`ansi_string`>, null, character | null, null, integer> => class<`character`, `rule`> | <character> => list<list<any>>;
type `:::` <double, integer[], integer[]> => character;
type `[[` <class<`condition`, `error`, `simpleError`>> => class<`condition`, `error`, `simpleError`> | <any> => logical;
type `$` <list<any>, null | character, null> => character | <character, any, character, class<`cli_glue_delay`>, null> => class<`cliapp`> | < > => list<any> | <class<`cli_glue_delay`> | null, null | list<class<`cli_glue_delay`>>, double, double> => class<`cliapp`> | <character[] | class<`character`, `rule`>> => (character[] | class<`character`, `rule`>) | <class<`cli_glue_delay`> | null, null | list<class<`cli_glue_delay`>>> => character | <double> => (double | null) | <null | list<list<any>>, null, character | class<`connection`, `textConnection`>> => class<`cliapp`> | <null | list<list<any>>> => character | <character> => null | <character> => character[] | <double> => double | <character | null> => class<`cliapp`> | <character[] | class<`character`, `rule`>, double, double> => null;
type `%||%` <character[] | null | class<`cliapp`> | double | list<any>, any> => (character[] | class<`cliapp`> | class<`cli_glue_delay`> | double | null | list<any>);
type `add_child` <list<any>, character, ...> => list<list<any>>;
type `add_handler` <environment, list<class<`call`> | environment>, logical> => list<class<`call`> | environment>;
type `alert` <...> => class<`ansi_string`>;
type `apply_style` <character[] | class<`ansi_string`>, any, logical> => (character[] | class<`ansi_string`>);
type `bg_red` <...> => class<`ansi_string`>;
type `box_chars` < > => list<character>;
type `box_styles` < > => class<`matrix`>;
type `boxx` <character[] | class<`ansi_string`>, character, double[], double[], character[], null, null | character | class<`ansi_style`>, null | character | class<`ansi_style`>, character[], any> => class<`boxx`, `character`>;
type `builtin_theme` <character> => list<list<any>>;
type `capitalize` <character> => character;
type `cat_bullet` <..., null, null, character, character | null, class<`connection`, `terminal`>> => null;
type `cat_line` <..., character | null, null, class<`connection`, `terminal`>> => null;
type `cat_rule` <..., class<`connection`, `terminal`>> => null;
type `cli_alert` <character, null, character | null, logical, environment> => character;
type `cli_alert_danger` <character, null, null, logical, environment> => character;
type `cli_alert_info` <character, null, null, logical, environment> => character;
type `cli_alert_success` <character, null, null, logical, environment> => character;
type `cli_alert_warning` <character, null, null, logical, environment> => character;
type `cliapp` <null | list<list<any>>, null, character | class<`connection`, `textConnection`>> => class<`cliapp`>;
type `cli_blockquote` <character, character, null, null, environment> => character;
type `cli_code` <character[], ..., character, logical, environment> => character;
type `cli__default_handler` <class<`callr_message`, `cli_message`, `condition`>> => (character | class<`cliapp`> | null);
type `cli_div` <null, character | null, null | list<list<any>>, logical, environment> => character;
type `cli_dl` <character[] | null, null, null, logical, logical, environment> => character;
type `cli_end` <character | null> => (character | null);
type `cli_format` <character[] | double[], any, ...> => (character[] | double[]);
type `cli_format.character` <character[], list<any>, ...> => character[];
type `cli_format_method` <null, list<list<any>>> => character[];
type `cli_format.numeric` <double[], list<any>, ...> => double[];
type `cli_h1` <character, null, null, environment> => character;
type `cli_h2` <character, null, null, environment> => character;
type `cli_h3` <character, null, null, environment> => character;
type `clii_add_theme` <class<`cliapp`>, null | list<list<any>>> => character;
type `clii_alert` <class<`cliapp`>, character, class<`cli_glue_delay`>, character, character | null, logical> => null;
type `clii_blockquote` <class<`cliapp`>, class<`cli_glue_delay`>, class<`cli_glue_delay`>, character, null> => class<`cliapp`>;
type `clii__cat` <class<`cliapp`>, character> => null;
type `clii__cat_ln` <class<`cliapp`>, character[] | class<`character`, `rule`>, double, double> => null;
type `clii__container_end` <class<`cliapp`>, character | null> => class<`cliapp`>;
type `clii__container_start` <class<`cliapp`>, character, character | null, character | null, character | null> => character;
type `clii_div` <class<`cliapp`>, character, character | null, null | list<list<any>>> => character;
type `clii_dl` <class<`cliapp`>, list<any>, character, null, any> => character;
type `clii_end` <class<`cliapp`>, character | null> => class<`cliapp`>;
type `clii__get_width` <class<`cliapp`>, double> => double;
type `clii_h1` <class<`cliapp`>, class<`cli_glue_delay`>, any, null> => class<`cliapp`>;
type `clii_h2` <class<`cliapp`>, class<`cli_glue_delay`>, any, null> => class<`cliapp`>;
type `clii_h3` <class<`cliapp`>, class<`cli_glue_delay`>, any, null> => class<`cliapp`>;
type `clii__heading` <class<`cliapp`>, character, class<`cli_glue_delay`>, any, null> => class<`cliapp`>;
type `clii_init` <class<`cliapp`>, null | list<list<any>>, null, character | class<`connection`, `textConnection`>> => class<`cliapp`>;
type `clii__inline` <class<`cliapp`>, class<`cli_glue_delay`> | null, null | list<class<`cli_glue_delay`>>> => character;
type `clii__item_text` <class<`cliapp`>, character, any, character, class<`cli_glue_delay`>, null> => class<`cliapp`>;
type `clii_li` <class<`cliapp`>, list<any>, character | null, null> => character;
type `clii__message` <..., null, logical, character | class<`connection`, `textConnection`>> => null;
type `clii_ol` <class<`cliapp`>, list<any>, character, null, any> => character;
type `clii_par` <class<`cliapp`>, character, character | null> => character;
type `clii_rule` <class<`cliapp`>, class<`cli_glue_delay`>, class<`cli_glue_delay`>, class<`cli_glue_delay`>, character> => null;
type `clii_status` <class<`cliapp`>, character, class<`cli_glue_delay`>, class<`cli_glue_delay`>, class<`cli_glue_delay`>, logical, character> => null;
type `clii_status_clear` <class<`cliapp`>, character | null, any, any, any> => null;
type `clii_status_update` <class<`cliapp`>, character, class<`cli_glue_delay`>, null, null> => null;
type `clii_text` <class<`cliapp`>, class<`cli_glue_delay`>> => class<`cliapp`>;
type `clii_ul` <class<`cliapp`>, list<any>, character, null, any> => character;
type `clii_verbatim` <class<`cliapp`>, ..., environment> => class<`cliapp`>;
type `clii__vspace` <class<`cliapp`>, double> => (double | null);
type `clii__xtext` <class<`cliapp`>, class<`cli_glue_delay`> | null, null | list<class<`cli_glue_delay`>>, double, double> => class<`cliapp`>;
type `cli_li` <character | null, null, null, logical, environment> => character;
type `cli__message` <character, list<any>, logical, null | environment> => (character | null);
type `cli_ol` <character[] | null, null, null, logical, logical, environment> => character;
type `cli_output_connection` < > => class<`connection`, `terminal`>;
type `cli_par` <null, character | null, logical, environment> => character;
type `cli_process_done` <null, null, any, character> => null;
type `cli_process_failed` <null, null, null, any, character> => null;
type `cli_process_start` <character, character, character, character[], character, character, character, logical, environment> => character;
type `cli_rule` <character, character, character, null, environment> => character;
type `cli_server_default` <class<`callr_message`, `cli_message`, `condition`>> => (character | class<`cliapp`> | null);
type `cli_server_default_safe` <class<`callr_message`, `cli_message`, `condition`>> => (character | class<`cliapp`> | null);
type `cli_sitrep` < > => class<`cli_sitrep`>;
type `cli_status` <character, character, character, logical, logical, environment, character> => character;
type `cli_status_clear` <character | null, character, null, null, any> => (character | null);
type `cli_text` <..., environment> => null;
type `cli_ul` <character[] | null, null, null, logical, logical, environment> => character;
type `cli_verbatim` <..., environment> => null;
type `col_blue` <...> => class<`ansi_string`>;
type `col_cyan` <...> => class<`ansi_string`>;
type `col_green` <...> => class<`ansi_string`>;
type `color_border` <character> => (character | class<`ansi_string`>);
type `color_content` <character[]> => (character[] | class<`ansi_string`>);
type `col_red` <...> => class<`ansi_string`>;
type `col_white` <...> => class<`ansi_string`>;
type `combine_ansi_styles` <...> => class<`ansi_style`>;
type `console_width` < > => integer;
type `cray_wrapper_fun` <class<`crayon`>> => class<`ansi_style`>;
type `create_formatter` <list<any>> => list<any>;
type `dedent` <character, double> => character;
type `default_app` < > => (class<`cliapp`> | null);
type `defer` <any, environment, character> => list<class<`call`> | environment>;
type `detect_dark_theme` <character> => logical;
type `error` <...> => class<`ansi_string`>;
type `filter` <character[]> => logical[];
type `format_code` <any> => class<`function`>;
type `format_r_code` <any> => class<`function`>;
type `fun` <any, any> => list<null> | < > => null;
type `FUN` <character[] | class<`character`, `rule`>> => (character[] | class<`character`, `rule`>) | <list<any>> => list<any> | <character | class<`ansi_style`>> => (character | class<`crayon`>) | <character> => list<list<character[]>> | <..., environment> => class<`cli_glue_delay`> | <list<any>> => integer | <class<`cli_glue_delay`>> => class<`character`, `glue`> | <integer> => character | <character> => list<character[]> | <...> => character | <integer, ...> => character | <integer, ...> => character | <character> => character[] | <list<character[] | character[] | null | character | null>> => logical | <character> => character;
type `get_active_symbol_set` < > => character;
type `get_handlers` <environment> => list<any>;
type `get_line_char` <character | class<`ansi_string`> | double> => character;
type `get_real_output` <character | class<`connection`, `textConnection`>> => (class<`connection`, `terminal`> | class<`connection`, `textConnection`>);
type `get_spinner` <character | null> => list<character | integer | class<`AsIs`>>;
type `glue_cmd` <..., environment> => class<`cli_glue_delay`>;
type `glue_delay` <character | class<`character`, `glue`>, null | environment> => class<`cli_glue_delay`>;
type `inline_collapse` <character[] | double> => class<`character`, `glue`>;
type `inline_generic` <any, any, class<`character`, `glue`>, list<any>> => character[];
type `inline_regex` < > => character;
type `is_ansi_tty` <class<`connection`, `terminal`>> => logical;
type `is_border_style` <character> => logical;
type `is_col` <character | null> => logical;
type `is_count` <integer> => logical;
type `is_dynamic_tty` <class<`connection`, `terminal`>> => logical;
type `is_interactive` < > => logical;
type `is_iterm` < > => logical;
type `is_latex_output` < > => logical;
type `is_padding_or_margin` <double[]> => logical;
type `is_rapp_stdx` <any> => logical;
type `is_rkward_stdx` <any> => logical;
type `is_rstudio_dynamic_tty` <any> => logical;
type `is_string` <character | class<`ansi_string`> | double> => logical;
type `is_utf8_output` < > => logical;
type `last` <null | list<list<any>>> => (null | list<any>);
type `list_border_styles` < > => character[];
type `list_spinners` < > => character[];
type `lorem_paragraph` <integer[], integer[]> => character;
type `lorem_sentence` <integer[]> => character;
type `make_ansi_style` <...> => class<`ansi_string`> | <..., logical, logical, double> => class<`ansi_style`>;
type `make_cmd_transformer` <environment> => class<`function`>;
type `make_line` <double, character, null | character> => (character | class<`ansi_string`>);
type `make_space` <double[]> => character[];
type `match_selector` <list<list<character[]>>, list<list<any>>> => logical;
type `match_selector_node` <list<character[]>, list<character[] | character[] | null | character | null>> => logical;
type `merge_embedded_styles` <list<any>, list<any>> => list<any>;
type `na.omit` <null> => integer[];
type `nchar_fixed` <character, character, ...> => integer;
type `new_class` <character, ...> => class<`cliapp`>;
type `new_uuid` < > => character;
type `note` <...> => class<`ansi_string`>;
type `orange` <...> => class<`ansi_string`>;
type `orig_fmt` <character[] | class<`character`, `rule`>> => (character[] | class<`character`, `rule`>) | <character> => class<`character`, `rule`> | <character> => character | <character> => character;
type `post_process_plurals` <class<`character`, `glue`>, environment> => class<`character`, `glue`>;
type `pt` <character, any, any, any> => null;
type `push` <null | list<any>, list<any>, null | character> => list<list<any>>;
type `random_id` < > => character;
type `rule` <character, character | class<`ansi_string`>, character, double | character | class<`ansi_string`>, null, character | null, null, integer> => class<`character`, `rule`>;
type `rule_center` <list<character | null | integer>> => character;
type `rule_left` <list<character | null | integer>> => character;
type `rule_left_right` <list<character | null | integer>> => character;
type `rule_line` <list<character | null | integer>> => character;
type `set_handlers` <environment, list<list<class<`call`> | environment>>> => null;
type `setup_unicode_width_fix` < > => character;
type `simple_theme` <character> => list<list<any>>;
type `simple_theme_code` <logical> => list<character>;
type `simple_theme_emph` < > => list<character>;
type `simple_theme_file` < > => list<character>;
type `simple_theme_url` < > => list<character>;
type `start_app` <null | list<list<any>>, character[] | class<`connection`, `textConnection`>, logical, any> => class<`cliapp`>;
type `stop_app` <class<`cliapp`>> => null;
type `strrep` <character, double[]> => character[];
type `str_tail` <character[]> => character[];
type `strwrap2_fixed` <character, ...> => character;
type `strwrap_fixed` <character, ...> => character[];
type `style` <...> => class<`ansi_string`>;
type `style_bold` <...> => class<`ansi_string`>;
type `style_dim` <...> => class<`ansi_string`>;
type `style_italic` <...> => class<`ansi_string`>;
type `style_underline` <...> => class<`ansi_string`>;
type `theme_code` <logical> => list<character>;
type `theme_code_tick` <logical> => list<character>;
type `theme_create` <null | list<list<any>>> => class<`data.frame`>;
type `theme_function` <logical> => list<character>;
type `.transformer` <character, environment> => character | <character, environment> => (character[] | class<`character`, `glue`> | double[]);
type `transform_hook` <character[] | double[], ...> => (character[] | double[]) | <any, ...> => any;
type `tree` <class<`data.frame`>, character, null, integer, logical> => class<`character`, `tree`>;
type `try_silently` <character> => character;
type `vcapply` <integer[] | character[], class<`function`>, ..., logical> => character[];
type `viapply` <list<list<any>>, class<`function`>, ..., logical> => integer[];
type `vlapply` <list<list<any>>, class<`function`>, ..., logical> => logical[];
type `warn` <...> => class<`ansi_string`>;
