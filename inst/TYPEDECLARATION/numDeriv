type `filter` <character[]> => logical[];
type `func` <double[], ...> => double[];
type `genD` <class<`function`>, double[], character, any, ...> => class<`Darray`>;
type `genD.default` <class<`function`>, double[], character, list<any>, ...> => class<`Darray`>;
type `grad` <class<`function`>, double[], character, ^double[] | null, any, ...> => (^double[] | null);
type `grad.default` <class<`function`>, double[], character, ^double[] | null, any, ...> => (^double[] | null);
type `hessian` <class<`function`>, double[], character, any, ...> => class<`matrix`>;
type `hessian.default` <class<`function`>, double[], character, list<any>, ...> => class<`matrix`>;
type `jacobian` <class<`function`>, double[], character, null | double, any, ...> => class<`matrix`>;
type `jacobian.default` <class<`function`>, double[], character, null | double, any, ...> => class<`matrix`>;
