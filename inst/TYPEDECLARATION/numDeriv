type `filter` <character[]> => logical[];
type `genD.default` <any => any, double[], character, tuple<> | struct<`d`:double>, null | environment | ^double[]> => struct<`D`:^double[], `p`:integer, `f0`:double, `func`:any => any, `x`:double, `d`:double, `method`:character, `method.args`:struct<`eps`:double, `d`:double, `zero.tol`:double, `r`:double, `v`:double, `show.details`:logical>> | struct<`D`:^double[], `p`:integer, `f0`:double[], `func`:any => any, `x`:double[], `d`:double, `method`:character, `method.args`:struct<`eps`:double, `d`:double, `zero.tol`:double, `r`:double, `v`:double>> | struct<`D`:^double[], `p`:integer, `f0`:integer, `func`:any => any, `x`:integer[], `d`:double, `method`:character, `method.args`:struct<`eps`:double, `d`:double, `zero.tol`:double, `r`:double, `v`:double, `show.details`:logical>>;
type `hessian.default` <any => any, double[], character, null | tuple<> | struct<`d`:double>, null | environment | ^double[]> => ^double[];
type `func` <double[], null> => double[];
