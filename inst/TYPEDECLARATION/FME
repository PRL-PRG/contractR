type `collFun` <class<`matrix`>, class<`matrix`>, integer, double> => class<`matrix`>;
type `collin` <class<`data.frame`, `sensFun`> | class<`matrix`>, character[] | double[] | null, null | double, null, double> => class<`collin`, `data.frame`>;
type `combin` <double, integer[]> => class<`matrix`>;
type `convert2wide` <class<`data.frame`>> => class<`data.frame`>;
type `cross2long` <class<`data.frame`>, any, any, any, logical, logical> => class<`data.frame`>;
type `expanddots` <character | null, any, integer> => (character[] | integer[]);
type `expanddotslist` <list<double[]> | null, any> => (list<double[]> | null);
type `extractdots` <list<any>, any> => list<any>;
type `findvar` <double[] | list<double>, character[], character> => integer[];
type `gaussianWeights` <class<`data.frame`>, any, any, double[], double, character, any, any> => class<`data.frame`>;
type `Grid` <class<`data.frame`>, double> => class<`matrix`>;
type `Latinhyper` <class<`data.frame`>, double> => class<`matrix`>;
type `mergeObs` <class<`data.frame`>, class<`matrix`> | class<`data.frame`>> => class<`data.frame`>;
type `modCost` <class<`data.frame`> | class<`deSolve`, `matrix`> | class<`matrix`>, class<`matrix`> | class<`data.frame`>, character, null | character, null | character, character, logical, class<`modCost`> | null, ...> => class<`modCost`>;
type `modCRL` <class<`function`>, null, null, character, null, class<`matrix`>, null, null, double, ...> => class<`data.frame`, `modCRL`>;
type `modFit` <class<`function`>, double[], ..., double[], double[], character[], class<`function`> | null, list<any>, logical> => class<`modFit`>;
type `Norm` <integer[], class<`matrix`>, class<`data.frame`> | null, double> => class<`matrix`>;
type `obsplot` <class<`data.frame`>, ..., character[] | integer[] | null, logical[], null> => null;
type `pairs.sensFun` <class<`data.frame`, `sensFun`>, character[] | null, ...> => null;
type `plot.collin` <class<`collin`, `data.frame`>, ...> => null;
type `plot.modCRL` <class<`data.frame`, `modCRL`>, character[] | null, logical, null, ...> => null;
type `plot.sensFun` <class<`data.frame`, `sensFun`>, character[] | null, character, null, ...> => list<list<double[]>>;
type `plot.summary.sensFun` <class<`data.frame`, `summary.sensFun`>, integer[], ...> => list<integer[]>;
type `plot.summary.sensRange` <class<`data.frame`, `summary.sensRange`>, logical, character | null, character, character[], logical, null, null | class<`matrix`>, any, ...> => list<list<double[]>>;
type `pseudoOptim` <class<`function`>, double[], ..., double[], double[], double[]> => list<double[] | class<`matrix`>>;
type `Range` <null, ^double[], integer> => double[];
type `residuals.modFit` <class<`modFit`>, ...> => double[];
type `selectvar` <double[] | character[] | null, character[], character, logical, logical> => double[];
type `sensFun` <class<`function`>, list<double>, character[] | null, character[], double, null, double, double, ...> => class<`data.frame`, `sensFun`>;
type `sensRange` <class<`function`>, double | list<double>, null | character[], character, null, class<`matrix`> | class<`data.frame`>, null, null, null | double, double, ...> => class<`data.frame`, `sensRange`>;
type `setdots` <list<any>, any> => list<any>;
type `setplotpar` <character[] | null, any, integer, null> => logical;
type `summary.modFit` <class<`modFit`>, logical, ...> => class<`summary.modFit`>;
type `summary.sensFun` <class<`data.frame`, `sensFun`>, logical, ...> => class<`data.frame`, `summary.sensFun`>;
type `summary.sensRange` <class<`data.frame`, `sensRange`>, ...> => class<`data.frame`, `summary.sensRange`>;
type `Unif` <class<`data.frame`> | class<`matrix`>, double> => class<`matrix`>;
