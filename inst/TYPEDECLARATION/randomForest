type `classCenter` <class<`data.frame`>, class<`factor`>, class<`matrix`>, double> => class<`matrix`>;
type `combine` <...> => class<`randomForest`, `randomForest.formula`>;
type `getTree` <class<`randomForest`>, double, logical> => class<`data.frame`>;
type `grow` <class<`randomForest`, `randomForest.formula`>, ...> => class<`randomForest`, `randomForest.formula`>;
type `grow.randomForest` <class<`randomForest`, `randomForest.formula`>, double, ...> => class<`randomForest`, `randomForest.formula`>;
type `importance` <class<`randomForest`> | class<`randomForest`, `randomForest.formula`>, ...> => class<`matrix`>;
type `importance.randomForest` <class<`randomForest`> | class<`randomForest`, `randomForest.formula`>, double | null, any, logical, ...> => class<`matrix`>;
type `margin` <class<`matrix`, `votes`> | class<`randomForest`, `randomForest.formula`>, ...> => class<`margin`>;
type `margin.default` <class<`matrix`, `votes`>, class<`factor`>, ...> => class<`margin`>;
type `margin.randomForest` <class<`randomForest`, `randomForest.formula`>, ...> => class<`margin`>;
type `MDSplot` <class<`randomForest`> | class<`randomForest`, `randomForest.formula`>, class<`factor`>, double, null | double[], double[], ...> => list<class<`matrix`> | double[] | null>;
type `na.roughfix` <class<`data.frame`>, ...> => class<`data.frame`>;
type `na.roughfix.data.frame` <class<`data.frame`>, ...> => class<`data.frame`>;
type `outlier` <class<`randomForest`>, ...> => double[];
type `outlier.default` <class<`matrix`>, class<`factor`>, ...> => double[];
type `outlier.randomForest` <class<`randomForest`>, ...> => double[];
type `partialPlot` <class<`randomForest`, `randomForest.formula`>, ...> => list<double[]>;
type `partialPlot.randomForest` <class<`randomForest`, `randomForest.formula`>, class<`data.frame`>, any, any, any, logical, logical, double, logical, character, character, character, ...> => list<double[]>;
type `plot.margin` <class<`margin`>, logical, ...> => null;
type `plot.randomForest` <class<`randomForest`, `randomForest.formula`>, character, character, ...> => double[];
type `predict.randomForest` <class<`randomForest`> | class<`randomForest`, `randomForest.formula`>, class<`matrix`> | class<`data.frame`>, character, logical, logical, logical, logical, any, ...> => (class<`factor`> | class<`matrix`, `votes`> | double[] | list<class<`factor`> | class<`matrix`>>);
type `print.randomForest` <class<`randomForest`, `randomForest.formula`>, ...> => null;
type `randomForest` <any, ...> => (class<`randomForest`> | class<`randomForest`, `randomForest.formula`>);
type `randomForest.default` <class<`data.frame`> | class<`matrix`>, class<`factor`> | double[] | null, null | class<`data.frame`>, null | class<`factor`>, double, double, logical, null, any, any, double[], double, double | null, logical, logical, double, any, logical, logical, double> => class<`randomForest`>;
type `randomForest.formula` <class<`formula`>, any, ..., any, class<`function`>> => class<`randomForest`, `randomForest.formula`>;
type `rfcv` <class<`data.frame`>, class<`factor`>, double, character, double, class<`function`>, logical, ...> => list<double[] | list<class<`factor`>>>;
type `rfImpute` <class<`formula`>, ...> => class<`data.frame`>;
type `rfImpute.default` <class<`data.frame`>, class<`factor`>, double, double, ...> => class<`data.frame`>;
type `rfImpute.formula` <class<`formula`>, any, ..., any> => class<`data.frame`>;
type `treesize` <class<`randomForest`, `randomForest.formula`>, logical> => double[];
type `tuneRF` <class<`data.frame`>, class<`factor`>, double, double, double, double, logical, logical, logical, ...> => class<`matrix`>;
type `varImpPlot` <class<`randomForest`, `randomForest.formula`>, logical, double, null, null, logical, character, ...> => class<`matrix`>;
type `varUsed` <class<`randomForest`, `randomForest.formula`>, logical, logical> => double[];
