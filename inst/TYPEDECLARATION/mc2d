type `addvar` <...> => class<`mcnode`>;
type `converg` <class<`mcnode`>, any, character, double, double, double[], any, null, logical> => null;
type `cornode` <..., class<`matrix`>, logical, logical, null> => (class<`matrix`> | list<class<`mcnode`>>);
type `dbetagen` <double[], double, double, double, double, double, logical> => double[];
type `ddirichlet` <class<`matrix`>, class<`matrix`>> => double[];
type `dempiricalC` <double[], double, double, class<`matrix`> | integer[], null | double[], logical> => double[];
type `dempiricalD` <double[], class<`matrix`> | integer[], null | double[], logical> => double[];
type `dimmc` <class<`mc`>> => integer[];
type `dimmcnode` <class<`mcnode`>> => integer[];
type `dmultinomial` <class<`matrix`> | double[], null, class<`matrix`> | double[], logical> => double[];
type `dmultinormal` <class<`matrix`>, class<`matrix`> | double[], class<`matrix`> | double[], logical> => (class<`matrix`> | double[]);
type `dpert` <double[], double, double, double, double, logical> => double[];
type `dtriang` <double[], double, double, double, logical> => double[];
type `evalmccut` <class<`mcmodelcut`>, double, double, double, character> => class<`mccut`>;
type `evalmcmod` <class<`mcmodel`> | expression, double, double, null | double> => class<`mc`>;
type `extractvar` <class<`mcnode`>, double[]> => class<`mcnode`>;
type `hist.mc` <list<class<`mcnode`>> | class<`mc`>, null, character[], character, character, ...> => null;
type `hist.mcnode` <class<`mcnode`>, ...> => null;
type `is.mc` <class<`mc`> | class<`mcnode`>> => logical;
type `is.mcnode` <class<`mcnode`> | class<`mc`>> => logical;
type `is.na.mcnode` <class<`mcnode`>> => class<`mcnode`>;
type `lhs` <character | class<`function`>, double, double, double, ...> => double[];
type `mc` <..., character[] | null, logical> => class<`mc`>;
type `mcdata` <class<`array`> | class<`matrix`> | class<`mcnode`> | double[] | null, character[], any, any, double, character> => class<`mcnode`>;
type `mcmodel` <any, logical> => class<`mcmodel`>;
type `mcmodelcut` <any, logical> => class<`mcmodelcut`>;
type `mcprobtree` <class<`mcnode`> | double[], any, character, double, double, double, character, null> => class<`mcnode`>;
type `mcratio` <class<`mc`>, double, double, double, logical> => class<`matrix`>;
type `mcstoc` <class<`function`>, character[], ..., any, any, double, character[], character, null, logical, any, double, logical> => class<`mcnode`>;
type `ndunc` <any> => double;
type `ndvar` <any> => double;
type `Ops.mcnode` <class<`mcnode`> | double | integer[], any> => class<`mcnode`>;
type `outm` <class<`mcnode`>, character, double> => class<`mcnode`>;
type `pempiricalC` <double[], double, double, integer[], double[], logical, logical> => double[];
type `pempiricalD` <integer[], integer[], double[], logical, logical> => double[];
type `plot.mc` <class<`mc`>, double, any, double[], logical, null, null, character, character, logical, logical, null, null, ...> => class<`plotmc`>;
type `plot.tornado` <class<`tornado`>, double, null, character[], character, character, ...> => null;
type `pmax` <..., logical> => integer[];
type `pmax.default` <..., logical> => integer[];
type `pmin` <..., logical> => class<`mcnode`>;
type `pmin.mcnode` <..., logical> => class<`mcnode`>;
type `qempiricalC` <double[], double, double, class<`matrix`>, null, logical, logical> => double[];
type `qempiricalD` <double[], integer[], double[], logical, logical> => double[];
type `quantile.mc` <class<`mc`> | list<class<`mcnode`>>, double[], double[], logical, ...> => (list<class<`matrix`>> | list<list<class<`matrix`>>> | list<class<`matrix`> | list<class<`matrix`>>>);
type `quantile.mcnode` <class<`mcnode`>, ...> => list<list<class<`matrix`>>>;
type `rbern` <double, double[]> => integer[];
type `rdirichlet` <double, class<`matrix`>> => class<`matrix`>;
type `rempiricalD` <double, class<`matrix`> | double[], double[] | null> => double[];
type `rmultinomial` <double, double[] | class<`matrix`>, double[] | class<`matrix`>> => class<`matrix`>;
type `rmultinormal` <double, class<`matrix`> | double[], class<`matrix`> | double[], character[]> => class<`matrix`>;
type `rtrunc` <character | class<`function`>, double, double, double, ...> => double[];
type `summary.mc` <list<class<`mcnode`>> | class<`mc`>, double[], double[], ...> => (class<`listof`, `summary.mc`> | null);
type `summary.mccut` <class<`mccut`>, double[], ...> => class<`listof`, `summary.mc`>;
type `summary.mcnode` <class<`mcnode`>, double[], double[], double, ...> => (class<`listof`, `summary.mc`> | null);
type `tornado` <class<`mc`>, double, character, character[], any> => class<`tornado`>;
type `typemcnode` <class<`mcnode`>, logical> => character;
type `unmc` <class<`mcnode`>, logical> => (class<`array`> | double[]);
