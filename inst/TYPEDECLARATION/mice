type `ampute` <class<`matrix`>, double, class<`data.frame`> | null, double[] | null, character, null, logical, logical> => class<`mads`>;
type `ampute.continuous` <double[], list<class<`matrix`>>, double, character[]> => list<double[]>;
type `ampute.default.freq` <class<`data.frame`>> => double[];
type `ampute.default.odds` <class<`data.frame`>> => class<`matrix`>;
type `ampute.default.patterns` <integer> => class<`matrix`>;
type `ampute.default.type` <class<`data.frame`>> => character[];
type `ampute.default.weights` <class<`data.frame`>, character> => class<`matrix`>;
type `ampute.discrete` <double[], list<class<`matrix`>>, double, class<`matrix`>> => list<double[]>;
type `as.mids` <class<`data.frame`>, class<`matrix`> | null, character, character | double> => class<`mids`>;
type `as.mira` <class<`list`, `mitml.result`> | class<`matrix`, `mira`>> => class<`matrix`, `mira`>;
type `as.mitml.result` <class<`matrix`, `mira`>> => class<`list`, `mitml.result`>;
type `augment` <class<`factor`> | class<`factor`, `ordered`>, logical[], class<`matrix`>, logical[], double> => list<class<`factor`> | class<`data.frame`> | double[]>;
type `barnard.rubin` <integer, double, double, double> => double;
type `bootfunc.plain` <integer> => double[];
type `bwplot.mids` <class<`mids`>, any, null, null, logical, list<any>, logical, logical> => class<`trellis`>;
type `cbind` <...> => (class<`data.frame`> | class<`matrix`> | class<`mids`>);
type `cbind.mids` <class<`mids`>, class<`data.frame`> | class<`mids`> | null, ...> => class<`mids`>;
type `cbind.mids.mids` <class<`mids`>, class<`mids`>, class<`call`>> => class<`mids`>;
type `cci` <class<`data.frame`> | class<`mids`>> => logical[];
type `cci.default` <class<`data.frame`>> => logical[];
type `cci.mids` <class<`mids`>> => logical[];
type `check.blocks` <list<character[]>, class<`data.frame`>, character> => list<character[]>;
type `check.blots` <null | list<list<character>> | list<list<character | character | class<`matrix`>>>, class<`data.frame`>, list<character[]>> => list<list<any>>;
type `check.cluster` <any, class<`matrix`>> => logical;
type `check.dataform` <class<`data.frame`> | class<`matrix`>> => class<`data.frame`>;
type `check.deprecated` <...> => null;
type `check.df` <class<`matrix`>, any, logical[]> => null;
type `check.formulas` <list<class<`formula`>>, class<`data.frame`>> => list<class<`formula`>>;
type `check.m` <double> => double;
type `check.method` <character[] | null, class<`data.frame`>, class<`matrix`>, list<character[]>, any> => character[];
type `check.post` <null, class<`data.frame`>> => character[];
type `check.predictorMatrix` <class<`matrix`>, class<`data.frame`>, null | list<character[]>> => (class<`matrix`> | list<class<`matrix`> | list<character[]>>);
type `check.visitSequence` <null, any, any, list<character[]>> => character[];
type `check.where` <class<`matrix`> | null, class<`data.frame`>, list<character[]>> => class<`matrix`>;
type `complete.mids` <class<`mids`>, character | double[], logical, logical, ...> => (class<`data.frame`> | class<`list`, `mild`>);
type `construct.blocks` <list<class<`formula`>>, null | class<`matrix`>> => list<character[]>;
type `D2` <class<`matrix`, `mira`>, class<`matrix`, `mira`>, character, ...> => class<`list`, `mice.anova`, `mitml.result`>;
type `densityplot.mids` <class<`mids`>, class<`formula`>, null, null, logical, logical, list<list<character[] | double | character[] | logical>>, logical> => class<`trellis`>;
type `edit.setup` <any, list<character[] | class<`matrix`>> | list<class<`matrix`> | character[]>, logical, logical, logical, logical, ...> => (list<character[] | class<`matrix`>> | list<class<`matrix`> | character[]>);
type `estimice` <class<`matrix`>, double[], character, any, ...> => list<class<`matrix`> | double | character>;
type `fico` <class<`data.frame`>> => double[];
type `find.collinear` <class<`data.frame`>, double, ...> => character[];
type `fix.coef` <class<`lm`>, double[] | null> => class<`lm`>;
type `flux` <class<`data.frame`>, character[]> => class<`data.frame`>;
type `fluxplot` <class<`data.frame`>, character[], logical, logical, double[], double[], double, character> => class<`data.frame`>;
type `getfit` <class<`matrix`, `mira`> | class<`list`, `mira`>, double, logical> => (class<`glm`, `lm`> | class<`list`, `mira`> | class<`lm`>);
type `getqbar` <class<`data.frame`, `mipo`>> => double[];
type `glm.mids` <class<`formula`>, class<`function`>, class<`mids`>, ...> => class<`glm`, `lm`, `mira`>;
type `handle.oldstyle.formulas` <list<class<`formula`>>, class<`data.frame`>> => list<class<`formula`>>;
type `handles.arg` <class<`function`>, character> => logical;
type `handles.format` <character> => logical;
type `hasdot` <class<`call`> | class<`name`> | class<`formula`>> => logical;
type `ibind` <class<`mids`>, class<`mids`>> => class<`mids`>;
type `ic` <class<`data.frame`>> => class<`data.frame`>;
type `ic.data.frame` <class<`data.frame`>> => class<`data.frame`>;
type `ici` <class<`data.frame`>> => logical[];
type `ici.default` <class<`data.frame`>> => logical[];
type `.imputation.level2` <double[] | class<`factor`>, logical[], class<`matrix`>, double[], logical[], character, ...> => double[];
type `initialize.chain` <list<character[]>, double, double> => class<`array`>;
type `initialize.imp` <class<`data.frame`>, double, class<`matrix`>, list<character[]>, character[], character[], integer[], null> => (list<class<`data.frame`>> | list<null | class<`data.frame`>>);
type `install.on.demand` <character, logical, ...> => null;
type `is.formula` <class<`formula`>> => logical;
type `is.mids` <class<`data.frame`> | class<`mids`> | null | list<null>> => logical;
type `is.mipo` <class<`data.frame`, `mipo`>> => logical;
type `is.mira` <class<`list`, `mitml.result`> | class<`lm`, `mira`> | class<`matrix`, `mira`>> => logical;
type `is.passive` <character[]> => logical[];
type `lhs` <class<`formula`>> => character[];
type `lm.mids` <class<`formula`>, class<`mids`>, ...> => class<`lm`, `mira`>;
type `ma_exists` <character, double, integer[]> => (list<logical | class<`data.frame`> | environment> | list<logical | environment | list<double | character>> | list<logical | environment | list<integer | character>>);
type `make.blocks` <character[] | class<`data.frame`> | class<`matrix`>, any, character> => list<character[]>;
type `make.blots` <class<`data.frame`>, list<character[]>> => list<list<any>>;
type `make.formulas` <class<`data.frame`>, list<character[]>, class<`matrix`> | null> => list<class<`formula`>>;
type `make.method` <class<`data.frame`>, class<`matrix`>, list<character[]>, character[]> => character[];
type `make.post` <class<`data.frame`>> => character[];
type `make.predictorMatrix` <class<`data.frame`>, list<character[]>> => class<`matrix`>;
type `make.visitSequence` <any, list<character[]> | null> => character[];
type `make.where` <class<`data.frame`>, character[]> => class<`matrix`>;
type `matcher` <class<`matrix`>, class<`matrix`>, integer> => integer[];
type `mdc` <character[] | integer[] | double, character, logical, character, character, character, character, character> => character[];
type `md.pairs` <class<`data.frame`>> => list<class<`matrix`>>;
type `md.pattern` <class<`data.frame`>, logical, logical> => class<`matrix`>;
type `mice` <class<`data.frame`> | class<`matrix`>, double, character[] | null, any, null | class<`matrix`>, any, null, any> => class<`mids`>;
type `mice.impute.2lonly.norm` <double[], logical[], class<`matrix`>, double[], logical[], ...> => double[];
type `mice.impute.2lonly.pmm` <double[] | class<`factor`>, logical[], class<`matrix`>, double[], logical[], ...> => double[];
type `mice.impute.2l.pan` <double[], logical[], class<`matrix`>, double[], logical, double, logical, ...> => double[];
type `mice.impute.jomoImpute` <class<`data.frame`>, any, double[], double, logical, character, ...> => list<^double[]>;
type `mice.impute.logreg` <class<`factor`>, logical[], class<`matrix`>, logical[], ...> => class<`factor`>;
type `mice.impute.midastouch` <double[], logical[], class<`matrix`>, logical[], double, null, logical, null> => double[];
type `mice.impute.mnar.logreg` <class<`factor`>, logical[], class<`matrix`>, logical[], character, null, ...> => class<`factor`>;
type `mice.impute.mnar.norm` <double[], logical[], class<`matrix`>, logical[], character, class<`matrix`> | null, ...> => class<`matrix`>;
type `mice.impute.norm` <double[], logical[], class<`matrix`>, logical[], ...> => class<`matrix`>;
type `mice.impute.pmm` <class<`matrix`> | double[] | ^integer[], logical[], double[] | class<`matrix`> | class<`data.frame`>, null | logical[], integer, integer, double, ...> => double[];
type `mice.impute.polr` <class<`factor`, `ordered`>, logical[], class<`matrix`>, logical[], double, logical, double, logical> => character[];
type `mice.impute.polyreg` <class<`factor`>, logical[], class<`matrix`>, logical[], double, logical, double, ...> => character[];
type `mice.impute.quadratic` <double[], logical[], class<`matrix`>, logical[], ...> => double[];
type `mice.impute.rf` <class<`factor`> | double[], logical[], class<`matrix`>, logical[], double, ...> => (class<`factor`> | double[]);
type `mice.impute.sample` <class<`factor`> | class<`factor`, `ordered`> | ^double[], logical[], null, logical[], ...> => (class<`factor`> | class<`factor`, `ordered`> | double[]);
type `mice.mids` <class<`mids`>, double, logical, ...> => class<`mids`>;
type `mice.theme` <logical, double> => list<list<character[] | double | character[] | logical>>;
type `minmax` <class<`matrix`> | double[], logical, logical> => (class<`matrix`> | double[]);
type `name.blocks` <character[] | list<character[]> | list<class<`formula`>>, character> => (list<character[]> | list<class<`formula`>>);
type `name.formulas` <list<class<`formula`>>, character> => list<class<`formula`>>;
type `ncc` <class<`data.frame`>> => integer;
type `nelsonaalen` <class<`data.frame`>, any, any> => double[];
type `nic` <class<`data.frame`>> => integer;
type `nimp` <class<`matrix`>, list<character[]>> => integer[];
type `.norm.draw` <class<`matrix`> | double[] | ^integer[], logical[], class<`matrix`>, logical, ...> => list<class<`matrix`> | double | character>;
type `obtain.design` <class<`data.frame`>, class<`formula`>> => class<`matrix`>;
type `parse.ums` <class<`matrix`>, character, class<`matrix`> | null, ...> => (list<double[] | class<`matrix`>> | list<double | class<`matrix`>>);
type `plot.mids` <class<`mids`>, null, list<list<character[] | double | character[] | logical>>, double[], character, integer[], double, ...> => class<`trellis`>;
type `pool` <class<`list`, `mitml.result`> | class<`matrix`, `mira`>, null> => class<`data.frame`, `mipo`>;
type `pool.fitlist` <class<`list`, `mira`>, null> => class<`data.frame`>;
type `pool.r.squared` <class<`lm`, `mira`>, logical> => class<`matrix`>;
type `pool.scalar` <double[], double[], double, double> => list<double[]>;
type `process_mipo` <class<`data.frame`>, any, logical, any, logical> => class<`data.frame`>;
type `quickpred` <class<`data.frame`>, double[], double, character[], character, character> => class<`matrix`>;
type `rbind` <...> => (class<`data.frame`> | class<`matrix`> | class<`mids`>);
type `rbind.mids` <class<`mids`>, class<`data.frame`> | class<`mids`> | list<null>, ...> => class<`mids`>;
type `rbind.mids.mids` <class<`mids`>, class<`mids`>, any> => class<`mids`>;
type `remove.lindep` <class<`matrix`>, class<`factor`> | double[] | class<`factor`, `ordered`>, logical[], double, double, logical, double, ...> => logical[];
type `sampler` <class<`data.frame`>, double, any, list<class<`data.frame`>> | list<null | class<`data.frame`>>, list<character[]>, any, any, any> => (list<double | class<`array`> | list<class<`data.frame`>>> | list<double | class<`array`> | list<null | class<`data.frame`>>>);
type `sampler.univ` <class<`data.frame`>, class<`matrix`>, class<`matrix`>, any, any, character, character, integer> => (class<`factor`> | class<`factor`, `ordered`> | double[]);
type `single2imputes` <class<`data.frame`>, class<`matrix`>> => list<^double[]>;
type `single.complete` <class<`data.frame`>, any, any, integer> => class<`data.frame`>;
type `stripplot.mids` <class<`mids`>, any, any, null, logical, list<list<character[] | double | character[] | logical>>, logical, logical> => class<`trellis`>;
type `summary.mipo` <class<`data.frame`, `mipo`>, character[], logical, double, logical, ...> => class<`data.frame`, `mipo.summary`>;
type `summary.mira` <class<`list`, `mira`>, character, ...> => class<`data.frame`, `tbl`, `tbl_df`>;
type `supports.transparent` < > => logical;
type `sym` <class<`matrix`>> => class<`matrix`>;
type `tidy.coef` <class<`lm`>> => double[];
type `updateLog` <character, character | null, double> => null;
type `version` <character> => character;
type `with.mids` <class<`mids`>, any, ...> => class<`matrix`, `mira`>;
type `xyplot.mids` <class<`mids`>, class<`formula`>, any, null, logical, list<list<character[] | double | character[] | logical>>, logical, logical> => class<`trellis`>;
