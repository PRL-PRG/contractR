type `:::` <struct<`title`:integer[], `author`:integer[], `customerID`:double[]> | tuple<character[], character, character[]> | character[] | list<character[]>, null | character[] | double[], character, null> => struct<`title`:character[], `author`:character[], `customerID`:double[]> | ^character[] | ^double[];
type `.pad` <integer[]> => character[];
type `.stripWhite` <^character[] | ^integer[], character> => ^character[];
type `charMat` <list<character[]>, null | double, character> => ^double[];
type `concat.split` <struct<`Name`:integer[], `Likes`:integer[], `Siblings`:integer[], `Hates`:integer[]>, double | character, character, character, null | character, null | character, logical, logical, null | double, null> => struct<`Name`:integer[], `Likes`:character[], `Siblings`:integer[], `Hates`:integer[], `Likes_1`:integer[], `Likes_2`:integer[], `Likes_3`:integer[], `Likes_4`:integer[], `Likes_5`:^integer[]>;
type `concat.split.expanded` <struct<`Name`:integer[], `Likes`:integer[], `Siblings`:integer[], `Hates`:integer[]>, character | double, character, null | character, character, logical, logical, null | double> => struct<`Name`:integer[], `Likes`:integer[], `Hates`:integer[], `Siblings_Albert`:^integer[], `Siblings_Ballard`:^integer[], `Siblings_Bert`:^integer[], `Siblings_Cohen`:^integer[], `Siblings_Colon`:^integer[], `Siblings_James`:^integer[], `Siblings_Joann`:^integer[], `Siblings_Michelle`:^integer[], `Siblings_Montgomery`:^integer[], `Siblings_Ortega`:^integer[], `Siblings_Pierce`:^integer[], `Siblings_Reynolds`:^integer[], `Siblings_Roxanne`:^integer[], `Siblings_Snyder`:^integer[]>;
type `concat.split.list` <struct<`Name`:integer[], `Likes`:integer[], `Siblings`:integer[], `Hates`:integer[]>, double | character, character, logical, logical> => struct<`Name`:integer[], `Likes`:integer[], `Siblings`:integer[], `Hates_list`:list<double[]>>;
type `cSplit` <struct<`Name`:integer[], `Likes`:integer[], `Siblings`:integer[], `Hates`:integer[]>, double | character[], character[], character, logical, logical, logical, null, logical> => struct<`Name`:integer[], `Likes`:character[], `Siblings`:integer[], `Hates`:integer[], `Likes_1`:integer[], `Likes_2`:integer[], `Likes_3`:integer[], `Likes_4`:integer[], `Likes_5`:^integer[]>;
type `cSplit_e` <struct<`Name`:integer[], `Likes`:integer[], `Siblings`:integer[], `Hates`:integer[]>, double | character, character, null | character, character, logical, logical, null | double> => struct<`Name`:integer[], `Likes`:integer[], `Hates`:integer[], `Siblings_Albert`:double[], `Siblings_Ballard`:double[], `Siblings_Bert`:double[], `Siblings_Cohen`:double[], `Siblings_Colon`:double[], `Siblings_James`:double[], `Siblings_Joann`:double[], `Siblings_Michelle`:double[], `Siblings_Montgomery`:double[], `Siblings_Ortega`:double[], `Siblings_Pierce`:double[], `Siblings_Reynolds`:double[], `Siblings_Roxanne`:double[], `Siblings_Snyder`:double[]>;
type `cSplit_l` <struct<`Name`:integer[], `Likes`:integer[], `Siblings`:integer[], `Hates`:integer[]>, double | character, character, logical, logical> => struct<`Name`:integer[], `Likes`:integer[], `Siblings`:integer[], `Hates`:integer[], `Hates_list`:list<double[]>>;
type `expandRows` <struct<`A`:integer[], `B`:tuple<double[], double[], double>>, double[] | character, logical, logical> => struct<`A`:integer[], `B`:list<double[]>>;
type `f` <struct<`id_1`:integer[], `id_2`:integer[], `.time_1`:character[], `varA`:integer[]>, struct<`id_1`:integer[], `id_2`:integer[], `.time_1`:character[], `varB`:integer[]>> => struct<`id_1`:integer[], `id_2`:integer[], `.time_1`:character[], `varA`:integer[], `varB`:^integer[]>;
type `filter` <character[]> => logical[];
type `FUN` <character[] | struct<`Mat`:^integer[], `Val`:^character[]> | integer[] | list<character[]>> => null | ^character[] | integer[] | struct<> | tuple<character[], character[], character[]> | list<character[]> | list<null | character[]> | struct<`Mat`:^integer[], `Val`:^character[]>;
type `getanID` <struct<`id_1`:integer[], `id_2`:integer[], `varA.1`:integer[], `varA.2`:integer[], `varA.3`:integer[], `varB.2`:integer[], `varB.3`:integer[], `varC.3`:double[]>, character[] | integer[]> => struct<`id_1`:integer[], `id_2`:integer[], `varA.1`:integer[], `varA.2`:integer[], `varA.3`:integer[], `varB.2`:integer[], `varB.3`:integer[], `varC.3`:double[]>;
type `listCol_l` <struct<`A`:integer[], `B`:tuple<double[], double[], double>>, character, logical> => struct<`A`:integer[], `B_ul`:double[]>;
type `listCol_w` <struct<`A`:integer[], `B`:tuple<double[], double[], double>>, character, logical, null> => struct<`A`:integer[], `B_fl_1`:character[], `B_fl_2`:^character[], `B_fl_3`:^character[]>;
type `merged.stack` <struct<`id_1`:integer[], `id_2`:integer[], `varA.1`:integer[], `varA.2`:integer[], `varA.3`:integer[], `varB.2`:integer[], `varB.3`:integer[], `varC.3`:double[]>, null, character[], character, logical, null> => struct<`id_1`:integer[], `id_2`:integer[], `.time_1`:character[], `varA`:integer[], `varB`:^integer[], `varC`:^double[]>;
type `Names` <struct<`id_1`:integer[], `id_2`:integer[], `varA.1`:integer[], `varA.2`:integer[], `varA.3`:integer[], `varB.2`:integer[], `varB.3`:integer[], `varC.3`:double[]>, character[] | integer[] | double> => character[];
type `numMat` <list<character[]>, null | double, character> => ^double[];
type `othernames` <struct<`id_1`:integer[], `id_2`:integer[], `varA.1`:integer[], `varA.2`:integer[], `varA.3`:integer[], `varB.2`:integer[], `varB.3`:integer[], `varC.3`:double[]>, character[]> => character[];
type `Reshape` <struct<`id_1`:integer[], `id_2`:integer[], `varA.1`:integer[], `varA.2`:integer[], `varA.3`:integer[], `varB.2`:integer[], `varB.3`:integer[], `varC.3`:double[]>, character[], character[], character, null, null> => struct<`id_1`:integer[], `id_2`:integer[], `time`:integer[], `varA`:integer[], `varB`:^integer[], `varC`:^double[]>;
type `s_frac` <struct<`ID`:integer[], `A`:integer[], `B`:double[], `C`:double[], `D`:integer[], `E`:integer[], `temp_ind`:integer[], `temp_grp`:character[]>, character[], double> => struct<`A`:integer[], `N`:integer[], `ss`:double[], `temp_grp`:character[]>;
type `s_n` <struct<`ID`:integer[], `A`:integer[], `B`:double[], `C`:double[], `D`:integer[], `E`:integer[], `temp_ind`:integer[], `temp_grp`:character[]>, character[], double[]> => struct<`D`:integer[], `E`:integer[], `N`:integer[], `temp_grp`:character[], `ss`:double[]>;
type `Stacked` <struct<`id_1`:integer[], `id_2`:integer[], `varA.1`:integer[], `varA.2`:integer[], `varA.3`:integer[], `varB.2`:integer[], `varB.3`:integer[], `varC.3`:double[]>, null | character[], character[], character, logical, logical, logical, null> => struct<`varA`:struct<`id_1`:integer[], `id_2`:integer[], `.time_1`:character[], `varA`:integer[]>, `varB`:struct<`id_1`:integer[], `id_2`:integer[], `.time_1`:character[], `varB`:integer[]>, `varC`:struct<`id_1`:integer[], `id_2`:integer[], `.time_1`:character[], `varC`:double[]>>;
type `strat_sub` <struct<`ID`:integer[], `A`:integer[], `B`:double[], `C`:double[], `D`:integer[], `E`:integer[]>, struct<`A`:character[]> | struct<`E`:character>> => struct<`ID`:integer[], `A`:integer[], `B`:double[], `C`:double[], `D`:integer[], `E`:integer[]>;
type `stratified` <struct<`ID`:integer[], `A`:integer[], `B`:double[], `C`:double[], `D`:integer[], `E`:integer[]>, character[] | double, double[], null | struct<`E`:character> | struct<`A`:character[]>, logical, logical, logical, null> => struct<`ID`:integer[], `A`:integer[], `B`:double[], `C`:double[], `D`:integer[], `E`:integer[]>;
