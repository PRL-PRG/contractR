type `charMat` <list<character[]>, double | null, character> => class<`matrix`>;
type `concat.split` <class<`data.frame`>, double | character, character, character, character | null, character | null, logical, logical, null | double, ...> => (class<`data.frame`> | class<`data.frame`, `data.table`>);
type `concat.split.expanded` <class<`data.frame`>, character | double, character, null | character, character, logical, logical, null | double> => class<`data.frame`>;
type `concat.split.list` <class<`data.frame`>, character | double, character, logical, logical> => class<`data.frame`>;
type `cSplit` <class<`data.frame`>, character[] | double, character[], character, logical, logical, logical, null, logical> => class<`data.frame`, `data.table`>;
type `cSplit_e` <class<`data.frame`>, character | double, character, null | character, character, logical, logical, null | double> => class<`data.frame`>;
type `cSplit_l` <class<`data.frame`>, character | double, character, logical, logical> => class<`data.frame`>;
type `expandRows` <class<`data.frame`> | class<`data.frame`, `data.table`>, character | double[], logical, logical> => (class<`data.frame`> | class<`data.frame`, `data.table`>);
type `getanID` <class<`data.frame`>, character[] | integer[]> => class<`data.frame`, `data.table`>;
type `listCol_l` <class<`data.frame`>, character, logical> => class<`data.frame`, `data.table`>;
type `listCol_w` <class<`data.frame`>, character, logical, null> => class<`data.frame`, `data.table`>;
type `merged.stack` <class<`data.frame`>, null, character[], character, logical, ...> => class<`data.frame`, `data.table`>;
type `Names` <class<`data.frame`> | class<`data.frame`, `data.table`>, character[] | integer[] | double> => character[];
type `numMat` <list<character[]>, null | double, character> => class<`matrix`>;
type `othernames` <class<`data.frame`>, character[]> => character[];
type `.pad` <integer[]> => character[];
type `Reshape` <class<`data.frame`>, character[], character[], character, any, ...> => class<`data.frame`, `data.table`>;
type `s_frac` <class<`data.frame`, `data.table`>, character[], double> => class<`data.frame`, `data.table`>;
type `s_n` <class<`data.frame`, `data.table`>, character[], double[]> => class<`data.frame`, `data.table`>;
type `Stacked` <class<`data.frame`>, character[] | null, character[], character, logical, logical, logical, ...> => list<class<`data.frame`, `data.table`>>;
type `stratified` <class<`data.frame`>, character[] | double, double[], null | list<character[]>, logical, logical, logical, ...> => class<`data.frame`, `data.table`>;
type `strat_sub` <class<`data.frame`, `data.table`>, list<character[]>> => class<`data.frame`, `data.table`>;
type `.stripWhite` <^character[] | class<`factor`>, character> => ^character[];
