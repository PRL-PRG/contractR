type `adjacency.landkreis` <character> => class<`spam`>;
type `all.equal` <class<`matrix`>, class<`spam`>, ...> => logical | <class<`spam`>, class<`spam`>, ...> => (character[] | logical) | <class<`spam`>, class<`matrix`>, ...> => logical;
type `all.equal.spam` <class<`spam`>, class<`spam`>, any, null, logical, ...> => (character[] | logical);
type `apply.spam` <class<`spam`>, double[] | null, class<`function`>, ...> => (class<`matrix`> | class<`spam`> | double[] | list<class<`table`> | double[]>);
type `as.matrix` <class<`spam`>, ...> => class<`matrix`>;
type `as.matrix.spam` <class<`spam`>, ...> => class<`matrix`>;
type `assign.spam` <class<`spam`>, class<`matrix`> | double | integer[], null | double | integer[], double[] | class<`matrix`>> => class<`spam`>;
type `as.spam` <class<`matrix`>, double> => class<`spam`> | <class<`spam.chol.NgPeyton`>, double> => class<`spam`> | <class<`matrix`>, double> => class<`spam`> | <class<`dist`> | class<`matrix`> | class<`spam`> | class<`spam.chol.NgPeyton`> | ^double[], double> => class<`spam`> | <^double[], double> => class<`spam`> | <integer[], double> => class<`spam`> | <class<`dist`>, double> => class<`spam`> | <class<`spam`>, double> => class<`spam`>;
type `as.spam.matrix` <class<`matrix`>, double> => class<`spam`>;
type `as.spam.spam` <class<`spam`>, double> => class<`spam`>;
type `backsolve` <class<`spam.chol.NgPeyton`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`matrix`>, class<`matrix`>, ...> => class<`matrix`> | <class<`matrix`> | class<`spam.chol.NgPeyton`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]);
type `bandwidth` <class<`spam`>> => integer[];
type `bdiag.spam` <...> => class<`spam`>;
type `cbind` <..., double> => class<`spam`>;
type `cbind.spam` <..., double> => class<`spam`>;
type `checkpivot` <double[], integer, character> => null;
type `chol` <class<`spam`>, ...> => class<`spam.chol.NgPeyton`> | <class<`spam`>, ...> => class<`spam.chol.NgPeyton`>;
type `chol.spam` <class<`spam`>, character | integer[], character, list<any>, double, null, ...> => class<`spam.chol.NgPeyton`>;
type `circulant.spam` <double[], null, double> => class<`spam`>;
type `cleanup` <class<`spam`>, double> => class<`spam`>;
type `colSums` <class<`spam`>, logical, double, ...> => double[];
type `cov.sph` <class<`spam`>, double[], ..., double> => class<`spam`>;
type `crossprod.spam` <class<`spam`>, integer[]> => class<`matrix`>;
type `%d+%` <integer[], class<`spam`>, ...> => class<`spam`> | <integer[], class<`matrix`>, ...> => class<`matrix`> | <integer[], class<`matrix`> | class<`spam`>, ...> => (class<`matrix`> | class<`spam`>);
type `det` <class<`spam`> | class<`spam.chol.NgPeyton`>, ...> => double;
type `determinant` <class<`spam.chol.NgPeyton`>, logical, ...> => class<`det`> | <class<`spam`>, logical, ...> => class<`det`>;
type `determinant.spam.chol.NgPeyton` <class<`spam.chol.NgPeyton`>, logical, ...> => class<`det`>;
type `diag` <class<`spam`>, any, any, logical> => double[];
type `diag<-` <class<`spam`>, double[]> => class<`spam`>;
type `diag.of.spam` <class<`spam`>, any, any> => double[];
type `diag.spam` <double[] | class<`spam`>, any, any> => (class<`spam`> | double[]);
type `diag.spam<-` <class<`spam`>, double[]> => class<`spam`>;
type `diff.spam` <class<`spam`>, double, double, ...> => class<`spam`>;
type `display` <class<`spam`>, ...> => null | <class<`spam`>, ...> => null;
type `display.spam` <class<`spam`>, character[], character, character, double, character, ...> => null;
type `eigen_approx` <class<`spam`>, double, double, double, character, logical, logical, character> => list<null | double[]>;
type `eigen.spam` <class<`spam`>, double, any, logical, list<character>> => list<^double[] | null>;
type `.format.spam` <class<`spam`> | class<`spam.chol.NgPeyton`>, ..., logical> => list<character>;
type `forwardsolve` <class<`spam.chol.NgPeyton`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]) | <class<`spam.chol.NgPeyton`>, class<`matrix`> | double[], ...> => (class<`matrix`> | double[]);
type `germany.plot` <double[], integer[] | null, double[], logical, null, double, double, logical, ...> => null;
type `getEigenval` <double[], integer, integer, integer, logical> => list<^double[]>;
type `grid_trace2` <double[], double[], null, null, null, character, character, character, double[], null, logical, class<`unit`>, class<`unit`>, class<`unit`>, class<`unit`>, logical> => class<`gDesc`, `gTree`, `grob`>;
type `grid_zoom` <class<`gDesc`, `grob`, `points`> | class<`gDesc`, `gTree`, `grob`>, class<`viewport`>, character, any, any, double[], double[], double[], logical, double, character, logical, character, class<`gpar`>, null | class<`gpar`>, class<`axis`, `gDesc`, `gTree`, `grob`, `xaxis`> | null, null> => class<`gDesc`, `gTree`, `grob`>;
type `head` <class<`spam`>, ...> => class<`matrix`>;
type `image` <class<`spam`>, ...> => null;
type `image.spam` <class<`spam`>, double[], any, any, any, any, any, logical, character, character, any, any, any, logical, any, ...> => null;
type `inefficiencywarning` <any, double> => null;
type `is.spam` <class<`matrix`> | class<`spam`> | double[]> => logical;
type `isSymmetric` <class<`spam`>, ...> => logical;
type `isSymmetric.spam` <class<`spam`>, double, ...> => logical;
type `kronecker` <class<`spam`>, class<`spam`>, character, logical, ...> => class<`spam`> | <class<`spam`>, class<`matrix`>, character, logical, ...> => class<`spam`>;
type `kronecker.spam` <class<`matrix`>, class<`matrix`>, character, logical, ...> => class<`spam`>;
type `.local` <class<`spam`>, class<`spam`>, any, null, logical, ...> => (character[] | logical) | <class<`spam`>, character | integer[], character, list<any>, double, null, ...> => class<`spam.chol.NgPeyton`> | <class<`spam`>, any, any> => double[] | <class<`spam`>, double, ...> => logical;
type `lower.tri` <class<`spam`>, logical> => class<`spam`>;
type `matrix_add_spammatrix` <class<`spam`>, class<`matrix`>> => class<`matrix`>;
type `matrix_sub_matrixspam` <class<`matrix`>, class<`spam`>> => class<`matrix`>;
type `mle.nomean.spam` <class<`matrix`>, class<`spam`>, class<`function`>, double[], double[], double[], null, null, logical, ...> => list<double[] | character>;
type `mle.spam` <double[], class<`matrix`>, class<`spam`>, class<`function`>, double[], double[], double[], double[], null, null, logical, ...> => list<double[] | character>;
type `nearest.dist` <class<`data.frame`> | class<`matrix`>, null, character, double, logical | null, double, logical, null> => class<`spam`>;
type `neg2loglikelihood.spam` <double[], class<`matrix`>, class<`spam`>, class<`function`>, double[], double[], null, ...> => double;
type `.newSpam` <^double[], double[], double[] | null, double[], logical> => class<`spam`>;
type `norm` <class<`matrix`>, character, ...> => double | <class<`matrix`>, any, ...> => double | <double[], any, ...> => double | <class<`spam`>, any, ...> => double;
type `norm.spam` <class<`spam`>, character, ...> => double;
type `ordering` <class<`spam.chol.NgPeyton`>, logical> => integer[] | <class<`spam.chol.NgPeyton`>, logical> => integer[];
type `pad<-` <class<`spam`>, double[]> => class<`spam`> | <class<`spam`>, double[]> => class<`spam`>;
type `.par.check.cov` <double[], double> => double[];
type `permutation` <class<`spam`>, double[], double[], logical, logical> => class<`spam`> | <class<`spam`>, double[], double[], logical, logical> => class<`spam`>;
type `precmat.GMRFreglat` <double, double, double[], character, double> => class<`spam`>;
type `precmat.IGMRFirreglat` <class<`matrix`> | class<`spam`>, double> => class<`spam`>;
type `precmat.IGMRFreglat` <double, double, double, double> => class<`spam`>;
type `precmat.RW1` <double> => class<`spam`>;
type `precmat.RW2` <double> => class<`spam`>;
type `precmat.season` <double, double> => class<`spam`>;
type `print` <class<`spam`>, ...> => null;
type `rbind` <..., double> => class<`spam`>;
type `rep_len64` <double[], double, any> => double[];
type `rmvnorm.canonical` <double, double[], class<`spam`>, class<`spam.chol.NgPeyton`> | null, ...> => class<`matrix`>;
type `rmvnorm.spam` <double, class<`matrix`>, class<`spam`>, null, ...> => class<`matrix`>;
type `rowpointers<-` <class<`spam`>, double[]> => class<`spam`>;
type `rowSums` <class<`spam`>, logical, double, ...> => double[];
type `setMode` <character, logical, logical> => integer;
type `solve` <class<`spam`>, any, ...> => (class<`matrix`> | double[]);
type `solve.spam` <class<`spam`> | class<`spam.chol.NgPeyton`>, double[] | class<`matrix`>, class<`spam.chol.NgPeyton`> | null, ...> => double[];
type `spam` <list<double[]>, double, double, double> => class<`spam`> | <double[] | list<double[]>, double, double, double> => class<`spam`> | <double[], double, double, double> => class<`spam`> | <integer[], double, double, double> => class<`spam`> | <double, double, double, double> => class<`spam`>;
type `spam_add` <class<`spam`>, class<`spam`>, double> => class<`spam`>;
type `spam.list` <list<double[]>, double, double, double> => class<`spam`>;
type `spam.numeric` <double[], integer, double, double> => class<`spam`>;
type `spam_random` <double, double, double, class<`function`> | null, double | null, logical, logical, logical, ...> => class<`spam`>;
type `subset_rows.spam` <class<`spam`>, double | integer[], ..., logical> => class<`spam`>;
type `subset.spam` <class<`spam`>, double[], double[], ..., logical> => class<`spam`>;
type `summary` <class<`spam.chol.NgPeyton`>, ...> => class<`summary.spam.chol.NgPeyton`> | <class<`spam`>, ...> => class<`summary.spam`>;
type `t` <class<`spam`>> => class<`spam`>;
type `tail` <class<`spam`>, ...> => class<`matrix`>;
type `toeplitz.spam` <double[], double[] | null, double> => class<`spam`>;
type `triplet` <class<`spam`>, logical> => list<double[] | class<`matrix`> | double[]>;
type `t.spam` <class<`spam`>> => class<`spam`>;
type `update.spam.chol.NgPeyton` <class<`spam.chol.NgPeyton`>, class<`spam`>, ...> => (class<`spam.chol.NgPeyton`> | null);
type `upper.tri` <class<`spam`>, logical> => class<`spam`>;
type `validate_spam` <class<`spam`>> => logical;
