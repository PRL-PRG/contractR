type `-` <class<`matrix`>, class<`spam`>> => class<`matrix`> | <class<`spam`>, class<`spam`>> => class<`spam`>;
type `/` <class<`spam`>, double[]> => class<`spam`>;
type `[` <class<`spam`>, any, integer, ..., logical> => class<`spam`> | <class<`spam`>, integer[], any, ..., logical> => class<`spam`> | <class<`spam`>, any, integer[], ..., logical> => class<`spam`>;
type `[<-` <class<`spam`>, double, double, ..., double> => class<`spam`>;
type `*` <class<`spam`>, double[]> => class<`spam`>;
type `%*%` <class<`matrix`>, class<`spam`>> => class<`spam`> | <class<`spam`>, integer[]> => class<`matrix`> | <class<`spam`>, class<`spam`>> => class<`spam`>;
type `abs` <class<`spam`>> => class<`spam`>;
type `all.equal` <class<`matrix`>, class<`spam`>, ...> => logical | <class<`spam`>, class<`spam`>, ...> => (character[] | logical) | <class<`spam`>, class<`matrix`>, ...> => logical;
type `all.equal.spam` <class<`spam`>, class<`spam`>, any, null, logical, ...> => (character[] | logical);
type `apply.spam` <class<`spam`>, double[] | null, class<`function`>, ...> => (class<`matrix`> | class<`spam`> | double[] | list<class<`table`> | double[]>);
type `as.matrix` <class<`spam`>, ...> => class<`matrix`>;
type `as.matrix.spam` <class<`spam`>, ...> => class<`matrix`>;
type `asMethod` <class<`spam`>, character, logical> => logical[];
type `assign.spam` <class<`spam`>, double, double, double> => class<`spam`>;
type `as.spam` <class<`matrix`>, double> => class<`spam`> | <class<`spam.chol.NgPeyton`>, double> => class<`spam`> | <class<`dist`> | class<`matrix`> | class<`spam.chol.NgPeyton`> | double | integer[], double> => class<`spam`> | <double, double> => class<`spam`> | <integer[], double> => class<`spam`> | <class<`dist`>, double> => class<`spam`>;
type `as.spam.matrix` <class<`matrix`>, double> => class<`spam`>;
type `as.spam.spam` <class<`spam`>, double> => class<`spam`>;
type `as.vector` <any, any> => double[];
type `bandwidth` <class<`spam`>> => integer[];
type `bdiag.spam` <...> => class<`spam`>;
type `cbind` <..., double> => class<`spam`>;
type `chol` <class<`spam`>, ...> => class<`spam.chol.NgPeyton`>;
type `circulant.spam` <double[], null, double> => class<`spam`>;
type `cleanup` <class<`spam`>, double> => class<`spam`>;
type `colSums` <class<`spam`>, logical, double, ...> => double[];
type `cov.sph` <class<`spam`>, double[], ..., double> => class<`spam`>;
type `crossprod.spam` <class<`spam`>, integer[]> => class<`matrix`>;
type `det` <class<`spam`> | class<`spam.chol.NgPeyton`>, ...> => double;
type `determinant` <class<`spam.chol.NgPeyton`>, logical, ...> => class<`det`> | <class<`spam`>, logical, ...> => class<`det`>;
type `diag` <class<`spam`>, any, any, logical> => double[];
type `diag<-` <class<`spam`>, integer[]> => class<`spam`>;
type `diag.spam` <double | integer[], any, any> => class<`spam`>;
type `diag.spam<-` <class<`spam`>, integer[]> => class<`spam`>;
type `diff.spam` <class<`spam`>, double, double, ...> => class<`spam`>;
type `dim` <any> => integer[];
type `dim<-` <any, any> => class<`spam`>;
type `filter` <character[]> => logical[];
type `.format.spam` <class<`spam`> | class<`spam.chol.NgPeyton`>, ..., logical> => list<character>;
type `fun` <any, any> => list<null> | <any, any> => null;
type `FUN` <double[]> => logical;
type `inefficiencywarning` <any, double> => null;
type `is.spam` <class<`matrix`> | class<`spam`> | double[]> => logical;
type `isSymmetric` <class<`spam`>, ...> => logical;
type `isSymmetric.spam` <class<`spam`>, double, ...> => logical;
type `length` <any> => integer;
type `.local` <class<`spam`>, class<`spam`>, any, null, logical, ...> => (character[] | logical) | <class<`spam`>, double, ...> => logical | <class<`spam`>, logical, character, character, list<any>, double, ...> => class<`det`> | <class<`matrix`>, class<`spam`>, double, null, logical, double, ...> => logical | <class<`spam`>, character, character, list<any>, double, null, ...> => class<`spam.chol.NgPeyton`> | <class<`spam`>, double, double, double> => class<`spam`> | <class<`spam`>, any, any> => double[];
type `matrix_sub_matrixspam` <class<`matrix`>, class<`spam`>> => class<`matrix`>;
type `nearest.dist` <class<`matrix`>, null, character, double, logical, double, logical, null> => class<`spam`>;
type `.newSpam` <double[], double[], double[] | null, double[], logical> => class<`spam`>;
type `norm` <class<`matrix`>, character, ...> => double | <class<`spam`>, any, ...> => double;
type `norm.spam` <class<`spam`>, character, ...> => double;
type `ordering` <class<`spam.chol.NgPeyton`>, logical> => integer[] | <class<`spam.chol.NgPeyton`>, logical> => integer[];
type `pad<-` <class<`spam`>, double[]> => class<`spam`> | <class<`spam`>, double[]> => class<`spam`>;
type `.par.check.cov` <double[], double> => double[];
type `rbind` <..., double> => class<`spam`>;
type `rep_len64` <double[], double, any> => double[];
type `rowpointers<-` <class<`spam`>, double[]> => class<`spam`>;
type `spam` <double[], double, double, double> => class<`spam`> | <double[], double, double, double> => class<`spam`>;
type `spam_add` <class<`spam`>, class<`spam`>, double> => class<`spam`>;
type `spam.list` <list<double[]>, double, double, double> => class<`spam`>;
type `spam.numeric` <double[], integer, double, double> => class<`spam`>;
type `subset_rows.spam` <class<`spam`>, integer[], ..., logical> => class<`spam`>;
type `subset.spam` <class<`spam`>, integer[], integer[], ..., logical> => class<`spam`>;
type `summary` <class<`spam.chol.NgPeyton`>, ...> => class<`summary.spam.chol.NgPeyton`>;
type `t` <class<`spam`>> => class<`spam`>;
type `t.spam` <class<`spam`>> => class<`spam`>;
type `validityMethod` <class<`spam`>> => logical;
