type `CaretakerRatio` <double[], double[]> => list<double>;
type `clifetable` <double[]> => class<`data.frame`>;
type `CM` <double, double, double> => list<double[]>;
type `compare.levels` <integer, integer> => double;
type `CronbachAlpha` <class<`data.frame`>> => double;
type `CT` <double, double> => double[];
type `Denny` <double, double, double, integer[]> => double[];
type `filter` <character[]> => logical[];
type `fitCM` <double[], double[], integer[], double, character, ...> => double[];
type `fitCT` <double[], double[], character, ...> => double[];
type `fitDenny` <double[], ^double[], double, character, ...> => double[];
type `fitGM` <double[], ^double[], double, character, ...> => double[];
type `fitHad` <double[], double[], character, ...> => double[];
type `fn` <double[], double[]> => double | <double[], ^double[]> => double | <double[], double[]> => double | <double[], double[]> => double | <double[], double[], any, integer[]> => double;
type `FUN` <double> => double | <double[], double, double> => double;
type `geary.test` <double[]> => class<`htest`>;
type `GompertzMakeham` <double, double, double, integer[]> => double[];
type `gstem` <double[], double> => null;
type `Hadwiger` <double, double, double> => double[];
type `IndexOfDissimilarity` <^double[], ^double[]> => list<double>;
type `IRCI` <double, double, double> => list<double>;
type `IRCIPois` <double, double, double> => list<double>;
type `Kappa.test` <class<`matrix`> | double[], null | double[], double> => list<class<`htest`> | character>;
type `lifetable` <double[], null, double, double> => class<`data.frame`>;
type `lifetable2` <double[], ^double[], ^double[]> => class<`data.frame`>;
type `lifetable3` <double[], double[], double[]> => class<`data.frame`>;
type `mhchart` <list<double[]>, double[], character, character, double, ...> => null;
type `mxtoqx` <double[], ^double[], ^double[]> => double[];
type `NagelkerkeR2` <class<`glm`, `lm`>> => list<double>;
type `oddsratio` <class<`table`> | double, null | double, null | double, null | double, double, logical> => class<`htest`>;
type `ORMH` <class<`matrix`>, double> => list<double[]>;
type `pairwise.fisher.test` <double[], double[], character[], ...> => class<`pairwise.htest`>;
type `percentile` <double[]> => integer[];
type `qxtolx` <^double[]> => ^double[];
type `uxtoqx` <double[]> => double[];
