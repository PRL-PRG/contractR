type `A1` <double> => double;
type `A1inv` <class<`circular`, `numeric`> | double> => double;
type `allcrosses` <double, class<`density.circular`>, class<`circular`, `numeric`>, double, ...> => class<`matrix`>;
type `angular.deviation` <class<`circular`, `numeric`>, logical> => double;
type `AngularDeviationRad` <double[]> => double;
type `angular.variance` <class<`circular`, `numeric`>, logical> => double;
type `AngularVarianceRad` <double[]> => double;
type `aov.circular` <class<`circular`, `numeric`>, double[], null, character[], logical, list<any>> => class<`aov.circular`>;
type `AovCircularRad` <double[], double[], null, character, any> => list<any>;
type `area` <class<`matrix`>, class<`density.circular`>, ...> => list<double[]>;
type `area2` <class<`matrix`>, class<`density.circular`>, double[], ...> => list<double[]>;
type `areas.region.circular` <class<`circular`, `numeric`>, class<`matrix`>, null, double, double, any, character[], any, double, ...> => class<`areas.region.circular`>;
type `arrows.circular` <class<`circular`, `numeric`>, double[] | null, double[], double[], logical, double, null, null, null, ...> => null;
type `as.circular` <class<`array`, `circular`> | class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`matrix`> | class<`circular`, `numeric`> | double[], any, ...> => (class<`array`, `circular`> | class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`circular`, `numeric`>);
type `as.data.frame.circular` <class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`circular`, `numeric`>, null, logical, ...> => class<`data.frame`>;
type `axis.circular` <class<`circular`, `numeric`> | null, expression | null, any, null | character, null | character, null | double, null | character, logical, any, any, any, any, any, double, double, double> => null;
type `AxisCircularRad` <double[], any, character[] | expression, any, logical, double, double, double, character, any, any> => null;
type `bw.cv.ml.circular` <class<`circular`, `numeric`>, double | null, double | null, double, character[], null, double> => double;
type `bw.cv.mse.circular` <class<`circular`, `numeric`>, double | null, double | null, double, character[], null, double> => double;
type `bw.nrd.circular` <class<`circular`, `numeric`>, null, null, character[], logical, double> => double;
type `c.circular` <..., logical> => class<`circular`, `numeric`>;
type `circle.control` <double, character, double, character, double, double, double, double> => list<double | character>;
type `CirclePlotRad` <double[], double[], null, double, double, character | expression | null, null, character | expression, character, list<double | character>> => null;
type `circular` <class<`array`> | class<`matrix`> | class<`data.frame`> | class<`circular`, `numeric`> | double[] | null, character[], character[], character[], character[], any, character[], null> => (class<`array`, `circular`> | class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`circular`, `numeric`>);
type `[.circular` <class<`circular`, `matrix`> | class<`circular`, `numeric`>, any, ...> => (class<`circular`, `matrix`> | class<`circular`, `numeric`>);
type `circular.colors` <double, double, double, double, ...> => character[];
type `circularp` <class<`matrix`> | double[] | class<`circular`, `matrix`> | class<`circular`, `numeric`>> => (null | list<character | double>);
type `circularp<-` <class<`array`, `circular`> | class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`circular`, `numeric`> | double[], list<character | double>> => (class<`array`, `circular`> | class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`circular`, `numeric`> | double[]);
type `conversion.circular` <class<`array`, `circular`> | class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`matrix`> | class<`circular`, `numeric`> | double[], character[], character | null, character | null, character | null, double | null, character | null> => (class<`array`, `circular`> | class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`circular`, `numeric`>);
type `coord2rad` <class<`matrix`>, null, list<any>> => class<`circular`, `numeric`>;
type `cor.circular` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, logical> => list<double>;
type `CorCircularRad` <double[], double[], logical> => double[];
type `cross` <double, class<`density.circular`>, double, double, ...> => double;
type `curve.circular` <any, double | null, double | null, double, logical, double, logical, logical, double, double, double, double, null, any, any, double, character[], null | character, null, character | expression> => list<double[] | character>;
type `dasytriangular` <class<`circular`, `numeric`>, double> => double[];
type `DasytriangularRad` <double[], double> => double[];
type `dcircularuniform` <class<`circular`, `numeric`>> => double[];
type `density.circular` <class<`circular`, `numeric`>, class<`circular`, `numeric`> | null, double, double, any, character[], any, class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, null, double, list<any>, ...> => class<`density.circular`>;
type `DensityCircularRad` <double[], double[], double, character, any, any> => double[];
type `dgenvonmises` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double> => double[];
type `DgenvonmisesRad` <double[], double, double, double, double> => double[];
type `djonespewsey` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double> => double[];
type `DjonespewseyRad` <double[], double, double, double> => double[];
type `dkatojones` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double> => double[];
type `DkatojonesRad` <double[], double, double, double, double> => double[];
type `dmixedvonmises` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double, double> => double[];
type `DmixedvonmisesRad` <double[], double, double, double, double, double> => double[];
type `dpnorm` <class<`circular`, `numeric`>, double[], class<`matrix`>, logical> => double[];
type `DpnormRad` <double[], double[], class<`matrix`>, logical> => double[];
type `dtriangular` <class<`circular`, `numeric`>, double> => double[];
type `DtriangularRad` <double[], double> => double[];
type `dvonmises` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, logical> => double[];
type `DvonmisesRad` <double[], double[], double, logical> => double[];
type `dwrappedcauchy` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, double> => double[];
type `DwrappedcauchyRad` <double[], double, double> => double[];
type `dwrappednormal` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double, null, double> => double[];
type `DwrappednormalRad` <double[], double, double, null, double> => double[];
type `equal.kappa.test` <class<`circular`, `numeric`>, double[]> => class<`equal.kappa.test`>;
type `EqualKappaTestRad` <double[], class<`factor`> | double[] | character[]> => list<class<`array`> | double>;
type `f` <double[], double[], double, logical> => double[] | <double[], double, double, null, double> => double[];
type `FUN` <double[], double[], double, logical> => double[] | <double[] | class<`circular`, `numeric`>> => double | <double[], integer, integer, ...> => double[] | <double[], null | double[], logical, any, ...> => double | <double[]> => double;
type `IntersectIntervalRad` <class<`circular`, `matrix`>, double[]> => (class<`matrix`> | double[]);
type `intersect.modal.region` <class<`circular`, `numeric`>, ...> => list<double | list<class<`areas.region.circular`> | class<`matrix`>> | double | list<null | class<`matrix`>>>;
type `intersect.modal.region.circular` <class<`circular`, `numeric`>, class<`circular`, `matrix`>, null, double, double, double, any, character[], logical, double, double, double, ...> => list<double | list<class<`areas.region.circular`> | class<`matrix`>> | double | list<null | class<`matrix`>>>;
type `is.circular` <class<`array`, `circular`> | class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`circular`, `numeric`> | class<`matrix`> | double[]> => logical;
type `kuiper.test` <class<`circular`, `numeric`>, double> => class<`kuiper.test`>;
type `KuiperTestRad` <double[], double> => double;
type `lines.circular` <class<`circular`, `numeric`>, double[], logical, logical, double, double, null, null, null, null, ...> => list<double[] | character>;
type `LinesCircularRad` <double[], double[], logical, logical, double, double, ...> => list<double[]>;
type `lines.density.circular` <class<`density.circular`>, character, logical, logical, double, double, double, character[], null, double, double, double, double, logical, logical, null | list<double[] | character>, null, null, ...> => list<double[] | character | null | double | character>;
type `lines.edf` <class<`circular`, `numeric`>, character, ...> => null;
type `lm.circular` <..., character[]> => (class<`lm.circular.cc`> | class<`lm.circular.cl`>);
type `lm.circular.cc` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double, list<any>> => class<`lm.circular.cc`>;
type `LmCircularccRad` <double[], double[], double> => list<class<`matrix`> | double[]>;
type `lm.circular.cl` <class<`circular`, `numeric`>, class<`matrix`>, double[], logical, double, list<any>> => class<`lm.circular.cl`>;
type `LmCircularclRad` <double[], class<`matrix`>, double[], logical, double> => list<class<`matrix`> | double[]>;
type `lsfit.circle` <double[], double[], null, character[], character[], character[], double, character[], ...> => class<`lsfit.circle`>;
type `LsfitCircleRad` <double[], double[], null, ...> => list<double[] | list<double[] | null | class<`matrix`>>>;
type `mean.circular` <class<`circular`, `numeric`>, logical, list<any>, ...> => class<`circular`, `numeric`>;
type `MeanCircularRad` <double[]> => double;
type `meandeviation` <class<`circular`, `numeric`>, logical> => double;
type `MeanDeviationRad` <double[]> => double;
type `median.circular` <class<`circular`, `numeric`>, logical, ...> => class<`circular`, `numeric`>;
type `MedianCircularRad` <double[]> => (double | null);
type `medianHL.circular` <class<`circular`, `numeric`>, logical, character, null> => class<`circular`, `numeric`>;
type `MedianHLCircularRad` <double[], character, null> => double;
type `minusPiPlusPi` <class<`circular`, `numeric`>> => class<`circular`, `numeric`>;
type `MinusPiPlusPiRad` <double[] | null> => double[];
type `mle.vonmises` <class<`circular`, `numeric`>, class<`circular`, `numeric`> | null, null, logical, list<any>> => class<`mle.vonmises`>;
type `mle.vonmises.bootstrap.ci` <class<`circular`, `numeric`>, null, logical, double, double, list<any>> => class<`mle.vonmises.bootstrap.ci`>;
type `MleVonmisesBootstrapCiRad` <double[], double, logical, double, double> => list<double[]>;
type `MlevonmisesRad` <double[], double | null, null, logical> => double[];
type `mle.wrappedcauchy` <class<`circular`, `numeric`>, class<`circular`, `numeric`> | null, null, double, double, list<any>> => class<`mle.wrappedcauchy`>;
type `MlewrappedcauchyRad` <double[], double | null, null, double, double> => double[];
type `mle.wrappednormal` <class<`circular`, `numeric`>, class<`circular`, `numeric`> | null, null, null, null, double, double, double, double, logical, list<any>> => class<`mle.wrappednormal`>;
type `MlewrappednormalRad` <double[], double | null, null, null, double, null, double, double, double, logical> => double[];
type `modal.region` <class<`circular`, `numeric`>, ...> => class<`modal.region.circular`>;
type `modal.region.circular` <class<`circular`, `numeric`>, class<`circular`, `numeric`> | null, double, double, double, any, character[], any, any, double, double, ...> => class<`modal.region.circular`>;
type `plot.circular` <class<`circular`, `integer`> | class<`circular`, `matrix`> | class<`circular`, `numeric`>, double, double, logical, logical, double, double, double, null | double, logical, double, double, null | double, double, null, double[], double[], double, null, null | character> => list<double | character>;
type `plot.density.circular` <class<`density.circular`>, character | null, null, character | null, character, character, logical, logical, double, double, double, character[], logical, logical, null, double, double, double, double, double> => (null | list<double[] | character>);
type `plot.edf` <class<`circular`, `numeric`>, character, double[], double[], ...> => null;
type `plot.function.circular` <class<`function`>, double, double, ...> => list<double[] | character>;
type `plot.lsfit.circle` <class<`lsfit.circle`>, logical, null, null, null, null, null, any, double, double, ...> => class<`lsfit.circle`>;
type `plot.modal.region.circular` <class<`modal.region.circular`>, character[], null, null, null, null, null, list<any>, ...> => null;
type `plot.totalvariation.circular` <class<`totalvariation.circular`>, logical, logical, character[], null, null, null, double, double, logical, double, list<any>, list<any>, double, double, double, double, double, double, logical> => class<`totalvariation.circular`>;
type `points.circular` <class<`circular`, `integer`> | class<`circular`, `numeric`>, double, double, logical, double, double, double, null, double | null, null, null | list<double | character | double[] | character>, null, null, ...> => list<double | character>;
type `PointsCircularRad` <double[], any, logical, double, double, double, any, double, double, any, any, double, ...> => null;
type `pp.plot` <class<`circular`, `numeric`>, logical, double, character, character, list<any>, ...> => list<class<`circular`, `numeric`> | double>;
type `pp.unif.plot` <class<`circular`, `numeric`>, logical, double | null, character, character, null, null, null, ...> => null;
type `print.circular` <class<`circular`, `numeric`>, logical, ...> => class<`circular`, `numeric`>;
type `print.rao.spacing.test` <class<`rao.spacing.test`>, double, ...> => class<`rao.spacing.test`>;
type `prodseq` <double[], integer, integer, ...> => double[];
type `pvonmises` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, null, double> => double[];
type `PvonmisesRad` <double[], double, double, double> => double[];
type `pwrappednormal` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double, class<`circular`, `numeric`> | null, null, double, ...> => double[];
type `quantile.circular` <class<`circular`, `numeric`>, double[], logical, logical, double, ...> => class<`circular`, `numeric`>;
type `QuantileCircularRad` <double[], double[], logical, double, ...> => double[];
type `qvonmises` <double[], class<`circular`, `numeric`>, double, class<`circular`, `numeric`> | null, double, list<any>, ...> => class<`circular`, `numeric`>;
type `qwrappednormal` <double[], class<`circular`, `numeric`>, null, double, null, null, double, double, list<any>, ...> => class<`circular`, `numeric`>;
type `range.circular` <class<`circular`, `numeric`>, logical, logical, logical, list<any>, ...> => list<class<`circular`, `numeric`> | double>;
type `RangeCircularRad` <double[], logical> => (double | list<double>);
type `rao.spacing.test` <class<`circular`, `numeric`>, double> => class<`rao.spacing.test`>;
type `RaoSpacingTestDeg` <double[]> => double;
type `rao.test` <..., double> => class<`rao.test`>;
type `RaoTestRad` <list<double[]>> => list<double[]>;
type `rayleigh.test` <class<`circular`, `numeric`>, class<`circular`, `numeric`> | null> => class<`rayleigh.test`>;
type `RayleighTestRad` <double[], double | null> => list<double | double | null>;
type `rcardioid` <double, class<`circular`, `numeric`>, double, list<any>> => class<`circular`, `numeric`>;
type `RcardioidRad` <double, double, double> => double[];
type `rcircularuniform` <double, list<character>> => class<`circular`, `numeric`>;
type `rho.circular` <class<`circular`, `numeric`>, logical> => double;
type `RhoCircularRad` <double[] | class<`circular`, `numeric`>> => double;
type `rkatojones` <double, class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double, list<any>> => class<`circular`, `numeric`>;
type `rkatojonesRad` <double, double, double, double, double> => double[];
type `rmixedvonmises` <double, class<`circular`, `numeric`>, class<`circular`, `numeric`>, double, double, double, list<any>> => class<`circular`, `numeric`>;
type `RmixedvonmisesRad` <double, double, double, double, double, double> => double[];
type `rose.diag` <class<`circular`, `numeric`>, double, double, logical, double, double, logical, logical, double, double, character[], null, double | null, double, null, any, any, double, double, null> => list<double | character>;
type `RosediagRad` <double[], double, character, double, logical, character, double, integer, double | null, ...> => null;
type `rpnorm` <double, double[], class<`matrix`>, list<character>> => class<`circular`, `numeric`>;
type `RpnormRad` <double, double[], class<`matrix`>> => double[];
type `rstable` <double, double, double, double> => double[];
type `rtriangular` <double, double, list<character>> => class<`circular`, `numeric`>;
type `RtriangularRad` <double, double> => double[];
type `RuniformRad` <double> => double[];
type `rvonmises` <double, class<`circular`, `numeric`>, double, list<any>> => class<`circular`, `numeric`>;
type `RvonmisesRad` <double, double, double> => double[];
type `rwrappedcauchy` <double, class<`circular`, `numeric`>, double, list<any>> => class<`circular`, `numeric`>;
type `RwrappedcauchyRad` <double, double, double> => double[];
type `rwrappednormal` <double, class<`circular`, `numeric`>, double | null, double, list<any>> => class<`circular`, `numeric`>;
type `RwrappednormalRad` <double, double, double> => double[];
type `sd` <class<`circular`, `numeric`>, ...> => double;
type `sd.circular` <class<`circular`, `numeric`>, logical, ...> => double;
type `SdCircularRad` <double[]> => double;
type `summary.circular` <class<`circular`, `numeric`>, double, ...> => double[];
type `ticks.circular` <class<`circular`, `numeric`>, character[], null, null, double, null, ...> => null;
type `TicksCircularRad` <double[], double, character, ...> => null;
type `totalvariation.circular` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, null, double, double, double, any, character[], logical, double, double, double, ...> => class<`totalvariation.circular`>;
type `trigonometric.moment` <class<`circular`, `numeric`>, double, logical, list<character>> => list<class<`circular`, `numeric`> | double | class<`call`>>;
type `TrigonometricMomentRad` <double[], double, logical> => double[];
type `unique.circular` <class<`circular`, `numeric`>, ...> => class<`circular`, `numeric`>;
type `var` <class<`circular`, `numeric`>, ...> => double;
type `var.circular` <class<`circular`, `numeric`>, logical, ...> => double;
type `VarCircularRad` <double[]> => double;
type `var.default` <double[], null | double[], logical, any, ...> => double;
type `wallraff.test` <class<`circular`, `numeric`> | class<`formula`> | list<class<`circular`, `numeric`>>, ...> => class<`htest`>;
type `wallraff.test.default` <class<`circular`, `numeric`>, class<`factor`>, null | class<`circular`, `numeric`> | double, ...> => class<`htest`>;
type `wallraff.test.formula` <class<`formula`>, class<`data.frame`>, null, ...> => class<`htest`>;
type `wallraff.test.list` <list<class<`circular`, `numeric`>>, null | class<`circular`, `numeric`> | double, ...> => class<`htest`>;
type `WallraffTestRad` <double[], class<`factor`>, double[]> => class<`htest`>;
type `watson.test` <class<`circular`, `numeric`>, double, character[]> => class<`watson.test`>;
type `WatsonTestRad` <double[], character> => list<double | double | null>;
type `watson.two.test` <class<`circular`, `numeric`>, class<`circular`, `numeric`>, double> => class<`watson.two.test`>;
type `WatsonTwoTestRad` <double[], double[]> => list<double>;
type `watson.wheeler.test` <list<class<`circular`, `numeric`>>, ...> => class<`htest`>;
type `watson.wheeler.test.default` <class<`circular`, `numeric`>, character[], ...> => class<`htest`>;
type `watson.wheeler.test.list` <list<class<`circular`, `numeric`>>, ...> => class<`htest`>;
type `WatsonWheelerTestRad` <double[], character[]> => class<`htest`>;
type `watson.williams.test` <class<`circular`, `numeric`> | class<`formula`> | list<class<`circular`, `numeric`>>, ...> => class<`htest`>;
type `watson.williams.test.default` <class<`circular`, `numeric`>, class<`factor`> | character[], ...> => class<`htest`>;
type `watson.williams.test.formula` <class<`formula`>, class<`data.frame`>, ...> => class<`htest`>;
type `watson.williams.test.list` <list<class<`circular`, `numeric`>>, ...> => class<`htest`>;
type `WatsonWilliamsTestRad` <double[], class<`factor`> | character[], list<class<`array`> | double>> => class<`htest`>;
type `weighted.mean.circular` <class<`circular`, `numeric`>, double[], logical, list<any>, ...> => class<`circular`, `numeric`>;
type `WeightedMeanCircularRad` <double[], double[]> => double;
type `windrose` <class<`circular`, `numeric`> | class<`data.frame`>, double[] | null, null | class<`circular`, `numeric`>, double, double, character, double, null, logical, double, double, logical, logical, double, double, double, double, null, null, null> => list<any>;
type `x` <double[], class<`circular`, `numeric`>, null, double, null, null, double, double, list<any>, ...> => class<`circular`, `numeric`>;
