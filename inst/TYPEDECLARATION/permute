type `allFree` <integer, integer[]> => class<`matrix`>;
type `allGrid` <integer, double, any, double, logical, any> => class<`matrix`>;
type `allPerms` <character[] | double[], class<`how`>, logical> => class<`allPerms`, `matrix`, `permutationMatrix`>;
type `allSeries` <integer, double, logical> => class<`matrix`>;
type `allStrata` <integer, class<`how`>> => class<`matrix`>;
type `as.allPerms` <class<`allPerms`, `matrix`, `permutationMatrix`>, class<`how`>> => class<`allPerms`, `matrix`>;
type `as.matrix.allPerms` <class<`allPerms`, `matrix`, `permutationMatrix`>, ...> => class<`matrix`>;
type `as.matrix.permutationMatrix` <class<`matrix`, `permutationMatrix`>, ...> => class<`matrix`>;
type `Blocks` <class<`factor`>> => list<class<`factor`>>;
type `cbindAllPerms` <list<class<`matrix`>>> => class<`matrix`>;
type `check` <character[] | class<`data.frame`> | double[], class<`how`>, any> => any;
type `doAllPerms` <integer[], class<`factor`> | null, character, any, any, any, any, any> => class<`matrix`>;
type `doShuffle` <integer[], class<`how`>> => integer[];
type `doShuffleSet` <integer[], double, class<`how`>> => class<`matrix`>;
type `fixupCall` <class<`how`> | class<`Plots`> | class<`Within`>, character, class<`allPerms`, `matrix`> | class<`call`> | double | null | character | class<`factor`>> => (class<`how`> | class<`Plots`> | class<`Within`>);
type `getAllperms` <class<`how`> | integer[], ...> => any;
type `getAllperms.default` <integer[], ...> => any;
type `getAllperms.how` <class<`how`>, ...> => (class<`allPerms`, `matrix`> | null);
type `getBlocks` <class<`how`> | integer[], ...> => any;
type `getBlocks.default` <integer[], ...> => any;
type `getBlocks.how` <class<`how`>, ...> => (class<`factor`> | null);
type `getCol` <class<`how`> | class<`Plots`> | class<`Within`>, ...> => (double | null);
type `getCol.how` <class<`how`>, character, ...> => (double | null);
type `getCol.Plots` <class<`Plots`> | class<`Within`>, ...> => integer;
type `getCol.Within` <class<`Plots`> | class<`Within`>, ...> => integer;
type `getComplete` <integer[] | class<`how`>, ...> => any;
type `getComplete.default` <integer[], ...> => any;
type `getComplete.how` <class<`how`>, ...> => logical;
type `getConstant` <integer[] | class<`how`> | class<`Within`>, ...> => any;
type `getConstant.default` <integer[], ...> => any;
type `getConstant.how` <class<`how`>, ...> => logical;
type `getConstant.Within` <class<`Within`>, ...> => logical;
type `getControl` <class<`allPerms`, `matrix`, `permutationMatrix`> | class<`check`> | integer[], ...> => any;
type `getControl.allPerms` <class<`allPerms`, `matrix`, `permutationMatrix`>, ...> => class<`how`>;
type `getControl.default` <class<`check`> | integer[], ...> => any;
type `getDim` <class<`how`> | class<`Plots`> | class<`Within`>, ...> => (double[] | null);
type `getDim.how` <class<`how`>, character, ...> => (double[] | null);
type `getDim.Plots` <class<`Plots`> | class<`Within`>, ...> => integer[];
type `getDim.Within` <class<`Plots`> | class<`Within`>, ...> => integer[];
type `getHow` <class<`allPerms`, `matrix`, `permutationMatrix`> | class<`check`> | integer[], ...> => any;
type `getMake` <integer[] | class<`how`>, ...> => any;
type `getMake.default` <integer[], ...> => any;
type `getMake.how` <class<`how`>, ...> => logical;
type `getMaxperm` <class<`how`> | integer[], ...> => any;
type `getMaxperm.default` <integer[], ...> => any;
type `getMaxperm.how` <class<`how`>, ...> => double;
type `getMinperm` <class<`how`> | integer[], ...> => any;
type `getMinperm.default` <integer[], ...> => any;
type `getMinperm.how` <class<`how`>, ...> => double;
type `getMirror` <integer[] | class<`how`> | class<`Plots`> | class<`Within`>, ...> => any;
type `getMirror.default` <integer[], ...> => any;
type `getMirror.how` <class<`how`>, character, ...> => logical;
type `getMirror.Plots` <class<`Plots`> | class<`Within`>, ...> => logical;
type `getMirror.Within` <class<`Plots`> | class<`Within`>, ...> => logical;
type `getNperm` <class<`how`> | integer[], ...> => any;
type `getNperm.default` <integer[], ...> => any;
type `getNperm.how` <class<`how`>, ...> => double;
type `getObserved` <integer[] | class<`how`>, ...> => any;
type `getObserved.default` <integer[], ...> => any;
type `getObserved.how` <class<`how`>, ...> => logical;
type `getPlots` <class<`how`> | integer[], ...> => any;
type `getPlots.default` <integer[], ...> => any;
type `getPlots.how` <class<`how`>, ...> => class<`Plots`>;
type `getRow` <class<`how`> | class<`Plots`> | class<`Within`>, ...> => (double | null);
type `getRow.how` <class<`how`>, character, ...> => (double | null);
type `getRow.Plots` <class<`Plots`> | class<`Within`>, ...> => integer;
type `getRow.Within` <class<`Plots`> | class<`Within`>, ...> => integer;
type `getStrata` <class<`how`> | class<`Plots`> | integer[], ...> => any;
type `getStrata.default` <integer[], ...> => any;
type `getStrata.how` <class<`how`>, character[], logical, ...> => (class<`factor`> | null);
type `getStrata.Plots` <class<`Plots`>, logical, ...> => class<`factor`>;
type `getType` <class<`how`> | class<`Plots`> | class<`Within`> | integer[], ...> => any;
type `getType.default` <integer[], ...> => any;
type `getType.how` <class<`how`>, character, ...> => character;
type `getType.Plots` <class<`Plots`> | class<`Within`>, ...> => character;
type `getType.Within` <class<`Plots`> | class<`Within`>, ...> => character;
type `getWithin` <class<`how`> | integer[], ...> => any;
type `getWithin.default` <integer[], ...> => any;
type `getWithin.how` <class<`how`>, ...> => class<`Within`>;
type `how` <class<`Within`>, class<`Plots`>, class<`factor`> | null, double, logical, double, double, null> => class<`how`>;
type `nobs.character` <character[] | class<`factor`> | double[], ...> => integer;
type `nobs.data.frame` <class<`data.frame`> | class<`matrix`>, ...> => integer;
type `nobs.factor` <character[] | class<`factor`> | double[], ...> => integer;
type `nobs.integer` <integer[], ...> => integer;
type `nobs.matrix` <class<`data.frame`> | class<`matrix`>, ...> => integer;
type `nobs.numeric` <character[] | class<`factor`> | double[], ...> => integer;
type `numPerms` <character[] | class<`data.frame`> | double[], class<`how`>> => double;
type `permute` <any, any, class<`how`>> => integer[];
type `Plots` <class<`factor`> | integer[] | null, character[], logical, null | double, null | double> => class<`Plots`>;
type `print.how` <class<`how`>, ...> => null;
type `print.permutationMatrix` <class<`matrix`, `permutationMatrix`>, ...> => class<`matrix`>;
type `print.summary.allPerms` <class<`summary.allPerms`>, ...> => class<`matrix`>;
type `setAllperms<-` <class<`how`> | integer[], class<`allPerms`, `matrix`, `permutationMatrix`> | integer[]> => any;
type `setAllperms<-.default` <integer[], integer[]> => any;
type `setAllperms<-.how` <class<`how`>, class<`allPerms`, `matrix`, `permutationMatrix`>> => class<`how`>;
type `setBlocks<-` <class<`how`> | integer[], null | logical> => any;
type `setBlocks<-.default` <integer[], logical> => any;
type `setBlocks<-.how` <class<`how`>, null> => class<`how`>;
type `setCol<-` <class<`Plots`> | class<`Within`> | class<`how`> | integer[], double> => any;
type `setCol<-.default` <integer[], double> => any;
type `setCol<-.how` <class<`how`>, double> => any;
type `setCol<-.Plots` <class<`Plots`> | class<`Within`>, double> => (class<`Plots`> | class<`Within`>);
type `setCol<-.Within` <class<`Plots`> | class<`Within`>, double> => (class<`Plots`> | class<`Within`>);
type `setComplete<-` <class<`how`> | integer[], logical> => any;
type `setComplete<-.default` <integer[], logical> => any;
type `setComplete<-.how` <class<`how`>, logical> => class<`how`>;
type `setConstant<-` <class<`Within`> | class<`how`> | class<`Plots`> | integer[], logical | character> => any;
type `setConstant<-.default` <integer[], character> => any;
type `setConstant<-.how` <class<`how`>, logical> => any;
type `setConstant<-.Plots` <class<`Plots`>, logical> => any;
type `setConstant<-.Within` <class<`Within`>, logical> => class<`Within`>;
type `setDim<-` <class<`Plots`> | class<`Within`> | class<`how`> | integer[], double[]> => any;
type `setDim<-.default` <integer[], double[]> => any;
type `setDim<-.how` <class<`how`>, double[]> => any;
type `setDim<-.Plots` <class<`Plots`> | class<`Within`>, double[]> => (class<`Plots`> | class<`Within`>);
type `setDim<-.Within` <class<`Plots`> | class<`Within`>, double[]> => (class<`Plots`> | class<`Within`>);
type `setMake<-` <class<`how`> | integer[], logical> => any;
type `setMake<-.default` <integer[], logical> => any;
type `setMake<-.how` <class<`how`>, logical> => class<`how`>;
type `setMaxperm<-` <class<`how`> | integer[], double> => any;
type `setMaxperm<-.default` <integer[], double> => any;
type `setMaxperm<-.how` <class<`how`>, double> => class<`how`>;
type `setMinperm<-` <class<`how`> | integer[], double> => any;
type `setMinperm<-.default` <integer[], double> => any;
type `setMinperm<-.how` <class<`how`>, double> => class<`how`>;
type `setMirror<-` <class<`Plots`> | class<`Within`> | class<`how`> | integer[], logical> => any;
type `setMirror<-.default` <integer[], logical> => any;
type `setMirror<-.how` <class<`how`>, logical> => any;
type `setMirror<-.Plots` <class<`Plots`> | class<`Within`>, logical> => (class<`Plots`> | class<`Within`>);
type `setMirror<-.Within` <class<`Plots`> | class<`Within`>, logical> => (class<`Plots`> | class<`Within`>);
type `setNperm<-` <class<`how`> | integer[], double> => any;
type `setNperm<-.default` <integer[], double> => any;
type `setNperm<-.how` <class<`how`>, double> => class<`how`>;
type `setObserved<-` <class<`how`> | integer[], logical> => any;
type `setObserved<-.default` <integer[], logical> => any;
type `setObserved<-.how` <class<`how`>, logical> => class<`how`>;
type `setPlots<-` <class<`how`> | integer[], class<`Plots`>> => any;
type `setPlots<-.default` <integer[], class<`Plots`>> => any;
type `setPlots<-.how` <class<`how`>, class<`Plots`>> => class<`how`>;
type `setRow<-` <class<`Plots`> | class<`Within`> | class<`how`> | integer[], double> => any;
type `setRow<-.default` <integer[], double> => any;
type `setRow<-.how` <class<`how`>, double> => any;
type `setRow<-.Plots` <class<`Plots`> | class<`Within`>, double> => (class<`Plots`> | class<`Within`>);
type `setRow<-.Within` <class<`Plots`> | class<`Within`>, double> => (class<`Plots`> | class<`Within`>);
type `setStrata<-` <class<`how`> | class<`Plots`> | integer[], class<`factor`>> => any;
type `setStrata<-.default` <integer[], class<`factor`>> => any;
type `setStrata<-.how` <class<`how`>, class<`factor`>> => class<`how`>;
type `setStrata<-.Plots` <class<`Plots`>, class<`factor`>> => class<`Plots`>;
type `setType<-` <class<`Plots`> | class<`Within`> | class<`how`> | integer[], character> => any;
type `setType<-.default` <integer[], character> => any;
type `setType<-.how` <class<`how`>, character> => any;
type `setType<-.Plots` <class<`Plots`> | class<`Within`>, character> => any;
type `setType<-.Within` <class<`Plots`> | class<`Within`>, character> => any;
type `setWithin<-` <class<`how`> | integer[], class<`Within`>> => any;
type `setWithin<-.default` <integer[], class<`Within`>> => any;
type `setWithin<-.how` <class<`how`>, class<`Within`>> => class<`how`>;
type `shuffle` <character[] | class<`data.frame`> | class<`factor`> | class<`matrix`> | double | integer[], class<`how`>> => integer[];
type `shuffleFree` <double | integer[], double> => integer[];
type `shuffleGrid` <double, double, logical, double | null, double | null, null | logical[]> => double[];
type `shuffleNoStrata` <any, class<`how`>> => double[];
type `shuffleSeries` <integer[], logical, integer | null, logical | null> => integer[];
type `shuffleSet` <double | character[] | class<`data.frame`> | class<`factor`> | class<`matrix`> | integer[], any, class<`how`>, logical, logical> => class<`matrix`, `permutationMatrix`>;
type `shuffleStrata` <class<`factor`>, character, any, null, any, any, any, null> => any;
type `summary.allPerms` <class<`allPerms`, `matrix`, `permutationMatrix`>, ...> => class<`summary.allPerms`>;
type `update.how` <class<`how`>, ..., logical> => class<`how`>;
type `update.Plots` <class<`Plots`>, ..., logical> => class<`Plots`>;
type `Within` <character[], logical, logical, null | double, null | double> => class<`Within`>;
