type `::` <character[], character, null, character, double, null | character, character[], null | character, null, null, character, character> => character[];
type `abbreviation_internal` <^character[], null> => ^character[];
type `filter` <character[]> => logical[];
type `FUN` <null | character[]> => null | character[] | logical[];
type `parse1_pat_cap_smalls` <^character[]> => ^character[];
type `parse2_pat_digits` <^character[]> => ^character[];
type `parse3_pat_caps` <^character[]> => ^character[];
type `parse4_pat_cap` <^character[]> => ^character[];
type `parse5_pat_non_alnums` <^character[]> => ^character[];
type `parse6_mark_digits` <character[]> => character[];
type `parsing_option_1` <^character[], character, character> => ^character[];
type `preprocess_internal` <^character[], character> => ^character[];
type `replace_special_characters_internal` <character[], character, symbol> => character[];
type `to_parsed_case_internal` <^character[], double, character, null, character> => ^character[];
type `to_any_case` <^character[], character, null, character | symbol, double | symbol, null | symbol, character, null | symbol, null, null, character, character> => ^character[];
type `to_sentence_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `random_case` <^character[]> => character[];
type `to_lower_camel_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_lower_upper_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_mixed_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_parsed_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_random_case` <^character[], null, character, double, null, character, null, null, null, character, character> => character[];
type `to_screaming_snake_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_snake_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_swap_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_title_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_upper_camel_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
type `to_upper_lower_case` <^character[], null, character, double, null, character, null, null, null, character, character> => ^character[];
