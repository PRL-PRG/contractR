type `AICc` <class<`logLik`> | class<`glm`, `lm`> | class<`mle2`>, ..., integer, double> => double | <class<`logLik`>, ..., integer, double> => double;
type `AICctab` <..., any> => class<`ICtab`>;
type `AICtab` <..., any> => class<`ICtab`>;
type `anova` <class<`mle2`>, ...> => class<`anova`>;
type `as.data.frame.profile.mle2` <class<`profile.mle2`>, null, logical, ...> => class<`data.frame`>;
type `calc_mle2_function` <class<`formula`>, null | list<class<`formula`>>, any, list<double[]> | list<double | null>, null, logical, class<`data.frame`>, any> => list<any>;
type `call.to.char` <class<`call`> | class<`formula`> | class<`name`> | double> => character;
type `dnorm_n` <double[], double, logical> => double[];
type `formula` <class<`mle2`>, ...> => class<`formula`>;
type `get_all_trange` <double[], class<`function`>, double[], double[], double, ...> => class<`matrix`>;
type `get.mnames` <class<`call`>> => character[];
type `gfun` <class<`mle2`>, class<`data.frame`> | null | list<class<`factor`> | double[]> | character, character[], any, character> => (class<`matrix`> | double[]);
type `ICtab` <..., character, logical, logical, logical, logical, logical, double | null> => class<`ICtab`>;
type `mkpar` <double[], double[], integer[]> => double[];
type `mle2` <class<`formula`> | class<`function`>, any, any, any, null | list<double>, class<`data.frame`> | null | list<double[]> | list<integer[] | double>, null, logical> => any;
type `mle2.options` <...> => character;
type `namedrop` <double[] | list<any> | null | pairlist> => (double[] | list<any> | null | pairlist);
type `parnames` <class<`function`>> => (character[] | null);
type `parnames<-` <class<`function`>, character[]> => class<`function`>;
type `plot.slice` <class<`slice`>, ...> => class<`trellis`>;
type `pop_pred_samp` <class<`mle2`>, double, any, logical, logical, logical, null, double> => class<`matrix`>;
type `predict` <class<`mle2`>, ...> => (class<`matrix`> | double);
type `print.ICtab` <class<`ICtab`>, ..., double> => class<`matrix`>;
type `proffun` <class<`mle2`>, integer[] | character, double, double, double, double, logical, logical> => (class<`mle2`> | list<class<`summary.mle2`> | list<class<`data.frame`> | list<character>>> | list<class<`summary.mle2`> | list<class<`data.frame`> | null | list<character>>>);
type `qAIC` <class<`glm`, `lm`>, ..., double, double> => double | <class<`glm`, `lm`> | class<`logLik`>, ..., double, double> => double | <class<`logLik`>, ..., double, double> => double;
type `qAICc` <class<`glm`, `lm`> | class<`mle2`> | class<`logLik`>, ..., double, double, double> => (double | class<`data.frame`>) | <class<`glm`, `lm`>, ..., double, double, double> => double | <class<`mle2`>, ..., double, double, double> => (double | class<`data.frame`>) | <class<`logLik`>, ..., double, double, double> => double;
type `relist2` <double[], list<any> | double[]> => list<any>;
type `residuals` <class<`mle2`>, ...> => double[];
type `sbinom` <double | null, double | null> => (list<character | double | null> | list<character | null>);
type `simulate` <class<`mle2`>, double, null, ...> => double[];
type `slice0` <double[], class<`function`>, double, double[] | null, ...> => class<`slice`>;
type `slice1D` <double[], class<`function`>, double, double, double, logical, null, ...> => class<`slice`>;
type `slice2D` <double[], class<`function`>, double, double, double, double, logical, null> => class<`slice`>;
type `slice.mle2` <class<`mle2`>, ...> => class<`slice`>;
type `slices_apply` <list<list<null | class<`data.frame`>>>, class<`function`>, ...> => list<list<null | class<`data.frame`>>>;
type `slicetrans` <double[], double[], class<`function`>, double, double, double, double> => class<`slice`>;
type `snbinom` <double, any, class<`matrix`> | double> => list<any>;
type `snorm` <class<`matrix`>, double> => list<character | class<`matrix`> | double>;
type `splom.slice` <class<`slice`>, any, logical, null, null, null, double, logical> => class<`trellis`>;
type `spois` <double> => list<character | double | null>;
type `strwrapx` <character[], integer, double, double, character, logical, character, character> => character[];
type `xyplot.slice` <class<`slice`>, any, character, logical, ...> => class<`trellis`>;
