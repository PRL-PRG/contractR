type `.local` <null | language | double | null | struct<> | struct<`g`:integer[], `x`:double[]> | character | integer[] | symbol, null | null | integer[] | character | double, null | struct<`c`:double> | character | struct<> | double[], null | logical | null, null | null, logical, logical, character, double, character, double, character, double, character[] | tuple<language, language>, character, logical, logical, logical> => null | language | ^double[];
type `AIC` <struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`y`:double[], `x`:double[]>> | null, double> => struct<`AIC`:double[], `df`:double[]> | double;
type `AICc` <double, null, integer, double> => double;
type `AICctab` <struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`x`:integer[], `y`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null>, null> => struct<`dAICc`:double[], `df`:double[], `weight`:double[]> | struct<`dAICc`:double[], `df`:integer[]>;
type `AICtab` <struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`x`:integer[], `y`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null>, character[] | null> => struct<`dAIC`:double[], `df`:double[]> | struct<`dAIC`:^double[], `df`:integer[], `weight`:^double[]>;
type `anova` < > => ^double[];
type `as.data.frame.profile.mle2` <null, logical, null> => struct<`param`:integer[], `z`:double[], `par.vals.a`:double[], `par.vals.b`:double[], `focal`:double[]>;
type `calc_mle2_function` <language, null | tuple<language>, null, struct<`a`:double, `b`:double> | struct<`c`:double> | struct<`i`:double[], `slope`:double[], `sd`:double> | struct<`interc`:double> | struct<`L`:double> | struct<`llambda`:double, `alpha`:double> | struct<`logitp`:double> | struct<`loglam`:double> | struct<`loglambda`:double> | struct<`lymax`:double, `lhalf`:double> | struct<`mu`:double, `sd`:double> | struct<`p`:double> | struct<`prob`:double, `theta`:double> | struct<`scale`:double, `shape`:double> | struct<`sizep1`:double, `sizep2`:double, `sizep3`:double> | struct<`slope`:double> | struct<`xhalf`:double> | struct<`ymean`:double>, null, logical, struct<`f`:integer[], `x`:double[], `y`:double[]>, symbol> => struct<`fn`:any => any, `start`:struct<`a`:double, `b`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`b`:double, `a`:double, `s`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, ``:language, `sd`:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`c`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:symbol, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`i.WAVE_NONn`:double, `i.WAVE_NONw`:double, `slope.WAVE_NONn`:double, `slope.WAVE_NONw`:double, `sd`:double>, `parameters`:tuple<language, language>, `fdata`:struct<`vars`:character[], `mmats`:struct<`i`:^double[], `slope`:^double[]>, `vpos`:struct<`i`:integer[], `slope`:integer[]>, `arglist1`:struct<`x`:symbol, ``:language, ``:symbol, `log`:logical>, `ddistn`:character, `parameters`:tuple<language, language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`interc`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`L`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:symbol, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`llambda.(Intercept)`:double, `llambda.groupAL-Rat5th`:double, `llambda.groupAL-RatOv`:double, `llambda.groupR`:double, `llambda.groupR-ALat5th`:double, `alpha.(Intercept)`:double, `alpha.groupAL-Rat5th`:double, `alpha.groupAL-RatOv`:double, `alpha.groupR`:double, `alpha.groupR-ALat5th`:double>, `parameters`:tuple<language, language>, `fdata`:struct<`vars`:character[], `mmats`:struct<`llambda`:^double[], `alpha`:^double[]>, `vpos`:struct<`llambda`:integer[], `alpha`:integer[]>, `arglist1`:struct<`x`:symbol, `scale`:language, `shape`:symbol, `log`:logical>, `ddistn`:character, `parameters`:tuple<language, language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`llambda.(Intercept)`:double, `llambda.groupAL-Rat5th`:double, `llambda.groupAL-RatOv`:double, `llambda.groupR`:double, `llambda.groupR-ALat5th`:double, `alpha`:double>, `parameters`:tuple<language>, `fdata`:struct<`vars`:character, `mmats`:struct<`llambda`:^double[]>, `vpos`:struct<`llambda`:integer[]>, `arglist1`:struct<`x`:symbol, `scale`:language, `shape`:symbol, `log`:logical>, `ddistn`:character, `parameters`:tuple<language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`llambda`:double, `alpha`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `scale`:language, `shape`:symbol, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`logitp`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `prob`:language, `size`:double, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`loglam`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, ``:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`loglambda`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`lymax.(Intercept)`:double, `lymax.gb`:double, `lhalf`:double, `logk`:double>, `parameters`:tuple<language>, `fdata`:struct<`vars`:character, `mmats`:struct<`lymax`:^double[]>, `vpos`:struct<`lymax`:integer[]>, `arglist1`:struct<`x`:symbol, `mu`:language, `size`:language, `log`:logical>, `ddistn`:character, `parameters`:tuple<language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`lymax`:double, `lhalf`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`mu.(Intercept)`:double, `mu.WAVE_NONw`:double, `mu.log(DBH)`:double, `mu.WAVE_NONw:log(DBH)`:double, `sd`:double>, `parameters`:tuple<language>, `fdata`:struct<`vars`:character, `mmats`:struct<`mu`:^double[]>, `vpos`:struct<`mu`:integer[]>, `arglist1`:struct<`x`:symbol, ``:symbol, ``:symbol, `log`:logical>, `ddistn`:character, `parameters`:tuple<language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`p`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `prob`:symbol, `size`:double, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`prob.dist`:double, `theta.dist`:double>, `parameters`:tuple<language, language>, `fdata`:struct<`vars`:character[], `mmats`:struct<`prob`:^double[], `theta`:^double[]>, `vpos`:struct<`prob`:integer, `theta`:integer>, `arglist1`:struct<`x`:symbol, ``:symbol, `size`:symbol, ``:symbol, `log`:logical>, `ddistn`:character, `parameters`:tuple<language, language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`prob`:double, `theta`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, ``:symbol, ``:symbol, `size`:symbol, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`scale.(Intercept)`:double, `scale.fexper2`:double, `scale.fexper3`:double, `scale.fexper4`:double, `scale.fexper5`:double, `scale.qual`:double, `scale.density`:double, `scale.qual:density`:double, `shape`:double>, `parameters`:tuple<language>, `fdata`:struct<`vars`:character, `mmats`:struct<`scale`:^double[]>, `vpos`:struct<`scale`:integer[]>, `arglist1`:struct<`x`:language, ``:language, ``:language, `log`:logical>, `ddistn`:character, `parameters`:tuple<language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`sizep1`:double, `sizep2`:double, `sizep3`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `prob`:language, `size`:double, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`slope`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`xhalf`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character> | struct<`fn`:any => any, `start`:struct<`ymax.(Intercept)`:double, `ymax.f2`:double, `xhalf.(Intercept)`:double, `xhalf.f2`:double>, `parameters`:tuple<language, language>, `fdata`:struct<`vars`:character[], `mmats`:struct<`ymax`:^double[], `xhalf`:^double[]>, `vpos`:struct<`ymax`:integer[], `xhalf`:integer[]>, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:tuple<language, language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`ymax.(Intercept)`:double, `ymax.f2`:double, `xhalf`:double>, `parameters`:tuple<language>, `fdata`:struct<`vars`:character, `mmats`:struct<`ymax`:^double[]>, `vpos`:struct<`ymax`:integer[]>, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:tuple<language>>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`ymax`:double, `xhalf`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:language, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character[]> | struct<`fn`:any => any, `start`:struct<`ymean`:double>, `parameters`:null, `fdata`:struct<`vars`:character[], `mmats`:null, `vpos`:null, `arglist1`:struct<`x`:symbol, `lambda`:symbol, `log`:logical>, `ddistn`:character, `parameters`:null>, `parnames`:character>;
type `call.to.char` <double | language | symbol> => character;
type `coef` <null | logical> => double[];
type `confint` <null | integer[], double, null | character | logical> => ^double[];
type `critfun` <double> => double;
type `f` <double[]> => double;
type `filter` <character[]> => logical[];
type `fix_order` <null | double[], character, null | language | double> => null | double[];
type `fn` <double[]> => double;
type `formula` <null> => language;
type `fun` <double[]> => double;
type `FUN` <null | character[] | tuple<null, struct<`var1`:integer[], `var2`:integer[], `x`:double[], `y`:double[], `z`:double[]>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`counts`:double[], `outcome`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`outcome`:character>, `xlevels`:struct<`outcome`:character[]>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`counts`:double[], `outcome`:integer[], `treatment`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`outcome`:character, `treatment`:character>, `xlevels`:struct<`outcome`:character[], `treatment`:character[]>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:integer[], `poly(x# 2)`:^double[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`x`:integer[], `y`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`counts`:double[], `treatment`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`treatment`:character>, `xlevels`:struct<`treatment`:character[]>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:integer[], `x`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`x`:integer[], `y`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>> | struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`counts`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null> | struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`x`:integer[], `y`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null> | struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`z`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null> | struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:null, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`z`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null> | struct<> | double[] | language, null | struct<`ymax`:double, `xhalf`:double>, double | character, double | character, null | double, struct<>, null, logical, logical, logical, null, null, logical, null, logical, logical, logical, null, null> => null | double[] | character[] | tuple<null, double[]> | tuple<character[]> | struct<>;
type `func` <double[]> => double;
type `get_all_trange` <double[], any => any, double[], double[], double, null> => ^double[];
type `get.mnames` <language> => character[];
type `ICtab` <struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`x`:integer[], `y`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`counts`:double[], `outcome`:integer[], `treatment`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`outcome`:character, `treatment`:character>, `xlevels`:struct<`outcome`:character[], `treatment`:character[]>>, character, logical, logical, logical, logical, logical, null | double, double, character[] | null, double> => struct<`dAIC`:double[], `df`:double[]> | struct<`dAIC`:^double[], `df`:integer[], `weight`:^double[]> | struct<`dAICc`:double[], `df`:double[], `weight`:double[]> | struct<`dAICc`:double[], `df`:integer[]> | struct<`dqAIC`:double[], `df`:integer[]> | struct<`dqAICc`:double[], `df`:integer[]>;
type `invstepfun` <double> => double;
type `ll` <null> => double;
type `logLik` <null> => double;
type `minuslogl` <double, double, double, double, double, double, double, double, double, double> => double;
type `mkpar` <double[], double[], integer[]> => double[];
type `mle2` <null | struct<`lymax`:double, `lxhalf`:double> | double[] | struct<`x`:double> | struct<`a`:double, `b`:double> | struct<`a`:double, `h`:double> | struct<`rate`:double> | struct<`lymax`:double, `lhalf`:double> | struct<`x0`:double, `lambda`:double, `sigma`:double, `alpha`:double> | struct<`loglam`:double> | struct<`prob`:double, `theta`:double> | struct<`i1`:double, `i2`:double, `slope1`:double, `slope2`:double, `sigma`:double> | struct<`ymean`:double> | struct<`c`:double> | struct<`i`:double[], `slope`:double[], `sd`:double> | struct<`interc`:double> | struct<`L`:double> | struct<`llambda`:double, `alpha`:double> | struct<`logitp`:double> | struct<`loglambda`:double> | struct<`mu`:double, `sd`:double> | struct<`p`:double> | struct<`scale`:double, `shape`:double> | struct<`sizep1`:double, `sizep2`:double, `sizep3`:double> | struct<`slope`:double> | struct<`xhalf`:double>, null | character[], null | character, null | struct<`lxhalf`:double> | struct<`lymax`:double> | struct<`a`:double> | struct<`xhalf`:double> | struct<`ymax`:double> | struct<`x`:double> | struct<`b`:double> | struct<`h`:double> | struct<`rate`:double> | struct<`lhalf`:double> | struct<`lambda`:double> | struct<`loglam`:double> | struct<`ymean`:double>, null | struct<`X`:double[]> | struct<> | struct<`times`:integer[], `N`:double, `dat`:integer[]> | struct<`size`:double> | struct<`N`:integer[], `k`:integer[]>, null, logical, logical, logical, null | language | tuple<language> | double, null, logical, null, logical, logical, logical, null | any => any, null | any => any> => any => any | language;
type `mle2.options` <character> => character;
type `namedrop` <null | double[] | tuple<> | tuple<double[]> | pairlist | struct<``:double[]> | struct<`a`:double> | struct<`b`:double> | struct<`c`:double> | struct<`h`:double> | struct<`i.WAVE_NONn`:double, `i.WAVE_NONw`:double, `slope.WAVE_NONn`:double, `slope.WAVE_NONw`:double, `sd`:double> | struct<`i1`:double, `i2`:double, `slope1`:double, `slope2`:double, `sigma`:double> | struct<`interc`:double> | struct<`k1`:double, `k2`:double, `k3`:double, `mu1`:double, `mu2`:double, `mu3`:double> | struct<`L`:double> | struct<`lambda`:double> | struct<`lhalf`:double> | struct<`llambda.(Intercept)`:double, `llambda.groupAL-Rat5th`:double, `llambda.groupAL-RatOv`:double, `llambda.groupR`:double, `llambda.groupR-ALat5th`:double, `alpha.(Intercept)`:double, `alpha.groupAL-Rat5th`:double, `alpha.groupAL-RatOv`:double, `alpha.groupR`:double, `alpha.groupR-ALat5th`:double> | struct<`llambda.(Intercept)`:double, `llambda.groupAL-Rat5th`:double, `llambda.groupAL-RatOv`:double, `llambda.groupR`:double, `llambda.groupR-ALat5th`:double, `alpha`:double> | struct<`llambda`:double, `alpha.(Intercept)`:double, `alpha.groupAL-Rat5th`:double, `alpha.groupAL-RatOv`:double, `alpha.groupR`:double, `alpha.groupR-ALat5th`:double> | struct<`llambda`:double, `alpha`:double> | struct<`logitp`:double> | struct<`loglam`:double> | struct<`loglambda`:double> | struct<`lxhalf`:double> | struct<`lymax`:double> | struct<`mu.(Intercept)`:double, `mu.WAVE_NONw`:double, `mu.log(DBH)`:double, `mu.WAVE_NONw:log(DBH)`:double, `sd`:double> | struct<`p`:double> | struct<`prob.dist`:double, `theta.dist`:double> | struct<`prob`:double, `theta`:double> | struct<`rate`:double> | struct<`scale.(Intercept)`:double, `scale.fexper2`:double, `scale.fexper3`:double, `scale.fexper4`:double, `scale.fexper5`:double, `scale.qual`:double, `scale.density`:double, `scale.qual:density`:double, `shape`:double> | struct<`sizep1`:double, `sizep2`:double, `sizep3`:double> | struct<`slope`:double> | struct<`x`:double> | struct<`x0`:double, `sigma`:double, `alpha`:double> | struct<`xhalf`:double> | struct<`ymax.(Intercept)`:double, `ymax.f2`:double, `xhalf.(Intercept)`:double, `xhalf.f2`:double> | struct<`ymax`:double> | struct<`ymean`:double>> => null | double[] | tuple<> | tuple<double[]> | pairlist | struct<``:double[]> | struct<`a`:double> | struct<`b`:double> | struct<`c`:double> | struct<`h`:double> | struct<`i.WAVE_NONn`:double, `i.WAVE_NONw`:double, `slope.WAVE_NONn`:double, `slope.WAVE_NONw`:double, `sd`:double> | struct<`i1`:double, `i2`:double, `slope1`:double, `slope2`:double, `sigma`:double> | struct<`interc`:double> | struct<`k1`:double, `k2`:double, `k3`:double, `mu1`:double, `mu2`:double, `mu3`:double> | struct<`L`:double> | struct<`lambda`:double> | struct<`lhalf`:double> | struct<`llambda.(Intercept)`:double, `llambda.groupAL-Rat5th`:double, `llambda.groupAL-RatOv`:double, `llambda.groupR`:double, `llambda.groupR-ALat5th`:double, `alpha.(Intercept)`:double, `alpha.groupAL-Rat5th`:double, `alpha.groupAL-RatOv`:double, `alpha.groupR`:double, `alpha.groupR-ALat5th`:double> | struct<`llambda.(Intercept)`:double, `llambda.groupAL-Rat5th`:double, `llambda.groupAL-RatOv`:double, `llambda.groupR`:double, `llambda.groupR-ALat5th`:double, `alpha`:double> | struct<`llambda`:double, `alpha.(Intercept)`:double, `alpha.groupAL-Rat5th`:double, `alpha.groupAL-RatOv`:double, `alpha.groupR`:double, `alpha.groupR-ALat5th`:double> | struct<`llambda`:double, `alpha`:double> | struct<`logitp`:double> | struct<`loglam`:double> | struct<`loglambda`:double> | struct<`lxhalf`:double> | struct<`lymax`:double> | struct<`mu.(Intercept)`:double, `mu.WAVE_NONw`:double, `mu.log(DBH)`:double, `mu.WAVE_NONw:log(DBH)`:double, `sd`:double> | struct<`p`:double> | struct<`prob.dist`:double, `theta.dist`:double> | struct<`prob`:double, `theta`:double> | struct<`rate`:double> | struct<`scale.(Intercept)`:double, `scale.fexper2`:double, `scale.fexper3`:double, `scale.fexper4`:double, `scale.fexper5`:double, `scale.qual`:double, `scale.density`:double, `scale.qual:density`:double, `shape`:double> | struct<`sizep1`:double, `sizep2`:double, `sizep3`:double> | struct<`slope`:double> | struct<`x`:double> | struct<`x0`:double, `sigma`:double, `alpha`:double> | struct<`xhalf`:double> | struct<`ymax.(Intercept)`:double, `ymax.f2`:double, `xhalf.(Intercept)`:double, `xhalf.f2`:double> | struct<`ymax`:double> | struct<`ymean`:double>;
type `objective` <double[]> => double;
type `objectivefunction` <double[]> => double;
type `parnames` <any => any> => null | character[];
type `parnames<-` <any => any, character[]> => any => any;
type `pf` <language> => character;
type `plot` <null, character[] | logical | null> => null;
type `plot.slice` <struct<`slices`:tuple<tuple<null, struct<`var1`:integer[], `var2`:integer[], `x`:double[], `y`:double[], `z`:double[]>>>, `ranges`:^double[], `params`:double[], `dim`:double> | struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>, struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `ranges`:^double[], `params`:double[], `dim`:double> | struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `params`:double[], `params2`:double[], `dim`:double>, null> => struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:null, `panel`:character, `page`:null, `layout`:null, `skip`:logical, `strip`:logical, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:null, `xlab.default`:character, `ylab.default`:null, `xlab.top`:null, `ylab.right`:null, `main`:null, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer>, `perm.cond`:integer, `condlevels`:tuple<character>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`z`:struct<`lymax`:double[], `lhalf`:double[]>, `panel`:character, `panel.subscripts`:logical, `groups`:null, `varnames`:character[], `pscales`:double, `lower.panel`:any => any, `diag.panel`:any => any, `upper.panel`:any => any>, `panel.args`:tuple<struct<`subscripts`:integer[]>>, `packet.sizes`:double, `x.limits`:double[], `y.limits`:double[], `x.used.at`:null, `y.used.at`:null, `x.num.limit`:null, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null> | struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:null, `panel`:any => any, `page`:null, `layout`:null, `skip`:logical, `strip`:character, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:character, `xlab.default`:character, `ylab.default`:character, `xlab.top`:null, `ylab.right`:null, `main`:null, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer[]>, `perm.cond`:integer, `condlevels`:struct<`var1`:character[]>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`type`:character>, `panel.args`:tuple<struct<`x`:double[], `y`:double[]>, struct<`x`:double[], `y`:double[]>>, `packet.sizes`:double[], `x.limits`:tuple<double[], double[]>, `y.limits`:double[], `x.used.at`:tuple<null, null>, `y.used.at`:null, `x.num.limit`:tuple<null, null>, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null> | struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:null, `panel`:any => any, `page`:null, `layout`:null, `skip`:logical, `strip`:character, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:character, `xlab.default`:character, `ylab.default`:character, `xlab.top`:null, `ylab.right`:null, `main`:null, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer>, `perm.cond`:integer, `condlevels`:struct<`var1`:character>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`type`:character>, `panel.args`:tuple<struct<`x`:double[], `y`:double[]>>, `packet.sizes`:double, `x.limits`:tuple<double[]>, `y.limits`:double[], `x.used.at`:tuple<null>, `y.used.at`:null, `x.num.limit`:tuple<null>, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null>;
type `plussplit` <character[]> => tuple<character, character, character, character[]> | list<character[]>;
type `predback` <double[]> => ^double[];
type `predict` <struct<`x`:double[], `f`:integer[]> | null | struct<`g`:integer[], `x`:double[]> | character> => ^double[];
type `print.ICtab` <struct<`dAICc`:double[], `df`:double[], `weight`:double[]>, null, double> => ^character[];
type `profile` < > => character | double[] | null;
type `qAIC` <double | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`counts`:double[], `outcome`:integer[], `treatment`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`outcome`:character, `treatment`:character>, `xlevels`:struct<`outcome`:character[], `treatment`:character[]>>, symbol | null, double, double> => double;
type `qAICc` <double | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`counts`:double[], `outcome`:integer[], `treatment`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`outcome`:character, `treatment`:character>, `xlevels`:struct<`outcome`:character[], `treatment`:character[]>> | struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`z`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null>, null, double, double, double> => double;
type `relist2` <integer[], struct<`b`:double, `c`:integer[], `d`:^integer[]>> => struct<`b`:integer, `c`:integer[], `d`:^integer[]>;
type `residuals` <character | null> => double[];
type `sbinom` <null | double, null | double> => struct<`title`:character, `prob`:double, `size`:double, `mean`:double, `median`:double, `mode`:null, `variance`:double, `sd`:double, `formula`:character> | struct<`title`:character, `prob`:null, `size`:null, `mean`:null, `median`:null, `mode`:null, `variance`:null, `sd`:null, `formula`:character>;
type `simulate` <double, null, null> => double[];
type `slice.mle2` <double[]> => struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `params`:double[], `params2`:double[], `dim`:double> | struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>, struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `ranges`:^double[], `params`:double[], `dim`:double> | struct<`slices`:tuple<tuple<null, struct<`var1`:integer[], `var2`:integer[], `x`:double[], `y`:double[], `z`:double[]>>>, `ranges`:^double[], `params`:double[], `dim`:double>;
type `slice0` <double[], any => any, double, null | double[], null | logical> => struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `params`:double[], `params2`:double[], `dim`:double> | struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>, struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `ranges`:^double[], `params`:double[], `dim`:double> | struct<`slices`:tuple<tuple<null, struct<`var1`:integer[], `var2`:integer[], `x`:double[], `y`:double[], `z`:double[]>>>, `ranges`:^double[], `params`:double[], `dim`:double>;
type `slice1D` <double[], any => any, double, double, double, logical, null, null> => struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>, struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `ranges`:^double[], `params`:double[], `dim`:double>;
type `slice2D` <double[], any => any, double, double, double, double, logical, null, null> => struct<`slices`:tuple<tuple<null, struct<`var1`:integer[], `var2`:integer[], `x`:double[], `y`:double[], `z`:double[]>>>, `ranges`:^double[], `params`:double[], `dim`:double>;
type `slices_apply` <tuple<tuple<null, struct<`var1`:integer[], `var2`:integer[], `x`:double[], `y`:double[], `z`:double[]>>>, any => any, null> => tuple<tuple<null, struct<`var1`:integer[], `var2`:integer[], `x`:double[], `y`:double[], `z`:double[]>>>;
type `slicetrans` <double[], double[], any => any, double, double, double, double> => struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `params`:double[], `params2`:double[], `dim`:double>;
type `snbinom` <double, null, ^double[]> => struct<`title`:character, `prob`:^double[], `mu`:^double[], `size`:double, `mean`:^double[], `median`:^double[], `mode`:null, `variance`:^double[], `sd`:^double[]>;
type `snorm` <^double[], double> => struct<`title`:character, `mean`:^double[], `sd`:double, `median`:^double[], `mode`:^double[], `variance`:double, `sd`:double>;
type `splom.slice` <struct<`slices`:tuple<tuple<null, struct<`var1`:integer[], `var2`:integer[], `x`:double[], `y`:double[], `z`:double[]>>>, `ranges`:^double[], `params`:double[], `dim`:double>, null, logical, null, null, null, double, logical, null> => struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:null, `panel`:character, `page`:null, `layout`:null, `skip`:logical, `strip`:logical, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:null, `xlab.default`:character, `ylab.default`:null, `xlab.top`:null, `ylab.right`:null, `main`:null, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer>, `perm.cond`:integer, `condlevels`:tuple<character>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`z`:struct<`lymax`:double[], `lhalf`:double[]>, `panel`:character, `panel.subscripts`:logical, `groups`:null, `varnames`:character[], `pscales`:double, `lower.panel`:any => any, `diag.panel`:any => any, `upper.panel`:any => any>, `panel.args`:tuple<struct<`subscripts`:integer[]>>, `packet.sizes`:double, `x.limits`:double[], `y.limits`:double[], `x.used.at`:null, `y.used.at`:null, `x.num.limit`:null, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null>;
type `spois` <double> => struct<`title`:character, `lambda`:double, `mean`:double, `median`:double, `mode`:null, `variance`:double, `sd`:double>;
type `stepfun` <double> => double;
type `strwrapx` <character[], integer, double, double, character, logical, character, character> => character[];
type `summary` < > => null;
type `ufn` <double[]> => double;
type `update` < > => character | struct<> | language;
type `valf` <null | double[]> => logical;
type `vcov` <null> => ^double[];
type `wfun` <character> => character;
type `xf` <double[]> => double[];
type `xyplot.slice` <struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>, struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `ranges`:^double[], `params`:double[], `dim`:double> | struct<`slices`:tuple<struct<`var1`:integer[], `x`:double[], `z`:double[]>>, `params`:double[], `params2`:double[], `dim`:double>, null, character, logical, null> => struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:null, `panel`:any => any, `page`:null, `layout`:null, `skip`:logical, `strip`:character, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:character, `xlab.default`:character, `ylab.default`:character, `xlab.top`:null, `ylab.right`:null, `main`:null, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer[]>, `perm.cond`:integer, `condlevels`:struct<`var1`:character[]>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`type`:character>, `panel.args`:tuple<struct<`x`:double[], `y`:double[]>, struct<`x`:double[], `y`:double[]>>, `packet.sizes`:double[], `x.limits`:tuple<double[], double[]>, `y.limits`:double[], `x.used.at`:tuple<null, null>, `y.used.at`:null, `x.num.limit`:tuple<null, null>, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null> | struct<`formula`:language, `as.table`:logical, `aspect.fill`:logical, `legend`:null, `panel`:any => any, `page`:null, `layout`:null, `skip`:logical, `strip`:character, `strip.left`:logical, `xscale.components`:any => any, `yscale.components`:any => any, `axis`:any => any, `xlab`:character, `ylab`:character, `xlab.default`:character, `ylab.default`:character, `xlab.top`:null, `ylab.right`:null, `main`:null, `sub`:null, `x.between`:double, `y.between`:double, `par.settings`:null, `plot.args`:null, `lattice.options`:null, `par.strip.text`:null, `index.cond`:tuple<integer>, `perm.cond`:integer, `condlevels`:struct<`var1`:character>, `call`:language, `x.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `y.scales`:struct<`draw`:logical, `axs`:character, `tck`:double[], `tick.number`:double, `at`:logical, `labels`:logical, `log`:logical, `alternating`:double[], `relation`:character, `abbreviate`:logical, `minlength`:double, `limits`:null, `format`:null, `equispaced.log`:logical, `lty`:logical, `lwd`:logical, `cex`:logical[], `rot`:logical[], `col`:logical, `col.line`:logical, `alpha`:logical, `alpha.line`:logical, `font`:logical, `fontfamily`:logical, `fontface`:logical, `lineheight`:logical>, `panel.args.common`:struct<`type`:character>, `panel.args`:tuple<struct<`x`:double[], `y`:double[]>>, `packet.sizes`:double, `x.limits`:tuple<double[]>, `y.limits`:double[], `x.used.at`:tuple<null>, `y.used.at`:null, `x.num.limit`:tuple<null>, `y.num.limit`:null, `aspect.ratio`:double, `prepanel.default`:character, `prepanel`:null>;
