type `AICc` <class<`logLik`> | class<`glm`, `lm`>, ..., integer, double> => double | <class<`logLik`>, ..., integer, double> => double;
type `AICctab` <..., any> => class<`ICtab`>;
type `AICtab` <..., any> => class<`ICtab`>;
type `as.data.frame.profile.mle2` <class<`profile.mle2`>, null, logical, ...> => class<`data.frame`>;
type `calc_mle2_function` <class<`formula`>, null, any, list<double>, null, logical, class<`data.frame`>, any> => list<any>;
type `call.to.char` <class<`formula`>> => character;
type `dnorm_n` <double[], double, logical> => double[];
type `filter` <character[]> => logical[];
type `fix_order` <double | null, character, any> => (double | null);
type `fn` <double[]> => double;
type `FUN` <class<`logLik`> | class<`glm`, `lm`>, ..., integer, double> => double | <class<`glm`, `lm`>> => double | <class<`mle2`>, ...> => class<`logLik`> | <class<`glm`, `lm`>, ..., integer, double> => double | <class<`glm`, `lm`>> => double;
type `func` <double[]> => double;
type `get.mnames` <class<`call`>> => character[];
type `ICtab` <..., character, logical, logical, logical, logical, logical, null, double, character[], double> => class<`ICtab`>;
type `ll` <class<`mle2`>, ...> => class<`logLik`>;
type `.local` <class<`mle2`>, logical, ...> => class<`summary.mle2`>;
type `minuslogl` <double> => double | <double, double> => double;
type `mle2` <class<`function`> | class<`formula`>, any, any, any, null | list<double>, null | class<`data.frame`>, null, logical, logical, logical, null, null> => class<`mle2`>;
type `mle2.options` <...> => character;
type `namedrop` <double[] | null | pairlist | list<double>> => (double[] | null | pairlist | list<double>);
type `onestep` <double, any> => double;
type `parnames` <class<`function`>> => null;
type `pf` <class<`formula`>> => character;
type `print.ICtab` <class<`ICtab`>, ..., double> => class<`matrix`>;
type `proffun` <class<`mle2`>, integer[], double, double, double, double, logical, logical, any, double, logical, any> => list<class<`summary.mle2`> | list<class<`data.frame`> | list<character>>>;
type `profile` <class<`mle2`>, ...> => class<`profile.mle2`>;
type `relist2` <double[], list<double>> => list<double>;
type `summary` <class<`mle2`>, ...> => class<`summary.mle2`>;
type `valf` <null> => logical;
type `wfun` <character> => character;
type `xf` <double> => double[];
