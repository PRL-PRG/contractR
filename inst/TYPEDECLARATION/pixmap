type `.local` <symbol | double[], character | double[], character | double, logical, double, null | character | logical> => null;
type `asMethod` <logical> => symbol | character;
type `filter` <character[]> => logical[];
type `pixmap` <null | double, null | double, null | double[], logical, null> => ^double[] | symbol;
type `pixmapGrey` <null | integer> => ^double[];
type `plot` <null, null | character | double> => null;
type `pm.getc` <integer> => character;
type `pm.getuint` <integer> => double;
type `pm.readmagicnumber` <integer> => struct<`type`:character, `ascii`:logical>;
type `read.pnm` <null> => character;
type `read.pnmdata` <struct<`nc`:double, `nr`:double, `maxval`:double, `type`:character, `datastart`:double, `ascii`:logical>, null> => integer;
type `read.pnmhead` <integer> => struct<`nc`:double, `nr`:double, `maxval`:double, `type`:character, `datastart`:double, `ascii`:logical>;
type `.getCellres` <double[], logical, double[]> => double[];
type `[` <integer[] | null, null, logical> => integer[] | null;
type `addChannels` < > => null | double[];
type `addlogo` < > => double[];
type `as.integer.bytes` <integer[]> => ^integer[];
type `getChannels` <character[]> => ^double[];
type `pixmapIndexed` <character[] | any => any, null | double> => ^double[];
type `pixmapRGB` <double> => double[];
type `write.pnm` <character, logical, null, double> => integer;
