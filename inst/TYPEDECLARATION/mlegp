type `anyReps` <class<`matrix`>> => logical;
type `calcCorOneObs` <class<`matrix`>, double[], double[], double[]> => class<`matrix`>;
type `calcLogLikeManual` <list<class<`matrix`> | double | character | class<`matrix`> | double[] | character[] | class<`matrix`> | character | double[]>> => class<`matrix`>;
type `calcPredictionErrorCV` <class<`gp`> | list<class<`matrix`> | double | character | class<`matrix`> | double[] | character[] | class<`matrix`> | character | double[]>, class<`matrix`>, double[], class<`matrix`>, double> => class<`matrix`>;
type `calcVarMatrix` <class<`matrix`>, double[], double[], double, double, double, integer> => class<`matrix`>;
type `createGP` <class<`matrix`>, class<`matrix`>, double[], double[], double, double, class<`matrix`> | double[], character[], double> => class<`gp`>;
type `createWindow` <integer> => list<integer[]>;
type `CV` <class<`gp`> | list<class<`matrix`> | double | character | class<`matrix`> | double[] | character[] | class<`matrix`> | character | double[]>, logical, logical> => class<`matrix`>;
type `estimateNugget` <class<`matrix`>, class<`matrix`>> => double;
type `filter` <character[]> => logical[];
type `FUN` <list<class<`matrix`> | double>, class<`matrix`>, any, double[] | null, double, any, any, double, double, double, double, double> => class<`gp`> | <class<`gp`>> => integer | <class<`gp`>> => integer;
type `gp.list` <..., null, class<`matrix`> | null, character[]> => class<`gp.list`>;
type `is.gp` <class<`gp`> | class<`gp.list`>> => logical;
type `is.gp.list` <class<`gp`> | class<`gp.list`>> => logical;
type `matchIndexes` <character[], character[]> => integer[];
type `mlegp` <class<`array`> | class<`matrix`> | double[], class<`array`> | double[] | class<`matrix`>, double, null | double[], double, double, null | character[], null, null, null | double, null, double> => (class<`gp`> | class<`gp.list`>);
type `numSingularValues` <class<`matrix`>, double> => double;
type `pcweights` <class<`matrix`>, double, double> => list<class<`matrix`>>;
type `plot.gp` <class<`gp`>, double, null, double, logical, ...> => null;
type `plot.gp.list` <class<`gp.list`>, double, logical, ...> => null;
type `plotObservedEffects` <class<`gp`> | class<`matrix`>, ...> => null;
type `plotObservedEffectsDefault` <class<`matrix`>, class<`array`>, ...> => null;
type `plotObservedEffects.gp` <class<`gp`>, integer[], ...> => null;
type `predict.gp` <class<`gp`>, class<`matrix`>, logical, ...> => class<`matrix`>;
type `predictMu` <class<`gp`> | list<class<`matrix`> | double | character | class<`matrix`> | double[] | character[] | class<`matrix`> | character | double[]>, any> => double;
type `predictNewYCV` <class<`gp`> | list<class<`matrix`> | double | character | class<`matrix`> | double[] | character[] | class<`matrix`> | character | double[]>, class<`matrix`>, double[], double[], double[], class<`matrix`>> => class<`matrix`>;
type `predictNewZ` <class<`gp`>, double> => class<`matrix`>;
type `print.gp` <class<`gp`>, ...> => null;
type `print.gp.list` <class<`gp.list`>, integer[] | null, ...> => null;
type `setGPNames` <class<`gp.list`>, character[]> => class<`gp.list`>;
type `setParams` <class<`gp.list`>, character> => class<`gp.list`>;
type `singularValueImportance` <class<`matrix`>> => class<`matrix`>;
type `summary.gp` <class<`gp`>, ...> => null;
type `summary.gp.list` <class<`gp.list`>, integer[] | null, ...> => null;
type `toParamIndexes` <character[] | integer[], any> => integer[];
type `uniqueSummary` <class<`matrix`> | double[], class<`matrix`> | double[]> => list<class<`matrix`> | double[] | class<`matrix`>>;
type `varPerReps` <class<`matrix`>, class<`matrix`>> => class<`matrix`>;
