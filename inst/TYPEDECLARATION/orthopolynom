type `chebyshev.c.inner.products` <double> => double[];
type `chebyshev.c.polynomials` <double, logical> => list<class<`polynomial`>>;
type `chebyshev.c.recurrences` <double, logical> => class<`data.frame`>;
type `chebyshev.c.weight` <double[]> => double[];
type `chebyshev.s.inner.products` <double> => double[];
type `chebyshev.s.polynomials` <double, logical> => list<class<`polynomial`>>;
type `chebyshev.s.recurrences` <double, logical> => class<`data.frame`>;
type `chebyshev.s.weight` <double[]> => double[];
type `chebyshev.t.inner.products` <double> => double[];
type `chebyshev.t.polynomials` <double, logical> => list<class<`polynomial`>>;
type `chebyshev.t.recurrences` <double, logical> => class<`data.frame`>;
type `chebyshev.t.weight` <double[]> => double[];
type `chebyshev.u.inner.products` <double> => double[];
type `chebyshev.u.polynomials` <double, logical> => list<class<`polynomial`>>;
type `chebyshev.u.recurrences` <double, logical> => class<`data.frame`>;
type `chebyshev.u.weight` <double[]> => double[];
type `filter` <character[]> => logical[];
type `gegenbauer.inner.products` <double, double> => double[];
type `gegenbauer.polynomials` <double, double, logical> => list<class<`polynomial`>>;
type `gegenbauer.recurrences` <double, double, logical> => class<`data.frame`>;
type `gegenbauer.weight` <double[], double> => double[];
type `ghermite.h.inner.products` <double, double> => double[];
type `ghermite.h.polynomials` <double, double, logical> => list<class<`polynomial`>>;
type `ghermite.h.recurrences` <double, double, logical> => class<`data.frame`>;
type `ghermite.h.weight` <double[], double> => double[];
type `glaguerre.inner.products` <double, double> => double[];
type `glaguerre.polynomials` <double, double, logical> => list<class<`polynomial`>>;
type `glaguerre.recurrences` <double, double, logical> => class<`data.frame`>;
type `glaguerre.weight` <double[], double> => double[];
type `hermite.he.inner.products` <double> => double[];
type `hermite.he.polynomials` <double, logical> => list<class<`polynomial`>>;
type `hermite.he.recurrences` <double, logical> => class<`data.frame`>;
type `hermite.he.weight` <double[]> => double[];
type `hermite.h.inner.products` <double> => double[];
type `hermite.h.polynomials` <double, logical> => list<class<`polynomial`>>;
type `hermite.h.recurrences` <double, logical> => class<`data.frame`>;
type `hermite.h.weight` <double[]> => double[];
type `jacobi.g.inner.products` <double, double, double> => double[];
type `jacobi.g.polynomials` <double, double, double, logical> => list<class<`polynomial`>>;
type `jacobi.g.recurrences` <double, double, double, logical> => class<`data.frame`>;
type `jacobi.g.weight` <double[], double, double> => double[];
type `jacobi.matrices` <class<`data.frame`>> => list<double | class<`matrix`>>;
type `jacobi.p.inner.products` <double, double, double> => double[];
type `jacobi.p.polynomials` <double, double, double, logical> => list<class<`polynomial`>>;
type `jacobi.p.recurrences` <double, double, double, logical> => class<`data.frame`>;
type `jacobi.p.weight` <double[], double, double> => double[];
type `laguerre.inner.products` <double> => double[];
type `laguerre.polynomials` <double, logical> => list<class<`polynomial`>>;
type `laguerre.recurrences` <double, logical> => class<`data.frame`>;
type `laguerre.weight` <double[]> => double[];
type `legendre.inner.products` <double> => double[];
type `legendre.polynomials` <double, logical> => list<class<`polynomial`>>;
type `legendre.recurrences` <double, logical> => class<`data.frame`>;
type `legendre.weight` <double[]> => double[];
type `lpochhammer` <double, double> => double;
type `monic.polynomial.recurrences` <class<`data.frame`>> => class<`data.frame`>;
type `monic.polynomials` <class<`data.frame`>> => list<class<`polynomial`>>;
type `orthogonal.polynomials` <class<`data.frame`>> => list<class<`polynomial`>>;
type `orthonormal.polynomials` <class<`data.frame`>, class<`polynomial`>> => list<class<`polynomial`>>;
type `pochhammer` <double, double> => double;
type `polynomial.coefficients` <list<class<`polynomial`>>> => list<double[]>;
type `polynomial.derivatives` <list<class<`polynomial`>>> => list<class<`polynomial`>>;
type `polynomial.functions` <list<class<`polynomial`>>, ...> => list<class<`function`>>;
type `polynomial.integrals` <list<class<`polynomial`>>> => list<class<`polynomial`>>;
type `polynomial.orders` <list<class<`polynomial`>>> => double[];
type `polynomial.powers` <list<class<`polynomial`>>> => list<double[]>;
type `polynomial.roots` <class<`data.frame`>> => list<null | double[]>;
type `polynomial.values` <list<class<`polynomial`>>, double[]> => list<double[]>;
type `scaleX` <double[], double, double, double, double> => double[];
type `schebyshev.t.inner.products` <double> => double[];
type `schebyshev.t.polynomials` <double, logical> => list<class<`polynomial`>>;
type `schebyshev.t.recurrences` <double, logical> => class<`data.frame`>;
type `schebyshev.t.weight` <double[]> => double[];
type `schebyshev.u.inner.products` <double> => double[];
type `schebyshev.u.polynomials` <double, logical> => list<class<`polynomial`>>;
type `schebyshev.u.recurrences` <double, logical> => class<`data.frame`>;
type `schebyshev.u.weight` <double[]> => double[];
type `slegendre.inner.products` <double> => double[];
type `slegendre.polynomials` <double, logical> => list<class<`polynomial`>>;
type `slegendre.recurrences` <double, logical> => class<`data.frame`>;
type `slegendre.weight` <double[]> => double[];
type `spherical.inner.products` <double> => double[];
type `spherical.polynomials` <double, logical> => list<class<`polynomial`>>;
type `spherical.recurrences` <double, logical> => class<`data.frame`>;
type `spherical.weight` <double[]> => double[];
type `ultraspherical.inner.products` <double, double> => double[];
type `ultraspherical.polynomials` <double, double, logical> => list<class<`polynomial`>>;
type `ultraspherical.recurrences` <double, double, logical> => class<`data.frame`>;
type `ultraspherical.weight` <double[], double> => double[];
