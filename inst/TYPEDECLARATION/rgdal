type `::` <character, any, logical, null, any, logical, logical, logical, logical, logical, logical, null, logical, logical, null | character, character, logical> => any | <character> => list<logical | character>;
type `assertClass` <class<`GDALDriver`> | class<`GDALRasterBand`> | class<`GDALReadOnlyDataset`> | class<`GDALTransientDataset`>, character> => (class<`GDALDriver`> | class<`GDALRasterBand`> | class<`GDALReadOnlyDataset`> | class<`GDALTransientDataset`>);
type `checkCRSArgs` <character> => list<logical | character>;
type `close.SpatialGDAL` <class<`SpatialGDAL`>, ...> => null;
type `create2GDAL` <class<`SpatialGridDataFrame`>, character, character, null, any, any, any, any, any> => any;
type `CRSargs` <class<`CRS`>> => character;
type `GDAL.close` <class<`GDALReadOnlyDataset`> | class<`GDALTransientDataset`>> => null;
type `gdalDrivers` < > => class<`data.frame`>;
type `GDAL_iconv` < > => logical;
type `GDALinfo` <character, logical, logical, logical, logical, logical, null, logical, null, null> => class<`GDALobj`>;
type `GDAL.open` <character, logical, logical, null, null> => any;
type `getCPLConfigOption` <character> => null;
type `getDescription` <class<`GDALReadOnlyDataset`>> => character;
type `getDriver` <class<`GDALReadOnlyDataset`>> => class<`GDALDriver`>;
type `getDriverLongName` <class<`GDALDriver`>> => character;
type `getDriverName` <class<`GDALDriver`>> => character;
type `getGDALCheckVersion` < > => logical;
type `getGDAL_DATA_Path` < > => character;
type `getGDALDriverNames` < > => class<`data.frame`>;
type `getGDALVersionInfo` <character> => character;
type `getGDALwithGEOS` < > => logical;
type `getGeoTransFunc` <class<`GDALReadOnlyDataset`>> => class<`function`>;
type `get_OVERRIDE_PROJ_DATUM_WITH_TOWGS84` < > => logical;
type `getPROJ4libPath` < > => character;
type `getPROJ4VersionInfo` < > => character;
type `getProjectionRef` <class<`GDALReadOnlyDataset`>, null> => character;
type `getRasterBand` <class<`GDALReadOnlyDataset`> | class<`GDALTransientDataset`>, double> => class<`GDALRasterBand`>;
type `getRasterBlockSize` <class<`GDALRasterBand`>> => integer[];
type `getRasterData` <class<`GDALTransientDataset`> | class<`GDALReadOnlyDataset`>, double | null, double[], double[], double[], double[], logical, logical> => any;
type `getRasterTable` <class<`GDALReadOnlyDataset`>, null, double[], integer[]> => class<`data.frame`>;
type `isObjPtrNULL` <class<`GDALTransientDataset`>> => logical;
type `llgridlines` <class<`SpatialPointsDataFrame`>, any, any, double, double, double, character, character, logical, logical, ...> => null;
type `load_stuff` < > => null;
type `local_RGDAL_Init` < > => null;
type `make_EPSG` <any> => class<`data.frame`>;
type `.normalize_if_path` <character, null> => character;
type `ogrDeleteDataSource` <character, character> => null;
type `ogrDeleteLayer` <character, character, character> => any;
type `ogrDrivers` < > => class<`data.frame`>;
type `ogrFIDs` <character, character> => integer[];
type `ogrInfo` <character, any, null, logical, any, null | character> => any;
type `ogrListLayers` <character> => character[];
type `OGRSpatialRef` <character, character> => any;
type `open.SpatialGDAL` <character, ..., logical, null, null> => class<`SpatialGDAL`>;
type `project` <class<`matrix`>, character, logical, logical, logical, logical> => any;
type `projInfo` <character> => class<`data.frame`>;
type `projNAD` < > => logical;
type `putRasterData` <class<`GDALTransientDataset`>, class<`matrix`>, integer, double[]> => class<`GDALRasterBand`>;
type `readGDAL` <character, any, any, any, any, null, ..., double[], logical, null, null, null> => any;
type `readOGR` <character, any, logical, null, any, logical, logical, logical, logical, logical, logical, null, logical, logical, null | character, character, logical> => any;
type `RGB2PCT` <class<`GDALTransientDataset`>, integer[], character, double, logical> => list<class<`GDALTransientDataset`> | character[]>;
type `.setCollectorFun` <externalptr, class<`function`> | null> => null;
type `SGDF2PCT` <class<`SpatialGridDataFrame`>, double, logical> => list<double[] | character[]>;
type `showEPSG` <character> => character;
type `showP4` <character, logical> => character;
type `showWKT` <character, null, logical> => character;
type `.spTransform_Line` <class<`Line`>, character, character, any, any, integer> => class<`Line`>;
type `.spTransform_Lines` <class<`Lines`>, character, character, any, integer> => class<`Lines`>;
type `.spTransform_Polygon` <class<`Polygon`>, character, character, any, any, integer> => class<`Polygon`>;
type `.spTransform_Polygons` <class<`Polygons`>, character, character, any, integer> => class<`Polygons`>;
type `vec2RGB` <^double[], double[], character[]> => class<`matrix`>;
type `version_sp_linkingTo` < > => character;
type `writeGDAL` <class<`SpatialGridDataFrame`>, character, character, character, null, character | null, character, logical, null, null> => any;
type `writeOGR` <any, character, character, character, null | character, null | character, logical, null, logical, logical, null, null, logical> => any;
