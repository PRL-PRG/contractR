type `besselRatio` <double, double, double, double> => double;
type `distMode` <character, null | double[], null | double> => double;
type `f` <double[], double, double, double[]> => double[];
type `ff` <double> => double;
type `filter` <character[]> => logical[];
type `FUN` <double, double, integer, double> => double;
type `gammaTailPlotLine` <double[], double, double, double, character[], null> => null;
type `kurtosis` <double[], logical> => double;
type `logHist` <^double[], character | double[], logical, logical, character, double[], null, character, character, null, character, double | null> => struct<`breaks`:double[], `counts`:integer[], `logDensity`:double[], `mids`:double[], `xName`:character, `heights`:^double[], `ylim`:double[]>;
type `normTailPlotLine` <double[], double, double, character[], double | null> => null;
type `safeIntegrate` <any => any, double, double, symbol | double, language, symbol, logical, logical, null, null> => struct<`value`:double, `abs.error`:double, `subdivisions`:integer, `message`:character, `call`:language> | struct<`value`:double, `abs.error`:double, `subdivisions`:null, `message`:character, `call`:language>;
type `skewness` <double[], logical> => double;
type `tailPlot` <double[], character, character[], null, null, null, null> => null;
type `tailPlotLine` <double[], character, null | double[], integer[] | character[], null> => null;
type `tTailPlotLine` <double[], double, double> => null;
type `::` <double[], character, logical, logical, character, double[], null, character, character, null, character, null> => struct<`breaks`:double[], `counts`:integer[], `logDensity`:double[], `mids`:double[], `xName`:character, `heights`:^double[], `ylim`:double[]>;
