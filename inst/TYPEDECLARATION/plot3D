type `add2Dplist` <class<`list`, `plist`> | null, character, ...> => class<`list`, `plist`>;
type `addimg` <class<`poly`> | null, class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`>, class<`matrix`>, class<`list`, `plist`>, character[], character, null, character | null, logical | null, double, double, double, double[] | null, double, double, null | double, logical, null> => class<`poly`>;
type `addlines` <class<`segments`> | null, double[], double[], double[], class<`list`, `plist`>, character, character, double, double, double, double, null, logical, logical, ...> => class<`segments`>;
type `add.poly` <list<any>, class<`matrix`>, class<`matrix`>, class<`matrix`>, double[], character[], character, null, double[], logical, null | character, double, double, ...> => list<any>;
type `addPoly` <class<`poly`> | null, class<`poly`>> => class<`poly`>;
type `addraster` <double[], double[], class<`matrix`>, null, null, double, list<any>> => null;
type `addslice` <null, class<`array`> | double[], class<`array`> | double[], class<`array`> | double[], class<`array`>, class<`matrix`> | double[], class<`matrix`> | double[], null | class<`matrix`> | double[], class<`list`, `plist`>, character[], character, null, null | character, logical, double, double, double[], list<double | null | character>, logical, null> => class<`poly`>;
type `alpha3D` <class<`list`, `plist`>, double> => class<`list`, `plist`>;
type `alpha.col` <^character[] | double[], double> => character[];
type `Arrow` <double[], double[], double[], double[], double[], double[], double[], double, character, character[], double[], double[], ...> => null;
type `Arrow.head` <double[], double[], double[], double[], double[], double, character, character[], double[], double[], double> => null;
type `arrows2D` <double[], double[], double[], double[], ..., integer[], null, character, null, null, null, null, character, logical, logical> => list<double[]>;
type `arrows3D` <class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], ..., class<`array`> | null | integer[], double, double, character[] | null, character, null, null | logical, null, null, character | null, character, character, logical> => class<`matrix`>;
type `ArrType` <double[], double[], double[], double[], double[], double[], double[], double, character[], character[], double[], double[], ...> => null;
type `border3D` <double[], double[], double[], double[], double[], double[], ..., null, double, double, character[], character, null, null, null, null, null, character, logical, logical> => class<`matrix`>;
type `box3D` <double[], double[], double[], double[], double[], double[], ..., null, double, double, character[], character, null, character, logical, null, null, null, null, character> => class<`matrix`>;
type `changeres` <double, double[] | class<`array`>, double[] | class<`array`>, class<`matrix`>, class<`matrix`> | null, logical> => list<double[] | class<`matrix`> | double[] | class<`matrix`> | null>;
type `changeres_vec` <double, double[] | class<`array`>, double[] | class<`array`>, class<`matrix`>, class<`matrix`> | null, logical> => list<double[] | class<`matrix`> | double[] | class<`matrix`> | null>;
type `check.args` <logical | list<character[] | double | character | double>> => list<any>;
type `check.breaks` <double[] | null, any> => (double[] | null);
type `check.CI` <list<any>, integer, double> => list<any>;
type `check.colkey` <null | list<any>, logical> => list<character | null | double[] | null | double[] | null | double[] | character[]>;
type `checkcolors` <class<`array`> | class<`matrix`>, character[], character, double[]> => list<character[] | class<`array`> | double[] | character[] | class<`matrix`> | double[]>;
type `check.colvar.2` <class<`matrix`>, class<`matrix`>, character[], null, double | null> => list<class<`matrix`> | character[]>;
type `check.colvar.persp` <class<`matrix`> | null, any, character[] | null, any, any, null | double> => list<class<`matrix`> | character[] | null | character[] | null | ^logical[]>;
type `checklim` <double[]> => double[];
type `check.plt` <double[]> => double[];
type `check.shade` <list<any>, logical | null | list<double>> => list<double | character | double | null | character | null | double | character>;
type `colkey` <character[] | null, double[], null | character[], logical, logical, null, null | character, null | double, null | double, null | double, null | double, double, double, double, double, double, logical, null, null | double[], character[] | logical> => list<double[]>;
type `color3D` <class<`poly`> | list<any>, list<double>, list<null | double | double | character | double | null | character>, logical | null, double | null> => (class<`poly`> | list<any>);
type `color.panels` <logical[], double[], double[], double[], class<`matrix`>, character, double, character> => null;
type `contour2D` <class<`matrix`>, double[], double[], ..., character | null, character | null, null | logical | list<double[]>, double, null, logical, logical> => list<double[]>;
type `contour3D` <double[] | null, double[] | class<`matrix`> | null, double | integer[] | null | class<`matrix`>, ..., class<`matrix`>, double, double, null | character, logical | null | list<double[]>, null, double[] | null, any, character, double, logical, logical, logical> => class<`matrix`>;
type `contourfunc` <list<any>, double[], double[], any, class<`list`, `plist`>, class<`matrix`>, double[], null | double, logical> => class<`segments`>;
type `ContourLines` <double[], double[], class<`matrix`>, double, double[]> => list<list<double[]>>;
type `createcolors` <logical | null, null | character, character[] | ^logical[] | class<`matrix`>> => list<any>;
type `createisosurf` <double[], double[], double[], class<`array`>, double> => class<`matrix`>;
type `createpoly` <class<`matrix`>, class<`matrix`>, class<`matrix`>, integer[], integer[], logical> => list<class<`matrix`>>;
type `createsegms` <double[] | null, double[] | null, double | class<`matrix`>, class<`matrix`>, character[], list<logical | null | list<any> | logical | null | list<character | double[] | double | double | null | character>>, character[], double[], double, class<`list`, `plist`>, double[], logical> => class<`segments`>;
type `createsurfs` <double[] | null, double[] | null, double, class<`matrix`> | null, any, double> => list<class<`matrix`> | class<`matrix`> | null>;
type `createvoxel` <class<`array`> | double[], class<`array`> | double[], class<`array`> | double[], class<`array`>, double, double, character> => list<class<`array`> | double[] | double[]>;
type `drawallcols` <class<`list`, `plist`>> => null;
type `drawcolkey` <list<any>, any, any, any, any, logical> => (null | list<logical>);
type `drawfullbox` <class<`list`, `plist`>> => null;
type `expanddotslist` <null | list<character | double[]>, any> => (null | list<character | double[]>);
type `expand.sort` <integer[], double[]> => list<integer[]>;
type `extend` <double[]> => double[] | <class<`matrix`>, logical> => class<`matrix`>;
type `extend.na` <class<`matrix`>> => class<`matrix`>;
type `extendvec` <double[]> => double[];
type `facetcols` <class<`matrix`>, class<`matrix`>, class<`matrix`>, character[], list<double | character | double | null | character>, logical> => character[];
type `facetcolsImage` <class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`>, null, null, null, double | null, logical, null, double, double, character[], any> => character[];
type `facetcols.light` <double[], list<class<`matrix`> | double[]>, character[], list<any>> => character[];
type `facetcols.shade` <double[], list<class<`matrix`> | double[]>, ^character[], double> => character[];
type `facetcols.shadelight` <double[], list<class<`matrix`> | double[]>, ^character[], list<any>> => character[];
type `facetcols.tri` <class<`matrix`>, character[], list<double | character | double | null | character>> => character[];
type `FindInterval` <class<`matrix`> | double[], class<`array`> | double[], ...> => double[];
type `getplist` < > => class<`list`, `plist`>;
type `gg2.col` <double, double> => character[];
type `gg.col` <double, double> => character[];
type `grid.panels` <logical[], double[], double[], double[], class<`matrix`>, character, null, double> => null;
type `hist3D` <double[], double[], class<`matrix`>, ..., class<`matrix`>, double, double, character | null, character, null, character | null, logical | null, null, logical, logical, null, null, null, character, logical> => class<`matrix`>;
type `image2D` <class<`array`> | class<`matrix`> | list<class<`matrix`> | double[] | class<`matrix`>>, ...> => (null | list<double[]>);
type `image2D.array` <class<`array`>, double[], any, null, ...> => null;
type `image2D.list` <list<class<`matrix`> | double[] | class<`matrix`>>, ...> => (null | list<double[]>);
type `image2D.matrix` <class<`matrix`>, double[] | class<`array`> | class<`matrix`>, double[] | class<`array`> | class<`matrix`>, any, ..., null | character[], character, null | double[], null | character, logical, logical | list<any>, null | logical | list<double | character | double>, double, null | character[], logical, null | double, any, double, double, logical> => list<double[]>;
type `image3D` <double[] | null, double[] | null, double[] | null, ..., class<`matrix`> | null, double, double, null | character, character, null, null | character, logical | null, null | logical | list<double>, double, null, null | double[], null | character[], character, double, logical> => class<`matrix`>;
type `ImageOcean` <...> => list<double[]>;
type `initplist` <logical> => (class<`list`, `plist`> | null);
type `is.colkey` <logical | null | list<any>, any> => logical;
type `isofunc` <double[], double[], double[], class<`array`>, double> => class<`matrix`>;
type `isosurf3D` <double[], double[], double[], class<`array`>, ..., double, double, double[], class<`function`>, character[], null | character, logical, null, null, character | null, character, logical, double | null, double, double> => class<`matrix`>;
type `ispresent` <character[] | class<`array`> | class<`matrix`> | double[] | ^logical[] | null> => logical;
type `jet2.col` <double, double> => character[];
type `jet.col` <double, double> => character[];
type `key.parleg` <list<any>, logical> => list<any>;
type `lines2D` <class<`ts`>, class<`ts`>, ...> => list<double[]>;
type `mapimg` <class<`list`, `plist`>> => class<`list`, `plist`>;
type `meangrid` <class<`matrix`>, logical> => class<`matrix`>;
type `meangrid.na` <class<`matrix`>> => class<`matrix`>;
type `mesh` <class<`array`> | double[], class<`array`> | double[], class<`array`> | double[] | null> => list<class<`array`> | class<`matrix`>>;
type `Mgrid.array` <class<`array`> | double[], class<`array`> | double[], class<`array`> | double[]> => list<class<`array`>>;
type `Mgrid.matrix` <class<`array`> | double[], class<`array`> | double[]> => list<class<`matrix`>>;
type `newlim` <^double[]> => double[];
type `normal.matrix` <class<`matrix`>, class<`matrix`>, class<`matrix`>, logical, logical> => list<class<`matrix`>>;
type `normal.points` <class<`matrix`>, class<`matrix`>, class<`matrix`>, class<`matrix`>> => list<double[]>;
type `normal.points.tri` <class<`matrix`>, class<`matrix`>, class<`matrix`>> => list<double[]>;
type `overrulepar` <list<double | character | null | double | null>, list<any>> => list<any>;
type `paintit` <class<`matrix`> | null, class<`matrix`>, class<`matrix`>, class<`matrix`>, class<`list`, `plist`>, character[] | ^logical[], character, double[] | null, character | null, logical | null, double | null, double | null, list<logical | null | list<any> | double | list<any> | logical | null | list<character | double[] | double | double | null | character>>, logical, logical, null | double[]> => class<`poly`>;
type `persp3D` <class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`>, ..., class<`matrix`> | null, double, double, null | character[], character, null | double[], null | character, logical | null, null | logical | list<double>, double, logical | list<character[] | double>, logical | list<character[] | double | character>, null | class<`function`>, null | double[], null | character[], character> => class<`matrix`>;
type `perspbox` <class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`> | double[], character[], ..., character, null | character, double, null | character, double, double, double, character[] | null, null | logical | list<null | double[] | double | null | double[] | character[]>, logical> => class<`matrix`>;
type `plistcolkey` <class<`list`, `plist`>, list<null | double[] | character[] | null | double[]>, character[], double[], null | character[], logical, logical, character, null | double[]> => class<`list`, `plist`>;
type `plot2D` <double[], double[], double[], double[], ..., integer[], null, character, null, logical | null, null, null, logical, logical, character> => list<double[]>;
type `plotbox` <class<`list`, `plist`> | list<any>> => (class<`list`, `plist`> | list<any>);
type `plot.CI.2d` <list<any>, double[], double[], any> => null;
type `plotdev` <...> => class<`list`, `plist`>;
type `plotlist3D` <class<`list`, `plist`>> => (null | list<null>);
type `plot.plist` <class<`list`, `plist`>, ...> => class<`list`, `plist`>;
type `plot.struct.3D` <class<`list`, `plist`>, class<`pt`> | null, null | class<`CIpt`>, class<`poly`> | null, null | class<`segments`>, null | list<double[] | character[] | ^logical[]>, null | class<`arr`>, null, logical> => class<`list`, `plist`>;
type `points3D` <class<`array`> | double[], class<`array`> | double[], class<`array`> | double[], ...> => class<`matrix`>;
type `polyfill` <class<`matrix`>, class<`matrix`>, class<`matrix`>, character[] | ^logical[], any, logical | null, character | null, list<double[]>, double | null, double | null, double[], null | double> => class<`poly`>;
type `polyfill2D` <class<`matrix`>, class<`matrix`>, character[], logical, character | null, null, null, logical> => class<`poly`>;
type `polygon2D` <^double[], ^double[], ..., null | integer[], null | character[], character, null, null | character, logical, null, null, null, logical, logical> => (null | list<double[]>);
type `polygon3D` <^double[], ^double[], ^double[], ..., null, double, double, character[] | null, character, null, character | null, logical, null, null, null, null, character, logical, logical> => class<`matrix`>;
type `proj3D` <class<`list`, `plist`>, list<null | double | null | double[] | double | null>> => class<`list`, `plist`>;
type `project` <class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], any, class<`list`, `plist`>, logical> => double[];
type `ramp.col` <character[], double, double> => character[];
type `rect2D` <double[], double[], double[], double[], ..., integer[], null, character, null, null, null, null, logical, logical> => list<double[]>;
type `rect3D` <double[], double[], double[], double[], double[] | null, null | double, ..., null, double, double, character[] | null, character, null, character, logical | null, null, null, null, null, character> => class<`matrix`>;
type `remapxy` <class<`matrix`>, class<`array`> | double[], class<`array`> | double[], double[], double[], logical> => class<`matrix`>;
type `ribbon3D` <double[], double[], class<`matrix`>, ..., class<`matrix`>, double, double, character | null, character, null, character | null, logical, null | list<double>, double, logical, logical, null, null, null | character, character> => class<`matrix`>;
type `scatter2D` <class<`matrix`> | class<`ts`> | double[], class<`matrix`> | class<`ts`> | double[], ..., class<`matrix`> | class<`ts`> | null | double[], null | character[], character, null, null | logical, null | double[], null | character, null | list<double | class<`matrix`> | double | class<`matrix`> | character>, logical, logical> => list<double[]>;
type `scatter3D` <class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], ..., class<`array`> | double[], double, double, character[] | null, character, null, logical | null | list<double[] | character[] | double>, null | class<`function`>, null | double[], null | character[], character, null | list<class<`matrix`> | class<`matrix`> | double>, null | list<class<`matrix`> | character | double | double[] | class<`matrix`> | null | class<`matrix`> | character | null>, logical, logical> => class<`matrix`>;
type `segments2D` <double[], double[], double[], double[], ..., integer[], null, character, null, logical, null, null, logical, logical> => list<double[]>;
type `segments3D` <class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`> | double[], double[], ..., null | integer[], double, double, character | null, character, null, null, null, null, null, character, logical, logical> => class<`matrix`>;
type `selectplist` <class<`list`, `plist`>, class<`function`>> => class<`list`, `plist`>;
type `setalpha` <^character[] | double[] | null, any> => (^character[] | null);
type `setdots` <list<double[] | character[] | class<`matrix`>>, integer> => list<double[] | character[]>;
type `setlim` <double[], double[], double[], logical | null, double | null> => list<double>;
type `setplist` <class<`list`, `plist`>> => class<`list`, `plist`>;
type `setplotpar` <list<any>, integer, null> => logical;
type `setuplight` <double, double> => class<`matrix`>;
type `slice3D` <class<`array`> | double[], class<`array`> | double[], class<`array`> | double[], class<`array`>, ..., double, double, class<`matrix`> | double[], class<`matrix`> | double[], null | class<`matrix`> | double[], null, character, null, null | character, logical, null | list<double>, null, null, character | null, character> => class<`matrix`>;
type `slicecont3D` <double[], double[], double[], class<`array`>, ..., double, double, null, double[], null, null, null, character, null, character, logical, null, null, null, null> => class<`matrix`>;
type `Sortlist` <class<`matrix`>, class<`matrix`>, any, class<`list`, `plist`>, logical> => list<double[]>;
type `sortlistvec` <double[], double[], any, class<`list`, `plist`>, logical> => list<double[]>;
type `spheresurf3D` <class<`matrix`>, ..., double, double, null, character, null, null, logical, logical, logical | null, double, null, null, null, character, logical, null, double, double> => class<`matrix`>;
type `splitdotpersp` <list<any>, character | null, logical | null | list<double>, any, any, any, null | class<`list`, `plist`>, double | null, double, double, null | double[]> => list<any>;
type `splitpardots` <list<any>> => list<any>;
type `start2Dplot` <list<any>, class<`matrix`> | class<`ts`> | ^double[], class<`matrix`> | class<`ts`> | ^double[]> => list<any>;
type `surf3D` <class<`matrix`>, class<`matrix`>, class<`matrix`>, ..., class<`matrix`> | null, any, any, null | character, character, null, null | character, logical | null, any, null, null | double[], any, character, logical | list<double>, double | null, double> => class<`matrix`>;
type `text2D` <double[], double[], character[], ..., double[], null, character, null, null, null, character, logical, logical> => list<double[]>;
type `text3D` <double[], double[], double[], character[], ..., null | integer[], double, double, character[] | null, character, null, logical | null, null, null, null | character[], character, logical, logical> => class<`matrix`>;
type `trans3D` <class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], class<`array`> | class<`matrix`> | double[], class<`matrix`>> => list<class<`array`> | class<`matrix`> | double[]>;
type `transmat` <double, double, list<double>, double | null, double | null> => class<`matrix`>;
type `triangle3D` <class<`matrix`>, null, ..., double, double, character, character, null, null, logical, null, null, logical, double, double, double, null, null, character, logical> => class<`matrix`>;
type `update.3D` <class<`list`, `plist`>, class<`pt`> | null, null | class<`CIpt`>, class<`poly`> | null, null | class<`segments`>, null | list<double[] | character[] | ^logical[]>, null | class<`arr`>, any, logical> => class<`list`, `plist`>;
type `variablecol` <class<`array`> | class<`matrix`> | class<`ts`> | double[], character[], character, double[], null> => character[];
type `visibility` <double[], double[], double[], class<`matrix`>> => logical[];
type `voxel3D` <double[], double[], double[], class<`array`>, ..., double, double, double, double, character, null, character, null, logical, null, character, logical, logical> => class<`matrix`>;
type `XYimage` <class<`poly`>, list<logical | character | list<any> | logical | character | list<character[]> | double | list<any>>, double[], double[], class<`matrix`>, class<`list`, `plist`>, any, null> => class<`poly`>;
