type `.nM2par` <double[], double[], character, double[], logical> => double[];
type `.par2nM` <double[], character | symbol> => struct<`mu`:double[], `sd`:double[], `w`:double[]>;
type `[.norMix` <^double[], integer[] | null, null | character, logical> => ^double[];
type `as.expression.norMix` <^double[], logical, null> => expression;
type `as.function.norMix` <^double[], logical, environment, null> => any => any;
type `cc` <^double[]> => double[];
type `clus2norMix` <integer[], double[], character> => ^double[];
type `dnorMix` <double[], ^double[], logical> => double[];
type `dnorMixL` <^double[], null, logical, null | double[], double> => struct<`x`:double[], `y`:double[]>;
type `dpnorMix` <double[], ^double[], logical> => struct<`d`:double[], `p`:double[]>;
type `emstep.nm` <double[], ^double[]> => ^double[];
type `estep.nm` <double[], ^double[] | null, null | double[]> => ^double[];
type `f` <double> => double;
type `f.make` <language> => any => any;
type `filter` <character[]> => logical[];
type `fn` <double[]> => double;
type `FUN` <double[]> => double[] | tuple<double, double, integer>;
type `is.norMix` <^double[]> => logical;
type `lines.norMix` <^double[], character, double, null, double, logical, language, character | double> => null;
type `llnorMix` <double[], double[], double, character[]> => double;
type `m.norMix` <^double[]> => integer;
type `mean.norMix` <^double[], null> => double;
type `mstep.nm` <double[], ^double[]> => struct<`w`:double[], `mu`:double[], `sigma`:double[]>;
type `mySfun` <double[], double[], null> => any => any;
type `nM2par` <^double[], character[]> => double[];
type `norMix` <double[], double[] | language, language | double[], null | double[], null | character, logical> => ^double[];
type `norMix2call` <^double[], logical> => language;
type `norMixEM` <double[], double | integer[], null, double, language, double, double, double> => ^double[];
type `norMixMLE` <double[], integer[], null, double, double> => ^double[];
type `outRange` <double> => double[];
type `par2norMix` <double[], character[], character> => ^double[];
type `plot.norMix` <^double[], character, double, null, null, null | double[], character, character, character, double, logical, logical, logical, struct<`col`:double, `lty`:double, `lwd`:double> | language, struct<`col`:double, `lty`:double, `lwd`:double>, language | struct<`col`:character, `lty`:double, `lwd`:double>, null | character> => ^double[];
type `pnorMix` <double[], ^double[], logical, logical> => double[];
type `pPar` <double[]> => character;
type `print.norMix` <^double[], null> => ^double[];
type `qnorMix` <double[], ^double[], logical, logical, double, double, double, character[] | symbol | language, double | language, double> => double[];
type `r.norMix` <^double[], null, null, double, logical> => double[] | struct<`x`:double[], `y`:double[], `f0`:double[]>;
type `rnorMix` <double, ^double[]> => double[];
type `safeUroot` <any => any, double[] | null, double, double, double, double, double, double, double, double, null> => struct<`root`:double, `f.root`:double, `iter`:integer, `init.it`:null, `estim.prec`:double>;
type `sformat` <double[]> => character[];
type `sort.norMix` <^double[], logical, null> => ^double[];
type `sub_seq` <integer, double> => double[];
type `var.norMix` <^double[], null> => double;
