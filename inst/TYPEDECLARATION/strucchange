type `filter` <character[]> => logical[];
type `$` <struct<`process`:^double[], `nreg`:integer, `nobs`:integer, `call`:language, `fit`:any => any, `scores`:any => any, `fitted.model`:struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`djia`:double[]>>, `par`:null, `lim.process`:character, `type.name`:character, `order.name`:character, `J12`:^double[]> | ^double[], ^double[], logical, null, null, character, null, logical, null> => ^double[];
type `f` <double, double, double, double, double> => double;
type `FUN` <double[], double[]> => null | ^double[] | character;
type `G1` <double, double, double> => double;
type `G2` <double, double, double> => double;
type `lines.confint.breakpoints` <struct<`confint`:^double[], `nobs`:integer, `nreg`:integer, `call`:language, `datatsp`:double[]>, double, double, double, double, null, logical, null> => null;
type `myprod` <double[], ^double[]> => double;
type `pargmaxV` <double, double, double, double> => double;
type `plot.breakpointsfull` <struct<`breakpoints`:double[], `RSS.table`:^double[], `RSS.triang`:list<^double[]>, `RSS`:any => any, `extract.breaks`:any => any, `extend.RSS.table`:any => any, `nobs`:integer, `nreg`:integer, `y`:double[], `X`:^double[], `call`:language, `datatsp`:double[]>, null, null> => struct<`breakpoints`:^double[], `breakdates`:^double[], `RSS`:^double[], `call`:language> | struct<`breakpoints`:^double[], `breakdates`:^character[], `RSS`:^double[], `call`:language>;
type `plot.summary.breakpointsfull` <struct<`breakpoints`:^double[], `breakdates`:^double[], `RSS`:^double[], `call`:language> | struct<`breakpoints`:^double[], `breakdates`:^character[], `RSS`:^double[], `call`:language>, character, double[], logical, character, character, character, null> => struct<`breakpoints`:^double[], `breakdates`:^double[], `RSS`:^double[], `call`:language> | struct<`breakpoints`:^double[], `breakdates`:^character[], `RSS`:^double[], `call`:language>;
type `pvalue.Fstats` <double, character, integer, double> => double;
type `RSS` <double, integer> => double;
type `sdev` <double[], integer> => double;
type `summand` <integer, double> => double;
type `boundary.mefp` <struct<`breakpoint`:integer, `last`:integer, `process`:double[], `statistic`:double, `histsize`:integer, `initcall`:language, `call`:language, `efpcall`:language, `efpprocess`:double[], `computeEstims`:null, `computeEmpProc`:any => any, `border`:any => any, `computeStat`:any => any, `functional`:character, `alpha`:double, `critval`:double, `histcoef`:double[], `formula`:language, `type.name`:character, `type`:character, `data`:character, `histtsp`:double[]>, null> => double[];
type `boundary0` <double[]> => double[];
type `coef0` <struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:null, `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer>> => double[];
type `computeCritval` <double, integer> => double;
type `computePval` <double, integer | symbol> => double;
type `lines.breakpoints` <struct<`breakpoints`:double, `RSS`:double, `nobs`:integer, `nreg`:integer, `call`:language, `datatsp`:double[]>, null, double, null> => null;
type `mefp.efp` <struct<`process`:double[], `type`:character, `nreg`:integer, `nobs`:integer, `call`:language, `formula`:language, `par`:null, `type.name`:character, `lim.process`:character, `coef`:null, `Q12`:null, `datatsp`:double[], `rescale`:logical, `coefficients`:double[], `sigma`:double>, double, character[], double, double, null, null, null | any => any, null> => struct<`breakpoint`:null, `last`:integer, `process`:null, `statistic`:null, `histsize`:integer, `initcall`:language, `call`:language, `efpcall`:language, `efpprocess`:double[], `computeEstims`:null, `computeEmpProc`:any => any, `border`:any => any, `computeStat`:any => any, `functional`:character, `alpha`:double, `critval`:double, `histcoef`:double[], `formula`:language, `type.name`:character, `type`:character, `data`:character, `histtsp`:double[]>;
type `monitor` <struct<`breakpoint`:null, `last`:integer, `process`:null, `statistic`:null, `histsize`:integer, `initcall`:language, `call`:language, `efpcall`:language, `efpprocess`:double[], `computeEstims`:null, `computeEmpProc`:any => any, `border`:any => any, `computeStat`:any => any, `functional`:character, `alpha`:double, `critval`:double, `histcoef`:double[], `formula`:language, `type.name`:character, `type`:character, `data`:character, `histtsp`:double[]>, null, logical> => struct<`breakpoint`:integer, `last`:integer, `process`:double[], `statistic`:double, `histsize`:integer, `initcall`:language, `call`:language, `efpcall`:language, `efpprocess`:double[], `computeEstims`:null, `computeEmpProc`:any => any, `border`:any => any, `computeStat`:any => any, `functional`:character, `alpha`:double, `critval`:double, `histcoef`:double[], `formula`:language, `type.name`:character, `type`:character, `data`:character, `histtsp`:double[]>;
type `panel` <double[], double[]> => null;
type `plot.efp` <struct<`process`:^double[], `type`:character, `nreg`:integer, `nobs`:integer, `call`:language, `formula`:language, `par`:null, `type.name`:character, `lim.process`:character, `coef`:null, `Q12`:^double[], `datatsp`:double[], `rescale`:logical, `coefficients`:double[], `sigma`:double> | struct<`process`:double[], `type`:character, `nreg`:integer, `nobs`:integer, `call`:language, `formula`:language, `par`:null, `type.name`:character, `lim.process`:character, `coef`:null, `Q12`:null, `datatsp`:double[], `rescale`:logical, `coefficients`:double[], `sigma`:double>, double, logical, logical, character, null, null, character, null> => null;
type `plot.Fstats` <struct<`Fstats`:double[], `nreg`:integer, `nobs`:integer, `par`:double, `call`:language, `formula`:language, `breakpoint`:double, `RSS`:double, `datatsp`:double[]>, logical, logical, double, logical, logical, character, null, null, null> => null;
type `plot.gefp` <struct<`process`:^double[], `nreg`:integer, `nobs`:integer, `call`:language, `fit`:any => any, `scores`:any => any, `fitted.model`:struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`djia`:double[]>>, `par`:null, `lim.process`:character, `type.name`:character, `order.name`:character, `J12`:^double[]>, double, struct<`plotProcess`:any => any, `computeStatistic`:any => any, `computePval`:any => any, `computeCritval`:any => any, `boundary`:any => any, `lim.process`:character, `nobs`:double, `nrep`:double, `nproc`:null>, logical> => ^double[];
type `plot.mefp` <struct<`breakpoint`:integer, `last`:integer, `process`:double[], `statistic`:double, `histsize`:integer, `initcall`:language, `call`:language, `efpcall`:language, `efpprocess`:double[], `computeEstims`:null, `computeEmpProc`:any => any, `border`:any => any, `computeStat`:any => any, `functional`:character, `alpha`:double, `critval`:double, `histcoef`:double[], `formula`:language, `type.name`:character, `type`:character, `data`:character, `histtsp`:double[]>, logical, character, null, character, null, null> => null;
type `time.gefp` <struct<`process`:^double[], `nreg`:integer, `nobs`:integer, `call`:language, `fit`:any => any, `scores`:any => any, `fitted.model`:struct<`coefficients`:double, `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer, `qr`:struct<`qr`:^double[], `qraux`:double, `pivot`:integer, `tol`:double, `rank`:integer>, `df.residual`:integer, `call`:language, `terms`:language, `model`:struct<`djia`:double[]>>, `par`:null, `lim.process`:character, `type.name`:character, `order.name`:character, `J12`:^double[]>, null> => double[];
type `Xinv0` <struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:null, `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer>> => ^double[];
