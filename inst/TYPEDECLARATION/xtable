type `filter` <character[]> => logical[];
type `.alignStringToVector` <character> => character[];
type `as.is` <character[]> => character[];
type `as.math` <character, character> => character;
type `FUN` <double[]> => character;
type `lr` <double[]> => character;
type `print.xtableFtable` <^integer[], character, character, logical, logical, character, character, character, null, character | language, character, null, null, language, logical, null, any => any | language, any => any, any => any> => character;
type `print.xtableList` <tuple<struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[]>, struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[]>, struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[]>>, character, language, language, logical, character, character, character, null, character | language, character, null, null, language, logical, character, logical, null, null | language> => character;
type `print.xtableMatharray` <struct<`1`:double[], `2`:double[], `3`:double[]>, logical, null | struct<`decimal.mark`:character>, null | double, logical, null | character, null> => character;
type `sanitize.colnames.function` <character[]> => character[];
type `sanitize.rownames.function` <character[]> => character[];
type `sanitize.text.function` <character[]> => character[];
type `toLatex.xtable` <struct<`grade`:integer[], `sex`:integer[], `disadvg`:integer[], `ethnicty`:integer[], `tlimth`:integer[]>, null> => character[];
