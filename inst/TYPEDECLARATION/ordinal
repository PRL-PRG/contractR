type `$` <environment, any> => double | <environment> => class<`matrix`> | <environment> => class<`matrix`>;
type `addterm.clm2` <class<`clm2`>, class<`formula`>, double, character, double, logical, logical, character, ...> => class<`anova`, `data.frame`>;
type `adjust_contrast_for_param` <class<`clm`>, list<class<`matrix`>>> => list<class<`matrix`>>;
type `anova.clm` <class<`clm`>, ..., character> => class<`anova`, `data.frame`>;
type `anova.clm2` <class<`clm2`>, ..., character[]> => class<`Anova`, `data.frame`>;
type `checkArgs.clm` <class<`call`>> => null;
type `checkContrasts` <class<`formula`, `terms`>, null | list<character>> => null;
type `clm` <any, any, any, any, any, any, any, logical, any, any, logical, list<any>> => (class<`clm`> | list<any>);
type `clm2` <any, any, any, any, any, any, any, any, any, logical, logical, character[]> => class<`clm2`>;
type `clm2.control` <character[], ..., double, double, double, double, double> => list<character | double | list<double>>;
type `clm.finalize` <list<double[] | class<`matrix`> | character>, double[], list<character[]>, list<double[]>> => list<any>;
type `clm.fit` <class<`factor`, `ordered`> | list<any>, ...> => class<`clm.fit`>;
type `clm.fit.default` <list<any>, ...> => class<`clm.fit`>;
type `clm.fit.factor` <class<`factor`, `ordered`>, class<`matrix`>, any, any, any, any, any, list<any>, any, logical, character[], character[]> => class<`clm.fit`>;
type `clm.fit.NR` <environment, list<double | character | double>> => list<double[] | class<`matrix`> | character>;
type `clm.start` <character[], character, class<`matrix`>, null, null, logical> => double[];
type `coef.clm` <class<`clm`>, logical, ...> => double[];
type `contain` <character, character> => logical;
type `containment` <class<`clm`>> => list<character[]>;
type `contestMD` <class<`clm`>, class<`matrix`>, double, double, ...> => class<`data.frame`>;
type `conv.check` <list<any>, list<character | double>, logical, any, ...> => list<class<`matrix`> | double | character>;
type `Deparse` <class<`name`>, integer, logical, character[], integer> => character;
type `doolittle` <class<`matrix`>, double> => list<class<`matrix`>>;
type `drop.coef2` <class<`matrix`>, double, logical, logical> => class<`matrix`>;
type `drop.cols` <list<any>, logical, logical> => list<any>;
type `dropterm.clm2` <class<`clm2`>, any, double, character, double, logical, logical, character[], ...> => class<`anova`, `data.frame`>;
type `extractAIC.clm2` <class<`clm2`>, any, double, ...> => double[];
type `extract_contrasts_type3` <class<`clm`>, class<`matrix`>> => list<class<`matrix`>>;
type `filter` <character[]> => logical[];
type `finalizeRho` <environment> => list<any>;
type `fitCLM` <environment> => null;
type `fn` <double[]> => double;
type `formatTheta` <double[], class<`matrix`>, list<any>, any> => list<class<`matrix`> | logical>;
type `format_tJac` <class<`matrix`>, character[], character[]> => class<`matrix`>;
type `fun` <double[]> => double;
type `FUN` <class<`clm2`>> => character | <class<`matrix`>> => class<`matrix`> | <integer> => class<`matrix`> | <class<`matrix`>> => class<`data.frame`> | <class<`formula`>> => class<`formula`, `terms`> | <class<`formula`>> => class<`formula`> | <class<`clm2`>> => integer | <character> => class<`matrix`> | <integer> => class<`matrix`> | <integer> => class<`matrix`> | <character> => double[] | <class<`clm2`>> => double | <character> => character[] | <class<`clm2`>> => double | <character[]> => character[] | <character> => logical | <integer> => class<`matrix`> | <character> => character[] | <character> => class<`matrix`> | <class<`matrix`>> => class<`matrix`> | <class<`clm2`>> => character | <character> => class<`matrix`>;
type `get_clmDesign` <class<`data.frame`>, list<class<`formula`, `terms`>>, null | list<character>> => list<any>;
type `get_clmDM` <class<`data.frame`>, class<`formula`, `terms`>, null | list<character>, logical, character, logical> => list<class<`matrix`> | double[]>;
type `get_clmFormulas` <class<`call`>, environment> => list<class<`formula`>>;
type `get_clmInfoTab` <list<any>, ...> => class<`data.frame`>;
type `get_clm.mf` <class<`call`>, class<`formula`>, any, environment> => class<`data.frame`>;
type `get_clmTerms` <class<`call`>, list<class<`formula`>>, environment> => list<class<`formula`, `terms`>>;
type `get_clmY` <class<`data.frame`>, double[]> => list<class<`factor`, `ordered`> | character[]>;
type `getContrasts` <any, null | list<character>> => (null | list<character>);
type `get_contrasts_marginal` <class<`clm`>, character> => list<class<`matrix`>>;
type `get_contrasts_type1` <class<`clm`>> => list<class<`matrix`>>;
type `get_contrasts_type2` <class<`clm`>, character[]> => list<class<`matrix`>>;
type `get_contrasts_type2_unfolded` <class<`clm`>, null> => list<class<`matrix`>>;
type `get_contrasts_type3` <class<`clm`>, null> => list<class<`matrix`>>;
type `getFittedC` <double[], double[], character, double> => double[];
type `getFullForm` <class<`formula`>, ..., any> => class<`formula`>;
type `getGnll` <environment, any> => double[];
type `getHnll` <environment, double[]> => class<`matrix`>;
type `getNll` <environment, any> => double;
type `getOffset` <class<`data.frame`>, class<`formula`, `terms`>> => double[];
type `getPar` <environment> => double[];
type `get_rdX` <class<`clm`>, logical> => class<`matrix`>;
type `getWeights` <class<`data.frame`>> => double[];
type `gfun` <double[]> => double[];
type `gr` <double[]> => double[];
type `makeThresholds` <character[], character> => list<class<`matrix`> | double | character[]>;
type `makeThresholds2` <environment, character, ...> => null;
type `mk_Qtable` <double, integer> => class<`data.frame`>;
type `model.frame.clm` <class<`clm`>, ...> => class<`data.frame`>;
type `model_matrix` <class<`clm`>, ...> => class<`matrix`>;
type `model.matrix.clm` <class<`clm`>, character[], ...> => list<class<`matrix`>>;
type `myhess` <class<`function`>, double[], null, double, ...> => class<`matrix`>;
type `namedList` <...> => list<any>;
type `newRho` <environment, class<`matrix`>, class<`matrix`>, class<`matrix`>, class<`factor`, `ordered`>, double[], double[], double[], character, null, any, character> => environment;
type `print.conv.check` <list<class<`matrix`> | double | character>, character, ...> => null;
type `rbindall` <...> => class<`data.frame`>;
type `setLinks` <environment, character> => null;
type `set.start` <environment, any, logical, character, character, list<any>> => double[];
type `setStart` <environment> => double[];
type `single_anova` <class<`clm`>, character> => class<`anova`, `data.frame`>;
type `start.beta` <class<`matrix`>, logical> => double[];
type `start.threshold` <character[], character> => double[];
type `summary.clm` <class<`clm`>, logical, ...> => class<`summary.clm`>;
type `term2colX` <class<`formula`, `terms`>, class<`matrix`>> => list<integer>;
type `term_contain` <character, class<`matrix`>, character[], character[]> => logical[];
type `terms.clm` <class<`clm`>, character[], ...> => (class<`formula`, `terms`> | list<class<`formula`, `terms`>>);
type `update.clm2` <class<`clm2`>, any, any, class<`formula`>, any, ..., logical> => class<`clm2`>;
type `vcov.clm` <class<`clm`>, any, character[], ...> => class<`matrix`>;
