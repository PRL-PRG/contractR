type `ablineclip` <? struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`y`:double[], `x`:double[]>>, null, ? double, ? double, null, null, logical, ? double, ? double, ? double, ? double, double> => null;
type `addtable2plot` <double, double, struct<`Before`:double[], `During`:double[], `After`:double[]>, language, character, ^double[], double, double, double, double, double, language, character, logical, logical, logical, logical, character> => struct<`xlog`:logical, `ylog`:logical, `xpd`:logical>;
type `arctext` <character, double[], double, ? double, language | double, null, double, logical, ? double, ??? | character> => struct<`cex`:double>;
type `axis.break` <double, ? double, null, character, character, character, double> => struct<`xpd`:logical>;
type `axis.mult` <double, null, ???, double, character, ???, null, ???> => null;
type `barlabels` <^double[], ^double[], ? ^character[], double, double, double, double, ???> => struct<`xpd`:logical>;
type `barNest` <language, struct<`Age`:double[], `Sex`:integer[], `Marital`:integer[], `Employ`:integer[]>, character[], ? character | language | double[], character, character, character, double, logical, struct<`Overall`:character, `Sex`:character[], `Marital`:character[], `Employ`:character[]> | tuple<character, character[], character[], character[]>, double, ? character | symbol | logical | pairlist, logical, logical, ? character | pairlist, logical, ? double[], ? pairlist | character | double, logical | character> => struct<`propbrk`:tuple<double, double[], ^double[]>, `binciWu`:tuple<double, double[], ^double[]>, `binciWl`:tuple<double, double[], ^double[]>, `valid.n`:tuple<integer, integer[], ^integer[]>> | struct<`valid.n`:tuple<integer, integer[], ^double[], double[]>>;
type `barp` <struct<`Before`:double[], `During`:double[], `After`:double[]> | ^double[], double, ? character[], ? character[], ? struct<`x`:double, `y`:double>, ? character[] | double[], character, ? character, character, character, null, ? double[], null, logical, logical, ? integer[], ? character[], double, null> => struct<`x`:^double[], `y`:^double[]>;
type `battleship.plot` <^integer[], double[], character, character, character, character, character, character[], character[], double, double, double> => struct<`mar`:double[]>;
type `box.heresy` <double[], ???, double[], double[], double[], double[], ? double[], logical, null, double, character, character, character, ? character[], character, null, ???> => null;
type `boxed.labels` <double[], double[], character[] | double[], character[], logical, double, double, double, double, double, logical, logical, character | ???> => struct<`cex`:double, `xpd`:logical>;
type `color.legend` <double, double, double, double, character[], character[], double, character, character, ???> => struct<`xpd`:logical, `cex`:double>;
type `cylindrect` <double[], double[], double[], struct<`Monday`:double, `Tuesday`:double, `Wednesday`:double, `Thursday`:double, `Friday`:double, `Saturday`:double, `Sunday`:double>, character[], character, character, double> => ^double[];
type `dispersion` <double[], double[], ? double[], ? double[], logical, double[] | symbol, null, character, null, null, null, null, character | integer, logical, ???> => null;
type `drawNestedBars` <tuple<tuple<double>> | tuple<tuple<null>, tuple<null>, tuple<null>, tuple<double>> | struct<`propbrk`:tuple<double, double[], ^double[]>, `binciWu`:tuple<double, double[], ^double[]>, `binciWl`:tuple<double, double[], ^double[]>, `valid.n`:tuple<integer, integer[], ^integer[]>> | struct<`valid.n`:tuple<integer, integer[], ^double[], double[]>>, double, double, double | symbol, logical, symbol | logical, struct<`Marital`:character, `Employ`:character[]> | tuple<character> | struct<`Sex`:character, `Marital`:character[], `Employ`:character[]> | struct<`Employ`:character> | struct<`Overall`:character, `Sex`:character[], `Marital`:character[], `Employ`:character[]>, double, double, double, logical | symbol, tuple<character>, logical, symbol | double> => null;
type `filter` <character[]> => logical[];
type `gap.plot` <double[], ???, double[], character, character, character, double, integer[], double[], ???, null, ???, double[], double[], double[], double[], logical, logical, character> => null;
type `gradient.rect` <double[], double[], double[], struct<`Monday`:double, `Tuesday`:double, `Wednesday`:double, `Thursday`:double, `Friday`:double, `Saturday`:double, `Sunday`:double> | double, double[] | symbol | ???, double[] | symbol | ???, double[] | symbol | ???, ? character[], double | symbol | language, character, character> => character[];
type `polygon.shadow` <double[], double[], double[], null, character[]> => null;
type `smoothColors` <character, null> => character[];
type `staxlab` <double, integer[], character[], double, double, double, ? double, double, double, double> => ? struct<`xpd`:logical>;
