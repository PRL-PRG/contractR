type `ablineclip` <class<`lm`> | null, null, null | double, null | double, null, null, logical, double | null, double | null, null | double, null | double, ...> => null;
type `addtable2plot` <double, double, class<`data.frame`>, any, character, class<`matrix`>, double, double, double, double, double, any> => list<logical>;
type `arctext` <character, double[], double, double | null, any, null, double, logical, double | null, ...> => list<double>;
type `axis.break` <double, double | null, null, character, character, character, double> => list<logical>;
type `axis.mult` <double, null, any, double, character, any, null, ...> => null;
type `barlabels` <class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`> | null, double, double, double, double, ...> => list<logical>;
type `barNest` <class<`formula`>, class<`data.frame`>, character[], null | double[], character, character, character, double, logical, list<character[]>, double, null> => class<`brklist`>;
type `barp` <class<`data.frame`> | class<`matrix`> | double[], double, character[] | null, character[] | null, null | list<double>, character[] | double[] | null, character, character | null, character, character, null, double[] | null> => list<class<`matrix`> | double[]>;
type `battleship.plot` <class<`matrix`>, double[], character, character, character, character, character, character[], character[], double, double, double> => list<double[]>;
type `binciW` <double, double, double, logical> => double[];
type `binciWl` <class<`factor`> | double | logical[], any, double, character | logical, logical> => double;
type `binciWu` <class<`factor`> | logical[], any, double, character | logical, logical> => double;
type `bin.wind.records` <integer[], integer[], double, logical, double[]> => class<`matrix`>;
type `boxed.labels` <double[] | null, double[], character[] | double[] | null, character[], logical, double, double, double, double, double, logical, logical> => list<double>;
type `box.heresy` <double[], any, double[], double[], double[], double[], null | double[], logical, null, double, character, character> => null;
type `brkdnNest` <class<`formula`>, class<`data.frame`>, character[], character, character | logical> => class<`brklist`>;
type `brkdn.plot` <character | class<`formula`>, character | null, character | null, class<`data.frame`>, character, character, null, logical, character, null | character, null | character, null | character[]> => list<class<`matrix`>>;
type `bumpchart` <class<`matrix`>, character[], character[], logical, double[], double, character[], integer[] | double, double, logical, ...> => list<double[]>;
type `categoryReshape` <class<`data.frame`>> => class<`data.frame`>;
type `centipede.plot` <class<`matrix`>, character, character, any, character[] | null, character[] | null, logical, character, null, double, double, null> => class<`matrix`>;
type `clean.args` <list<double>, class<`function`>, logical, null, logical> => list<double>;
type `clock24.plot` <double[], double[], any, logical, null, character, ...> => list<double[] | character>;
type `clplot` <integer[], double[], character, character, double[], character[], double, logical, ...> => list<double[] | class<`matrix`>>;
type `clustered.dotplots` <character[] | double[], character[] | double[], double[], character, character, character, character, double, double, logical, double, ...> => null;
type `cluster.overplot` <class<`matrix`>, any, double[], null, ...> => list<double[] | character[]>;
type `color2D.matplot` <class<`matrix`> | class<`table`>, any, any, any, double[] | null, null | class<`matrix`>, logical, double, character, character, logical, logical> => list<character | double[]>;
type `color.gradient` <double[], double[], double[], double> => character[];
type `color.id` <character> => character;
type `color.legend` <double, double, double, double, character[] | double[], character[], double, character, character, ...> => list<double>;
type `color.scale` <double[] | class<`matrix`>, any, any, any, double, null | integer[], null, double[] | null, character> => (character[] | class<`matrix`>);
type `color.scale.lines` <double[], double[], any, any, any, null | double[], double[] | null, ...> => null;
type `coord` <double[], double> => list<double[]>;
type `corner.label` <character | null, double, double, null, null, logical, ...> => list<double>;
type `count.overplot` <class<`matrix`>, any, null, character, character, ...> => null;
type `cylindrect` <double[], double[], double[], class<`data.frame`> | double[], character[], character | null, character, double> => class<`matrix`>;
type `deg2rad` <double[]> => double[];
type `dendroPlot` <list<double[] | class<`factor`>>, list<double>, double, character, double, double[] | null, null, ...> => null;
type `diamondplot` <class<`data.frame`>, character, class<`function`>, character, ...> => list<character | double[] | null>;
type `dispersion` <double[], double[], double[] | null, double[] | null, logical, any, null, character, null | character, null | double, null | double, null> => null;
type `draw1ellipse` <double, double, double, double, double, double[], logical, double, logical, double | null, null | double, double> => null;
type `draw.arc` <double, double, double[], double, double[], double, double[], double, character | integer[], null | double, ...> => class<`data.frame`>;
type `draw.arc.0` <double, double, double, double, double, double, character | integer, double, ...> => null;
type `draw.circle` <double, double, double[], double, character | null, character[] | null, double, null | double, double, double> => list<double[]>;
type `draw.ellipse` <double[], double[], double[], double[], double[], class<`matrix`> | null, logical, logical, double[], double[] | null, null | double[], double> => null;
type `drawNestedBars` <class<`brklist`> | list<list<any>>, double, double, any, logical, any, list<character[]>, double, double, double, any, list<character[]>> => null;
type `draw.radial.line` <double, double, double[], double, double | null, logical, character | null, double | null, ...> => null;
type `ehplot` <double[], class<`factor`>, double, double, logical, logical, logical, character, character, character, character[], logical> => null;
type `election` <class<`data.frame`>, class<`data.frame`>, class<`formula`>, character[]> => class<`data.frame`>;
type `emptyspace` <list<class<`matrix`>>, null> => list<double>;
type `fill.corner` <character[], double, double, null> => class<`matrix`>;
type `filter` <character[]> => logical[];
type `FUN` <class<`factor`> | double | logical[], any, double, character | logical, logical> => double | <class<`factor`> | logical[], any, double, character | logical, logical> => double | <class<`array`> | class<`matrix`> | ^double[], integer> => (class<`matrix`> | ^double[] | null) | <class<`factor`> | double[], logical> => integer | <class<`factor`>, character, logical> => double | <integer[]> => double | <integer> => null | <integer> => class<`data.frame`> | <double[], any> => double[] | <integer> => double[] | <double[], any> => double;
type `gap.plot` <double[], any, double[], character, character, character, double, integer[], double[], any, null, any> => null;
type `getBreakListNames` <class<`brklist`>> => list<character[]>;
type `get.segs` <list<double[]>, character, character, character> => class<`matrix`>;
type `getYmult` < > => double;
type `gradient.rect` <double[], double[], double[], class<`data.frame`> | double[], any, any, any, null | character[], any, character, character | null> => character[];
type `hexagon` <double, integer, double, character, null> => null;
type `normalizza` <double[]> => double[];
type `p2p_arrows` <integer[], double[], double[], double[], double, any, ...> => null;
type `polygon.shadow` <double[], double[], double[], null, character[]> => null;
type `propbrk` <class<`factor`>, character, logical> => double;
type `radial.grid` <integer[], double[], logical, double[], double, logical, double, integer[], character, character, character, logical> => list<logical>;
type `radial.plot` <double[], double[], any, double[], logical, double, logical, character, double, character, character, character> => list<double[] | character>;
type `remove.args` <list<double>, class<`function`>> => list<double>;
type `rescale` <class<`matrix`> | double[], double[]> => (class<`matrix`> | double[]);
type `seats` <double, double, double> => class<`data.frame`>;
type `segmenti` <integer, double, character[], double> => null;
type `smoothColors` <..., null> => character[];
type `spreadout` <double[], double> => double[];
type `staxlab` <double, integer[], character[], double, double, double, null | double, double, double, ...> => (null | list<logical>);
type `std.error` <double[], any> => double;
type `valid.n` <class<`factor`> | double[], logical> => integer;
type `vn` <double[]> => integer;
type `xyangle` <double[], double[], logical, logical> => double[];
