type `ablineclip` <class<`lm`> | null, null, null | double, null | double, null, null, logical, double | null, double | null, null | double, null | double, ...> => null;
type `addtable2plot` <double, double, class<`data.frame`>, any, character, class<`matrix`>, double, double, double, double, double, any, character, logical, logical, logical, logical, character> => list<logical>;
type `arctext` <character, double[], double, double | null, any, null, double, logical, double | null, ...> => list<double>;
type `axis.break` <double, double | null, null, character, character, character, double> => list<logical>;
type `axis.mult` <double, null, any, double, character, any, null, ...> => null;
type `barlabels` <class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`> | null, double, double, double, double, ...> => list<logical>;
type `barNest` <class<`formula`>, class<`data.frame`>, character[], null | double[], character, character, character, double, logical, list<character[]>, double, null, logical, logical, null, logical, null | double[], null, character | logical> => class<`brklist`>;
type `barp` <class<`data.frame`> | class<`matrix`> | double[], double, character[] | null, character[] | null, null | list<double>, character[] | null | double[], any, character | null, character, character, null, double[] | null, null, logical, logical, integer[] | null, character[] | null, double, null | integer[], logical> => list<class<`matrix`> | double[]>;
type `battleship.plot` <class<`matrix`>, double[], character, character, character, character, character, character[], character[], double, double, double> => list<double[]>;
type `binciW` <double, double, double, logical> => double[];
type `binciWl` <class<`factor`> | double | logical[], any, double, character | logical, logical> => double;
type `binciWu` <class<`factor`> | logical[], any, double, character | logical, logical> => double;
type `bin.wind.records` <integer[], integer[], double, logical, double[]> => class<`matrix`>;
type `boxed.labels` <double[] | null | list<double>, double[] | null, character[] | double[] | null, character[], logical, double, double, double, double, double[], logical, logical, ...> => list<double>;
type `box.heresy` <double[], any, double[], double[], double[], double[], null | double[], logical, null, double, character, character, character, null | character[], character, null, ...> => null;
type `brkdnNest` <class<`formula`>, class<`data.frame`>, character[], character, character | logical> => class<`brklist`>;
type `brkdn.plot` <character | class<`formula`>, character | null, character | null, class<`data.frame`>, character, character, null, logical, character, null | character, null | character, null | character[], null, character, integer[], double | integer[], integer[], logical, null, ...> => list<class<`matrix`>>;
type `bumpchart` <class<`matrix`>, character[], character[], logical, double[], double, character[], integer[] | double, double, logical, ...> => list<double[]>;
type `categoryReshape` <class<`data.frame`>> => class<`data.frame`>;
type `centipede.plot` <class<`matrix`>, character, character, any, character[] | null, character[] | null, logical, character, null, double, double, null, character, double[] | null, character, character, ...> => class<`matrix`>;
type `clean.args` <list<character | double[] | double | double[] | character>, class<`function`>, logical, character[] | null, logical> => list<any>;
type `clock24.plot` <double[], double[], any, logical, null, character, ...> => list<double[] | character>;
type `clplot` <integer[], double[], character, character, double[], character[], double, logical, ...> => list<double[] | class<`matrix`>>;
type `clustered.dotplots` <character[] | double[], character[] | double[], double[], character, character, character, character, double, double, logical, double, ...> => null;
type `cluster.overplot` <class<`matrix`>, any, double[], null, ...> => list<double[] | character[]>;
type `color2D.matplot` <class<`matrix`> | class<`table`>, any, any, any, double[] | null, null | class<`matrix`>, logical, double, character, character, logical, logical, logical, null, double, class<`matrix`> | character | null, null, null, character, logical> => list<character | double[]>;
type `color.axis` <double, double[], double[], character, double | null, double, double, double> => null;
type `color.gradient` <double[], double[], double[], double> => character[];
type `color.id` <character> => character;
type `color.legend` <double, double, double, double, character[] | double[], character[], double, character, character, ...> => list<double>;
type `color.scale` <double[] | class<`matrix`>, any, any, any, double, null | integer[], null, double[] | null, character> => (character[] | class<`matrix`>);
type `color.scale.lines` <double[], double[], any, any, any, null | double[], double[] | null, ...> => null;
type `corner.label` <character | null, double, double, null, null, logical, ...> => list<double>;
type `count.overplot` <class<`matrix`>, any, null, character, character, ...> => null;
type `cylindrect` <double[], double[], double[], class<`data.frame`> | double[], character[], character | null, character, double> => class<`matrix`>;
type `dendroPlot` <list<double[] | class<`factor`>>, list<double>, double, character, double, double[] | null, null, ...> => null;
type `densityGrid` <list<class<`matrix`>>, null, null, null, double[], double[], double[], double[], double[], double, double, double, logical> => null;
type `diamondplot` <class<`data.frame`>, character, class<`function`>, character, ...> => list<character | double[] | null>;
type `dispersion` <double[], double[], double[] | null, double[] | null, logical, any, null, character, null | character, null | double, null | double, null, character | integer, logical, ...> => null;
type `draw.arc` <double, double, double[], double, double[], double, double[], double, character | integer[], null | double, ...> => class<`data.frame`>;
type `draw.circle` <double, double, double[], double, character | null, character[] | null, double, null | double, double, double> => list<double[]>;
type `draw.ellipse` <double[], double[], double[], double[], double[], class<`matrix`> | null, logical, logical, double[], double[] | null, null | double[], double, double, ...> => null;
type `drawNestedBars` <class<`brklist`> | list<list<any>>, double, double, any, logical, any, list<character[]>, double, double, double, any, list<character[]>, logical, any> => null;
type `draw.radial.line` <double, double, double[], double, double | null, logical, character | null, double | null, ...> => null;
type `drawSectorAnnulus` <double, double, double, double, character, double> => null;
type `draw.tilted.sector` <double, double, null, double, double, double, double, double, character, character, double, double> => double;
type `ehplot` <double[], class<`factor`>, double, double, logical, logical, logical, character, character, character, character[], logical, logical, ...> => null;
type `election` <class<`data.frame`>, class<`data.frame`>, class<`formula`>, character[]> => class<`data.frame`>;
type `emptyspace` <double[] | list<class<`matrix`>>, double[] | null> => list<double>;
type `fan.plot` <double[], double, double, null, null, double, character[], null, double, character, double, character, double, logical, ...> => double[];
type `feather.plot` <double[], double[], any, double, logical, character, character, character, character, character, integer[], ...> => list<double[]>;
type `fill.corner` <character[], double, double, null> => class<`matrix`>;
type `floating.pie` <double, double, double[], double, double, character[] | null, double, logical, any, double[], ...> => double[];
type `fullaxis` <double, double[] | null, character[] | logical, null, double | null, logical, null, character, double, any, character, null, null, null, ...> => double[];
type `FUN` <class<`factor`> | double | logical[], any, double, character | logical, logical> => double | <class<`factor`> | logical[], any, double, character | logical, logical> => double | <class<`factor`> | double[] | ^integer[] | character[], logical> => integer | <class<`factor`> | character[], character, logical> => double;
type `furc` <class<`dendrite`>, double, double[], logical, double, double, character[]> => null;
type `gantt.chart` <list<character[] | class<`POSIXct`, `POSIXt`> | double[] | character[] | double[]>, character, class<`POSIXct`, `POSIXt`> | null, null | character[] | double[], logical, class<`POSIXct`, `POSIXt`> | integer[], character[] | integer[], character, double, logical, character, character, logical, double, null | character, character, any, double> => list<character[] | class<`POSIXct`, `POSIXt`> | double[] | character[] | double[]>;
type `gap.barplot` <double[], double[], any, any, any, double[], null, null, character, character, logical, null, ...> => integer[];
type `gap.boxplot` <list<double[]>, ..., list<double[]>, double, null, logical, logical, logical, any, null, null, logical, character, null, character, null, logical, list<double>, logical, logical> => list<class<`matrix`> | double[] | character[]>;
type `gap.plot` <double[], any, double[], character, character, character, double, double[], double[], any, double[] | null, any, null | double[], double[], character[] | double[], double[], logical, logical, ...> => null;
type `get_axispos3d` <character, class<`matrix`>, double[], null, double> => class<`matrix`>;
type `get.breaks` <any, integer[]> => integer[];
type `getFigCtr` <double[]> => double[];
type `get.gantt.info` <character> => list<null>;
type `getMarginWidth` <double, character[], logical> => list<double>;
type `get.segs` <list<double[]>, character, character, character> => class<`matrix`>;
type `getYmult` < > => double;
type `gradient.rect` <double[], double[], double[], class<`data.frame`> | double[], any, any, any, null | character[], any, character, character | null> => character[];
type `hexagon` <double, integer, double, character, null> => null;
type `histStack` <class<`formula`>, ...> => (null | list<list<double[]>>);
type `histStack.default` <double[], class<`factor`>, character, character | integer[], logical, character, character, null | character | double[], any, ...> => (null | list<list<double[]>>);
type `histStack.formula` <class<`formula`>, class<`data.frame`>, character, character | integer[], logical, character, character, null | character | double[], double, ...> => (null | list<list<double[]>>);
type `intersectDiagram` <class<`intersectList`> | class<`matrix`>, logical, logical, null, character, double[], character, double, null | character[], null | double, logical, character | null, character> => class<`intersectList`>;
type `jiggle` <double, double[]> => double[];
type `joyPlot` <list<class<`density`>>, double[], double[], null, null | character[], character, character, character, double[], null | character[], null, null> => list<double[]>;
type `kiteChart` <class<`matrix`>, null, null, logical, character, character, character, character, null, null, character[], logical, double[], double[] | null, double[], double[], logical, logical, ...> => list<double[]>;
type `labbePlot` <list<class<`table`> | double[] | double[]>, character, character, character, list<character>, list<character>, double, logical, ...> => null;
type `ladderplot` <class<`data.frame`>, ...> => null;
type `ladderplot.default` <class<`data.frame`>, logical, double | integer[], double, double, double[], double[], logical, logical, ...> => null;
type `legendg` <double, double, character[], null | list<double | integer[]>, any, any, any, any, null | list<character[] | double | integer[]>, double, null, character, character, double, character, any, null, double, any, any> => list<list<double[]>>;
type `lengthKey` <double, double, double[], double> => list<logical>;
type `listDepth` <class<`dendrite`> | integer | null | list<integer | null>> => double;
type `makeDendrite` <class<`data.frame`> | class<`dendrite`> | class<`factor`>> => class<`dendrite`>;
type `makeDensityMatrix` <integer[], integer[], double[], double, double, character[], double[], double[], logical> => list<class<`matrix`>>;
type `makeIntersectList` <class<`data.frame`> | class<`matrix`>, null, character> => class<`intersectList`>;
type `maxEmptyRect` <double[], double[], double[], double[]> => list<double[]>;
type `mtext3d` <character, class<`matrix`>, character | expression, null, double, null, ...> => null;
type `multhist` <list<double[]>, logical, null, any, logical, ...> => list<class<`histogram`> | class<`matrix`>>;
type `multsymbolbox` <double[], double[], double[], double[], double[], double, character[], character[], logical, logical, ...> => null;
type `oz.windrose` <class<`matrix`>, double, double[], double, character[], null, logical, null, ...> => null;
type `oz.windrose.legend` <double, double, character[], double[] | null, double | null> => null;
type `p2p_arrows` <integer[], double[], double[], double[], double, any, ...> => null;
type `panes` <class<`matrix`>, double[], double[], double, double, any, any> => list<double[]>;
type `pasteCols` <class<`matrix`>, character> => character[];
type `paxis3d` <character, class<`matrix`>, double[] | null, logical, logical, null, double, double, double, null, ...> => null;
type `perspx` <integer[], integer[], class<`matrix`>, ...> => class<`matrix`>;
type `pie3D` <double[], null, double, double, double, double, character, character[] | null, character[] | null, double[] | null, any, double, null, double, double, double[], character, ...> => double[];
type `pie3D.labels` <double[], double, double, double, character[], character, double, double, double> => list<double>;
type `pie.labels` <double, double, double[], character[], double, character, logical, double, logical, double[], ...> => list<logical>;
type `plot_bg` <character> => null;
type `plotCI` <class<`matrix`> | integer[], class<`by`> | double[], class<`by`> | double[], class<`by`> | double[], null, null, character, double, double, character, logical, null | character, any, ...> => list<class<`matrix`> | class<`by`> | double[]>;
type `plot.dendrite` <class<`dendrite`>, character[], character, double[], double, character[], ...> => list<double[]>;
type `plotH` <character[] | class<`formula`> | double[], ...> => (class<`matrix`> | null);
type `plotH.default` <double[] | character[], double[] | class<`by`>, character, character, double, double[] | null, character, ...> => (null | class<`matrix`>);
type `plotH.formula` <class<`formula`>, class<`data.frame`>, character, character, ...> => null;
type `polar.plot` <double[], double[], any, null, double, logical, character, ...> => list<double[] | character>;
type `polygon.shadow` <double[], double[], double[] | null, double[] | null, character[]> => null;
type `print.brklist` <class<`brklist`>, ...> => null;
type `propbrk` <class<`factor`> | character[], character, logical> => double;
type `psegments3d` <double[], double[], double[], class<`matrix`>, ...> => null;
type `ptext3d` <double[], double[], double[], character[] | expression, class<`matrix`>, ...> => null;
type `pyramid.plot` <class<`matrix`> | double[], class<`matrix`> | double[], character[], character[], character, double[] | null, double[] | null, character, character[], character[], double, double, double[], double, logical, any, logical, double, character | null> => double[];
type `radial.grid` <character[] | integer[] | null, double[], logical, double[], double, logical, double, double[], character, character, character, logical, logical> => list<logical>;
type `radial.pie` <double[] | list<integer[]>, null, null, any, any, any, double, character[] | integer[], null, logical, double, logical, double, null, character, character, character, double[], logical, double> => list<double[] | character>;
type `radial.plot` <class<`matrix`> | double[], double[] | null, any, double[] | null, logical, any, logical, character, double, character, character, character, character | integer[] | double, character, double | integer[], any, logical, double, logical, character> => list<double[] | character>;
type `radial.plot.labels` <double[], double[], character, null, double, logical, character[], null, double | null, ...> => null;
type `radialtext` <character, double[], double | null, double, null | double, double, double | null, double, double, logical, double | null, ...> => list<double>;
type `raw.means.plot` <class<`data.frame`>, double | character, double | character, double | character, logical, any, double, null, double, integer[], integer[], character, null, character, character[], character, double, double, character, character> => (null | list<double[]>);
type `rectFill` <double[], double[], double[], double[], character, character | integer[], null | double[], null | double[], integer[] | character[], double, character | integer[], ...> => null;
type `remove.args` <list<double>, class<`function`>> => list<double>;
type `rescale` <class<`matrix`> | double[], double[]> => (class<`matrix`> | double[]);
type `revaxis` <double[], double[], logical, logical, double, double, null, null, null, ...> => null;
type `ruginv` <double[], double, double, double, character, character, logical, ...> => double[];
type `seats` <double, double, double> => class<`data.frame`>;
type `size_n_color` <class<`matrix`> | double[], class<`matrix`> | double[], class<`matrix`> | double[], character | null, class<`matrix`> | character[], character, null | double[], character, double[], integer[] | null, double, double, logical, double[] | null, character, null | double[], character[] | null, double, double, logical> => list<double[]>;
type `sizeplot` <double[], double[], double, double, logical, any, logical, ...> => null;
type `sizetree` <class<`data.frame`>, double, any, double, any, any, logical, logical, logical, null | list<character[]>, any, null | character[], any, ...> => (null | list<double[]>);
type `sliceArray` <class<`array`>, double> => class<`matrix`>;
type `smoothColors` <..., null> => character[];
type `soil.texture` <null | class<`data.frame`>, character, double[], character[], list<double[]>, logical, logical, character, any, logical, character, character, character, double, logical, logical, null, character | integer[], any, ...> => (null | list<double[]>);
type `soil.texture.uk` <class<`data.frame`>, character, double[], character[], list<double[]>, logical, logical, character, any, logical, character, character, character, double, logical, logical, null, double[], double, null> => list<double[]>;
type `spread.labels` <double[], double[], character[] | class<`factor`>, null, null, logical, any, double, ...> => null;
type `spreadout` <^double[], double> => ^double[];
type `stackpoly` <class<`matrix`> | double[], null, character, character, character, null | double[], character[] | null, null, null | double[], double, double, character | null, null | character, logical, logical, logical, logical, double, ...> => null;
type `staircase.plot` <double[], logical[], character[], double, character, null, character, integer[], character, character, double, logical, logical, double, character, character, ...> => list<character>;
type `staircasePlot` <double[], logical[], character[], double, character, null, list<character | integer[] | character | null>, character, character, double, logical, logical, double, character, character, ...> => list<character>;
type `starPie` <integer[], double[], double, class<`matrix`>, null, any, null, logical, character[], double> => null;
type `staxlab` <double, double[], character[] | double[], double, double, double, null | double, double, double, ...> => (null | list<logical>);
type `std.error` <double[], logical> => double;
type `sumbrk` <character[], character, logical> => integer;
type `sumDendrite` <class<`dendrite`>> => double;
type `symbolbarplot` <class<`matrix`>, double, null, null, null, logical, logical, character[], any, null, null, null, null, null, null, logical, logical, logical, logical, double> => double[];
type `symbolbox` <double, double, double, double, double, double, character, character, logical, logical, ...> => null;
type `tab.title` <character, character, character, character, double, double, double, double> => list<double>;
type `taylor.diagram` <double[], double[], logical, character, double, logical, character, character, character, logical, double, double, double, logical, character, any, double, double, logical, any> => list<double[] | character>;
type `textbox` <double[], double, character[], character[], double, double, logical, double[], null | double, null, character | null, character | null, character | null, double | null, double, character | double, double, double> => double[];
type `thigmophobe` <double[], double[], integer[], logical, logical, double[], double[], double, double> => integer[];
type `thigmophobe.labels` <double[], double[], character[], null, ...> => list<logical>;
type `triax.abline` <double | null, null | double, null | double, character, character, logical> => null;
type `triax.fill` <list<double[]>> => null;
type `triax.frame` <double[], character[] | null, null | list<double[]>, character, double, double, logical, logical, any, any, logical> => null;
type `triax.plot` <null | class<`data.frame`>, character, double[], character[] | null, null | list<double[]>, character, double, double, logical, logical, any, any, logical, logical, logical, null, character | integer[], any, double[], logical> => list<null | list<character | double[]> | list<double[] | character | double[] | double | character | double[]>>;
type `triax.points` <class<`data.frame`>, logical, logical, null, character | double[], double, character, logical, ...> => list<double[]>;
type `tsxpos` <class<`ts`>, any, any> => double[];
type `twoord.plot` <double[], double[], double[], double[], null, character, null, double[] | null, double[] | null, double[], double, double, character, null | integer[], character, null | double, null | double[], character, null | double, double> => list<double[] | character>;
type `twoord.stackplot` <integer[], integer[], class<`matrix`>, class<`matrix`>, character[], character[], character[], character[], character, character, character, character, ..., double | null, double, logical, double[]> => (null | list<double[]>);
type `valid.n` <class<`factor`> | double[] | ^integer[] | character[], logical> => integer;
type `vectorField` <class<`matrix`> | double[], class<`matrix`> | double[], null | integer[], null | integer[], double, double, character, character[]> => null;
type `violin_plot` <class<`data.frame`> | class<`matrix`> | double[], any, logical, logical, any, any, double, logical, logical, double, character, logical, null, double, any, any, logical, logical, character, character> => null;
type `weighted.hist` <integer[], double[], integer[], null, logical, logical, null, null, logical, ...> => list<double[] | class<`matrix`> | character>;
type `zoomInPlot` <double[], double[], null, null, double[], double[], null, character, double, ...> => list<null | integer[]>;
