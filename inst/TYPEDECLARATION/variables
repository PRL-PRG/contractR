type `as.data.frame.var` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`> | class<`vars`>, null, logical, double, ...> => class<`data.frame`>;
type `as.data.frame.vars` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`> | class<`vars`>, null, logical, double, ...> => class<`data.frame`>;
type `as.vars` <class<`data.frame`>> => class<`vars`>;
type `as.vars.data.frame` <class<`data.frame`>> => class<`vars`>;
type `bounds` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`vars`> | class<`factor_var`, `var`> | class<`factor_var`, `ordered_var`, `var`>> => list<any>;
type `bounds.continuous_var` <class<`continuous_var`, `numeric_var`, `var`>> => list<double[]>;
type `bounds.default` <class<`factor_var`, `var`>> => list<null>;
type `bounds.discrete_var` <class<`discrete_var`, `numeric_var`, `var`>> => list<double[]>;
type `bounds.ordered_var` <class<`factor_var`, `ordered_var`, `var`>> => list<class<`factor`, `ordered`>>;
type `bounds.vars` <class<`vars`>> => list<double[] | class<`factor`, `ordered`> | null>;
type `check` <class<`vars`> | class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`>, class<`data.frame`>> => logical;
type `check.continuous_var` <class<`continuous_var`, `numeric_var`, `var`>, class<`data.frame`>> => logical;
type `check.discrete_var` <class<`discrete_var`, `numeric_var`, `var`>, class<`data.frame`>> => logical;
type `check.factor_var` <class<`factor_var`, `var`>, class<`data.frame`>> => logical;
type `check.ordered_var` <class<`factor_var`, `ordered_var`, `var`>, class<`data.frame`>> => logical;
type `check.vars` <class<`vars`>, class<`data.frame`>> => logical;
type `c.var` <...> => class<`vars`>;
type `desc` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`> | class<`vars`>> => character[];
type `desc.var` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`>> => character;
type `desc.vars` <class<`vars`>> => character[];
type `factor_var` <character, character | null, character[]> => class<`factor_var`, `var`>;
type `FUN` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`vars`> | class<`factor_var`, `var`> | class<`factor_var`, `ordered_var`, `var`>> => list<any> | <class<`vars`> | class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`>, class<`data.frame`>> => logical | <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`> | class<`vars`>> => character[] | <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`vars`>, ...> => list<any> | <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`> | class<`vars`>> => logical[] | <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`> | class<`vars`>> => (null | ^character[]) | <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`vars`>> => list<any>;
type `is.bounded` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`> | class<`vars`>> => logical[];
type `is.bounded.continuous_var` <class<`continuous_var`, `numeric_var`, `var`>> => logical;
type `is.bounded.var` <class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`>> => logical;
type `is.bounded.vars` <class<`vars`>> => logical[];
type `levels.discrete_var` <class<`discrete_var`, `numeric_var`, `var`>> => double[];
type `levels.factor_var` <class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`>> => character[];
type `levels.var` <class<`continuous_var`, `numeric_var`, `var`>> => null;
type `mkgrid` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`vars`>, ...> => list<any>;
type `mkgrid.continuous_var` <class<`continuous_var`, `numeric_var`, `var`>, double, ...> => list<double[]>;
type `mkgrid.var` <class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `var`> | class<`factor_var`, `ordered_var`, `var`>, ...> => list<double[] | class<`factor`> | class<`factor`, `ordered`>>;
type `mkgrid.vars` <class<`vars`>, ...> => list<double[] | class<`factor`, `ordered`> | class<`factor`> | class<`factor`> | double[]>;
type `numeric_var` <character, character | null, character | null, double[], any, double[] | null> => (class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`>);
type `ordered_var` <character, character, character[]> => class<`factor_var`, `ordered_var`, `var`>;
type `support` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`vars`>> => list<any>;
type `support.var` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `var`> | class<`factor_var`, `ordered_var`, `var`>> => list<double[] | class<`factor`> | class<`factor`, `ordered`>>;
type `support.vars` <class<`vars`>> => list<double[] | class<`factor`, `ordered`> | class<`factor`> | class<`factor`> | double[]>;
type `unit` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`> | class<`vars`>> => (null | ^character[]);
type `unit.numeric_var` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`>> => character;
type `unit.var` <class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`>> => null;
type `unit.vars` <class<`vars`>> => ^character[];
type `.var` <character, character | null> => class<`var`>;
type `variable.names.var` <class<`continuous_var`, `numeric_var`, `var`> | class<`discrete_var`, `numeric_var`, `var`> | class<`factor_var`, `ordered_var`, `var`> | class<`factor_var`, `var`>, ...> => character;
type `variable.names.vars` <class<`vars`>, ...> => character[];
