type `as.tframe` <...> => class<`tframe`, `tstframe`>;
type `checktframeConsistent` <class<`tframe`, `tstframe`>, double[]> => logical;
type `checktframeConsistent.default` <class<`tframe`, `tstframe`>, double[]> => logical;
type `classed` <double[], character[]> => class<`tframe`, `tstframe`>;
type `earliestEnd` <class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => double[];
type `earliestEndIndex` <class<`tframe`, `tstframe`> | class<`ts`> | class<`matrix`, `mts`, `ts`>, ...> => double;
type `earliestEndIndex.default` <class<`ts`> | class<`matrix`, `mts`, `ts`>, ...> => double;
type `earliestEndIndex.tframe` <class<`tframe`, `tstframe`>, ...> => double;
type `earliestStart` <class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => double[];
type `earliestStartIndex` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`>, ...> => double;
type `earliestStartIndex.default` <class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => double;
type `earliestStartIndex.tframe` <class<`tframe`, `tstframe`>, ...> => double;
type `end.tframe` <class<`tframe`, `tstframe`>, ...> => double[];
type `is.tframe` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`> | double[] | list<double[]>> => logical;
type `is.tframed` <class<`matrix`> | class<`matrix`, `mts`, `ts`>> => logical;
type `is.tframed.default` <class<`matrix`>> => logical;
type `is.tframed.ts` <class<`matrix`, `mts`, `ts`>> => logical;
type `latestEnd` <class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => double[];
type `latestEndIndex` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`>, ...> => double;
type `latestEndIndex.default` <class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => double;
type `latestEndIndex.tframe` <class<`tframe`, `tstframe`>, ...> => double;
type `latestStart` <class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => double[];
type `latestStartIndex` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`>, ...> => double;
type `latestStartIndex.default` <class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => double;
type `latestStartIndex.tframe` <class<`tframe`, `tstframe`>, ...> => double;
type `nseries` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`>> => integer;
type `nseries.default` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`>> => integer;
type `selectSeries` <class<`matrix`>, double[]> => class<`matrix`>;
type `selectSeries.default` <class<`matrix`>, double[]> => class<`matrix`>;
type `seriesNames` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`> | double[]> => character[];
type `seriesNames<-` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`>, character[] | null> => (class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `seriesNames<-.default` <class<`matrix`>, character[] | null> => class<`matrix`>;
type `seriesNames.default` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`> | double[]> => character[];
type `seriesNames<-.ts` <class<`matrix`, `mts`, `ts`> | class<`ts`>, character[]> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `splice` <class<`matrix`, `mts`, `ts`> | class<`ts`>, class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `splice.default` <class<`matrix`, `mts`, `ts`> | class<`ts`>, class<`matrix`, `mts`, `ts`> | class<`ts`>, ...> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tbind` <class<`ts`> | double[], ..., logical, logical, logical> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tbind.default` <double[], ..., logical, logical, logical> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tbind.ts` <class<`ts`>, ..., logical, logical, logical> => class<`matrix`, `mts`, `ts`>;
type `testEqual` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`>, class<`matrix`> | integer[] | class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`>, double> => logical;
type `testEqual.default` <class<`tframe`, `tstframe`>, class<`tframe`, `tstframe`>, double> => logical;
type `testEqual.matrix` <class<`matrix`> | class<`matrix`, `mts`, `ts`>, class<`matrix`> | integer[] | class<`matrix`, `mts`, `ts`>, double> => logical;
type `testEqual.numeric` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`>, class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`>, double> => logical;
type `testEqualtframes` <null, null> => logical;
type `testEqualtframes.default` <null, null> => logical;
type `tfend` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`> | double[] | null> => (double[] | null);
type `tfend.default` <class<`matrix`, `mts`, `ts`> | class<`ts`> | double[] | null> => (double[] | null);
type `tfend.tstframe` <class<`tframe`, `tstframe`>> => double[];
type `tfExpand` <class<`tframe`, `tstframe`>, double, double> => class<`tframe`, `tstframe`>;
type `tfExpand.tframe` <class<`tframe`, `tstframe`>, double, double> => class<`tframe`, `tstframe`>;
type `tffrequency` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`> | double[]> => double;
type `tffrequency.default` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`> | double[]> => double;
type `tfL` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`> | integer[], double> => (class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`>);
type `tfL.default` <class<`matrix`, `mts`, `ts`> | class<`ts`> | integer[], double> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tfL.tframe` <class<`tframe`, `tstframe`>, double> => class<`tframe`, `tstframe`>;
type `tfprint` <class<`ts`>, ...> => class<`ts`>;
type `tfprint.default` <class<`ts`>, ...> => class<`ts`>;
type `tframe` <class<`matrix`, `mts`, `ts`> | class<`ts`> | class<`matrix`>> => (class<`tframe`, `tstframe`> | null);
type `tframe<-` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`> | double[], null | class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | list<double[]>> => (class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tframed` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`> | double[], null | class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | list<double[]>, null, ...> => (class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tframed.default` <class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`> | double[], null | class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | list<double[]>, null, null | double[], null, ...> => (class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tframe.default` <class<`matrix`>> => null;
type `tframe.ts` <class<`matrix`, `mts`, `ts`> | class<`ts`>> => class<`tframe`, `tstframe`>;
type `tfSet` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | list<double[]>, class<`matrix`> | class<`matrix`, `mts`, `ts`> | class<`ts`> | double[]> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tfSet.default` <class<`matrix`, `mts`, `ts`>, class<`matrix`>> => class<`matrix`, `mts`, `ts`>;
type `tfSet.list` <list<double[]>, class<`matrix`, `mts`, `ts`> | class<`matrix`> | class<`ts`>> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tfSet.tstframe` <class<`tframe`, `tstframe`> | list<double[]>, class<`matrix`, `mts`, `ts`> | class<`matrix`> | class<`ts`> | double[]> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tfspan` <class<`ts`>, ...> => class<`tframe`, `tstframe`>;
type `tfstart` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`> | double[]> => double[];
type `tfstart.default` <class<`matrix`, `mts`, `ts`> | class<`ts`> | double[]> => double[];
type `tfstart.tstframe` <class<`tframe`, `tstframe`>> => double[];
type `tftime` <class<`tframe`, `tstframe`>> => class<`ts`>;
type `tftime.default` <class<`tframe`, `tstframe`>> => class<`ts`>;
type `tfTruncate` <class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`>, double, double | null> => (class<`matrix`, `mts`, `ts`> | class<`tframe`, `tstframe`> | class<`ts`>);
type `tfTruncate.default` <class<`matrix`, `mts`, `ts`> | class<`ts`>, double, double | null> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tfTruncate.tframe` <class<`tframe`, `tstframe`>, double, double | null> => class<`tframe`, `tstframe`>;
type `tfUnSet` <class<`matrix`>> => class<`matrix`>;
type `tfUnSet.default` <class<`matrix`>> => class<`matrix`>;
type `tfwindow` <class<`matrix`, `mts`, `ts`> | class<`ts`>, null | class<`tframe`, `tstframe`>, any, any, logical> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `tfwindow.ts` <class<`matrix`, `mts`, `ts`> | class<`ts`>, null | class<`tframe`, `tstframe`>, double[], double[] | null, logical> => (class<`matrix`, `mts`, `ts`> | class<`ts`>);
type `time.tframe` <class<`tframe`, `tstframe`>, ...> => class<`ts`>;
type `Tobs` <class<`tframe`, `tstframe`> | class<`matrix`, `mts`, `ts`> | class<`ts`> | double[]> => double;
type `Tobs.default` <class<`matrix`, `mts`, `ts`> | class<`ts`> | double[]> => integer;
type `Tobs.tframe` <class<`tframe`, `tstframe`>> => double;
type `trimNA` <class<`matrix`, `mts`, `ts`>, logical, logical> => class<`matrix`, `mts`, `ts`>;
type `trimNA.default` <class<`matrix`, `mts`, `ts`>, logical, logical> => class<`matrix`, `mts`, `ts`>;
