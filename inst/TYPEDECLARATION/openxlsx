type `$` <double | character, double, double, double, double> => character[] | <double, integer, integer, integer, integer> => character[] | <class<`Style`>> => character | <logical, logical, character | null, double, null | character[], null | ^character[], null | character[], null | character[], null | ^character[], null | ^character[], double, character> => class<`Sheet_Data`> | <double, class<`Style`>, integer[], double[], any> => list<list<class<`Style`> | character | double[] | class<`Style`> | character | integer[]>> | <character | double, character, integer, integer, integer, integer, double, double> => list<character> | < > => list<list<character>> | <integer[], integer[], integer[], character[], ^character[], logical> => integer | <character, character> => integer | < > => integer | <double, integer, integer, double, double, character, character, class<`Date`> | class<`POSIXct`, `POSIXt`> | double[], integer, integer, integer> => double | <character | double, integer | null, integer | null, logical, logical> => character | <integer, integer[], character[]> => character[] | <logical> => (class<`Sheet_Data`> | class<`Workbook`> | class<`WorkSheet`>) | <character, character | null, character | null, character | null> => list<any> | <character, integer, integer, double, double, any, any, character, any, any> => double | <integer, character> => null | <double, integer, integer, double, double, character, integer, integer, integer> => double | <any, any, any, character, logical> => double | <character, character, character, character, null> => character[] | <character[], character, class<`Style`> | list<class<`Style`>>, logical, double, double> => double | <character> => list<class<`Style`>> | <character | double, character[], character, logical, character, character, logical, integer, logical, logical, logical, logical> => character[] | <character, logical, character | null, double, null | character[], null | ^character[], null | character[], null | character[], null | ^character[], null | ^character[], character | logical, double> => integer | <character, character | null, character | null, null | character, logical> => logical | <class<`data.frame`>, character | double, integer, double, logical, list<character[]>, any, logical, any, any> => double | < > => null | <double | character> => double | <class<`Style`>> => integer | <character[]> => double | <character> => character | <double | integer[], character[] | integer[], logical> => null;
type `addFilter` <class<`Workbook`>, double, double, integer[]> => class<`Workbook`>;
type `addStyle` <class<`Workbook`>, double, class<`Style`>, double | integer[], integer[], logical, logical> => list<list<class<`Style`> | character | integer[]>>;
type `addWorksheet` <class<`Workbook`>, character, logical, character | null, double, null | character[], null | ^character[], null | character[], null | character[], null | ^character[], null | ^character[], logical> => integer;
type `build_cell_merges` <list<any>> => list<any>;
type `build_cell_types_integer` <character[], integer> => integer[];
type `buildFillList` <character[]> => list<character | list<character[]>>;
type `buildFontList` <character[]> => list<list<character>>;
type `build_table_xml` <character, character, character, character[], logical, logical> => character;
type `classStyles` <class<`Workbook`>, character | double, integer, double, logical, integer, list<character[]>, any> => double;
type `cloneWorksheet` <class<`Workbook`>, character, character> => integer;
type `col2hex` <character[]> => character[];
type `conditionalFormatting` <class<`Workbook`>, character, double | integer[], integer[], character | double[] | null, class<`Style`> | null | character[], character, ...> => double;
type `convert_from_excel_ref` <character[]> => integer[];
type `convertFromExcelRef` <character[] | integer[] | double> => integer[];
type `convertToDate` <^double[], character, ...> => class<`Date`>;
type `convertToDateTime` <^double[], character, ...> => class<`POSIXct`, `POSIXt`>;
type `convert_to_excel_ref` <double[], character[]> => character[];
type `copyWorkbook` <class<`Workbook`>> => class<`Workbook`>;
type `cppReadFile` <character> => character;
type `createComment` <character[], character, null | list<class<`Style`>>, logical, double, double> => class<`Comment`>;
type `createFillNode` <class<`Style`>, character> => character;
type `createFontNode` <class<`Style`>> => character;
type `createNamedRegion` <class<`Workbook`>, double, integer[], integer[], character> => character;
type `createStyle` <character | null, double | null, character | null, character, null | character, character[], character, null | character, null | character, null | character, null | character, null | character[]> => class<`Style`>;
type `createWorkbook` <character, character | null, character | null, character | null> => class<`Workbook`>;
type `dataValidation` <class<`Workbook`>, double, double | integer[], integer[], character, any, class<`Date`> | class<`POSIXct`, `POSIXt`> | double[] | character, logical, logical, logical> => double;
type `deleteData` <class<`Workbook`>, double, character[] | integer[], double | integer[], logical> => double;
type `filter` <character[]> => logical[];
type `freezePane` <class<`Workbook`>, character | double, double | null, double | null | character, logical, logical> => character;
type `FUN` <character> => logical | <character> => character[] | <character> => character | <character[]> => logical | <character[] | class<`factor`> | double[]> => character | <character> => character[] | <character[]> => character[] | <class<`POSIXct`, `POSIXt`> | character[] | class<`Date`> | class<`factor`> | double[]> => character[] | <character[]> => logical | <character> => (null | list<character | character | list<character>>) | <character[]> => character[] | <class<`Style`>> => character | <integer> => character | <character> => character | <class<`WorkSheet`>> => logical | <character[]> => character | <character[]> => (character | list<character>) | <integer> => integer[] | <character> => logical | <character[]> => integer[] | <character[]> => character[] | <character> => (character | list<character[]>) | <character, character> => character[] | <character[]> => character[] | <character> => character | <character> => character[] | <integer> => list<class<`Style`> | character | integer[] | class<`Style`> | character | integer> | <character[]> => logical | <character> => character | <character> => character | <...> => list<any> | <character> => character[] | <integer> => character | <character> => list<character[]> | <character[]> => integer[] | <integer> => character | <character[]> => character[] | <character[]> => character | <integer> => class<`Hyperlink`> | <character[]> => character[] | <character[]> => integer[] | <integer> => character | <...> => list<character> | <character> => character[] | <character> => logical | <character> => integer[] | <integer> => double | <integer> => character[] | <character[]> => logical | <character | null> => (character | null) | <character> => integer | <character[]> => character[] | <character[]> => character[] | <character> => character | <character> => double[] | <character> => character[] | <integer> => (integer[] | null) | <character[]> => integer[] | <character[]> => logical | <character[]> => character[];
type `genBaseContent_Type` < > => character[];
type `genBaseCore` <character, character | null, character | null, character | null> => character[];
type `genBasePic` <integer> => character;
type `genBaseSheetRels` <integer> => character[];
type `genBaseStyleSheet` <null, null, null> => list<null | character[]>;
type `genBaseWorkbook` < > => list<character | null>;
type `genBaseWorkbook.xml.rels` < > => character[];
type `genClientData` <double, double, logical, double, double> => character;
type `gen_databar_extlst` <character, character, character, character, null, double, double> => character;
type `genSlicerCachesExtLst` <double> => character;
type `getAttrs` <character[], character> => list<character[]>;
type `getAttrsFont` <character[], character> => list<character>;
type `getBaseFont` <class<`Workbook`>> => list<list<character>>;
type `getCellInfo` <character, character[], logical, double, null, logical> => list<character[] | integer>;
type `getCellRefs` <class<`data.frame`>> => character[];
type `getChildlessNode` <character, character> => character[];
type `getFile` <character> => character;
type `getId` <character[]> => list<character>;
type `getNodes` <character, character> => character[];
type `getOpenClosedNode` <character, character, character> => character;
type `getRId` <character[]> => list<character>;
type `get_shared_strings` <character, logical> => character[];
type `getSharedStringsFromFile` <character, logical> => character[];
type `getSheetNames` <character> => character[];
type `getStyles` <class<`Workbook`>> => list<class<`Style`>>;
type `getTables` <class<`Workbook`>, character> => character[];
type `headerFooterSub` <^character[] | null> => (^character[] | null);
type `insertImage` <class<`Workbook`>, character | double, character, double, double, double, double | character, character, double> => list<character>;
type `int2col` <integer[]> => character[];
type `loadWorkbook` <character, null, logical> => class<`Workbook`>;
type `loadworksheets` <class<`Workbook`>, list<class<`Style`>>, character[], logical[]> => class<`Workbook`>;
type `mergeCells` <class<`Workbook`>, double | character, double[], double | integer[]> => character[];
type `modifyBaseFont` <class<`Workbook`>, double, character, character> => character;
type `names<-.Workbook` <class<`Workbook`>, character[]> => class<`Workbook`>;
type `names.Workbook` <class<`Workbook`>> => character[];
type `naToNULLList` <null | ^character[]> => list<any>;
type `openxlsxCoerce` <class<`data.frame`> | class<`matrix`> | character[] | double[], any> => class<`data.frame`>;
type `openxlsxCoerce.data.frame` <class<`data.frame`>, logical> => class<`data.frame`>;
type `openxlsxCoerce.default` <character[] | double[], any> => class<`data.frame`>;
type `openxlsxCoerce.matrix` <class<`matrix`>, logical> => class<`data.frame`>;
type `read_workbook` <integer[], integer[], character[], integer, null, logical, character, logical, logical, integer, class<`function`>> => class<`data.frame`>;
type `read.xlsx` <character, double, double, logical, logical, logical, logical, logical, null, null, logical, character> => class<`data.frame`>;
type `read.xlsx.default` <character, double, double, logical, logical, logical, logical, logical, null, null, logical, character> => class<`data.frame`>;
type `removeCellMerge` <class<`Workbook`>, double, double, double> => character[];
type `removeHeadTag` <character[]> => character;
type `replaceIllegalCharacters` <^character[]> => ^character[];
type `replaceXMLEntities` <character[]> => character[];
type `setColWidths` <class<`Workbook`>, character | double, integer[] | double, double, logical[], logical> => double;
type `setRowHeights` <class<`Workbook`>, character, integer[], double> => character[];
type `validateBorderStyle` <character> => character;
type `validateColour` <character[], character> => character[];
type `validateSheet` <double | character> => double;
type `writeComment` <class<`Workbook`>, double, character | double, double, class<`Comment`>, null> => class<`Workbook`>;
type `writeData` <class<`Workbook`>, character | double, character[] | class<`data.frame`> | class<`matrix`> | double[], double, double, null, logical, logical, null, character[], character, character> => double;
type `writeDataTable` <class<`Workbook`>, character | double, class<`data.frame`>, double, double, null, logical, logical, character, null | character, null, logical> => character[];
type `xml_to_hyperlink` <character[] | list<any>> => list<any>;
