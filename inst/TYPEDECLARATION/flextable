type `add_cellstyle_column` <class<`data.frame`>, character, any> => class<`data.frame`>;
type `add_footer` <class<`flextable`>, logical, ..., null> => class<`flextable`>;
type `add_footer_lines` <class<`flextable`>, character[], logical> => class<`flextable`>;
type `add_footer_row` <class<`flextable`>, logical, character[], double[]> => class<`flextable`>;
type `add_header` <class<`flextable`>, logical, ..., null> => class<`flextable`>;
type `add_header_lines` <class<`flextable`>, character[], logical> => class<`flextable`>;
type `add_header_row` <class<`flextable`>, logical, character[], double[]> => class<`flextable`>;
type `add_parstyle_column` <class<`data.frame`>, character, any, any> => class<`data.frame`>;
type `add_raster_as_filecolumn` <class<`data.frame`>> => class<`data.frame`>;
type `add_rows` <class<`cell_struct`> | class<`chunkset_struct`> | class<`complex_tabpart`> | class<`fpstruct`> | class<`par_struct`> | class<`text_struct`>, ...> => (class<`cell_struct`> | class<`chunkset_struct`> | class<`complex_tabpart`> | class<`fpstruct`> | class<`par_struct`> | class<`text_struct`>);
type `add_rows.cell_struct` <class<`cell_struct`>, integer, logical, ...> => class<`cell_struct`>;
type `add_rows.chunkset_struct` <class<`chunkset_struct`>, integer, logical, class<`data.frame`>, ...> => class<`chunkset_struct`>;
type `add_rows.complex_tabpart` <class<`complex_tabpart`>, class<`data.frame`>, logical> => class<`complex_tabpart`>;
type `add_rows.fpstruct` <class<`fpstruct`>, integer, logical, character | class<`paragraph`> | double | null, ...> => class<`fpstruct`>;
type `add_rows.par_struct` <class<`par_struct`> | class<`text_struct`>, integer, logical, ...> => (class<`par_struct`> | class<`text_struct`>);
type `add_rows.text_struct` <class<`par_struct`> | class<`text_struct`>, integer, logical, ...> => (class<`par_struct`> | class<`text_struct`>);
type `add_runstyle_column` <class<`data.frame`>, character> => class<`data.frame`>;
type `align` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `align_nottext_col` <class<`flextable`>, character, logical, logical> => class<`flextable`>;
type `align_text_col` <class<`flextable`>, character, logical, logical> => class<`flextable`>;
type `as_b` <character | double[]> => class<`chunk`, `data.frame`>;
type `as_bracket` <..., character, character, character> => class<`chunk`, `data.frame`>;
type `as_chunk` <character[] | class<`factor`> | ^double[] | null, class<`fp_text`> | null, class<`function`>, ...> => class<`chunk`, `data.frame`>;
type `as.data.frame.cell_struct` <class<`cell_struct`>, ...> => class<`data.frame`>;
type `as.data.frame.par_struct` <class<`par_struct`>, ...> => class<`data.frame`>;
type `as.data.frame.text_struct` <class<`text_struct`>, ...> => class<`data.frame`>;
type `as_flextable` <class<`data.frame`, `grouped_data`>, ...> => class<`flextable`>;
type `as_flextable.grouped_data` <class<`data.frame`, `grouped_data`>, null, logical, ...> => class<`flextable`>;
type `as_grouped_data` <class<`data.frame`, `data.table`>, character, null> => class<`data.frame`, `grouped_data`>;
type `as_i` <class<`chunk`, `data.frame`> | double[]> => class<`chunk`, `data.frame`>;
type `as_image` <character, double, double, ...> => class<`chunk`, `data.frame`, `img_src`>;
type `as_new_data` <class<`flextable`>, ..., null> => class<`data.frame`>;
type `as_paragraph` <..., null> => class<`paragraph`>;
type `as_struct` <integer, character[], class<`fp_cell`> | class<`fp_par`> | class<`fp_text`>, class<`function`>> => (class<`cell_struct`> | class<`par_struct`> | class<`text_struct`>);
type `as_sub` <character> => class<`chunk`, `data.frame`>;
type `as_sup` <character> => class<`chunk`, `data.frame`>;
type `as_wide_matrix_` <class<`data.frame`>, character, character> => class<`matrix`>;
type `autofit` <class<`flextable`>, double, double> => class<`flextable`>;
type `bg` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `body_add_flextable` <class<`rdocx`>, class<`flextable`>, character, character, logical> => class<`rdocx`>;
type `bold` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `border` <class<`flextable`>, any, any, null | class<`fp_border`>, any, any, any, any> => class<`flextable`>;
type `border_css` <character[], double[], character[], character> => character[];
type `border_inner` <class<`flextable`>, any, character> => class<`flextable`>;
type `border_inner_h` <class<`flextable`>, any, character> => class<`flextable`>;
type `border_inner_v` <class<`flextable`>, any, character> => class<`flextable`>;
type `border_outer` <class<`flextable`>, any, character> => class<`flextable`>;
type `border_pml` <character[], double[], character[], character> => character[];
type `border_remove` <class<`flextable`>> => class<`flextable`>;
type `border_wml` <character[], double[], character[], character> => character[];
type `cast_borders` <class<`fp_cell`> | class<`fp_par`>> => list<character | double>;
type `cell_data` <class<`cell_struct`>, class<`data.frame`, `data.table`>, character, class<`matrix`>, class<`matrix`>, double[], double[], character[]> => class<`data.frame`>;
type `[<-.cell_struct` <class<`cell_struct`>, any, any, any, class<`fp_cell`> | character[] | double[]> => class<`cell_struct`>;
type `[.cell_struct` <class<`cell_struct`> | class<`par_struct`>, any, any, character> => (class<`matrix`> | double[]);
type `check_choice` <character, character[]> => logical;
type `check_formula_i_and_part` <class<`formula`> | double[] | null, any> => logical;
type `check_merge` <class<`complex_tabpart`>> => class<`complex_tabpart`>;
type `chunk_dataframe` <...> => class<`data.frame`>;
type `[<-.chunkset_struct` <class<`chunkset_struct`>, any, integer[] | double | character[], list<class<`chunk`, `data.frame`>> | class<`paragraph`>> => class<`chunkset_struct`>;
type `[.chunkset_struct` <class<`chunkset_struct`>, any, any> => list<class<`chunk`, `data.frame`>>;
type `chunkset_struct` <integer, character[]> => class<`chunkset_struct`>;
type `colalpha` <character[]> => integer[];
type `colcode0` <character[]> => character[];
type `colcodecss` <character[]> => character[];
type `colformat_char` <class<`flextable`>, ...> => class<`flextable`>;
type `colformat_char.flextable` <class<`flextable`>, null, character, character, character, character, ...> => class<`flextable`>;
type `colformat_int` <class<`flextable`>, ...> => class<`flextable`>;
type `colformat_int.flextable` <class<`flextable`>, null, character[], character, character, character, character, ...> => class<`flextable`>;
type `colformat_lgl` <class<`flextable`>, ...> => class<`flextable`>;
type `colformat_lgl.flextable` <class<`flextable`>, null, character[], character, character, character, character, character> => class<`flextable`>;
type `colformat_num` <class<`flextable`>, ...> => class<`flextable`>;
type `colformat_num.flextable` <class<`flextable`>, null, character[], character, double, character, character, character> => class<`flextable`>;
type `color` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `complex_tabpart` <class<`data.frame`> | class<`data.frame`, `grouped_data`>, character[], class<`fp_text`>, class<`fp_par`>, class<`fp_cell`>, double[], double> => class<`complex_tabpart`>;
type `compose` <class<`flextable`>, class<`formula`> | double | integer[] | null, character | double, any, character> => class<`flextable`>;
type `correct_h_border` <class<`complex_tabpart`>> => class<`complex_tabpart`>;
type `correct_v_border` <class<`complex_tabpart`>> => class<`complex_tabpart`>;
type `css_px` <^double[], character> => character[];
type `delete_part` <class<`flextable`>, character> => class<`flextable`>;
type `dim_cells` <class<`complex_tabpart`>> => list<class<`matrix`>>;
type `dim.flextable` <class<`flextable`>> => list<double[]>;
type `dim_paragraphs` <class<`complex_tabpart`>> => list<class<`matrix`>>;
type `dim_pretty` <class<`flextable`>, character> => list<double[]>;
type `docall_display` <character[], class<`function`>, class<`flextable`>, null> => class<`flextable`>;
type `docx_str` <class<`flextable`>, ...> => character;
type `docx_str.flextable` <class<`flextable`>, character, logical, any, ...> => character;
type `docx_value` <class<`flextable`>, logical, null, null, null> => character;
type `empty_blanks` <class<`flextable`>> => class<`flextable`>;
type `fit_to_width` <class<`flextable`>, double, integer, double> => class<`flextable`>;
type `fix_border_issues` <class<`flextable`>, character> => class<`flextable`>;
type `flextable` <class<`data.frame`> | class<`data.frame`, `grouped_data`> | class<`data.frame`, `tbl`, `tbl_df`>, character[], double, double, list<any>, class<`function`>> => class<`flextable`>;
type `flextable_dim` <class<`flextable`>> => list<double>;
type `flextable_html_dependency` < > => class<`html_dependency`>;
type `font` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `fontsize` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `footnote` <class<`flextable`>, double, integer[], class<`paragraph`>, character[], character> => class<`flextable`>;
type `format.complex_tabpart` <class<`complex_tabpart`>, character, logical, logical, ...> => character;
type `format_fun` <character[] | class<`factor`> | double[] | null, character, ...> => character[] | <^double[]> => character[] | <double[]> => character[] | <logical[]> => character[] | <class<`factor`>> => character[];
type `format_fun.character` <character[], character, ...> => character[];
type `format_fun.double` <double[] | null, character, character, ...> => character[];
type `format_fun.factor` <class<`factor`>, character, ...> => character[];
type `format_fun.integer` <integer, character, character, ...> => character;
type `format_fun.logical` <null, character, character, character, ...> => character;
type `fortify_content` <class<`chunkset_struct`>, class<`text_struct`>, ...> => class<`data.frame`>;
type `fpstruct` <integer, character[], character | class<`paragraph`> | double | null> => class<`fpstruct`>;
type `[<-.fpstruct` <class<`fpstruct`>, any, any, character[] | double[] | class<`paragraph`> | list<class<`chunk`, `data.frame`>>> => class<`fpstruct`>;
type `[.fpstruct` <class<`fpstruct`>, any, any> => (character[] | class<`matrix`> | double[] | list<class<`chunk`, `data.frame`>>);
type `get_columns_id` <class<`complex_tabpart`> | null, double[] | character[] | class<`formula`> | null> => double[];
type `get_dataset_columns_id` <class<`complex_tabpart`>, double | character[] | class<`formula`> | null> => (double | integer[]);
type `get_i_from_formula` <class<`formula`>, class<`data.frame`> | class<`data.frame`, `grouped_data`>> => logical[];
type `get_j_from_formula` <class<`formula`>, class<`data.frame`>> => character[];
type `get_rows_id` <class<`complex_tabpart`>, double[] | class<`formula`> | null> => double[];
type `get_xtable_widths` <character[], double> => ^double[];
type `height` <class<`data.frame`> | class<`flextable`>, null | double, any, character> => (class<`data.frame`> | class<`flextable`>);
type `height_all` <class<`flextable`>, double, character> => class<`flextable`>;
type `hline` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `hline_bottom` <class<`flextable`>, null, class<`fp_border`>, character> => class<`flextable`>;
type `hline_top` <class<`flextable`>, any, any, character> => class<`flextable`>;
type `hrule` <class<`data.frame`> | class<`flextable`>, null | double, character, character> => (class<`data.frame`> | class<`flextable`>);
type `html_str` <class<`flextable`>> => character;
type `html_str.flextable` <class<`flextable`>> => character;
type `htmltools_value` <class<`flextable`>, null, character> => class<`shiny.tag`>;
type `hyperlink_text` <character, null, class<`function`>, character, ...> => class<`chunk`, `data.frame`>;
type `italic` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `linerange` <double[], null, double | null, character, character, character, double, double> => class<`chunk`, `data.frame`, `img_chunk`>;
type `lollipop` <double[], double, double, character, character, double, double, double> => class<`chunk`, `data.frame`, `img_chunk`>;
type `merge_at` <class<`flextable`>, double | integer[] | null, double[], character> => class<`flextable`>;
type `merge_h` <class<`flextable`>, null, character> => class<`flextable`>;
type `merge_h_range` <class<`flextable`>, class<`formula`> | logical[], character | double, character | integer, character> => class<`flextable`>;
type `merge_none` <class<`flextable`>, character> => class<`flextable`>;
type `merge_rle` <character[]> => integer[];
type `merge_v` <class<`flextable`>, character[] | class<`formula`> | double | null, null | character[], character> => class<`flextable`>;
type `minibar` <double[], double | null, character, character, double, double> => class<`chunk`, `data.frame`, `img_chunk`>;
type `nrow_part` <class<`data.frame`> | class<`flextable`>, character> => double;
type `optimal_sizes` <class<`complex_tabpart`>> => list<double[]>;
type `padding` <class<`flextable`>, any, any, null | double, any, any, any, any> => class<`flextable`>;
type `par_data` <class<`par_struct`>, class<`data.frame`>, character, any, any> => class<`data.frame`, `data.table`>;
type `[<-.par_struct` <class<`par_struct`>, double | integer[], integer[], any, character | double | class<`fp_par`>> => class<`par_struct`>;
type `[.par_struct` <class<`cell_struct`> | class<`par_struct`>, any, any, character> => (class<`matrix`> | double[]);
type `ph_with.flextable` <class<`rpptx`>, class<`flextable`>, class<`location_left`, `location_str`> | class<`location_str`, `location_type`>, ...> => class<`rpptx`>;
type `pml_flextable` <class<`flextable`>, integer, double, double, double, double> => character;
type `print.flextable` <class<`flextable`>, character, ...> => null;
type `proc_freq` <class<`data.frame`>, character, character, character, logical, logical, logical, logical> => class<`flextable`>;
type `qflextable` <class<`data.frame`>> => class<`flextable`>;
type `rbind.match.columns` <list<class<`chunk`, `data.frame`>> | list<class<`chunk`, `data.frame`, `img_chunk`> | class<`chunk`, `data.frame`>> | list<class<`chunk`, `data.frame`, `img_chunk`>> | list<class<`chunk`, `data.frame`, `img_src`> | class<`chunk`, `data.frame`>> | list<class<`chunk`, `data.frame`, `img_src`>> | list<class<`data.frame`>>> => (class<`chunk`, `data.frame`> | class<`chunk`, `data.frame`, `img_chunk`> | class<`chunk`, `data.frame`, `img_src`> | class<`data.frame`>);
type `replace_missing_fptext_by_default` <class<`data.frame`>, class<`data.frame`>> => class<`data.frame`>;
type `rotate` <class<`flextable`>, null, double | integer[] | null, character, character, character> => class<`flextable`>;
type `run_data` <class<`data.frame`>, character> => class<`data.frame`>;
type `save_as_docx` <..., null, character> => character;
type `save_as_html` <class<`flextable`>, character> => character;
type `save_as_pptx` <..., null, character> => character;
type `set_caption` <class<`flextable`>, character, logical> => class<`flextable`>;
type `set_footer_df` <class<`flextable`>, class<`data.frame`>, character> => class<`flextable`>;
type `set_formatter` <class<`flextable`>, ..., null, character> => class<`flextable`>;
type `set_header_df` <class<`flextable`>, class<`data.frame`>, character> => class<`flextable`>;
type `set_header_labels` <class<`flextable`>, ..., null | list<character>> => class<`flextable`>;
type `set_part_df` <class<`flextable`>, class<`data.frame`>, character, character> => class<`flextable`>;
type `span_cells_at` <class<`complex_tabpart`>, character[], double | integer[]> => class<`complex_tabpart`>;
type `span_columns` <class<`complex_tabpart`>, character[], character[]> => class<`complex_tabpart`>;
type `span_free` <class<`complex_tabpart`> | null> => (class<`complex_tabpart`> | list<list<double[]>>);
type `span_rows` <class<`complex_tabpart`>, integer[]> => class<`complex_tabpart`>;
type `style` <class<`flextable`>, class<`formula`> | null, class<`formula`> | null, class<`fp_text`> | null, null | class<`fp_par`>, null | class<`fp_cell`>, character> => class<`flextable`>;
type `text_metric` <class<`complex_tabpart`>> => class<`data.frame`>;
type `[<-.text_struct` <class<`text_struct`>, double | integer[], integer[] | double, any, character | double | class<`fp_text`>> => class<`text_struct`>;
type `theme_alafoli` <class<`flextable`>> => class<`flextable`>;
type `theme_booktabs` <class<`flextable`>, double> => class<`flextable`>;
type `theme_box` <class<`flextable`>> => class<`flextable`>;
type `theme_tron` <class<`flextable`>> => class<`flextable`>;
type `theme_tron_legacy` <class<`flextable`>> => class<`flextable`>;
type `theme_vader` <class<`flextable`>, double> => class<`flextable`>;
type `theme_vanilla` <class<`flextable`>> => class<`flextable`>;
type `theme_zebra` <class<`flextable`>, character, character, character, character> => class<`flextable`>;
type `valign` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `vline` <class<`flextable`>, any, any, any, character> => class<`flextable`>;
type `vline_left` <class<`flextable`>, any, any, character> => class<`flextable`>;
type `vline_right` <class<`flextable`>, any, any, character> => class<`flextable`>;
type `void` <class<`flextable`>, any, character> => class<`flextable`>;
type `width` <class<`data.frame`> | class<`flextable`>, null | class<`formula`> | double[], double[]> => (class<`data.frame`> | class<`flextable`>);
type `xtable_to_flextable` <class<`data.frame`, `xtable`>, class<`fp_text`>, null, character, double[], any, logical, logical> => class<`flextable`>;
