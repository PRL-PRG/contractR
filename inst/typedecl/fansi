type `check_assumptions` < > => logical;
type `filter` <character[]> => logical[];
type `fun` <symbol, symbol> => ? logical;
type `::` <character[] | struct<`get`:any => any, `set`:any => any, `delete`:any => any, `append`:any => any, `merge`:any => any, `restore`:any => any>, double | character[], double | any => any, ? character[] | double, character[], logical | character, ??? | character, logical, character[], character> => integer[] | character[] | struct<`output`:any => any> | struct<`warning`:any => any, `error`:any => any, `message`:any => any>;
type `nchar_ctl` <character, character, logical, null, character[], logical, ???> => integer;
type `strip_ctl` <character[], character[], logical, ???> => character[];
type `strwrap_ctl` <character, double, double, double, character, logical, character, logical, character[], character> => character[];
type `substr_ctl_internal` <character[], integer[], integer[], symbol | integer, ???, logical, symbol | integer, symbol | logical, symbol | integer[], language | logical, language | logical, integer, symbol | integer[]> => character[];
type `substr2_ctl` <character[], double, double, character, character, logical, integer, logical, character[], character[]> => character[];
type `unique_chr` <character[]> => character[];
type `fansi_lines` <character[], double> => character[];
type `forder` <integer[]> => integer[];
type `has_ctl` <character, character, logical, ???> => logical;
type `has_sgr` <character, logical> => logical;
type `html_code_block` <character, character> => character;
type `html_esc` <character> => character;
type `make_hook` <any => any, character> => any => any;
type `nchar_sgr` <character, character, logical, null, logical> => integer;
type `nzchar_ctl` <character, null, character, logical> => logical;
type `sgr_to_html` <character, logical, character[]> => character;
type `strip_sgr` <character, logical> => character;
type `strsplit_ctl` <character, character, logical, logical, logical, logical, character[], character[]> => tuple<character[]>;
type `strsplit_sgr` <character, character, logical, logical, logical, logical, character[]> => tuple<character[]>;
type `strtrim_ctl` <character, double, logical, character> => character;
type `strwrap2_ctl` <character[], double, double, double, character, logical, character, logical, character, logical, logical, double[], logical, character[], character> => character[];
type `substr_ctl` <character, double, double, logical, character[], character[]> => character;
type `substr_sgr` <character, double, double, logical, character[]> => character;
type `tabs_as_spaces` <character, double[], logical, character> => character;
type `term_cap_test` < > => character[];
type `unhandled_ctl` <character[], character[]> => struct<`index`:integer[], `start`:integer[], `stop`:integer[], `error`:character[], `translated`:logical[], `esc`:character[]>;
