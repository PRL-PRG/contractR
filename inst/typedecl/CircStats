type `A1inv` <double> => double;
type `circ.cor` <double[], double[], logical> => struct<`r`:double, `test.stat`:double, `p.value`:double>;
type `circ.mean` <double[]> => double;
type `circ.plot` <double[], character, double, logical, double, double, double, double> => null;
type `circ.range` <double[], logical> => struct<`range`:double, `p.value`:double>;
type `circ.reg` <double[], double[], double, double> => struct<`rho`:^double[], `fitted`:double[], `x`:^double[], `residuals`:double[], `coef`:^double[], `pvalues`:^double[], `A.k`:double, `kappa`:double, `message`:character>;
type `circ.summary` <double[]> => struct<`n`:integer, `mean.dir`:double, `rho`:double>;
type `dwrpnorm` <double, double, double, double, double, double> => double;
type `est.kappa` <double[], logical> => double;
type `est.rho` <double[]> => double;
type `filter` <character[]> => logical[];
type `FUN` <double, double, double, double> => double;
type `kuiper` <double[], double> => null;
type `nCk` <integer, integer[]> => double[];
type `plotedf` <double[], character | logical> => null;
type `pp.plot` <double[], logical> => struct<`mu`:double, `kappa`:double>;
type `pvm` <double, double, double, double> => double;
type `pvm.mu0` <double, double, double> => double;
type `r.test` <double[], logical> => struct<`r.bar`:double, `p.value`:double>;
type `rose.diag` <double[], double, character, double, logical, double, double, double, double> => null;
type `rvm` <double, double, double> => double[];
type `rwrpcauchy` <double, double, double> => double[];
type `statistic` <double[], integer[], logical> => double;
type `term` <double, double, double, double> => double;
type `v0.test` <double[], double, logical> => struct<`r0.bar`:double, `p.value`:double>;
type `vm.bootstrap.ci` <double[], logical, double, double, logical> => struct<`mu.ci`:double[], `kappa.ci`:double[], `mu.reps`:double[], `kappa.reps`:double[]>;
type `watson` <double[], double, character> => null;
type `watson.two` <double[], double[], double, logical> => null;
type `wrpcauchy.ml` <double[], double, double, double> => struct<`mu`:double, `rho`:double>;
type `dvm` <double[], double, double> => double[];
