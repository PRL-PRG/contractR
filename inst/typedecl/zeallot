type `filter` <character[]> => logical[];
type `%->%` <tuple<character, character> | tuple<double, double, character, character, character>, language> => tuple<character, character> | tuple<double, double, character, character, character>;
type `%<-%` <language, character[] | struct<> | double[] | tuple<character[], character[]> | tuple<double, character> | tuple<double, double> | tuple<double, tuple<double, tuple<double, tuple<double>>>> | tuple<tuple<double, double>, tuple<double, double>> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>> => character[] | struct<> | double[] | tuple<character[], character[]> | tuple<double, character> | tuple<double, double> | tuple<double, tuple<double, tuple<double, tuple<double>>>> | tuple<tuple<double, double>, tuple<double, double>> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>;
type `add_defaults` <tuple<character, character>, tuple<character>, environment> => tuple<character, null>;
type `assert_destruction` <character | double> => null;
type `calls` <tuple<symbol, tuple<symbol, symbol, symbol>, tuple<symbol, symbol, symbol>> | tuple<symbol, symbol, tuple<symbol, character, null>> | tuple<symbol, symbol, tuple<symbol, symbol, tuple<symbol, symbol, tuple<symbol, symbol>>>> | tuple<symbol, symbol, symbol> | list<symbol>> => character[];
type `car` <tuple<character[]> | list<character> | struct<`disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`waiting`:double[]> | struct<`fstatistic`:double[], `cov.unscaled`:^double[]> | tuple<double> | struct<`Max.`:double> | tuple<tuple<character>> | tuple<tuple<double>> | tuple<null> | tuple<symbol, character, null> | tuple<symbol, tuple<symbol, symbol, symbol>, tuple<symbol, symbol, symbol>> | tuple<symbol, symbol> | list<symbol>> => ? character[] | double[] | language | tuple<character> | tuple<double> | symbol;
type `cdr` <tuple<character> | tuple<tuple<character, character, character>> | tuple<struct<`hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>> | tuple<character[], character[]> | tuple<double, character> | tuple<tuple<character, character>, character> | list<character> | tuple<symbol, character, null> | tuple<double, double> | tuple<tuple<character, character>, tuple<character, character>> | tuple<double, tuple<double>> | tuple<tuple<double, double>, tuple<double, double>> | tuple<symbol, tuple<symbol, symbol, symbol>, tuple<symbol, symbol, symbol>> | tuple<symbol, symbol> | list<symbol> | struct<`fstatistic`:double[], `cov.unscaled`:^double[]> | struct<`disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`3rd Qu.`:double, `Max.`:double> | struct<`eruptions`:double[], `waiting`:double[]>> => tuple<> | tuple<character[]> | tuple<double> | tuple<tuple<character>> | tuple<tuple<double>> | tuple<tuple<symbol, symbol, symbol>, tuple<symbol, symbol, symbol>> | tuple<null> | tuple<symbol> | list<symbol> | struct<`cov.unscaled`:^double[]> | struct<`hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`Max.`:double> | struct<`waiting`:double[]>;
type `check_extract_calls` <tuple<character, character> | list<character> | tuple<character, tuple<character, tuple<character, tuple<character>>>> | tuple<tuple<character, character>, tuple<character, character>>, symbol> => null;
type `collect` <tuple<character, character>, tuple<character, character, character> | struct<`terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>> => tuple<tuple<character, character>, character> | struct<``:struct<`terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double>, `fstatistic`:double[], `cov.unscaled`:^double[]>;
type `condition` <character[], character, language, ???> => struct<`message`:character, `call`:language>;
type `destructure.character` <character> => list<character>;
type `destructure.data.frame` <struct<`eruptions`:double[], `waiting`:double[]>> => struct<`eruptions`:double[], `waiting`:double[]> | struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`x`:integer[], `y`:integer[]>;
type `destructure.Date` <double> => tuple<double, double, double>;
type `destructure.summary.lm` <struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>> => struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>;
type `FUN` <? character | tuple<symbol, character, null> | tuple<symbol, symbol> | tuple<character> | integer, symbol> => ? logical | character[] | tuple<character> | tuple<symbol, symbol> | symbol;
type `get_default` <character> => null;
type `has_collector` <tuple<character>> => logical;
type `has_default` <tuple<character>> => logical[];
type `incorrect_number_of_values` < > => character;
type `is_collector` <character> => logical;
type `is_extract_op` <symbol> => logical;
type `is_list` <? character[] | struct<> | double[] | tuple<> | tuple<character[]> | list<character> | tuple<double> | tuple<tuple<character>> | tuple<tuple<double>> | tuple<null> | tuple<symbol, character, null> | tuple<symbol, tuple<symbol, symbol, symbol>, tuple<symbol, symbol, symbol>> | tuple<symbol, symbol> | list<symbol> | struct<`cov.unscaled`:^double[]> | struct<`hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`Max.`:double> | struct<`waiting`:double[]> | symbol> => logical;
type `is_valid_call` <symbol> => logical;
type `multi_assign` <language, character[] | struct<> | double[] | tuple<character[], character[]> | tuple<double, character> | tuple<double, double> | tuple<double, tuple<double, tuple<double, tuple<double>>>> | tuple<tuple<double, double>, tuple<double, double>> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>, environment> => character[] | struct<> | double[] | tuple<character[], character[]> | tuple<double, character> | tuple<double, double> | tuple<double, tuple<double, tuple<double, tuple<double>>>> | tuple<tuple<double, double>, tuple<double, double>> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>;
type `names2` <language> => character;
type `pair_off` <tuple<character, character> | tuple<character, tuple<character>> | tuple<tuple<character, character>, tuple<character, character>> | list<character>, tuple<character[], character[]> | tuple<character, null> | struct<`disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`eruptions`:double[], `waiting`:double[]> | struct<`fstatistic`:double[], `cov.unscaled`:^double[]> | tuple<double, character> | tuple<double, double> | struct<`3rd Qu.`:double, `Max.`:double> | tuple<double, tuple<double>> | tuple<tuple<double, double>, tuple<double, double>>, symbol | ???> => tuple<struct<`name`:character, `value`:character[]>, struct<`name`:character, `value`:character[]>> | tuple<struct<`name`:character, `value`:character>> | tuple<struct<`name`:character, `value`:double[]>> | list<struct<`name`:character, `value`:double>> | tuple<struct<`name`:character, `value`:language>, struct<`name`:character, `value`:double[]>>;
type `tree` <language> => tuple<symbol, tuple<symbol, symbol, symbol>, tuple<symbol, symbol, symbol>> | tuple<symbol, symbol> | list<symbol>;
type `variables` <tuple<symbol, symbol, tuple<symbol, character, null>> | tuple<symbol, symbol, symbol> | list<symbol> | tuple<symbol, symbol, tuple<symbol, symbol, tuple<symbol, symbol, tuple<symbol, symbol>>>> | tuple<symbol, tuple<symbol, symbol, symbol>, tuple<symbol, symbol, symbol>>> => tuple<character, character> | list<character> | tuple<character, tuple<character, tuple<character, tuple<character>>>> | tuple<tuple<character, character>, tuple<character, character>>;
