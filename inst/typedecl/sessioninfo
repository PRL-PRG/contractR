type `%||%` <character, null> => character;
type `dep_types_hard` < > => character[];
type `dependent_packages` <character, null> => struct<`package`:character[], `ondiskversion`:character[], `loadedversion`:character[], `path`:character[], `loadedpath`:character[], `attached`:logical[]>;
type `filter` <character[]> => logical[];
type `find_deps` <character, ^character[], character[], character[], logical> => character[];
type `FUN` <character | struct<`Package`:character, `Title`:character, `Description`:character, `Version`:character, `Authors@R`:character, `Depends`:character, `License`:character, `LazyData`:character, `URL`:character, `BugReports`:character, `VignetteBuilder`:character, `Suggests`:character, `RoxygenNote`:character, `Encoding`:character, `Collate`:character, `NeedsCompilation`:character, `Packaged`:character, `Author`:character, `Maintainer`:character, `Repository`:character, `Date/Publication`:character, `Built`:character> | struct<`Package`:character, `Title`:character, `Version`:character, `Author`:character, `Maintainer`:character, `Description`:character, `License`:character, `LazyData`:character, `URL`:character, `BugReports`:character, `RoxygenNote`:character, `Suggests`:character, `Imports`:character, `Encoding`:character, `NeedsCompilation`:character, `Packaged`:character, `Repository`:character, `Date/Publication`:character, `Built`:character> | struct<`Package`:character, `Title`:character, `Version`:character, `Authors@R`:character, `Description`:character, `License`:character, `Imports`:character, `Suggests`:character, `RoxygenNote`:character, `Collate`:character, `NeedsCompilation`:character, `Packaged`:character, `Author`:character, `Maintainer`:character, `Repository`:character, `Date/Publication`:character, `Built`:character> | struct<`Package`:character, `Type`:character, `Title`:character, `Version`:character, `Date`:character, `RoxygenNote`:character, `NeedsCompilation`:character, `Packaged`:character, `Built`:character> | struct<`Package`:character, `Version`:character, `Priority`:character, `Title`:character, `Author`:character, `Maintainer`:character, `Description`:character, `License`:character, `Built`:character>, ? character[]> => character | struct<`Package`:character, `Title`:character, `Description`:character, `Version`:character, `Authors@R`:character, `Depends`:character, `License`:character, `LazyData`:character, `URL`:character, `BugReports`:character, `VignetteBuilder`:character, `Suggests`:character, `RoxygenNote`:character, `Encoding`:character, `Collate`:character, `NeedsCompilation`:character, `Packaged`:character, `Author`:character, `Maintainer`:character, `Repository`:character, `Date/Publication`:character, `Built`:character> | struct<`Package`:character, `Title`:character, `Version`:character, `Author`:character, `Maintainer`:character, `Description`:character, `License`:character, `LazyData`:character, `URL`:character, `BugReports`:character, `RoxygenNote`:character, `Suggests`:character, `Imports`:character, `Encoding`:character, `NeedsCompilation`:character, `Packaged`:character, `Repository`:character, `Date/Publication`:character, `Built`:character> | struct<`Package`:character, `Title`:character, `Version`:character, `Authors@R`:character, `Description`:character, `License`:character, `Imports`:character, `Suggests`:character, `RoxygenNote`:character, `Collate`:character, `NeedsCompilation`:character, `Packaged`:character, `Author`:character, `Maintainer`:character, `Repository`:character, `Date/Publication`:character, `Built`:character> | struct<`Package`:character, `Type`:character, `Title`:character, `Version`:character, `Date`:character, `RoxygenNote`:character, `NeedsCompilation`:character, `Packaged`:character, `Built`:character> | struct<`Package`:character, `Version`:character, `Priority`:character, `Title`:character, `Author`:character, `Maintainer`:character, `Description`:character, `License`:character, `Built`:character> | logical;
type `interpret_dependencies` <null> => tuple<character[], character[]>;
type `is_na_scalar` <null> => logical;
type `loaded_packages` < > => struct<`package`:character[], `ondiskversion`:character[], `loadedversion`:character[], `path`:character[], `loadedpath`:^character[], `attached`:logical[]>;
type `os_name` < > => character;
type `package_info` <? character, logical, null> => struct<`package`:character[], `ondiskversion`:character[], `loadedversion`:character[], `path`:character[], `loadedpath`:character[], `attached`:logical[], `is_base`:logical[], `date`:character[], `source`:character[], `md5ok`:^logical[], `library`:integer[]>;
type `pkg_lib_paths` < > => character[];
type `platform_info` < > => struct<`version`:character, `os`:character, `system`:character, `ui`:character, `language`:character, `collate`:character, `ctype`:character, `tz`:character, `date`:character>;
type `session_info` <? character, logical> => struct<`platform`:struct<`version`:character, `os`:character, `system`:character, `ui`:character, `language`:character, `collate`:character, `ctype`:character, `tz`:character, `date`:character>, `packages`:struct<`package`:character[], `ondiskversion`:character[], `loadedversion`:character[], `path`:character[], `loadedpath`:character[], `attached`:logical[], `is_base`:logical[], `date`:character[], `source`:character[], `md5ok`:^logical[], `library`:integer[]>>;
type `sort_ci` <character[]> => character[];
type `spackageVersion` <character> => character;
