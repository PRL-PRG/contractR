type `::` <character, character | double, integer | ???, ? double[], ? double[], ? logical, null, logical, null, null> => ? tuple<double[], double[], character, character> | tuple<logical, character> | ^double[];
type `.spTransform_Polygon` <character, symbol, symbol, integer> => character;
type `.spTransform_Polygons` <character, symbol, integer> => character;
type `checkCRSArgs` <character> => tuple<logical, character>;
type `filter` <character[]> => logical[];
type `fun` <symbol, symbol> => null;
type `getPROJ4VersionInfo` < > => character;
type `load_stuff` < > => null;
type `local_RGDAL_Init` < > => null;
type `spTransform` < > => ???;
type `.local` <? double, null, null, null> => character | ???;
type `.normalize_if_path` <character, null> => character;
type `.setCollectorFun` <? any => any> => null;
type `assertClass` < > => character;
type `dim` <???> => integer[];
type `GDAL_iconv` < > => logical;
type `GDAL.close` < > => null;
type `GDAL.open` <logical, logical, null, null> => character;
type `get_OVERRIDE_PROJ_DATUM_WITH_TOWGS84` < > => logical;
type `getCPLConfigOption` <character> => null;
type `getDriver` <null, null> => null;
type `getDriverName` < > => character;
type `getGDAL_DATA_Path` < > => character;
type `getGDALCheckVersion` < > => logical;
type `getGDALVersionInfo` <character> => character;
type `getGDALwithGEOS` < > => logical;
type `getPROJ4libPath` < > => character;
type `getProjectionRef` <null> => character;
type `getRasterBand` < > => double;
type `getRasterBlockSize` < > => integer[];
type `initialize` < > => character;
type `ogrFIDs` <character, character> => integer[];
type `ogrInfo` <character, character, null, logical, logical, null> => struct<`nrows`:integer, `nitems`:integer, `iteminfo`:struct<`name`:character[], `type`:integer[], `length`:integer[], `typeName`:character[], `maxListCount`:integer[]>, `driver`:character, `extent`:double[], `nListFields`:integer, `have_features`:logical, `eType`:integer, `with_z`:integer, `dsn`:character, `layer`:character, `p4s`:character>;
type `OGRSpatialRef` <character, character> => character;
type `readOGR` <character, logical, ? integer[] | symbol | character, logical, logical, logical, logical, logical, logical, logical, null, logical, logical, null, character, logical> => character;
type `version_sp_linkingTo` < > => character;
type `gdalDrivers` < > => struct<`name`:character[], `long_name`:character[], `create`:logical[], `copy`:logical[], `isRaster`:logical[]>;
type `geoTrans` <double[], double[]> => struct<`x`:double[], `y`:double[]>;
type `getDescription` < > => character;
type `getDriverLongName` < > => character;
type `getGDALDriverNames` < > => struct<`name`:character[], `long_name`:character[], `create`:logical[], `copy`:logical[], `isRaster`:logical[]>;
type `getGeoTransFunc` < > => any => any;
type `getRasterTable` <null, double[], integer[]> => struct<`x`:double[], `y`:double[], `band1`:integer[]>;
type `FUN` <tuple<tuple<double, double>>> => double[];
type `.spTransform_Line` <character, symbol, symbol, integer> => character;
type `.spTransform_Lines` <character, symbol, integer> => character;
