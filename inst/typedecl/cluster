type `filter` <character[]> => logical[];
type `:::` < > => logical;
type `agnes` <struct<> | ^double[], logical, character, logical, character, double[] | ???, logical, logical, double> => struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:double[], `call`:language, `method`:character, `order.lab`:character[]> | struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:double[], `call`:language, `method`:character, `data`:^double[]> | struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:null, `call`:language, `method`:character>;
type `as.dendrogram.twins` <struct<`order`:integer[], `height`:double[], `dc`:double, `merge`:^integer[], `diss`:double[], `call`:language, `order.lab`:character[], `data`:^double[]> | struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:double[], `call`:language, `method`:character, `order.lab`:character[]>, ???> => tuple<tuple<tuple<tuple<tuple<integer, integer>, integer>, tuple<tuple<integer, integer>, integer>>, tuple<integer, integer>>, tuple<tuple<tuple<integer, integer>, tuple<integer, integer>>, tuple<tuple<tuple<tuple<integer, tuple<integer, tuple<integer, integer>>>, tuple<tuple<integer, integer>, integer>>, tuple<integer, integer>>, tuple<tuple<tuple<integer, integer>, integer>, tuple<tuple<tuple<tuple<integer, tuple<integer, integer>>, tuple<tuple<tuple<tuple<integer, integer>, tuple<tuple<tuple<integer, integer>, integer>, tuple<integer, integer>>>, tuple<integer, integer>>, tuple<integer, integer>>>, tuple<tuple<tuple<integer, integer>, integer>, integer>>, tuple<tuple<integer, tuple<tuple<integer, integer>, tuple<integer, integer>>>, tuple<tuple<integer, integer>, integer>>>>>>> | tuple<tuple<tuple<tuple<tuple<integer, integer>, integer>, tuple<tuple<integer, integer>, integer>>, tuple<integer, integer>>, tuple<tuple<tuple<tuple<tuple<tuple<tuple<integer, integer>, tuple<tuple<tuple<tuple<integer, integer>, integer>, tuple<integer, integer>>, tuple<tuple<integer, integer>, integer>>>, tuple<integer, tuple<integer, integer>>>, tuple<tuple<integer, integer>, tuple<integer, integer>>>, tuple<tuple<tuple<tuple<tuple<integer, integer>, integer>, integer>, tuple<integer, tuple<tuple<integer, integer>, integer>>>, tuple<tuple<integer, tuple<integer, integer>>, tuple<tuple<integer, integer>, integer>>>>, tuple<tuple<integer, tuple<integer, integer>>, tuple<tuple<integer, integer>, integer>>>, tuple<tuple<tuple<integer, integer>, tuple<integer, integer>>, integer>>>;
type `bannerplot` <struct<`order`:integer[], `order.lab`:character[]>, double[], logical, character, ? character, character, double, double[], double, logical, logical, language | logical, double, null, double, symbol | double, logical, symbol | logical, language | double> => null;
type `clara` <struct<`V1`:double[], `V2`:double[]> | ^double[], double, character[], logical, double, double, double, logical, logical, logical, logical, logical> => struct<`sample`:integer[], `medoids`:^double[], `i.med`:integer[], `clustering`:integer[], `objective`:double, `clusinfo`:^double[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]> | struct<`sample`:integer[], `medoids`:null, `i.med`:integer[], `clustering`:integer[], `objective`:double, `clusinfo`:^double[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>>;
type `clas.snijpunt` <^double[], ^double[], double, integer, integer> => ? double[];
type `clusGap` <struct<`x`:integer[], `y`:integer[]> | ^double[], any => any, double, double, double, ? environment, logical, ???> => struct<`Tab`:^double[], `call`:language, `spaceH0`:character, `n`:integer, `B`:integer, `FUNcluster`:any => any>;
type `clusplot.default` <^double[] | struct<>, integer[], logical, struct<`x`:^double[], `var.dec`:double, `labs`:integer[]> | struct<`x`:^double[], `var.dec`:double, `labs`:character[]> | struct<`x`:^double[], `labs`:character[], `var.dec`:null>, logical, double, logical, logical, double, logical, character | integer[], symbol | character[], character | double[], double, symbol | double, logical, logical, ? double[], ? double[]> => struct<`Distances`:^double[], `Shading`:double[]>;
type `clusplot.partition` <struct<`medoids`:character[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:null, `call`:language> | struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:double[], `call`:language, `data`:^double[]> | struct<`membership`:^double[], `coeff`:double[], `memb.exp`:double, `clustering`:integer[], `k.crisp`:double, `objective`:double[], `convergence`:integer[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]> | struct<`sample`:integer[], `medoids`:^double[], `i.med`:integer[], `clustering`:integer[], `objective`:double, `clusinfo`:^double[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]>, null, null, integer[] | struct<`x`:^double[], `labs`:character[], `var.dec`:null> | ???> => struct<`Distances`:^double[], `Shading`:double[]>;
type `coef.hclust` <null, ???> => double;
type `coef.twins` <struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:double[], `call`:language, `method`:character, `order.lab`:character[]>, ???> => double;
type `coefHier` <struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:double[], `call`:language, `method`:character, `order.lab`:character[], `data`:^double[]>> => double;
type `coord.snijp1` <^double[], double> => double;
type `coord.snijp2` <^double[], double, double> => double;
type `coord.snijp3` <double[], double, double> => ^double[];
type `daisy` <struct<`pdias`:^double[], `longindex`:^double[], `durflow`:integer[], `height`:integer[], `begflow`:integer[], `mycor`:^integer[], `vegaer`:^integer[], `vegsout`:^integer[], `autopoll`:integer[], `insects`:integer[], `wind`:integer[], `lign`:integer[], `piq`:integer[], `ros`:^integer[], `semiros`:^integer[], `leafy`:^integer[], `suman`:integer[], `winan`:integer[], `monocarp`:integer[], `polycarp`:integer[], `seasaes`:^integer[], `seashiv`:^integer[], `seasver`:^integer[], `everalw`:^integer[], `everparti`:^integer[], `elaio`:^integer[], `endozoo`:^integer[], `epizoo`:^integer[], `aquat`:^integer[], `windgl`:^integer[], `unsp`:^integer[]> | ^double[], language | character[], logical, struct<`ordratio`:integer[], `symm`:integer[], `asymm`:integer[]> | tuple<> | struct<`asymm`:character[], `symm`:double, `ordratio`:double, `logratio`:double> | struct<`asymm`:double[], `ordratio`:double> | struct<`asymm`:double>, double[], logical, symbol, symbol, logical> => double[];
type `diana` <struct<`x`:double[], `y`:double[]>, logical, character, logical, logical, logical, logical, double> => struct<`order`:integer[], `height`:double[], `dc`:double, `merge`:^integer[], `diss`:double[], `call`:language, `order.lab`:character[], `data`:^double[]>;
type `ellipsoidhull` <^double[], double, double, logical, logical, logical> => struct<`loc`:double[], `cov`:^double[], `d2`:double, `wt`:double[], `sqdist`:double[], `prob`:null, `tol`:double, `eps`:double, `it`:integer, `maxit`:double, `ierr`:integer, `conv`:logical> | struct<`loc`:double[], `cov`:^double[], `d2`:double, `wt`:null, `sqdist`:null, `prob`:null, `tol`:double, `eps`:double, `it`:integer, `maxit`:double, `ierr`:integer, `conv`:logical>;
type `fanny` <^double[] | struct<>, double, logical, double, character[], logical, null, logical, logical, logical, double, double, double> => struct<`membership`:^double[], `coeff`:double[], `memb.exp`:double, `clustering`:integer[], `k.crisp`:double, `objective`:double[], `convergence`:integer[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]>;
type `FUN` <^double[], integer> => ^integer[] | character[] | double[];
type `lower.to.upper.tri.inds` <double> => integer[];
type `maxSE` <double[], double[], character, double> => integer;
type `mkCheckX` <^double[], logical> => struct<`x`:^double[], `var.dec`:double, `labs`:character[]> | struct<`x`:^double[], `var.dec`:double, `labs`:integer[]>;
type `mona` <struct<`war`:integer[], `fly`:integer[], `ver`:integer[], `end`:^integer[], `gro`:^integer[], `hai`:integer[]>, double> => struct<`data`:^integer[], `hasNA`:logical, `order`:integer[], `variable`:character[], `step`:integer[], `order.lab`:character[], `call`:language>;
type `pam` <^double[] | struct<>, double, logical, language | character[], ? double[], logical, logical, logical, logical, logical, logical, double> => struct<`medoids`:character[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:null, `call`:language> | struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:double[], `call`:language, `data`:^double[]> | struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:null, `call`:language, `data`:^double[]> | struct<`medoids`:integer[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:null, `call`:language>;
type `plot.agnes` <struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:double[], `call`:language, `method`:character, `order.lab`:character[]> | struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:null, `call`:language, `method`:character, `order.lab`:character[]>, logical, ? double, null, character, double, double, double, logical, ??? | double> => null;
type `plot.clusGap` <struct<`Tab`:^double[]>, character, character, expression, ? character, logical, struct<`col`:character, `length`:double, `angle`:double, `code`:double>, ???> => null;
type `plot.diana` <struct<`order`:integer[], `height`:double[], `dc`:double, `merge`:^integer[], `diss`:double[], `call`:language, `order.lab`:character[], `data`:^double[]>, logical, null, null, character, double, double, double, logical, ???> => null;
type `plot.mona` <struct<`data`:^integer[], `hasNA`:logical, `order`:integer[], `variable`:character[], `step`:integer[], `order.lab`:character[], `call`:language>, character, null, character, double[], logical, double, double, double, ???> => null;
type `plot.partition` <struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:double[], `call`:language, `data`:^double[]> | struct<`membership`:^double[], `coeff`:double[], `memb.exp`:double, `clustering`:integer[], `k.crisp`:double, `objective`:double[], `convergence`:integer[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]> | struct<`sample`:integer[], `medoids`:^double[], `i.med`:integer[], `clustering`:integer[], `objective`:double, `clusinfo`:^double[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]> | struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:null, `call`:language, `data`:^double[]>, logical, ? double, double, double, language, null, logical, double, logical, logical, double, logical, logical, null, null, null, ???> => null;
type `plot.silhouette` <^double[], double, double | symbol, null, null, expression, character, logical, double, double | language, logical, logical, ???> => null;
type `pltree.twins` <struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:double[], `call`:language, `method`:character, `order.lab`:character[]> | struct<`order`:integer[], `height`:double[], `ac`:double, `merge`:^integer[], `diss`:null, `call`:language, `method`:character, `order.lab`:character[]> | struct<`order`:integer[], `height`:double[], `dc`:double, `merge`:^integer[], `diss`:double[], `call`:language, `order.lab`:character[], `data`:^double[]>, character, null, character, character | ???> => null;
type `predict.ellipsoid` <struct<`loc`:double[], `cov`:^double[], `d2`:double, `wt`:null, `sqdist`:null, `prob`:null, `tol`:double, `eps`:double, `it`:integer, `maxit`:double, `ierr`:integer, `conv`:logical>, double, ???> => ^double[];
type `print.diana` <struct<`order`:integer[], `height`:double[], `dc`:double, `merge`:^integer[], `diss`:double[], `call`:language, `order.lab`:character[], `data`:^double[]>, ???> => struct<`order`:integer[], `height`:double[], `dc`:double, `merge`:^integer[], `diss`:double[], `call`:language, `order.lab`:character[], `data`:^double[]>;
type `silhouette.partition` <struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:double[], `call`:language, `data`:^double[]> | struct<`membership`:^double[], `coeff`:double[], `memb.exp`:double, `clustering`:integer[], `k.crisp`:double, `objective`:double[], `convergence`:integer[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]> | struct<`sample`:integer[], `medoids`:^double[], `i.med`:integer[], `clustering`:integer[], `objective`:double, `clusinfo`:^double[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]> | struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:null, `call`:language, `data`:^double[]>, ???> => ^double[];
type `sizeDiss` <double[]> => double;
type `Stext` <^double[], character[], character[] | double> => null;
type `summary.dissimilarity` <double[], double, ???> => struct<`summ`:double[], `n`:integer, `Size`:integer, `Metric`:character, `Types`:character[]>;
type `summary.fanny` <struct<`membership`:^double[], `coeff`:double[], `memb.exp`:double, `clustering`:integer[], `k.crisp`:double, `objective`:double[], `convergence`:integer[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]>, ???> => struct<`membership`:^double[], `coeff`:double[], `memb.exp`:double, `clustering`:integer[], `k.crisp`:double, `objective`:double[], `convergence`:integer[], `diss`:double[], `call`:language, `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `data`:^double[]>;
type `summary.pam` <struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:double[], `call`:language, `data`:^double[]>, ???> => struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:double[], `call`:language, `data`:^double[]>;
type `summary.silhouette` <^double[], any => any, ???> => struct<`si.summary`:double[], `clus.avg.widths`:double[], `clus.sizes`:integer[], `avg.width`:double, `call`:language, `codes`:null, `Ordered`:logical>;
type `upper.to.lower.tri.inds` <double> => integer[];
type `W.k` <^double[], integer> => double;
type `method` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, double, logical, character[], null, logical, logical, logical, logical, logical, logical, double> => struct<`medoids`:^double[], `id.med`:integer[], `clustering`:integer[], `objective`:double[], `isolation`:integer[], `clusinfo`:^double[], `silinfo`:struct<`widths`:^double[], `clus.avg.widths`:double[], `avg.width`:double>, `diss`:null, `call`:language, `data`:^double[]>;
type `silhouette.default` <double[], ??? | double[], ^double[] | ???, ???> => ^double[];
