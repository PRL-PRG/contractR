type `breakCheck` < > => tuple<integer[], double[], integer[]>;
type `cttICC` <double[], double[], ???, ???, ???, ???, ???, language, character, ???, ???, double> => null;
type `cutFind` <double[], ???> => tuple<integer[], double[], integer[]>;
type `disattenuated.cor` <^double[], double[], double[]> => ^double[];
type `distractor.analysis` <struct<`i1`:character[], `i2`:character[], `i3`:character[], `i4`:character[], `i5`:character[], `i6`:character[], `i7`:character[], `i8`:character[], `i9`:character[], `i10`:character[], `i11`:character[], `i12`:character[], `i13`:character[], `i14`:character[], `i15`:character[], `i16`:character[], `i17`:character[], `i18`:character[], `i19`:character[], `i20`:character[]>, character[], ???, logical, character | ???> => struct<`i1`:^double[], `i2`:^double[], `i3`:^double[], `i4`:^double[], `i5`:^double[], `i6`:^double[], `i7`:^double[], `i8`:^double[], `i9`:^double[], `i10`:^double[], `i11`:^double[], `i12`:^double[], `i13`:^double[], `i14`:^double[], `i15`:^double[], `i16`:^double[], `i17`:^double[], `i18`:^double[], `i19`:^double[], `i20`:^double[]>;
type `distractorAnalysis` <struct<`i1`:character[], `i2`:character[], `i3`:character[], `i4`:character[], `i5`:character[], `i6`:character[], `i7`:character[], `i8`:character[], `i9`:character[], `i10`:character[], `i11`:character[], `i12`:character[], `i13`:character[], `i14`:character[], `i15`:character[], `i16`:character[], `i17`:character[], `i18`:character[], `i19`:character[], `i20`:character[]>, character[], ???, double, ???, integer, integer[], ???, character | ???, logical, ???> => struct<`i1`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i2`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i3`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i4`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i5`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i6`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i7`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i8`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i9`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i10`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i11`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i12`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i13`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i14`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i15`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i16`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i17`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i18`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i19`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>, `i20`:struct<`correct`:integer[], `key`:integer[], `n`:double[], `rspP`:double[], `pBis`:double[], `discrim`:double[], `lower`:double[], `mid50`:double[], `mid75`:double[], `upper`:double[]>>;
type `filter` <character[]> => logical[];
type `fn` <double[]> => double;
type `FUN` <character[]> => double[];
type `itemAnalysis` <struct<`I1`:double[], `I2`:double[], `I3`:double[], `I4`:double[], `I5`:double[]>, logical, logical, logical, ??? | double, ???, ??? | double, ???, language | character[]> => struct<`nItem`:integer, `nPerson`:integer, `alpha`:double, `scaleMean`:double, `scaleSD`:double, `itemReport`:struct<`itemName`:character[], `itemMean`:double[], `pBis`:double[], `bis`:double[], `alphaIfDeleted`:double[]>>;
type `itemtab` <integer[] | character[], character, character[], character[]> => ^integer[];
type `itemtabp` <integer[]> => ^double[];
type `new.r` <double, double[], double[]> => double;
type `polyserial` <double[], double[], logical> => double;
type `reliability` <struct<`I1`:double[], `I2`:double[], `I3`:double[], `I4`:double[], `I5`:double[]>, logical, logical, logical> => struct<`nItem`:integer, `nPerson`:integer, `alpha`:double, `scaleMean`:double, `scaleSD`:double, `alphaIfDeleted`:double[], `pBis`:double[], `bis`:double[], `itemMean`:double[]>;
type `score` <struct<`i1`:character[], `i2`:character[], `i3`:character[], `i4`:character[], `i5`:character[], `i6`:character[], `i7`:character[], `i8`:character[], `i9`:character[], `i10`:character[], `i11`:character[], `i12`:character[], `i13`:character[], `i14`:character[], `i15`:character[], `i16`:character[], `i17`:character[], `i18`:character[], `i19`:character[], `i20`:character[]>, character[], logical, null, logical, character, language | symbol> => struct<`score`:double[]>;
