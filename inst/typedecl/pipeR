type `%>>%` <double[] | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, language> => ? double[] | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>;
type `$` <character | double> => environment;
type `$.Pipe` <environment, character> => any => any;
type `default` <struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]> | double[] | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`mpg`:double[], `cyl`:double[], `wt`:double[]>> | struct<>, symbol | language, environment> => ? ^double[] | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`mpg`:double[], `cyl`:double[], `wt`:double[]>> | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical> | struct<>;
type `eval_question` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>, language, environment> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>;
type `eval_with` <language, environment, struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]> | double[] | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`mpg`:double[], `cyl`:double[], `wt`:double[]>>, character> => ? struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | ^double[] | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`mpg`:double[], `cyl`:double[], `wt`:double[]>> | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>;
type `f` <language | symbol, character | language | symbol> => language;
type `filter` <character[]> => logical[];
type `Pipe` <double[]> => environment;
type `Pipe_closure` <character, symbol> => any => any;
type `Pipe_dot` <symbol> => any => any;
type `pipe_lambda` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>, language, environment, logical> => struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | double;
type `Pipe_new` <? double[] | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>, logical> => environment;
type `pipe_symbol` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]> | double[] | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`mpg`:double[], `cyl`:double[], `wt`:double[]>>, language | symbol, environment, logical | symbol, symbol | any => any> => ? struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | ^double[] | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`mpg`:double[], `cyl`:double[], `wt`:double[]>> | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>;
type `Pipe_value` <environment> => double[] | struct<`x`:double[], `y`:double[], `bw`:double, `n`:integer, `call`:language, `data.name`:character, `has.na`:logical>;
type `pipeline` <language | symbol> => ? ^double[] | struct<`call`:language, `terms`:language, `residuals`:double[], `coefficients`:^double[], `aliased`:logical[], `sigma`:double, `df`:integer[], `r.squared`:double, `adj.r.squared`:double, `fstatistic`:double[], `cov.unscaled`:^double[]>;
