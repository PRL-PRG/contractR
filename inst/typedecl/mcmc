type `.make.outfun` <struct<`f`:any => any, `f.inv`:any => any, `log.jacobian`:any => any, `center`:double, `transform`:any => any, `inverse`:any => any> | struct<`f`:any => any, `f.inv`:any => any, `log.jacobian`:any => any, `center`:integer[], `transform`:any => any, `inverse`:any => any> | struct<`transform`:any => any, `inverse`:any => any, `lud`:any => any, `log.jacobian`:any => any, `center`:double, `f`:any => any, `f.inv`:any => any>> => any => any;
type `$` <double[] | symbol | language | any => any, ???> => double[] | any => any;
type `d.f` <double> => double;
type `df` <double> => double;
type `dnorm.morph` <double, double> => double;
type `euclid.norm` <double[]> => double;
type `f` <integer[] | double> => integer[] | double;
type `f.err` <double> => double;
type `filter` <character[]> => logical[];
type `FUN` <double, ???> => double;
type `g` <double> => double;
type `g.iso` <double> => double;
type `initseq` <double[]> => struct<`gamma0`:double, `Gamma.pos`:double[], `Gamma.dec`:double[], `Gamma.con`:double[], `var.pos`:double, `var.dec`:double, `var.con`:double>;
type `isotropic` <any => any | double[]> => any => any | double[];
type `isotropic.logjacobian` <double[] | any => any, any => any> => double | any => any;
type `metrop.metropolis` <struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `debug`:logical, `morph`:struct<`f`:any => any, `f.inv`:any => any, `log.jacobian`:any => any, `center`:double, `transform`:any => any, `inverse`:any => any, `outfun`:any => any, `lud`:any => any>, `morph.final`:double[]> | struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `debug`:logical, `morph`:struct<`transform`:any => any, `inverse`:any => any, `lud`:any => any, `log.jacobian`:any => any, `center`:double, `f`:any => any, `f.inv`:any => any, `outfun`:any => any>, `morph.final`:double[]> | struct<`accept`:double, `batch`:^double[], `initial`:double, `final`:double, `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `debug`:logical, `morph`:struct<`f`:any => any, `f.inv`:any => any, `log.jacobian`:any => any, `center`:double, `transform`:any => any, `inverse`:any => any, `outfun`:any => any, `lud`:any => any>, `morph.final`:double> | struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `debug`:logical> | struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `current`:^double[], `proposal`:^double[], `log.green`:double[], `u`:^double[], `z`:^double[], `debug.accept`:logical[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `outfun`:any => any, `debug`:logical>, ???, double | symbol | ???, ? double[] | language | character, ? symbol | double[] | character | struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[]>, any => any | character | ^double[], any => any | ???, double[] | character | pairlist | any => any | language, ??? | double[]> => struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `outfun`:any => any, `debug`:logical> | struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `debug`:logical> | struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:^double[], `debug`:logical> | struct<`accept`:double, `batch`:^double[], `initial`:double[], `final`:double[], `accept.batch`:double[], `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `lud`:any => any, `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double[], `debug`:logical>;
type `obj` <double[], ???> => double;
type `outfun` <double[]> => double[];
type `outfun.morph` <integer[], double> => double[];
type `step` <double, double> => double;
type `temper.tempering` <struct<`lud`:any => any, `neighbors`:^logical[], `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `outfun`:any => any, `debug`:logical, `parallel`:logical, `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `batch`:^double[], `acceptx`:double[], `accepti`:^double[], `initial`:^double[], `final`:^double[]> | struct<`lud`:any => any, `neighbors`:^logical[], `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `outfun`:null, `debug`:logical, `parallel`:logical, `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `batch`:double[], `acceptx`:double[], `accepti`:^double[], `initial`:^double[], `final`:^double[]>, ???, ???, ???, double, integer | struct<`error`:any => any>, integer, ??? | any => any, ? integer, character | logical, ???> => struct<`lud`:any => any, `neighbors`:^logical[], `nbatch`:double, `blen`:double, `nspac`:double, `scale`:double, `outfun`:any => any, `debug`:logical, `parallel`:logical, `initial.seed`:integer[], `final.seed`:integer[], `time`:double[], `batch`:^double[], `acceptx`:double[], `accepti`:^double[], `initial`:^double[], `final`:^double[]>;
