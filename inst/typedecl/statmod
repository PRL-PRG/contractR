type `.dinvgauss` <double[], null, double[], logical> => double[];
type `.pinvgauss` <double[], ? double[], double[], logical, logical> => double[];
type `.psi.hampel` <double[], double, double, double> => double[];
type `.rho.hampel` <double[], double, double, double> => double[];
type `(` <double[], double[], double[]> => double[];
type `$` <double[]> => double[];
type `aic` <symbol, symbol, symbol, symbol, symbol> => null;
type `canonic.digamma` <double[]> => double[];
type `compareGrowthCurves` <integer[], ^double[], null, double, any => any, null, logical, character> => struct<`Group1`:integer[], `Group2`:integer[], `Stat`:double[], `P.Value`:double[], `adj.P.Value`:double[]>;
type `compareTwoGrowthCurves` <character[], ^double[], double, any => any> => struct<`stat`:double, `p.value`:double>;
type `cumulant.digamma` <double[]> => double[];
type `d2cumulant.digamma` <double[]> => double[];
type `dev.resids` <double[], double[], double[]> => double[];
type `deviance.gamma` <double[], ^double[]> => double;
type `Digamma` <character> => struct<`family`:character, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `mu.eta`:any => any, `valideta`:any => any, `validmu`:any => any, `initialize`:expression, `class`:character>;
type `elda` <double[], double[], double[], double[], logical, double, logical> => struct<`response`:double[], `tested`:double[], `dose`:double[], `group`:integer[], `num.group`:integer, `CI`:^double[], `test.slope.wald`:double[], `test.slope.lr`:^double[], `test.slope.score.logdose`:^double[], `test.slope.score.dose`:^double[]>;
type `eldaOneGroup` <double[], double[], double[], logical, double, double, double, logical> => struct<`p`:double[], `lambda`:double, `alpha`:double, `CI.alpha`:double[], `CI.frequency`:double[], `deviance`:double, `iter`:double, `z.scoretest`:double, `z.scoretest.dose`:double, `dloglik.logdose`:double, `FisherInfo.logdose`:double, `dloglik.dose`:double, `FisherInfo.dose`:double>;
type `filter` <character[]> => logical[];
type `fitNBP` <^double[], double[], double[], double, double, logical> => struct<`coefficients`:^double[], `fitted.values`:^double[], `dispersion`:double>;
type `forward` <double[], ^double[], null, logical> => double[];
type `fun` <^double[], ^double[]> => double;
type `gauss.quad` <double, character, double, double> => struct<`nodes`:double[], `weights`:double[]>;
type `gauss.quad.prob` <double, character, double, double, double, double, double, double> => struct<`nodes`:double[], `weights`:double[]>;
type `glm.scoretest` <struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:double[], `a`:integer[], `b`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`a`:character, `b`:character>, `xlevels`:struct<`a`:character[], `b`:character[]>>, double[], null> => double;
type `glmgam.fit` <^double[], ^double[], ? double[], double, double, logical> => struct<`coefficients`:double[], `fitted.values`:double[], `deviance`:double, `iter`:double>;
type `glmnb.fit` <^double[], double[], double[], null, double, null, character, double, double, logical> => struct<`coefficients`:double[], `fitted.values`:double[], `deviance`:double, `iter`:double, `convergence`:character>;
type `hommel.test` <double[], double> => logical[];
type `linkinv` <double[]> => double[];
type `logmdigamma` <double> => double;
type `matvec` <^integer[], double[]> => ^double[];
type `meanT` <^double[], ^double[]> => double;
type `meanval.digamma` <double[]> => double[];
type `mixedModel2` <language, symbol, null, logical, symbol | language, null, null, double, double, logical> => struct<`varcomp`:double[], `reml.residuals`:^double[], `se.varcomp`:double[], `coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `weights`:double[], `rank`:integer, `assign`:null, `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `se.coefficients`:double[]>;
type `mixedModel2Fit` <double[], ^double[], ^double[], null, logical, double, double, logical> => struct<`varcomp`:double[], `reml.residuals`:^double[], `se.varcomp`:double[], `coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `weights`:double[], `rank`:integer, `assign`:null, `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `se.coefficients`:double[]>;
type `mscale` <double[], logical> => double;
type `mu.eta` <double[]> => double[];
type `permp` <integer[], double, double | ???, double | ???, ? double, character, logical> => double[];
type `pinvgauss` <^double[], ^double[], null, double, logical, logical> => ^double[];
type `plot.limdil` <struct<`response`:double[], `tested`:double[], `dose`:double[], `group`:integer[], `num.group`:integer, `CI`:^double[], `test.slope.wald`:double[], `test.slope.lr`:^double[], `test.slope.score.logdose`:^double[], `test.slope.score.dose`:^double[]>, null, double, double, character, ???> => struct<`x`:double[], `y`:double[], `group`:integer[]>;
type `power.fisher.test` <double, double, double, double, double, double, character> => double;
type `qinvgauss` <double[], ^double[], null, double, logical, logical, integer, double, logical> => ^double[];
type `qres.default` <struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null>, ? double> => double[];
type `qres.gamma` <struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null>, double> => double[];
type `qres.nbinom` <struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `terms`:language, `call`:language, `model`:struct<`Days`:integer[], `Age`:integer[]>, `theta`:double, `SE.theta`:double, `twologlik`:double, `contrasts`:struct<`Age`:character>, `xlevels`:struct<`Age`:character[]>, `method`:character, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`Days`:integer[], `Age`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Lrn`:integer[], `Days`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`Age`:character>, `xlevels`:struct<`Age`:character[]>>> => double[];
type `qres.pois` <struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:integer[], `x`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>>> => double[];
type `qresiduals` <struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `terms`:language, `call`:language, `model`:struct<`Days`:integer[], `Age`:integer[]>, `theta`:double, `SE.theta`:double, `twologlik`:double, `contrasts`:struct<`Age`:character>, `xlevels`:struct<`Age`:character[]>, `method`:character, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`Days`:integer[], `Age`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Lrn`:integer[], `Days`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`Age`:character>, `xlevels`:struct<`Age`:character[]>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:integer[], `x`:integer[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>> | struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null> | struct<`coefficients`:double, `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double, `pivot`:integer, `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`y`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:null>, ? double> => double[];
type `remlscore` <double[], ^double[], ^double[], logical, double, double> => struct<`beta`:double[], `se.beta`:double[], `gamma`:^double[], `se.gam`:double[], `mu`:double[], `phi`:double[], `deviance`:double, `h`:double[], `cov.beta`:^double[], `cov.gam`:^double[], `iter`:double>;
type `remlscoregamma` <double[], ^double[], ^double[], character, character, logical, double, double> => struct<`beta`:double[], `se.beta`:double[], `gamma`:^double[], `se.gam`:double[], `mu`:double[], `phi`:double[], `deviance`:double, `h`:double[]>;
type `rinvgauss` <double, ^double[], null, ^double[]> => ^double[];
type `sage.test` <double[], double[], double, double> => double[];
type `step` <double[], double[], double[], double[]> => double[];
type `total.deviance` <double[], double[], double[], double[]> => double;
type `tweedie` <double, double> => struct<`family`:character, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>;
type `unit.dev.negbin` <double[], double[], double[]> => double[];
type `unitdeviance.digamma` <double[], double[]> => double[];
type `valideta` <symbol> => logical;
type `validmu` <double[]> => logical;
type `variance` <double[]> => double[];
type `vecmat` <^double[], ^double[]> => ^double[];
