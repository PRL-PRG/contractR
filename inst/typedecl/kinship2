type `:::` <struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `relation`:struct<`indx1`:integer, `indx2`:integer, `code`:integer>>, character, ???> => ^double[];
type `[.pedigree` <struct<`id`:character[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^integer[]> | struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[], `relation`:struct<`indx1`:integer, `indx2`:integer, `code`:integer>> | struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[], `status`:double[], `relation`:struct<`indx1`:integer[], `indx2`:integer[], `code`:integer[]>> | struct<`famid`:double[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[]> | struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^integer[]>, integer[] | double | character[], symbol> => struct<`id`:character[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^integer[]> | struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[]>;
type `[.pedigreeList` <struct<`famid`:double[], `id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[], `status`:double[]> | struct<`famid`:double[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[]> | struct<`famid`:integer[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>, character | double, symbol> => struct<`famid`:double[], `id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[], `status`:double[]> | struct<`famid`:double[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[]> | struct<`famid`:integer[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>;
type `align.pedigree` <struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]> | struct<`id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[]>, logical, double, double[], ? struct<`order`:double[], `spouse`:^double[]> | struct<`order`:double[], `spouse`:null>> => struct<`n`:double[], `nid`:^integer[], `pos`:^double[], `fam`:^double[], `spouse`:^double[]>;
type `alignped1` <double, integer[], integer[], double[], double[], logical, ^double[]>=> null;
type `alignped2` <integer[], integer[] | symbol, integer[] | symbol, double[], double[], logical | symbol, ^double[]> => struct<`n`:double[], `nid`:^double[], `pos`:^double[], `fam`:^double[], `spouselist`:^double[]>;
type `alignped3` <struct<`n`:double[], `nid`:^double[], `pos`:^double[], `fam`:^double[]>, null, logical, double> => struct<`n`:double[], `nid`:^double[], `pos`:^double[], `fam`:^double[]>;
type `alignped4` <struct<`n`:double[], `nid`:^double[], `pos`:^double[], `fam`:^double[]>, ^logical[], symbol, double, double[]> => ^double[];
type `ancestor` <integer, integer[], integer[]> => integer[];
type `arcconnect` <double[], integer[]> => null;
type `autohint` <struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]> | struct<`id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[]>, double[] | ???, logical, logical> => struct<`order`:double[], `spouse`:^double[]> | struct<`order`:integer[], `spouse`:null>;
type `chaseup` <integer[], integer[], integer[]> => integer[];
type `check.hint` <struct<`order`:double[], `spouse`:^double[]> | struct<`order`:double[], `spouse`:null>, integer[]> => struct<`order`:double[], `spouse`:^double[]> | struct<`order`:double[], `spouse`:null>;
type `circfun` <integer, double> => tuple<struct<`x`:double[], `y`:double[]>, struct<`x`:double[], `y`:double[]>>;
type `drawbox` <double, integer, double, double[], double, double | character, struct<`square`:tuple<struct<`x`:double[], `y`:double[]>>, `circle`:tuple<struct<`x`:double[], `y`:double[]>>, `diamond`:tuple<struct<`x`:double[], `y`:double[]>>, `triangle`:tuple<struct<`x`:double[], `y`:double[]>>>, double[] | symbol, double[] | symbol, double, double> => null;
type `duporder` <integer[], struct<`n`:double[], `nid`:^integer[], `pos`:^double[], `fam`:^double[], `spouse`:^integer[]>, integer, struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>> => ^double[];
type `familycheck` <double[], integer[], integer[], integer[], ???> => struct<`famid`:integer[], `n`:integer[], `unrelated`:integer[], `split`:integer[], `join`:double[]>;
type `filter` <character[]> => logical[];
type `findsibs` <double, struct<`n`:double[], `nid`:^integer[], `pos`:^double[], `fam`:^double[], `spouse`:^integer[]>, integer> => integer[];
type `findspouse` <double, struct<`n`:double[], `nid`:^integer[], `pos`:^double[], `fam`:^double[], `spouse`:^integer[]>, integer, struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>> => integer;
type `FUN` <integer[]> => integer[];
type `kindepth` <struct<`id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[]> | struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>, ???, ???, logical> => double[];
type `kinship.pedigree` <struct<`id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>, character, ???> => ^double[];
type `kinship.pedigreeList` <character, ???> => struct<`famid`:double[], `id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[], `status`:double[]> | struct<`famid`:integer[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>;
type `legendPlot` <struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[], `status`:double[]>, integer[], ^double[], ? character[], double[], ? character[], double, ???> => struct<`stringsAsFactors`:logical>;
type `makefamid` <integer[], double[], double[]> => double[];
type `pedigree` <double[] | character[], character[] | ^double[], character[] | ^double[], double[] | ^character[], ^double[] | ???, double[] | ???, ??? | struct<> | ^double[], double[] | ???, ??? | character> => struct<`id`:character[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]> | struct<`id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>;
type `pedigree.legend` <struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[], `status`:double[]> | struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^integer[]>, character[], double, ? double, character, logical, double[], double[], ??? | double> => null;
type `plot.pedigree` <struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]> | struct<`id`:double[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^double[]>, integer[] | character[], ? double[], ? ^double[] | character, double, double[] | character[], double, double, logical, double[], double, language | double[], double[], language | double[], logical, ???, double, ??? | double[]> => struct<`plist`:struct<`n`:double[], `nid`:^integer[], `pos`:^double[], `fam`:^double[], `spouse`:^double[]>, `x`:double[], `y`:integer[], `boxw`:double, `boxh`:double, `call`:language> | struct<`plist`:struct<`n`:double[], `nid`:^integer[], `pos`:^double[], `fam`:^double[], `spouse`:^integer[]>, `x`:^double[], `y`:^integer[], `boxw`:double, `boxh`:double, `call`:language>;
type `polyfun` <integer, struct<`x`:double[], `y`:double[], `theta`:double[]>> => tuple<struct<`x`:double[], `y`:double[]>, struct<`x`:double[], `y`:double[]>>;
type `print.pedigree` <struct<`famid`:double[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:double[]> | struct<`famid`:integer[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]> | struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^integer[], `relation`:struct<`indx1`:integer, `indx2`:integer, `code`:integer>>, ???> => null;
type `print.pedigree.shrink` <struct<`pedObj`:struct<`id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[], `affected`:^integer[]>, `idTrimmed`:double[], `idList`:struct<`unavail`:character>, `bitSize`:double[], `avail`:integer[], `pedSizeOriginal`:integer, `pedSizeIntermed`:integer, `pedSizeFinal`:integer, `seed`:integer>, ???> => null;
type `print.pedigreeList` <struct<`famid`:integer[], `id`:integer[], `findex`:integer[], `mindex`:integer[], `sex`:integer[]>, ???> => null;
type `printBanner` <character, double, double, character> => null;
type `shift` <integer, integer[], logical, double[], symbol, double[]> => double[];
type `t2xy` <double[]> => struct<`x`:double[], `y`:double[]>;
