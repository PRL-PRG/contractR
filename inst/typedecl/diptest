type `:::` <character, character> => ^double[];
type `aLine` <struct<`call`:language, `x`:double[], `n`:integer, `dip`:double, `lo.hi`:integer[], `ifault`:integer, `gcm`:integer[], `lcm`:integer[], `mn`:integer[], `mj`:integer[], `min.is.0`:logical, `debug`:integer, `xl`:double, `xu`:double, `full.result`:character, `GCM`:integer[], `LCM`:integer[]> | struct<`call`:language, `x`:double[], `n`:integer, `dip`:double, `lo.hi`:integer[], `ifault`:integer, `gcm`:integer[], `lcm`:integer[], `mn`:integer[], `mj`:integer[], `min.is.0`:logical, `debug`:integer, `xl`:double, `xu`:double, `full.result`:logical>, character, character, character, double, double | ???> => null;
type `dip` <double[], logical | character, logical, double> => double | struct<`call`:language, `x`:double[], `n`:integer, `dip`:double, `lo.hi`:integer[], `ifault`:integer, `gcm`:integer[], `lcm`:integer[], `mn`:integer[], `mj`:integer[], `min.is.0`:logical, `debug`:integer, `xl`:double, `xu`:double, `full.result`:character, `GCM`:integer[], `LCM`:integer[]> | struct<`call`:language, `x`:double[], `n`:integer, `dip`:double, `lo.hi`:integer[], `ifault`:integer, `gcm`:integer[], `lcm`:integer[], `mn`:integer[], `mj`:integer[], `min.is.0`:logical, `debug`:integer, `xl`:double, `xu`:double, `full.result`:logical>;
type `dip.test` <double[], logical, double> => struct<`statistic`:double, `p.value`:double, `nobs`:integer, `alternative`:character, `method`:character, `data.name`:character>;
type `filter` <character[]> => logical[];
type `FUN` <integer> => double;
type `getCM` <integer[], integer[], integer> => struct<`GCM`:integer[], `LCM`:integer[]>;
type `plot.dip` <struct<`call`:language, `x`:double[], `n`:integer, `dip`:double, `lo.hi`:integer[], `ifault`:integer, `gcm`:integer[], `lcm`:integer[], `mn`:integer[], `mj`:integer[], `min.is.0`:logical, `debug`:integer, `xl`:double, `xu`:double, `full.result`:character, `GCM`:integer[], `LCM`:integer[]> | struct<`call`:language, `x`:double[], `n`:integer, `dip`:double, `lo.hi`:integer[], `ifault`:integer, `gcm`:integer[], `lcm`:integer[], `mn`:integer[], `mj`:integer[], `min.is.0`:logical, `debug`:integer, `xl`:double, `xu`:double, `full.result`:logical>, logical, character, character, character, character, character, logical, logical, ???> => null;
type `rdRDS` <character, character> => ^double[];
