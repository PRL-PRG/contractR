type `.f` <language | double, symbol | double, symbol, symbol> => character | double;
type `as_num_msg` <character> => double;
type `as_num_warn` <character> => double;
type `attempt` <language | symbol | double, ? character, logical, logical> => character | double;
type `filter` <character[]> => logical[];
type `FUN` <character> => logical;
type `if_all` <integer[], language, language> => character[];
type `if_any` <integer[], any => any, language> => character[];
type `if_else` <double, any => any, language, language> => character;
type `if_none` <integer[], any => any, language> => ? double[];
type `if_not` <double, any => any, language> => character;
type `if_then` <double, any => any, language> => character;
type `is_try_error` <character> => logical;
type `no_warning_matrix` <integer[]> => ^integer[];
type `silent_attempt` <double> => null;
type `silent_log` <double> => null;
type `silent_matrix` <integer[]> => null;
type `silently` <any => any> => any => any;
type `sure_log` <character | double> => character | double;
type `surely` <any => any> => any => any;
type `try_catch` <language | double | symbol, language | any => any, language | any => any, null> => character | double | struct<`message`:character, `call`:language>;
type `with_message` <any => any, character> => any => any;
type `with_warning` <any => any, character> => any => any;
type `without_warning` <any => any> => any => any;
