type `avea` <integer> => ^double[];
type `cellx` <struct<`light.regime`:integer[], `LRF.dose`:integer[]>> => ^double[];
type `deltaa` <integer> => ^double[];
type `disp` <double[], ^double[], double[]> => ^double[];
type `drop.test` <struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>, ? struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>> => struct<`F`:^double[], `p.value`:^double[], `RD`:^double[], `tauhat`:double, `df1`:double, `df2`:integer>;
type `filter` <character[]> => logical[];
type `fn` <double[], ^double[], double[], double[], symbol> => double;
type `FUN` <character[] | double[], character[]> => character | integer;
type `getScores` <double[]> => double[];
type `getScoresDeriv` <double[]> => double[];
type `gr` <^double[], double[], double[], double[]> => ^double[];
type `jaeckel` <^double[], double[], double[], ???> => struct<`par`:double[], `value`:double, `counts`:integer[], `convergence`:integer, `message`:null>;
type `khmat` <struct<`light.regime`:integer[], `LRF.dose`:integer[]>, struct<`Var1`:integer, `Var2`:integer>> => ^double[];
type `kwayr` <integer[], struct<`serum`:double[], `light.regime`:integer[], `LRF.dose`:integer[]>> => struct<`tab`:^double[], `fit`:struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>>;
type `oneway.rfit` <integer[], integer[], language, character> => struct<`fit`:struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:integer[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>, `est`:double[], `se`:double[], `I`:integer[], `J`:integer[], `p.value`:double[], `pp`:struct<`method`:character, `data.name`:character, `p.value`:^double[], `p.adjust.method`:character>, `y`:integer[], `g`:integer[], `call`:language>;
type `r.gettau` <^double[], integer, double, double, ???> => double;
type `raov` <language, struct<`serum`:double[], `light.regime`:integer[], `LRF.dose`:integer[]>, ???> => struct<`table`:^double[], `residuals`:^double[], `fitted.values`:^double[], `fit`:struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>, `call`:language>;
type `redmod` <^double[], ^double[]> => ^double[];
type `rfit.default` <language, symbol | ???, ???, ? ^double[], logical, character, ???> => struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>;
type `rstudent.rfit` <struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>, ???> => ^double[];
type `subsets` <integer> => struct<`Var1`:integer[], `Var2`:integer[]>;
type `summary.rfit` <struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>, character, ???> => struct<`coefficients`:^double[], `dropstat`:^double[], `droppval`:^double[], `R2`:^double[], `overall.test`:character, `call`:language> | struct<`coefficients`:^double[], `waldstat`:^double[], `waldpval`:^double[], `overall.test`:character, `call`:language>;
type `taustar` <^double[], integer, double> => double;
type `vcov.rfit` <struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>, null, ???> => ^double[];
type `wald.test.overall` <struct<`coefficients`:double[], `residuals`:^double[], `fitted.values`:^double[], `scores`:null, `x`:^double[], `y`:double[], `tauhat`:double, `qrx1`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `taushat`:double, `symmetric`:logical, `betahat`:double[], `disp`:double, `D1`:^double[], `D0`:^double[], `call`:language>> => struct<`F`:^double[], `p.value`:^double[], `df1`:integer, `df2`:integer>;
type `walsh` <double[]> => double[];
