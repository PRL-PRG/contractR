type `Deriv` <character, character[], environment, logical, logical, null, character> => character;
type `filter` <character[]> => logical[];
type `FUN` <double | language | symbol | struct<`num`:struct<`b`:tuple<symbol>, `p`:tuple<double>>, `den`:struct<`b`:null, `p`:null>, `sminus`:logical, `fa`:struct<`num`:double, `den`:double>> | character | struct<`num`:struct<`b`:tuple<language>, `p`:tuple<double>>, `sminus`:logical, `fa`:struct<`num`:double, `den`:double>> | struct<`num`:struct<`b`:tuple<symbol>, `p`:tuple<double>>, `den`:struct<`b`:tuple<symbol>, `p`:tuple<double>>, `sminus`:logical, `fa`:struct<`num`:double, `den`:double>> | tuple<>, environment | symbol> => ? struct<`num`:struct<`b`:tuple<symbol>, `p`:tuple<double>>, `den`:struct<`b`:null, `p`:null>, `sminus`:logical, `fa`:struct<`num`:double, `den`:double>> | double | language | symbol | tuple<> | tuple<character> | environment | integer[] | tuple<double> | struct<`num`:struct<`b`:tuple<language>, `p`:tuple<double>>, `den`:struct<`b`:tuple<language>, `p`:tuple<double>>, `sminus`:logical, `fa`:struct<`num`:double, `den`:double>> | character[];
type `is.subindex` <language> => logical;
type `li2sum` <tuple<double, double> | tuple<language> | struct<`e1`:language> | struct<`e2`:language> | struct<`x`:language>> => language;
type `Lincomb` <language> => tuple<struct<`num`:struct<`b`:tuple<language>, `p`:tuple<double>>, `sminus`:logical, `fa`:struct<`num`:double, `den`:double>>> | tuple<struct<`num`:struct<`b`:tuple<symbol>, `p`:tuple<double>>, `den`:struct<`b`:null, `p`:null>, `sminus`:logical, `fa`:struct<`num`:double, `den`:double>>> | tuple<struct<`num`:struct<`b`:tuple<symbol>, `p`:tuple<double>>, `den`:struct<`b`:tuple<symbol>, `p`:tuple<double>>, `sminus`:logical, `fa`:struct<`num`:double, `den`:double>>>;
type `negate.expr` <double> => double;
type `Numden` <double | language | symbol> => struct<`fa`:struct<`num`:double, `den`:double>, `sminus`:logical>;
type `Simplify` <language | double, language, environment> => language | double;
type `Simplify.*` <language, logical, environment | symbol> => language;
type `Simplify.rule` <language, symbol | logical | environment, environment | symbol> => language | symbol;
type `::` <any => any, character, environment, logical, logical, double, character> => any => any;
type `is.assign` <language> => logical;
type `Simplify_` <double, symbol> => double;
