type `constr` <double, double, double[], double[], double[], integer> => double;
type `cumsumsurv` <double[]> => double[];
type `DnR` <double[], double[], double[], double[]> => struct<`times`:double[], `n.risk`:double[], `n.event`:double[]>;
type `el.cen.EM` <double[], double[], double[], any => any, double, double, double, double | ???> => struct<`loglik`:double, `times`:double[], `prob`:double[], `funMLE`:double, `lam`:double, `-2LLR`:double, `Pval`:double>;
type `el.cen.EM2` <double[], double[], integer[], any => any, double[], double, double, ^double[] | ???> => struct<`loglik`:double, `times`:double[], `prob`:double[], `lam`:double[], `iters`:double, `-2LLR`:double, `Pval`:double>;
type `el.cen.test` <double[], double[], any => any, double, double, double> => struct<`-2LLR`:double, `Pval`:double, `weights`:double[], `xtime`:double[], `iteration`:double, `error`:double>;
type `el.ltrc.EM` <double[], double[], double[], any => any, double, double, double> => struct<`times`:double[], `prob`:double[], `-2LLR`:double, `Pval`:double>;
type `el.test` <^double[], double[], ???, double, double, double, logical> => struct<`-2LLR`:double, `Pval`:double, `lambda`:double[], `grad`:double[], `hess`:^double[], `wts`:double[], `nits`:double>;
type `el.test.wt2` <^double[], double[], double[], double, double, logical, double, logical> => struct<`prob`:double[], `lambda`:double[], `grad`:double[], `hess`:null, `nits`:double>;
type `emplikH.disc` <double[], double[], double[], double, any => any, double, double> => struct<`-2LLR`:double, `lambda`:double, `times`:double[], `jumps`:double[]>;
type `emplikH.disc2` <double[], double[], double[], double[], double[], double[], double, any => any, any => any, double, double, double> => struct<`-2LLR`:double, `lambda`:double, `times1`:double[], `times2`:double[], `wts1`:double[], `wts2`:double[]>;
type `emplikH1.test` <double[], double[], double, double, any => any, double> => struct<`-2LLR`:double, `lambda`:double, `times`:double[], `wts`:double[], `nits`:null, `message`:null>;
type `emplikH2.test` <double[], double[], double, double, any => any, double, double[]> => struct<`-2LLR`:double, `lambda`:double, `times`:double[], `wts`:^double[], `nits`:null, `message`:null>;
type `emplikHs.disc2` <double[], double[], double[], double[], double[], double[], double[], any => any, any => any, double, double, logical> => struct<`-2LLR`:double, `lambda`:double[], `-2LLR(sample1)`:double, `times1`:double[], `times2`:double[]>;
type `emplikHs.test2` <double[], double[], double[], double[], double[], double[], double[], any => any, any => any, double, double, logical> => struct<`-2LLR`:double, `lambda`:double[], `-2LLR(sample1)`:double, `Llik(sample1)`:double>;
type `emplikHs.test22` <double[], double[], double, integer[], double[], double, double, any => any, any => any, double, double, logical, ^double[]> => struct<`-2LLR`:double, `lambda`:double, `-2LLR(sample1)`:double, `Llik(sample1)`:double>;
type `f` <double, ^double[], ^double[], double[], double[], double[], double[], double> => double;
type `filter` <character[]> => logical[];
type `fun` <double[] | symbol, ^double[]> => ^double[];
type `FUN` <double[], double[]> => double[];
type `fun2` <integer[]> => ^double[];
type `gradf` <^double[], double[], double[]> => double[];
type `inthaz` <double, ^double[], ^double[], double[], double[], double[], double[], double> => double;
type `llog` <^double[], double> => ^double[];
type `llogp` <^double[], double> => ^double[];
type `llogpp` <^double[], double> => ^double[];
type `LTRC` <double[], double[], double[], double[]> => struct<`times`:double[], `survjump`:double[], `surv`:double[], `CumHaz`:double[]>;
type `RankRegTest` <double[], double[], double[], double, character> => struct<`prob`:double[], `logel`:double, `logel2`:double, `-2LLR`:double>;
type `RankRegTestH` <double[], double[], double[], double, character> => struct<`loglikH0`:double, `-2LLR`:double>;
type `redistF` <double[], double[], double[]> => struct<`y`:double[], `d`:double[], `weight`:^double[], `ordY`:integer[]>;
type `ROCnp` <double[], double[], double[], double[], double, double> => struct<`-2LLR`:double, `cstar`:double>;
type `solve3.QP` <^double[], ^double[], ^double[], double[], double, logical> => struct<`solution`:^double[]>;
type `Wdataclean2` <double[], double[], double[]> => struct<`value`:double[], `dd`:double[], `weight`:double[]>;
type `Wdataclean3` <double[], double[], double[], double[]> => struct<`value`:double[], `dd`:double[], `weight`:double[]>;
type `Wdataclean5` <double[], double[], integer[], double[], ^double[]> => struct<`value`:double[], `dd`:double[], `weight`:double[], `xxmat`:^double[]>;
type `WKM` <double[], double[], double[], double[]> => struct<`times`:double[], `jump`:double[], `surv`:double[], `logel`:double>;
