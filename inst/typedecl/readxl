type `filter` <character[]> => logical[];
type `check_bool` <logical, character> => logical;
type `check_col_types` <character[]> => character[];
type `check_file` <character> => character;
type `check_format` <character> => character;
type `check_guess_max` <double, double> => double;
type `check_non_negative_integer` <double, character> => double;
type `excel_format` <character[], logical> => ^character[];
type `excel_sheets` <character> => character[];
type `format_from_ext` <character[]> => ^character[];
type `format_from_signature` <character[]> => ? character[];
type `FUN` <raw[] | character, character, null, logical, null, character, logical, double, double, double, logical, character> => ? raw[] | struct<>;
type `is_integerish` <double> => logical;
type `is_string` <character> => logical;
type `read_excel` <character, ? character | double, ? struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null> | character, logical | character[], ? character[], character, logical, double, double, double, logical, character | any => any | language> => struct<`...1`:character[], `...2`:character[]>;
type `read_excel_` <character, ? character | double, ? struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null> | character, logical | character[], ? character[], character, logical, symbol | double, symbol | double, double, logical, character | any => any | language, character> => struct<`...1`:character[], `...2`:character[]>;
type `read_fun` <character, double, double[], logical, logical | character[], character[], character, logical, double, logical> => struct<``:character[], ``:character[]> | struct<`B3`:character[]> | struct<`B5`:character, `C5`:character, `D5`:character> | struct<`C3`:character[], `D3`:character[]> | struct<`C4`:character[], `D4`:character[]> | struct<`C5`:^character[], `D5`:^character[], ``:^logical[]> | struct<`lat`:double[], `long`:double[], `depth`:double[], `mag`:double[], `stations`:double[]> | struct<`NA`:^character[], ``:^character[], ``:^character[]> | struct<`weight`:double[], `feed`:character[]> | struct<``:double[], ``:double[], ``:double[], ``:double[], ``:character[]> | struct<`B4`:^character[], `C4`:^character[], `D4`:^character[]> | struct<`cyl`:double[], `disp`:double[], `hp`:double[]> | struct<`Lots of people`:^character[], ``:^character[], ``:^character[], ``:^character[], ``:^character[], ``:^character[]> | struct<`maybe a datetime?`:^double[], `explanation`:character[]> | struct<`maybe boolean?`:^logical[], `description`:character[]> | struct<`maybe numeric?`:^double[], `explanation`:character[]> | struct<`Name`:character[], `Age`:double[]> | struct<`name`:character[], `value`:character[]> | struct<`name`:character[], `value`:tuple<character, character, double, double>> | struct<`Petal.Length`:double[], `Petal.Width`:double[], `Species`:character[]> | struct<`Sepal.Length`:character[], `Sepal.Width`:character[], `Petal.Length`:character[], `Petal.Width`:character[], `Species`:character[]> | struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:character[], `Petal.Width`:character[], `Species`:character[]> | struct<`Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]> | struct<`text`:^character[], `explanation`:character[]> | struct<`var_1`:^character[], `var_2`:^character[], `var_3`:^logical[], `var_4`:^logical[]>;
type `readxl_example` <? character> => character[];
type `readxl_progress` < > => logical;
type `sheets_fun` <character> => character[];
type `standardise_limits` <? character | struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>, symbol | double, symbol | double, language | logical> => double[];
type `standardise_sheet` <? double | character, ? character | struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>, language | character[]> => double;
type `xls_sheets` <character> => character[];
type `xlsx_sheets` <character> => character[];
