type `.local` <language> => ? language | symbol;
type `env.formula` <language> => environment;
type `filter` <character[]> => logical[];
type `fun` <symbol, symbol> => null;
type `FUN` <language> => character;
type `get.vars` <symbol | language, struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, ???> => character[];
type `invert` <language, ???> => language;
type `is.one.sided` <language, ???> => logical;
type `is.two.sided` <language, ???> => logical;
type `lhs` <language | expression, ???> => ? symbol | expression | language;
type `lhs<-` <language, language | symbol> => language;
type `op` <language | expression | symbol> => ? symbol | expression;
type `op.type` <expression | language> => tuple<character> | character;
type `op<-` <language, symbol> => language;
type `rhs` <language | expression, ???> => language | symbol | expression;
type `rhs<-` <language, language> => language;
type `terms.call` <language, ??? | symbol> => character[];
type `toggle.sign.call` <language> => symbol;
type `toggle.sign.default` <integer[]> => integer[];
type `toggle.sign.expression` <expression> => expression;
type `toggle.sign.name` <symbol> => language;
