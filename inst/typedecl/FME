type `coef.modFit` <struct<`par`:double[], `hessian`:^double[], `residuals`:double[], `info`:integer, `message`:character, `iterations`:integer, `rsstrace`:double[], `ssr`:double, `diag`:double[], `ms`:double, `var_ms`:double, `var_ms_unscaled`:double, `var_ms_unweighted`:double, `rank`:integer, `df.residual`:integer>, ???> => double[];
type `combin` <double, integer[]> => ^integer[];
type `cost` <double[]> => double;
type `diag.panel` <double[], ???> => null;
type `expanddots` <? character, language | character[] | integer[], integer> => character[] | integer[];
type `expanddotslist` <tuple<double[], double[]>, integer> => tuple<double[], double[]>;
type `f` <double[], ???> => double[];
type `filter` <character[]> => logical[];
type `fn` <double[], ???> => double[];
type `FUN` <double[] | character[] | tuple<double[], double[]>, integer> => double[] | character[] | tuple<double[], double[]>;
type `hist.modMCMC` <struct<`pars`:^double[], `SS`:double[], `naccepted`:double, `sig`:null, `bestpar`:double[], `bestfunp`:double, `prior`:double[], `count`:double[], `settings`:character>, logical, character | integer[], null, null, double | ???> => null;
type `Latinhyper` <struct<`min`:double[], `max`:double[]>, double> => ^double[];
type `LL` <^double[]> => double;
type `logP` <any => any> => struct<`pnew`:double, `SSnew`:double[]>;
type `logP_type1` <any => any, double[], double, symbol, ???> => struct<`pnew`:double, `SSnew`:double>;
type `logP_type2` <any => any, double[], double, double, ???> => struct<`pnew`:double, `SSnew`:double>;
type `logP_type5` <any => any, double[], double, double[], ???> => struct<`pnew`:double, `SSnew`:double[]>;
type `lower.panel` <double[], double[], ???> => null;
type `modFit` <any => any, double[], ???, ? pairlist | double[] | character, ? symbol | character | double[], character[] | pairlist | symbol, ? any => any, tuple<> | character[] | symbol | double, logical> => struct<`par`:double[], `hessian`:^double[], `residuals`:double[], `info`:integer, `message`:character, `iterations`:integer, `rsstrace`:double[], `ssr`:double, `diag`:double[], `ms`:double, `var_ms_unscaled`:null, `var_ms_unweighted`:null, `var_ms`:null, `rank`:integer, `df.residual`:integer> | struct<`par`:double[], `hessian`:^double[], `residuals`:double[], `info`:integer, `message`:character, `iterations`:integer, `rsstrace`:double[], `ssr`:double, `diag`:double[], `ms`:double, `var_ms`:double[], `var_ms_unscaled`:double[], `var_ms_unweighted`:double[], `rank`:integer, `df.residual`:integer> | struct<`par`:double[], `ssr`:double, `convergence`:integer, `iterations`:integer, `evaluations`:integer[], `counts`:character, `hessian`:^double[], `residuals`:double[], `ms`:double, `var_ms_unscaled`:null, `var_ms_unweighted`:null, `var_ms`:null, `rank`:integer, `df.residual`:integer> | struct<`par`:double[], `ssr`:double, `counts`:integer[], `convergence`:integer, `message`:null, `hessian`:^double[], `residuals`:double[], `ms`:double, `var_ms_unscaled`:null, `var_ms_unweighted`:null, `var_ms`:null, `rank`:integer, `df.residual`:integer>;
type `NewPars` <double[], language | symbol> => double[];
type `objective` <double[], ???> => double;
type `obsplot` <struct<`DAY`:integer[], `Ozone`:^integer[], `Solar.R`:^integer[], `Wind`:double[], `Temp`:integer[]>, character | ^double[] | struct<>, ? character[] | integer[], logical[], null> => null;
type `pairs.modCRL` <struct<`gmax`:double[], `eff`:double[], `Bact`:double[]>, integer[], null, ???> => null;
type `pairs.modMCMC` <struct<`pars`:^double[], `SS`:double[], `naccepted`:double, `sig`:^double[], `bestpar`:double[], `bestfunp`:double, `prior`:double[], `count`:double[], `settings`:character> | struct<`pars`:^double[], `SS`:double[], `naccepted`:double, `sig`:^double[], `bestpar`:double[], `bestfunp`:double, `prior`:double[], `count`:double[], `settings`:struct<`var0`:double, `n0`:double, `N`:integer>> | struct<`pars`:^double[], `SS`:double[], `naccepted`:double, `sig`:null, `bestpar`:double[], `bestfunp`:double, `prior`:double[], `count`:double[], `settings`:character>, logical, integer[], null, null, ???> => null;
type `pairs.sensFun` <struct<`x`:double[], `var`:integer[], `gmax`:double[], `eff`:double[], `ks`:double[], `rB`:double[], `dB`:double[]>, ? character[], character[] | ???> => null;
type `plot.collin` <struct<`gmax`:double[], `eff`:double[], `ks`:double[], `rB`:double[], `dB`:double[], `N`:double[], `collinearity`:double[]>, character> => null;
type `plot.modCost` <struct<`model`:double, `minlogp`:double, `var`:struct<`name`:integer, `scale`:double, `N`:integer, `SSR.unweighted`:double, `SSR.unscaled`:double, `SSR`:double>, `residuals`:struct<`name`:integer[], `x`:double[], `obs`:double[], `mod`:double[], `weight`:double[], `res.unweighted`:double[], `res`:double[]>>, character, character> => struct<`rect`:struct<`w`:double, `h`:double, `left`:double, `top`:double>, `text`:struct<`x`:double, `y`:double>>;
type `plot.modCRL` <struct<`eff`:double[], `Bact`:double[], `Sub`:double[]>, ? character[], logical, null, ???> => null;
type `plot.modFit` <struct<`par`:double[], `hessian`:^double[], `residuals`:double[], `info`:integer, `message`:character, `iterations`:integer, `rsstrace`:double[], `ssr`:double, `diag`:double[], `ms`:double, `var_ms_unscaled`:null, `var_ms_unweighted`:null, `var_ms`:null, `rank`:integer, `df.residual`:integer>, null, null> => null;
type `plot.modMCMC` <struct<`pars`:^double[], `SS`:double[], `naccepted`:double, `sig`:^double[], `bestpar`:double[], `bestfunp`:double, `prior`:double[], `count`:double[], `settings`:character> | struct<`pars`:^double[], `SS`:double[], `naccepted`:double, `sig`:^double[], `bestpar`:double[], `bestfunp`:double, `prior`:double[], `count`:double[], `settings`:struct<`var0`:double[], `n0`:double[], `N`:integer[]>> | struct<`pars`:^double[], `SS`:double[], `naccepted`:double, `sig`:null, `bestpar`:double[], `bestfunp`:double, `prior`:double[], `count`:double[], `settings`:character>, logical, ? integer[], logical, null, null, ? ???> => null;
type `plot.sensFun` <struct<`x`:double[], `var`:integer[], `gmax`:double[], `eff`:double[], `ks`:double[], `rB`:double[], `dB`:double[]>, ? character[], character, null, ? ??? | character> => struct<`rect`:struct<`w`:double, `h`:double, `left`:double, `top`:double>, `text`:struct<`x`:double[], `y`:double[]>>;
type `plot.summary.sensFun` <struct<`value`:double[], `scale`:double[], `L1`:double[], `L2`:double[], `Mean`:double[], `Min`:double[], `Max`:double[], `N`:double[]>, integer[], ???> => struct<`mfrow`:integer[]>;
type `plot.summary.sensRange` <struct<`x`:double[], `Mean`:double[], `Sd`:double[], `Min`:double[], `Max`:double[], `q05`:double[], `q25`:double[], `q50`:double[], `q75`:double[], `q95`:double[]>, logical, ? character, character, character[], logical, null, ? ^double[], language | struct<`col`:character, `pch`:double, `cex`:double>, character> => struct<`rect`:struct<`w`:double, `h`:double, `left`:double, `top`:double>, `text`:struct<`x`:double[], `y`:double[]>>;
type `print.summary.modFit` <struct<`residuals`:double[], `residualVariance`:double, `sigma`:double, `modVariance`:double, `df`:integer[], `cov.unscaled`:^double[], `cov.scaled`:^double[], `info`:integer, `niter`:integer, `stopmess`:character, `par`:^double[]>, double, ???> => struct<`residuals`:double[], `residualVariance`:double, `sigma`:double, `modVariance`:double, `df`:integer[], `cov.unscaled`:^double[], `cov.scaled`:^double[], `info`:integer, `niter`:integer, `stopmess`:character, `par`:^double[]>;
type `residuals.modFit` <struct<`par`:double[], `hessian`:^double[], `residuals`:double[], `info`:integer, `message`:character, `iterations`:integer, `rsstrace`:double[], `ssr`:double, `diag`:double[], `ms`:double, `var_ms`:double, `var_ms_unscaled`:double, `var_ms_unweighted`:double, `rank`:integer, `df.residual`:integer>, ???> => double[];
type `setdots` <tuple<> | struct<`col`:character, `pch`:double, `cex`:double> | struct<`type`:character> | struct<`xlab`:character>, symbol | integer> => tuple<> | struct<`col`:character, `pch`:double, `cex`:double> | struct<`type`:character[], `lwd`:integer[]> | struct<`type`:character> | struct<`xlab`:character[]>;
type `Solve` <struct<`gmax`:double, `eff`:double, `ks`:double, `rB`:double, `dB`:double> | double[]> => ^double[] | struct<> | struct<`model`:double, `minlogp`:double, `var`:struct<`name`:integer[], `scale`:double[], `N`:integer[], `SSR.unweighted`:double[], `SSR.unscaled`:double[], `SSR`:double[]>, `residuals`:struct<`name`:integer[], `x`:double[], `obs`:double[], `mod`:double[], `weight`:double[], `res.unweighted`:double[], `res`:double[]>>;
type `summary.modFit` <struct<`par`:double[], `hessian`:^double[], `residuals`:double[], `info`:integer, `message`:character, `iterations`:integer, `rsstrace`:double[], `ssr`:double, `diag`:double[], `ms`:double, `var_ms_unscaled`:null, `var_ms_unweighted`:null, `var_ms`:null, `rank`:integer, `df.residual`:integer> | struct<`par`:double[], `hessian`:^double[], `residuals`:double[], `info`:integer, `message`:character, `iterations`:integer, `rsstrace`:double[], `ssr`:double, `diag`:double[], `ms`:double, `var_ms`:double[], `var_ms_unscaled`:double[], `var_ms_unweighted`:double[], `rank`:integer, `df.residual`:integer>, logical, ???> => struct<`residuals`:double[], `residualVariance`:double, `sigma`:double, `modVariance`:double, `df`:integer[], `cov.unscaled`:^double[], `cov.scaled`:^double[], `info`:integer, `niter`:integer, `stopmess`:character, `par`:^double[]>;
type `Unif` <struct<`min`:double[], `max`:double[]> | ^double[], double> => ^double[];
type `upper.panel` <double[], double[], character[] | double | ???> => null;
type `vec2mat` <double[]> => ^double[];
