type `-` < > => double;
type `.local` <double[], ^double[] | symbol, integer | symbol, logical, ???> => ^double[];
type `[` <double[], double[], ???, logical> => ^double[];
type `*` <double> => double;
type `/` < > => double;
type `%*%` <^double[], ^double[]> => ^double[];
type `+` <^double[], double | integer[]> => ^double[];
type `as.matrix.bdsmatrix` <???> => ^double[];
type `as.matrix.gchol` <double[], logical, ???> => ^double[];
type `as.matrix.gchol.bdsmatrix` <logical, ???> => ^double[];
type `asMethod` <character, logical> => ^double[];
type `backsolve` <^double[], ^double[]> => ^double[];
type `bdsBlock` <double[]> => character[];
type `bdsI` <???> => integer[];
type `bdsmatrix` <double[], ^double[] | ???, ? tuple<null, character[]> | tuple<character[], character[]> | tuple<integer[], integer[]>> => double[];
type `bdsmatrix.reconcile` <tuple<null, any => any> | tuple<null, null>, character[]> => tuple<null, null>;
type `diag` <double[], ???, ???, logical> => double[];
type `diag<-` < > => double[];
type `dim` <???> => integer[];
type `dimnames` <???> => tuple<character[], character[]> | tuple<null, character[]>;
type `dimnames<-` <???> => ???;
type `exp` <null, null> => null;
type `filter` <character[]> => logical[];
type `FUN` <integer[]> => integer;
type `gchol` <^double[], double> => double[];
type `ismat` <any => any | ^double[]> => logical;
type `kmat` <???> => character[];
type `max` <???, logical> => double;
type `min` <???, logical> => double;
type `prod` <???, logical> => double;
type `range` <???, logical> => double[];
type `round` < > => double;
type `solve.bdsmatrix` <^double[] | ???, logical, double, ???> => ^double[];
type `solve.gchol` <double[], ??? | double[], logical, ???> => ^double[];
type `solve.gchol.bdsmatrix` <^double[] | ???, logical, ???> => ^double[];
type `sum` <???, logical> => double;
type `unique.bdsmatrix` <logical, ???> => double[];
type `varlist` <???> => character[];
