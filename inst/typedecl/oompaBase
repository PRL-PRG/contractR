type `bluescale` <double> => character[];
type `blueyellow` <double> => character[];
type `colorCode` <integer[], character[], double> => tuple<null, null>;
type `ColorCodedPair` <double[], tuple<null, null>> => double[];
type `ColorCoding` <character, double> => logical[];
type `cyanyellow` <double> => character[];
type `desat` <character[], double> => character[];
type `filter` <character[]> => logical[];
type `FUN` <integer, double[], double[] | character[], double> => null;
type `grayscale` <double> => character[];
type `greyscale` <double> => character[];
type `initialize` < > => logical[] | ???;
type `jetColors` <double> => character[];
type `matrixMean` <^double[], logical> => ^double[];
type `matrixPairedT` <^double[], integer[], integer[]> => ^double[];
type `matrixT` <^double[], integer[], logical> => ^double[];
type `matrixUnequalT` <^double[], integer[]> => struct<`tt`:^double[], `df`:^double[]>;
type `matrixVar` <^double[], ^double[], logical> => ^double[];
type `plot` <character | ???> => ???;
type `redgreen` <double> => character[];
type `redscale` <double> => character[];
type `wheel` <double, double> => character[];
