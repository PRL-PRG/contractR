type `filter` <character[]> => logical[];
type `::` <struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`d$acme`:double[], `d$market`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:environment, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>> | struct<`d$acme`:double[], `d$market`:double[]>, any => any, double, character, struct<> | language, ? integer | character, null, double, null, language, null, logical, struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `contrasts`:struct<`Species`:character>, `xlevels`:struct<`Species`:character[]>, `call`:language, `terms`:language, `model`:struct<`Sepal.Length`:double[], `Species`:integer[], `Petal.Width`:double[]>> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`mpg`:double[], `wt`:double[], `cyl`:double[]>>, ? integer | character, integer, null> => struct<`res`:double[], `rd`:double[], `rp`:double[], `cook`:double[], `h`:double[], `sd`:double> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`Sepal.Length`:double[], `Species`:integer[], `Petal.Width`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`mpg`:double[], `wt`:double[], `cyl`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>;
type `abc.ci` <struct<`u`:double[], `x`:double[]>, any => any, double, double[], double[], double, ???> => ^double[];
type `balanced.array` <integer, double, integer[]> => ^integer[];
type `basic.ci` <double, double[], double[], any => any> => ^double[];
type `bca.ci` <struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>, double[], integer, symbol, null, null, any => any, symbol, any => any, ???> => ^double[];
type `boot` <struct<`g`:double[], `series`:integer[]> | ^double[], any => any, double[], character, character[] | double, symbol | double[] | pairlist | ???, null, ? double | symbol, ? ^double[], language | any => any, ? double, logical, double | ???, ??? | symbol | character[] | language | double[], integer, null> => struct<`t0`:double[], `t`:^double[], `R`:double[], `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:double> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:null> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`cost`:double[], `date`:double[], `cap`:double[], `ne`:double[], `ct`:double[], `cum.n`:double[], `pt`:double[], `resid`:double[], `fit`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[], `pred.i`:^integer[]> | struct<`t0`:double[], `t`:^double[], `R`:double[], `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:^double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:double>;
type `boot.array` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>, logical> => ^integer[];
type `boot.ci` <struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]>, double[], character[], integer[], ? double, ? double[], ? double, ? double[], null, any => any, language | any => any, any => any, ???> => struct<`R`:integer, `t0`:double, `call`:language, `normal`:^double[], `basic`:^double[], `percent`:^double[], `bca`:^double[]> | struct<`R`:integer, `t0`:double, `call`:language, `normal`:^double[], `student`:^double[]>;
type `boot.return` <character, double[], ^double[], symbol | double[], double[], struct<`g`:double[], `series`:integer[]> | ^double[], any => any, character | symbol, language, integer[], symbol, double | symbol, symbol | ^integer[], ^double[] | symbol, symbol | any => any, ? symbol | double> => struct<`t0`:double[], `t`:^double[], `R`:double[], `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:double> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:null> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`cost`:double[], `date`:double[], `cap`:double[], `ne`:double[], `ct`:double[], `cum.n`:double[], `pt`:double[], `resid`:double[], `fit`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[], `pred.i`:^integer[]> | struct<`t0`:double[], `t`:^double[], `R`:double[], `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:^double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:double> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`Sepal.Length`:double[], `Species`:integer[], `Petal.Width`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`mpg`:double[], `wt`:double[], `cyl`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>;
type `bsample` <double[], double> => double[];
type `cens.case` <integer, integer[], double> => ^integer[];
type `cens.resamp` <struct<`time`:double[], `cens`:double[], `group`:double[]>, double, struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `strata`:integer[], `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language> | struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `strata`:integer[], `surv`:double[], `type`:character, `cumhaz`:double[], `std.err`:double[], `logse`:logical, `lower`:double[], `upper`:double[], `conf.type`:character, `conf.int`:double, `call`:language>, struct<`n`:integer, `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language> | struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `strata`:integer[], `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>, ^integer[], double[] | symbol, ? struct<`coefficients`:double[], `var`:^double[], `loglik`:double[], `score`:double, `iter`:integer, `linear.predictors`:double[], `residuals`:double[], `means`:double[], `method`:character, `n`:integer, `nevent`:double, `terms`:language, `assign`:struct<`ns(thickness# df = 4)`:integer[]>, `wald.test`:double, `concordance`:double[], `y`:^double[], `formula`:language, `xlevels`:struct<`strata(ulcer)`:character[]>, `call`:language>, character> => double[];
type `cens.return` <character, double[], ^double[], ^double[], double, struct<`time`:double[], `cens`:double[], `group`:double[]> | ^double[], any => any, language, integer[]> => struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:struct<`time`:double[], `cens`:double[], `group`:double[]>, `seed`:integer[], `statistic`:any => any, `strata`:^double[], `call`:language> | struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:struct<`time`:double[], `cens`:double[], `group`:double[]>, `seed`:integer[], `statistic`:any => any, `strata`:double[], `call`:language> | struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:struct<`time`:double[], `status`:double[], `sex`:double[], `age`:double[], `year`:double[], `thickness`:double[], `ulcer`:double[]>, `seed`:integer[], `statistic`:any => any, `strata`:^double[], `call`:language> | struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:^double[], `seed`:integer[], `statistic`:any => any, `strata`:double[], `call`:language>;
type `cens.weird` <^double[], struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `strata`:integer[], `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>, integer[]> => ^double[];
type `censboot` <struct<`time`:double[], `cens`:double[], `group`:double[]> | ^double[], any => any, double, struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `strata`:integer[], `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language> | ??? | struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `strata`:integer[], `surv`:double[], `type`:character, `cumhaz`:double[], `std.err`:double[], `logse`:logical, `lower`:double[], `upper`:double[], `conf.type`:character, `conf.int`:double, `call`:language>, struct<`n`:integer, `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language> | ??? | struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `strata`:integer[], `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>, ^double[], character, ? struct<`coefficients`:double[], `var`:^double[], `loglik`:double[], `score`:double, `iter`:integer, `linear.predictors`:double[], `residuals`:double[], `means`:double[], `method`:character, `n`:integer, `nevent`:double, `terms`:language, `assign`:struct<`ns(thickness# df = 4)`:integer[]>, `wald.test`:double, `concordance`:double[], `y`:^double[], `formula`:language, `xlevels`:struct<`strata(ulcer)`:character[]>, `call`:language>, double[], ???, ? logical | language, integer, null> => struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:struct<`time`:double[], `cens`:double[], `group`:double[]>, `seed`:integer[], `statistic`:any => any, `strata`:^double[], `call`:language> | struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:struct<`time`:double[], `cens`:double[], `group`:double[]>, `seed`:integer[], `statistic`:any => any, `strata`:double[], `call`:language> | struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:struct<`time`:double[], `status`:double[], `sex`:double[], `age`:double[], `year`:double[], `thickness`:double[], `ulcer`:double[]>, `seed`:integer[], `statistic`:any => any, `strata`:^double[], `call`:language> | struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:^double[], `seed`:integer[], `statistic`:any => any, `strata`:double[], `call`:language>;
type `const` <double[], double> => logical;
type `control` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>, ? character[], null, double, ? double, ? double[], logical, ? integer, ???> => double | struct<`L`:double[], `tL`:double[], `bias`:double, `var`:double, `k3`:double, `quantiles`:^double[], `distn`:struct<`x`:double[], `y`:double[], `w`:double[], `yin`:double[], `tol`:double, `data`:struct<`x`:double[], `y`:double[], `w`:double>, `no.weights`:logical, `lev`:double[], `cv.crit`:double, `pen.crit`:double, `crit`:double, `df`:double, `spar`:double, `ratio`:double, `lambda`:double, `iparms`:^integer[], `auxM`:null, `fit`:struct<`knot`:double[], `nk`:integer, `min`:double, `range`:double, `coef`:double[]>, `call`:language>>;
type `cost` <double[], double[]> => double;
type `cum3` <double[], double[], double[], logical> => double;
type `cv.glm` <struct<`body`:double[], `brain`:double[]>, struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`log(brain)`:double[], `log(body)`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`body`:double[], `brain`:double[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`r`:double[], `stage`:double[], `xray`:double[], `acid`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`m`:double[], `r`:double[], `aged`:double[], `stage`:double[], `grade`:double[], `xray`:double[], `acid`:double[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>>, any => any, character | double> => struct<`call`:language, `K`:double, `delta`:double[], `seed`:integer[]>;
type `det` <^double[]> => ? double;
type `emperr` <^double[], double, double> => double[];
type `empinf` <? struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>, ? struct<`g`:double[], `series`:integer[]> | symbol, ? any => any, ? character, ? character, double, ? ^double[], double[] | language, double, double | ???> => double[];
type `empinf.reg` <struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]>, ^double[]> => double[];
type `envelope` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:null> | struct<`t0`:double[], `t`:^double[], `R`:double, `sim`:character, `data`:struct<`time`:double[], `status`:double[], `sex`:double[], `age`:double[], `year`:double[], `thickness`:double[], `ulcer`:double[]>, `seed`:integer[], `statistic`:any => any, `strata`:^double[], `call`:language>, null, double, integer[]> => struct<`point`:^double[], `overall`:^double[], `k.pt`:double[], `err.pt`:double[], `k.ov`:double[], `err.ov`:double[], `err.nom`:double[]>;
type `exp.tilt` <double[], double[], double, null, double[]> => struct<`p`:^double[], `theta`:double[], `lambda`:double[]>;
type `extra.array` <integer, double, double, symbol> => ^integer[];
type `find_type` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>> => character;
type `fn` <double> => double;
type `freq.array` <^integer[]> => ^integer[];
type `FUN` <double[], double[], double[]> => double[];
type `getc1` <integer, double, struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `strata`:integer[], `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>, integer[]> => ^double[];
type `getc2` <integer, double, struct<`n`:integer, `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>, integer[], struct<`time`:double[], `cens`:double[]>, ???> => ^double[];
type `gety1` <integer, double, struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `strata`:integer[], `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>, integer[]> => ^double[];
type `gety2` <symbol, double, struct<`n`:integer[], `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `strata`:integer[], `surv`:double[], `type`:character, `cumhaz`:double[], `std.err`:double[], `logse`:logical, `lower`:double[], `upper`:double[], `conf.type`:character, `conf.int`:double, `call`:language>, double[], integer[]> => ^double[];
type `glm.diag` <struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`log(cost)`:double[], `date`:double[], `log(cap)`:double[], `ne`:double[], `ct`:double[], `log(cum.n)`:double[], `pt`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`cost`:double[], `date`:double[], `cap`:double[], `ne`:double[], `ct`:double[], `cum.n`:double[], `pt`:double[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`time`:integer[], `ag`:integer[], `log10(wbc)`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`wbc`:integer[], `ag`:integer[], `time`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`ag`:character>, `xlevels`:struct<`ag`:character[]>> | struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:double[], `converged`:logical, `boundary`:logical, `model`:struct<`log(brain)`:double[], `log(body)`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`body`:double[], `brain`:double[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:null, `xlevels`:tuple<>>> => struct<`res`:double[], `rd`:double[], `rp`:double[], `cook`:double[], `h`:double[], `sd`:double>;
type `glm.diag.plots` <struct<`coefficients`:double[], `residuals`:double[], `fitted.values`:double[], `effects`:double[], `R`:^double[], `rank`:integer, `qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[], `tol`:double>, `family`:struct<`family`:character, `link`:character, `linkfun`:any => any, `linkinv`:any => any, `variance`:any => any, `dev.resids`:any => any, `aic`:any => any, `mu.eta`:any => any, `initialize`:expression, `validmu`:any => any, `valideta`:any => any, `simulate`:any => any>, `linear.predictors`:double[], `deviance`:double, `aic`:double, `null.deviance`:double, `iter`:integer, `weights`:double[], `prior.weights`:double[], `df.residual`:integer, `df.null`:integer, `y`:integer[], `converged`:logical, `boundary`:logical, `model`:struct<`time`:integer[], `ag`:integer[], `log10(wbc)`:double[]>, `call`:language, `formula`:language, `terms`:language, `data`:struct<`wbc`:integer[], `ag`:integer[], `time`:integer[]>, `offset`:null, `control`:struct<`epsilon`:double, `maxit`:double, `trace`:logical>, `method`:character, `contrasts`:struct<`ag`:character>, `xlevels`:struct<`ag`:character[]>>, struct<`res`:double[], `rd`:double[], `rp`:double[], `cook`:double[], `h`:double[], `sd`:double>, null, logical, null, logical> => null;
type `h` <double[]> => double[];
type `hdot` <double[] | symbol> => double[];
type `hinv` <double[]> => double[];
type `iden` <double> => ^double[];
type `imp.arr` <integer, double, double[], integer[]> => ^integer[];
type `imp.arr.bal` <integer, double, double[], integer[]> => ^integer[];
type `imp.moments` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]>, double, double[], ? double[], logical, null> => struct<`raw`:double[], `rat`:double[], `reg`:double[]>;
type `imp.prob` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[]>, double, double, double[], ? double[], logical, null> => struct<`t0`:double, `raw`:double, `rat`:double, `reg`:double>;
type `imp.quantile` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[]>, double[], double, double[], double[], logical, null> => struct<`alpha`:double[], `raw`:double[], `rat`:double[], `reg`:double[]>;
type `imp.reg` <double[]> => double[];
type `imp.weights` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]>, logical | symbol, null> => double[];
type `importance.array` <integer, double[], ^double[], integer[]> => ^integer[];
type `importance.array.bal` <integer, double[], ^double[], integer[]> => ^integer[];
type `index.array` <integer, double[], character, integer[], symbol | double, symbol | language, ? ^double[]> => ^integer[];
type `inf.jack` <struct<`g`:double[], `series`:integer[]>, any => any, double, double[], double, double | ???> => double[];
type `isMatrix` <? struct<`time`:double[], `cens`:double[], `group`:double[]> | ^double[]> => logical;
type `jack.after.boot` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>, double, null, null, logical, logical, null, character, null, ???> => null;
type `k3.linear` <double[], ? integer[]> => double;
type `linear.approx` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>, ? double[], double, null, ? double, ? ^double[], ???> => double[];
type `lines.saddle.distn` <struct<`quantiles`:^double[], `points`:^double[], `distn`:struct<`x`:double[], `y`:double[], `w`:double[], `yin`:double[], `tol`:double, `data`:struct<`x`:double[], `y`:double[], `w`:double>, `no.weights`:logical, `lev`:double[], `cv.crit`:double, `pen.crit`:double, `crit`:double, `df`:double, `spar`:double, `ratio`:double, `lambda`:double, `iparms`:^integer[], `auxM`:null, `fit`:struct<`knot`:double[], `nk`:integer, `min`:double, `range`:double, `coef`:double[]>, `call`:language>, `call`:language, `LR`:logical>, logical, any => any, any => any, double, double, double> => struct<`quantiles`:^double[], `points`:^double[], `distn`:struct<`x`:double[], `y`:double[], `w`:double[], `yin`:double[], `tol`:double, `data`:struct<`x`:double[], `y`:double[], `w`:double>, `no.weights`:logical, `lev`:double[], `cv.crit`:double, `pen.crit`:double, `crit`:double, `df`:double, `spar`:double, `ratio`:double, `lambda`:double, `iparms`:^integer[], `auxM`:null, `fit`:struct<`knot`:double[], `nk`:integer, `min`:double, `range`:double, `coef`:double[]>, `call`:language>, `call`:language, `LR`:logical>;
type `mod` <integer[], integer> => double[];
type `norm.ci` <? struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`hours`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:struct<`u`:double[], `x`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]>, double[], double | language, ? double, ? double, ? double[], ? symbol, any => any, any => any | symbol, any => any> => ^double[];
type `norm.inter` <double[], double[]> => ^double[];
type `normalize` <double[], integer[]> => double[];
type `not` <logical[]> => logical[];
type `ordinary.array` <integer, double, integer[]> => ^integer[];
type `perc.ci` <double[], double[], any => any> => ^double[];
type `permutation.array` <integer, double, integer[]> => ^integer[];
type `pivot` <^double[], double, double> => ^double[];
type `plot.boot` <struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:double> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:integer, `call`:language, `l`:double, `endcorr`:logical, `p.value`:double>, double, ? double, ? double[], logical, character, null, ???, ??? | logical> => struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double, `data`:^double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:double[]> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `ran.gen`:any => any, `mle`:double> | struct<`t0`:double, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:integer, `call`:language, `l`:double, `endcorr`:logical, `p.value`:double>;
type `ran.gen` <double[], symbol, symbol> => double[];
type `rperm` <^integer[]> => integer[];
type `saddle` <^double[], double[], character, character | symbol, ? symbol, double, language | symbol | double, double[] | symbol, logical | symbol, ? symbol | integer[], null, null> => struct<`spa`:double[], `zeta.hat`:double[], `zeta2.hat`:double[]> | struct<`spa`:^double[], `zeta.hat`:double> | struct<`spa`:^logical[], `zeta.hat`:null>;
type `saddle.distn` <any => any | ^double[], ? any => any | double, ? character | double[], character, character, double, null, double[], double[], double[], logical, ? integer[], struct<`u`:double[], `x`:double[]> | ???> => struct<`quantiles`:^double[], `points`:^double[], `distn`:struct<`x`:double[], `y`:double[], `w`:double[], `yin`:double[], `tol`:double, `data`:struct<`x`:double[], `y`:double[], `w`:double>, `no.weights`:logical, `lev`:double[], `cv.crit`:double, `pen.crit`:double, `crit`:double, `df`:double, `spar`:double, `ratio`:double, `lambda`:double, `iparms`:^integer[], `auxM`:null, `fit`:struct<`knot`:double[], `nk`:integer, `min`:double, `range`:double, `coef`:double[]>, `call`:language>, `call`:language, `LR`:logical>;
type `sample0` <^integer[], double> => integer[];
type `sgn` <double, double> => double;
type `simplex` <double[], ? ^double[], ? double[], ? ^double[], ? double[], ? ^double[], ? double[], logical, double, double> => struct<`soln`:double[], `solved`:integer, `value`:double, `A`:^double[], `a`:double[], `basic`:double[], `maxi`:logical, `slack`:double, `surplus`:double[], `obj`:double[], `call`:language> | struct<`soln`:double[], `solved`:integer, `value`:double, `A`:^double[], `a`:double[], `basic`:integer[], `maxi`:logical, `obj`:double[], `call`:language> | struct<`soln`:double[], `solved`:double, `value`:double, `val.aux`:double, `A`:^double[], `a`:double[], `a.aux`:double[], `basic`:integer[], `maxi`:logical, `artificial`:double[], `obj`:double[], `call`:language>;
type `simplex1` <double[], ^double[], double[], language, double[], double, double, double | symbol, double, double> => struct<`soln`:double[], `solved`:double, `value`:double, `val.aux`:double, `A`:^double[], `a`:double[], `a.aux`:double[], `basic`:double[]> | struct<`soln`:double[], `solved`:integer, `value`:double, `A`:^double[], `a`:double[], `basic`:double[]>;
type `smooth.f` <double, struct<`t0`:double[], `t`:^double[], `R`:double, `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:double[]>, double, double[], double> => double[];
type `statistic` <struct<`u`:double[], `x`:double[]>, double[]> => double;
type `stud.ci` <double[], ^double[], double, any => any> => ^double[];
type `tilt.boot` <struct<`g`:double[], `series`:integer[]>, any => any, double[], character, character, double[], null, ? integer[], double[], logical, double, double, double> => struct<`t0`:double[], `t`:^double[], `R`:double[], `data`:struct<`g`:double[], `series`:integer[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:integer[], `weights`:^double[], `theta`:double[]> | struct<`t0`:double[], `t`:^double[], `R`:double[], `data`:struct<`month`:character[], `market`:double[], `acme`:double[]>, `seed`:integer[], `statistic`:any => any, `sim`:character, `call`:language, `stype`:character, `strata`:double[], `weights`:^double[], `theta`:double[]>;
type `tilt.dis` <double> => double;
type `tilted.prob` <double[], double[], integer[]> => ^double[];
type `ts.array` <integer, double, double, double, character, logical> => struct<`starts`:^integer[], `lengths`:^double[]>;
type `ts.return` <? double[], ^double[], double, double[], integer[], any => any, character, logical | symbol, double, double | symbol, symbol | any => any, symbol | struct<`ts`:double[], `model`:struct<`order`:double[], `ar`:double[]>>, language, symbol> => struct<`t0`:double[], `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:integer, `call`:language, `l`:double, `endcorr`:logical> | struct<`t0`:null, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:double, `call`:language, `l`:double, `endcorr`:logical, `ran.gen`:any => any, `ran.args`:struct<`ts`:double[], `model`:struct<`order`:double[], `ar`:double[]>>> | struct<`t0`:null, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:double, `call`:language, `ran.gen`:any => any, `ran.args`:struct<`ts`:double[], `model`:struct<`order`:double[], `ar`:double[]>>>;
type `tsboot` <double[], any => any, double, ? double, character, logical, language | double | character | integer[], logical, any => any, ? struct<`ts`:double[], `model`:struct<`order`:double[], `ar`:double[]>>, logical, ???, language | character | integer[], integer, null> => struct<`t0`:double[], `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:integer, `call`:language, `l`:double, `endcorr`:logical> | struct<`t0`:null, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:double, `call`:language, `l`:double, `endcorr`:logical, `ran.gen`:any => any, `ran.args`:struct<`ts`:double[], `model`:struct<`order`:double[], `ar`:double[]>>> | struct<`t0`:null, `t`:^double[], `R`:double, `data`:double[], `seed`:integer[], `statistic`:any => any, `sim`:character, `n.sim`:double, `call`:language, `ran.gen`:any => any, `ran.args`:struct<`ts`:double[], `model`:struct<`order`:double[], `ar`:double[]>>>;
type `var.linear` <double[], ? integer[]> => double;
type `zero` <double, double> => ? ^double[];
