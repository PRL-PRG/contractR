type `$` <language | struct<> | struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]> | struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`w1`:double[], `x1`:double[], `x2`:double[]>>, struct<`y`:integer[], `x1`:double[], `x2`:double[], `x3`:double[], `w1.1`:double[], `w1.2`:double[], `w2.2`:double[], `w3.2`:double[]>> => struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]> | struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]> | ^double[];
type `bfct` <struct<`x1`:double[], `x2`:double[], `x3`:double[]>> => struct<`w1.1`:double[], `w1.2`:double[], `w2.2`:double[], `w3.2`:double[]> | ^double[];
type `bootest.factor` <integer[], language, struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[], `clv`:^double[], `cs`:^double[], `lora`:double[], `Class`:integer[]>, any => any, ? any => any, double, logical, null, logical, logical, tuple<struct<`model`:any => any>> | ???> => struct<`error`:double, `nboot`:double, `bc632plus`:logical>;
type `bootest.numeric` <double[], language, struct<`y`:double[], `V1`:double[], `V2`:double[], `V3`:double[], `V4`:double[], `V5`:double[], `V6`:double[], `V7`:double[], `V8`:double[], `V9`:double[], `V10`:double[]>, any => any, null, double, logical, null, logical, ???> => struct<`error`:double, `nboot`:double>;
type `bootest.Surv` <^double[], language, struct<`time`:double[], `cens`:double[], `X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[], `X5`:double[]>, any => any, null, double, logical, null, logical, double> => struct<`error`:double, `nboot`:double>;
type `cv.factor` <integer[], language, struct<`Class`:integer[], `ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>, any => any, ? any => any, double, logical, logical, logical, logical, ? list<integer[]>, ??? | double> => struct<`error`:double, `k`:double>;
type `cv.numeric` <double[], language, struct<`medv`:double[], `crim`:double[], `zn`:double[], `indus`:double[], `chas`:integer[], `nox`:double[], `rm`:double[], `age`:double[], `dis`:double[], `rad`:double[], `tax`:double[], `ptratio`:double[], `b`:double[], `lstat`:double[]>, any => any, null, double, logical, logical, language, logical, null, ???> => struct<`error`:double, `k`:double>;
type `cv.Surv` <^double[], language, struct<`horTh`:integer[], `age`:integer[], `menostat`:integer[], `tsize`:integer[], `tgrade`:integer[], `pnodes`:integer[], `progrec`:integer[], `estrec`:integer[], `time`:integer[], `cens`:integer[]>, any => any, ? any => any, double, logical, logical, logical, logical, null, ??? | double> => struct<`error`:double, `k`:double>;
type `errorestinclass` <language, struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[], `clv`:^double[], `cs`:^double[], `lora`:double[], `Class`:integer[]>, symbol, symbol, any => any, null, character, struct<`k`:double, `nboot`:double, `strat`:logical, `random`:logical, `predictions`:logical, `getmodels`:logical, `list.tindx`:null>, tuple<struct<`model`:any => any>>> => struct<`error`:double, `nboot`:double, `bc632plus`:logical>;
type `filter` <character[]> => logical[];
type `fu` <integer[]> => character[];
type `FUN` <^double[] | struct<`n`:integer, `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>, double[]> => ? double[];
type `getpartition` <struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>, ^double[] | struct<>> => integer[];
type `getsurv` <struct<`n`:integer, `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>, double[]> => double[];
type `inbagg.data.frame` <language, struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[], `clv`:^double[], `cs`:^double[], `lora`:double[], `Class`:integer[]>, tuple<struct<`model`:any => any, `predict`:any => any>> | tuple<struct<`formula`:language, `model`:any => any>, struct<`model`:any => any>> | tuple<struct<`formula`:language, `model`:any => any, `predict`:any => any>, struct<`model`:any => any>>, any => any | integer, double, double, logical, ???> => struct<`mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`fixed.function`:any => any, `formula`:language>, `bfct`:any => any>>, `y`:integer[], `W`:struct<`clv`:^double[], `lora`:double[], `cs`:^double[]>, `X`:struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>> | struct<`mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`model`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `predict`:any => any>, `bfct`:any => any>>, `y`:integer[], `W`:struct<`w1`:double[], `w2`:double[], `w3`:double[]>, `X`:struct<`x1`:double[], `x2`:double[], `x3`:double[]>>;
type `ipredbagg.factor` <integer[], struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>, double, struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, ? tuple<struct<`model`:any => any, `predict`:any => any>>, logical, integer, logical, ???> => struct<`y`:integer[], `X`:struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double> | struct<`y`:integer[], `X`:struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>>, `OOB`:logical, `comb`:logical> | struct<`y`:integer[], `X`:struct<`Cl.thickness`:integer[], `Cell.size`:integer[], `Cell.shape`:integer[], `Marg.adhesion`:integer[], `Epith.c.size`:integer[], `Bare.nuclei`:integer[], `Bl.cromatin`:integer[], `Normal.nucleoli`:integer[], `Mitoses`:integer[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double> | struct<`y`:integer[], `X`:struct<`RI`:double[], `Na`:double[], `Mg`:double[], `Al`:double[], `Si`:double[], `K`:double[], `Ca`:double[], `Ba`:double[], `Fe`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double> | struct<`y`:integer[], `X`:struct<`V1`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:integer[], `ordered`:logical>>>, `OOB`:logical, `comb`:logical, `err`:double> | struct<`y`:integer[], `X`:struct<`V1`:integer[], `V3`:double[], `V4`:double[], `V5`:double[], `V6`:double[], `V7`:double[], `V8`:double[], `V9`:double[], `V10`:double[], `V11`:double[], `V12`:double[], `V13`:double[], `V14`:double[], `V15`:double[], `V16`:double[], `V17`:double[], `V18`:double[], `V19`:double[], `V20`:double[], `V21`:double[], `V22`:double[], `V23`:double[], `V24`:double[], `V25`:double[], `V26`:double[], `V27`:double[], `V28`:double[], `V29`:double[], `V30`:double[], `V31`:double[], `V32`:double[], `V33`:double[], `V34`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>>, `OOB`:logical, `comb`:logical> | struct<`y`:integer[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:integer[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double> | struct<`y`:integer[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>>, `OOB`:logical, `comb`:logical>;
type `ipredbagg.numeric` <double[], struct<`crim`:double[], `zn`:double[], `indus`:double[], `chas`:integer[], `nox`:double[], `rm`:double[], `age`:double[], `dis`:double[], `rad`:double[], `tax`:double[], `ptratio`:double[], `b`:double[], `lstat`:double[]>, double, struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, ? tuple<struct<`model`:any => any, `predict`:any => any>>, logical, integer, logical, ???> => struct<`y`:double[], `X`:struct<`crim`:double[], `zn`:double[], `indus`:double[], `chas`:integer[], `nox`:double[], `rm`:double[], `age`:double[], `dis`:double[], `rad`:double[], `tax`:double[], `ptratio`:double[], `b`:double[], `lstat`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double> | struct<`y`:double[], `X`:struct<`V1`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:double[], `ordered`:logical>>>, `OOB`:logical, `comb`:logical, `err`:double> | struct<`y`:double[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double>;
type `ipredbagg.Surv` <^double[], struct<`MGEc.1`:double[], `IPI`:integer[]>, double, struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, null, logical, integer, logical, ???> => struct<`y`:^double[], `X`:struct<`MGEc.1`:double[], `IPI`:integer[]>, `mtrees`:tuple<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:^double[], `X`:struct<`MGEc.1`:double[], `MGEc.2`:double[], `MGEc.3`:double[], `MGEc.4`:double[], `MGEc.5`:double[], `MGEc.6`:double[], `MGEc.7`:double[], `MGEc.8`:double[], `MGEc.9`:double[], `MGEc.10`:double[], `IPI`:integer[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:^double[]> | struct<`y`:^double[], `X`:struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[], `X5`:double[]>, `mtrees`:tuple<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:^double[], `X`:struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[], `X5`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical>;
type `irpart` <language, symbol, ???, ???, any => any, ???, logical, logical, logical, ???, symbol, ???, struct<`nbagg`:double, `ns`:integer, `replace`:logical>, ???> => list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:double[], `ordered`:logical>>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>>> | tuple<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:integer[], `ordered`:logical>>>;
type `model` <language, struct<`classes`:integer[], `x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[]>, ???, ???, double, ???> => struct<`learn`:struct<`y`:integer[], `X`:^double[]>, `k`:double, `terms`:language, `call`:language, `xlevels`:tuple<>>;
type `predict.classbagg` <struct<`y`:integer[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>>, `OOB`:logical, `comb`:logical, `call`:language> | struct<`y`:integer[], `X`:struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:integer[], `X`:struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>>, `OOB`:logical, `comb`:logical, `call`:language> | struct<`y`:integer[], `X`:struct<`Cl.thickness`:integer[], `Cell.size`:integer[], `Cell.shape`:integer[], `Marg.adhesion`:integer[], `Epith.c.size`:integer[], `Bare.nuclei`:integer[], `Bl.cromatin`:integer[], `Normal.nucleoli`:integer[], `Mitoses`:integer[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:integer[], `X`:struct<`Cl.thickness`:integer[], `Cell.size`:integer[], `Cell.shape`:integer[], `Marg.adhesion`:integer[], `Epith.c.size`:integer[], `Bare.nuclei`:integer[], `Bl.cromatin`:integer[], `Normal.nucleoli`:integer[], `Mitoses`:integer[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language> | struct<`y`:integer[], `X`:struct<`RI`:double[], `Na`:double[], `Mg`:double[], `Al`:double[], `Si`:double[], `K`:double[], `Ca`:double[], `Ba`:double[], `Fe`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:integer[], `X`:struct<`V1`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:integer[], `ordered`:logical>>>, `OOB`:logical, `comb`:logical> | struct<`y`:integer[], `X`:struct<`V1`:integer[], `V3`:double[], `V4`:double[], `V5`:double[], `V6`:double[], `V7`:double[], `V8`:double[], `V9`:double[], `V10`:double[], `V11`:double[], `V12`:double[], `V13`:double[], `V14`:double[], `V15`:double[], `V16`:double[], `V17`:double[], `V18`:double[], `V19`:double[], `V20`:double[], `V21`:double[], `V22`:double[], `V23`:double[], `V24`:double[], `V25`:double[], `V26`:double[], `V27`:double[], `V28`:double[], `V29`:double[], `V30`:double[], `V31`:double[], `V32`:double[], `V33`:double[], `V34`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>>, `OOB`:logical, `comb`:logical, `call`:language> | struct<`y`:integer[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `call`:language> | struct<`y`:integer[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:integer[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language>, ? struct<`V1`:integer[], `V3`:double[], `V4`:double[], `V5`:double[], `V6`:double[], `V7`:double[], `V8`:double[], `V9`:double[], `V10`:double[], `V11`:double[], `V12`:double[], `V13`:double[], `V14`:double[], `V15`:double[], `V16`:double[], `V17`:double[], `V18`:double[], `V19`:double[], `V20`:double[], `V21`:double[], `V22`:double[], `V23`:double[], `V24`:double[], `V25`:double[], `V26`:double[], `V27`:double[], `V28`:double[], `V29`:double[], `V30`:double[], `V31`:double[], `V32`:double[], `V33`:double[], `V34`:double[], `Class`:integer[]>, character[], character[], ???> => ^double[];
type `predict.inbagg` <struct<`mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`model`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `predict`:any => any>, `bfct`:any => any>>, `y`:integer[], `W`:struct<`w1`:double[], `w2`:double[], `w3`:double[]>, `X`:struct<`x1`:double[], `x2`:double[], `x3`:double[]>>, ^double[], ???> => integer[];
type `predict.irpart` <struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]> | struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]> | struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:double[], `ordered`:logical> | struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]> | struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]> | struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:integer[], `ordered`:logical>, struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[], `classes`:integer[], `addpred1`:double[]> | ^double[], character[], ???> => ^double[];
type `predict.regbagg` <struct<`y`:double[], `X`:struct<`crim`:double[], `zn`:double[], `indus`:double[], `chas`:integer[], `nox`:double[], `rm`:double[], `age`:double[], `dis`:double[], `rad`:double[], `tax`:double[], `ptratio`:double[], `b`:double[], `lstat`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:double[], `X`:struct<`V1`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:double[], `ordered`:logical>>>, `OOB`:logical, `comb`:logical>, ? struct<>, character[], ???> => ^double[];
type `predict.sclass` <struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:integer[], `ordered`:logical>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>, struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[], `classes`:integer[]> | ^double[], character, ???> => ^double[];
type `predict.sreg` <struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double, `y`:double[], `ordered`:logical>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>, `bfct`:any => any> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>>, ^double[] | struct<>, ???> => double[];
type `predict.survbagg` <struct<`y`:^double[], `X`:struct<`MGEc.1`:double[], `MGEc.2`:double[], `MGEc.3`:double[], `MGEc.4`:double[], `MGEc.5`:double[], `MGEc.6`:double[], `MGEc.7`:double[], `MGEc.8`:double[], `MGEc.9`:double[], `MGEc.10`:double[], `IPI`:integer[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical> | struct<`y`:^double[], `X`:struct<`MGEc.1`:double[], `IPI`:integer[]>, `mtrees`:tuple<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `call`:language> | struct<`y`:^double[], `X`:struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[], `X5`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `call`:language> | struct<`y`:^double[], `X`:struct<`X1`:double[], `X2`:double[], `X3`:double[], `X4`:double[], `X5`:double[]>, `mtrees`:tuple<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `call`:language>, ? struct<>, ???> => list<struct<`n`:integer, `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>>;
type `print.classbagg` <struct<`y`:integer[], `X`:struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language> | struct<`y`:integer[], `X`:struct<`Cl.thickness`:integer[], `Cell.size`:integer[], `Cell.shape`:integer[], `Marg.adhesion`:integer[], `Epith.c.size`:integer[], `Bare.nuclei`:integer[], `Bl.cromatin`:integer[], `Normal.nucleoli`:integer[], `Mitoses`:integer[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language> | struct<`y`:integer[], `X`:struct<`RI`:double[], `Na`:double[], `Mg`:double[], `Al`:double[], `Si`:double[], `K`:double[], `Ca`:double[], `Ba`:double[], `Fe`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language>, double, ???> => null;
type `print.inclass` <struct<`model.intermediate`:struct<`clv`:struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `na.action`:integer[], `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`clv`:double[], `ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>>, `lora`:struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`lora`:double[], `ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>>, `cs`:struct<`coefficients`:double[], `residuals`:double[], `effects`:double[], `rank`:integer, `fitted.values`:double[], `assign`:integer[], `qr`:struct<`qr`:^double[], `qraux`:double[], `pivot`:integer[], `tol`:double, `rank`:integer>, `df.residual`:integer, `na.action`:integer, `xlevels`:tuple<>, `call`:language, `terms`:language, `model`:struct<`cs`:double[], `ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>>>, `model.response`:any => any, `para.intermediate`:struct<`clv`:struct<`formula`:language, `model`:any => any>, `lora`:struct<`formula`:language, `model`:any => any>, `cs`:struct<`formula`:language, `model`:any => any>>, `para.response`:any => any>, ???> => null;
type `print.regbagg` <struct<`y`:double[], `X`:struct<`crim`:double[], `zn`:double[], `indus`:double[], `chas`:integer[], `nox`:double[], `rm`:double[], `age`:double[], `dis`:double[], `rad`:double[], `tax`:double[], `ptratio`:double[], `b`:double[], `lstat`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language> | struct<`y`:double[], `X`:struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language>, double, ???> => null;
type `print.survbagg` <struct<`y`:^double[], `X`:struct<`MGEc.1`:double[], `MGEc.2`:double[], `MGEc.3`:double[], `MGEc.4`:double[], `MGEc.5`:double[], `MGEc.6`:double[], `MGEc.7`:double[], `MGEc.8`:double[], `MGEc.9`:double[], `MGEc.10`:double[], `IPI`:integer[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:integer[], `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:^double[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:^double[], `call`:language>, double, ???> => null;
type `prune.classbagg` <struct<`y`:integer[], `X`:struct<`RI`:double[], `Na`:double[], `Mg`:double[], `Al`:double[], `Si`:double[], `K`:double[], `Ca`:double[], `Ba`:double[], `Fe`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language>, double, ???> => struct<`y`:integer[], `X`:struct<`RI`:double[], `Na`:double[], `Mg`:double[], `Al`:double[], `Si`:double[], `K`:double[], `Ca`:double[], `Ba`:double[], `Fe`:double[]>, `mtrees`:list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>>>, `OOB`:logical, `comb`:logical, `err`:double, `call`:language>;
type `sbrier` <^double[], list<struct<`n`:integer, `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language>> | struct<`n`:integer, `time`:double[], `n.risk`:double[], `n.event`:double[], `n.censor`:double[], `surv`:double[], `std.err`:double[], `cumhaz`:double[], `std.chaz`:double[], `start.time`:double, `type`:character, `logse`:logical, `conf.int`:double, `conf.type`:character, `lower`:^double[], `upper`:^double[], `call`:language> | double[], double[]> => ^double[];
type `slda.factor` <integer[], ^double[], null, ???> => struct<`scores`:^double[], `mylda`:struct<`prior`:double[], `counts`:integer[], `means`:^double[], `scaling`:^double[], `lev`:character[], `svd`:double, `N`:integer, `call`:language>>;
type `slda.formula` <language, struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[], `x.11`:double[], `x.12`:double[], `x.13`:double[], `x.14`:double[], `x.15`:double[], `x.16`:double[], `x.17`:double[], `x.18`:double[], `x.19`:double[], `x.20`:double[], `classes`:integer[]>, ???, symbol, ???> => struct<`scores`:^double[], `mylda`:struct<`prior`:double[], `counts`:integer[], `means`:^double[], `scaling`:^double[], `lev`:character[], `svd`:double, `N`:integer, `call`:language>, `terms`:language, `call`:language, `xlevels`:tuple<>>;
type `uwhich.max` <double[]> => integer;
type `workhorse` <double[], struct<`x.1`:double[], `x.2`:double[], `x.3`:double[], `x.4`:double[], `x.5`:double[], `x.6`:double[], `x.7`:double[], `x.8`:double[], `x.9`:double[], `x.10`:double[]>, struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, tuple<struct<`model`:any => any, `predict`:any => any>>, struct<`nbagg`:double, `ns`:integer, `replace`:logical>, character, ???> => list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:null, `control`:struct<`minsplit`:integer, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:double[], `ordered`:logical[]>, `bfct`:any => any>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>> | list<struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `csplit`:^integer[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any> | struct<`bindx`:integer[], `btree`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `bfct`:any => any>>;
type `workhorse.inbagg` <struct<`clv.1`:struct<`formula`:language, `model`:any => any, `predict`:any => any>, `lora.1`:struct<`formula`:language, `model`:any => any, `predict`:any => any>, `cs.1`:struct<`formula`:language, `model`:any => any, `predict`:any => any>> | struct<`w1.1`:struct<`formula`:language, `model`:any => any>, `w1.2`:struct<`formula`:language, `model`:any => any>, `w2.2`:struct<`formula`:language, `model`:any => any>, `w3.2`:struct<`formula`:language, `model`:any => any>> | struct<`w1.1`:struct<`formula`:language, `model`:any => any, `predict`:any => any>, `w1.2`:struct<`formula`:language, `model`:any => any>, `w2.2`:struct<`formula`:language, `model`:any => any>, `w3.2`:struct<`formula`:language, `model`:any => any>>, integer[], struct<`ag`:double[], `at`:double[], `as`:double[], `an`:double[], `ai`:double[], `eag`:double[], `eat`:double[], `eas`:double[], `ean`:double[], `eai`:double[], `abrg`:double[], `abrt`:double[], `abrs`:double[], `abrn`:double[], `abri`:double[], `hic`:double[], `mhcg`:double[], `mhct`:double[], `mhcs`:double[], `mhcn`:double[], `mhci`:double[], `phcg`:double[], `phct`:double[], `phcs`:double[], `phcn`:double[], `phci`:double[], `hvc`:double[], `vbsg`:double[], `vbst`:double[], `vbss`:double[], `vbsn`:double[], `vbsi`:double[], `vasg`:double[], `vast`:double[], `vass`:double[], `vasn`:double[], `vasi`:double[], `vbrg`:double[], `vbrt`:double[], `vbrs`:double[], `vbrn`:double[], `vbri`:double[], `varg`:double[], `vart`:double[], `vars`:double[], `varn`:double[], `vari`:double[], `mdg`:double[], `mdt`:double[], `mds`:double[], `mdn`:double[], `mdi`:double[], `tmg`:double[], `tmt`:double[], `tms`:double[], `tmn`:double[], `tmi`:double[], `mr`:double[], `rnf`:double[], `mdic`:double[], `emd`:double[], `mv`:double[]>, struct<`clv`:^double[], `lora`:double[], `cs`:^double[]>, struct<`fixed.function`:any => any, `formula`:language> | struct<`model`:any => any, `predict`:any => any, `trainig.set`:character, `formula`:language>, character, symbol | character, struct<`nbagg`:double, `ns`:double, `replace`:logical>, ???, ???> => list<struct<`bindx`:integer[], `btree`:struct<`fixed.function`:any => any, `formula`:language>, `bfct`:any => any>> | list<struct<`bindx`:integer[], `btree`:struct<`model`:struct<`frame`:struct<`var`:integer[], `n`:integer[], `wt`:double[], `dev`:double[], `yval`:double[], `complexity`:double[], `ncompete`:integer[], `nsurrogate`:integer[], `yval2`:^double[]>, `where`:integer[], `call`:language, `terms`:language, `cptable`:^double[], `method`:character, `parms`:struct<`prior`:double[], `loss`:^double[], `split`:double>, `control`:struct<`minsplit`:double, `minbucket`:double, `cp`:double, `maxcompete`:integer, `maxsurrogate`:integer, `usesurrogate`:integer, `surrogatestyle`:integer, `maxdepth`:integer, `xval`:double>, `functions`:struct<`summary`:any => any, `print`:any => any, `text`:any => any>, `numresp`:integer, `splits`:^double[], `variable.importance`:double[], `y`:integer[], `ordered`:logical[]>, `predict`:any => any>, `bfct`:any => any>>;
