type `all_named` <pairlist> => logical;
type `comp_lang` <character | language | pairlist, language, double | integer[]> => logical;
type `compact` <tuple<null> | list<null> | struct<``:null, `_R_NS_LOAD_`:null> | struct<``:null, ``:null, ``:null, ``:null, `sep`:null> | struct<``:null, ``:null, ``:null, ``:null, `USE.NAMES`:null> | struct<``:null, ``:null, ``:null, ``:null, `value`:null> | struct<``:null, ``:null, ``:null, ``:null, `where`:null> | struct<``:null, ``:null, ``:null, `envir`:null> | struct<``:null, ``:null, ``:null, `fixed`:null> | struct<``:null, ``:null, ``:null, `from`:null> | struct<``:null, ``:null, ``:null, `keep.source`:null> | struct<``:null, ``:null, ``:null, `mustExist`:null> | struct<``:null, ``:null, ``:null, `quiet`:null> | struct<``:null, ``:null, ``:null, `unlist`:null, `withRegistrationInfo`:null> | struct<``:null, ``:null, ``:null, `versionCheck`:null> | struct<``:null, ``:null, `add`:null> | struct<``:null, ``:null, `addNames`:null> | struct<``:null, ``:null, `base.OK`:null> | struct<``:null, ``:null, `class`:null> | struct<``:null, ``:null, `collapse`:null> | struct<``:null, ``:null, `domain`:null> | struct<``:null, ``:null, `error`:null> | struct<``:null, ``:null, `pattern`:null, `all.names`:null> | struct<``:null, ``:null, `showWarnings`:null> | struct<``:null, ``:null, `title`:null> | struct<``:null, ``:null, `version`:null, `lib`:null> | struct<``:null, `base`:null> | struct<``:null, `encoding`:null> | struct<``:null, `libname`:null, `pkgname`:null> | struct<``:null, `message`:null, `package`:null, `package.lib`:null, `call`:null> | struct<``:null, `name`:null, `version`:null> | list<? language>> => tuple<> | tuple<language>;
type `f` <? character | double | language | pairlist | symbol, character | language, integer[]> => ? character | double | language | pairlist | symbol;
type `filter` <character[]> => logical[];
type `fun` <symbol, character> => null;
type `FUN` <? language | character | double | pairlist | symbol, any => any, character | ??? | language> => ? character | double | language | pairlist | symbol;
type `is_installed` <character, double> => logical;
type `load_namespace_for1` < > => language;
type `load_namespace_for2` < > => language;
type `load_namespace_for3` < > => language;
type `make_function` <struct<`ns`:symbol, `package`:symbol, `exports`:symbol, `nsInfo`:symbol>, language, environment> => any => any;
type `modify_lang` <language, any => any, character | ???> => language;
type `recurse` <language> => ? tuple<language> | tuple<symbol> | list<symbol | character> | list<symbol | character | language> | list<symbol | language> | struct<``:language, ``:language, `title`:language> | struct<``:symbol, `_R_NS_LOAD_`:symbol> | struct<``:symbol, ``:character, ``:character, ``:character, `sep`:character> | struct<``:symbol, ``:language, `add`:logical> | struct<``:symbol, ``:language, `class`:symbol> | struct<``:symbol, ``:language, `domain`:null> | struct<``:symbol, ``:language, `encoding`:symbol> | struct<``:symbol, ``:language, `error`:symbol> | struct<``:symbol, ``:language, `showWarnings`:logical> | struct<``:symbol, ``:symbol, ``:language, ``:null, `USE.NAMES`:logical> | struct<``:symbol, ``:symbol, ``:language, ``:null, `where`:symbol> | struct<``:symbol, ``:symbol, ``:language, `envir`:symbol> | struct<``:symbol, ``:symbol, ``:language, `from`:symbol> | struct<``:symbol, ``:symbol, ``:language, `quiet`:logical> | struct<``:symbol, ``:symbol, ``:symbol, ``:symbol, `value`:logical> | struct<``:symbol, ``:symbol, ``:symbol, `keep.source`:symbol> | struct<``:symbol, ``:symbol, ``:symbol, `mustExist`:logical> | struct<``:symbol, ``:symbol, ``:symbol, `unlist`:logical, `withRegistrationInfo`:logical> | struct<``:symbol, ``:symbol, `addNames`:logical> | struct<``:symbol, ``:symbol, `base.OK`:logical> | struct<``:symbol, ``:symbol, `pattern`:symbol, `all.names`:logical> | struct<``:symbol, ``:symbol, `version`:symbol, `lib`:symbol> | struct<``:symbol, `base`:logical> | struct<``:symbol, `encoding`:character> | struct<``:symbol, `libname`:symbol, `pkgname`:symbol> | struct<``:symbol, `message`:symbol, `package`:symbol, `package.lib`:symbol, `call`:symbol> | struct<``:symbol, `name`:symbol, `version`:symbol> | struct<``:symbol, `parent`:symbol, `hash`:logical>;
type `wrap_inner_loop` <language> => language;
