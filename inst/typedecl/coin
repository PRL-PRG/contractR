type `:::` <^double[], double, double, character, double | symbol> => double[] | struct<>;
type `.confint` <???, character> => struct<`conf.int`:double[], `estimate`:double>;
type `.local` <language | symbol | character[] | struct<> | ^double[], ? ??? | double | symbol | character[] | struct<> | any => any, ? ??? | character[] | integer[] | double | any => any, ? ??? | double[], ???> => ? ^double[] | struct<`conf.int`:double[], `estimate`:double>;
type `.nextMethod` <double[] | character | ???, logical> => ^double[];
type `[[` <double[], character[]> => double[];
type `@` <^double[] | symbol, character | ???> => ? ^double[] | struct<`conf.int`:double[], `estimate`:double>;
type `%EQ%` <^double[], double> => ^logical[];
type `%GE%` <^double[], ^double[]> => ^logical[];
type `%GT%` <double[], double> => logical[];
type `%LE%` <^double[], double[]> => ^logical[];
type `%LT%` <double[], double> => logical[];
type `%NE%` <double[], double[]> => logical[];
type `$` <null, null> => null;
type `ansari_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[], `yy`:double[]> | tuple<>, null, null, ??? | character | logical> => language;
type `ansari_test.IndependenceProblem` <logical, double, ??? | character> => character[];
type `ansari_trafo` <^integer[] | double[], character[]> => ^double[];
type `approximate` <double, character[], integer, null, ???> => any => any;
type `ApproxNullDistribution` < > => double;
type `asMethod` <logical> => character | symbol;
type `AsymptNullDistribution` < > => symbol;
type `asymptotic` <double, double, double> => any => any;
type `average_scores` <^double[], ^integer[] | double[]> => ^double[];
type `cci` <double> => double[];
type `check` < > => logical;
type `check_distribution_arg` <any => any | character[], language | character[]> => any => any;
type `check_trafo` <^double[], ^double[]> => struct<`xtrafo`:^double[], `ytrafo`:^double[]>;
type `chisq_test.formula` <struct<`x`:integer[], `y`:integer[], `block`:integer[]>, null, null, ??? | any => any> => language;
type `chisq_test.IndependenceProblem` < > => character | any => any | ??? | struct<`Income`:integer[]> | struct<`Rating`:double[]> | struct<`Change`:double[]>;
type `chisq_test.table` <character | any => any | ??? | struct<`Rating`:double[]> | struct<`Income`:integer[]> | struct<`Change`:double[]>> => ^double[];
type `cmh_test.formula` <struct<`smoking`:integer[], `disease`:integer[], `gender`:integer[]>, null, null, any => any | ???> => language;
type `cmh_test.IndependenceProblem` < > => any => any | ??? | struct<`Income`:integer[]> | struct<`Job.Satisfaction`:double[]> | character;
type `cmh_test.table` <struct<`Income`:integer[]> | ??? | struct<`Job.Satisfaction`:double[]> | character> => ^double[];
type `confint` <???, double, ???> => struct<`conf.int`:double[], `estimate`:double>;
type `confint_binom` <double, double, double, character, double | symbol> => double[];
type `conover_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[], `yy`:double[]>, null, null, ??? | character | logical> => language;
type `conover_test.IndependenceProblem` <double, ??? | character> => logical;
type `consal_trafo` <double[] | ^integer[], character[], double[]> => ^double[];
type `copyslots` <null, null> => null;
type `covariance` <???> => ^double[];
type `cs` <double> => ^double[];
type `cSR_shift_2sample` <double[], integer, double> => struct<`T`:double[], `Prob`:double[]>;
type `d` <double[]> => double[];
type `d_fun` <double> => double;
type `distribution` <null, null> => null;
type `dperm` <^double[] | symbol | language, ???> => ? ^double[];
type `exact` <character[], ? double> => any => any;
type `ExactNullDistribution` < > => character | ???;
type `expectation` <???> => double[];
type `f` <double, double> => double;
type `f_trafo` <^integer[]> => ^double[];
type `factor_trafo` <^integer[]> => ^double[];
type `filter` <character[]> => logical[];
type `fisyat_test.formula` <struct<`CONT`:double[], `INTG`:double[], `DMNR`:double[], `DILG`:double[], `CFMG`:double[], `DECI`:double[], `PREP`:double[], `FAMI`:double[], `ORAL`:double[], `WRIT`:double[], `PHYS`:double[], `RTEN`:double[]>, null, null, ???> => language;
type `fisyat_test.IndependenceProblem` <character[], ???> => character[];
type `fligner_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[]>, null, null, ??? | character | logical> => language;
type `fligner_test.IndependenceProblem` <logical, double, character | ???> => character[];
type `fligner_trafo` <^integer[] | double[], character[]> => ^double[];
type `fmaxstat_trafo` <^integer[], double, double> => ^double[];
type `foo` <double[], double> => double[];
type `formula2data` <language, struct<`counts`:integer[], `age`:integer[], `coverstorey`:integer[], `coverregen`:integer[], `meanregen`:double[], `coniferous`:integer[], `deadtree`:integer[], `cbpiles`:integer[], `ivytree`:integer[], `fdist`:integer[]> | tuple<>, ? double[], ? language, environment> => struct<`x`:struct<`age`:integer[]>, `y`:struct<`counts`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`age`:integer[]>, `y`:struct<`pd`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`alength`:integer[]>, `y`:struct<`elevel`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`c1`:^double[]>, `y`:struct<`c1`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`c1`:^double[]>, `y`:struct<`f2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`c1`:^double[]>, `y`:struct<`f4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`c1`:^double[]>, `y`:struct<`n1`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`c1`:^double[]>, `y`:struct<`o2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`c1`:^double[]>, `y`:struct<`o4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`consumption`:integer[]>, `y`:struct<`malformation`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`coverstorey`:integer[]>, `y`:struct<`counts`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`EF`:integer[]>, `y`:struct<`Surv(time# event)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f2`:integer[]>, `y`:struct<`c1`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f2`:integer[]>, `y`:struct<`f2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f2`:integer[]>, `y`:struct<`f4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f2`:integer[]>, `y`:struct<`n1`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f2`:integer[]>, `y`:struct<`o2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f2`:integer[]>, `y`:struct<`o4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f4`:integer[]>, `y`:struct<`c1`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f4`:integer[]>, `y`:struct<`f2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f4`:integer[]>, `y`:struct<`f4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f4`:integer[]>, `y`:struct<`n1`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f4`:integer[]>, `y`:struct<`o2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`f4`:integer[]>, `y`:struct<`o4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`fac`:integer[]>, `y`:struct<`scores`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`fage`:integer[]>, `y`:struct<`counts`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`g`:integer[]>, `y`:struct<`x`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`g`:integer[]>, `y`:struct<`y`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`genotype`:integer[]>, `y`:struct<`group`:integer[]>, `block`:null, `weights`:double[]> | struct<`x`:struct<`gr`:integer[]>, `y`:struct<`x1`:double[], `x2`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`asat`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`I(log(asat))`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`mercury`:double[], `abnormal`:double[], `ccells`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`pain`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`response`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`Surv(dmin# tumor)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`Surv(time)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`Surv(time# event)`:^double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`Surv(time# event)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`time`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`TNFA_238`:integer[], `IL1B_511`:integer[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`V1`:double[], `V2`:double[], `V3`:double[], `V4`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`group`:integer[]>, `y`:struct<`var`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`ind`:integer[]>, `y`:struct<`values`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`INTG`:double[]>, `y`:struct<`CONT`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`Locus`:integer[]>, `y`:struct<`Group`:integer[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`media`:integer[]>, `y`:struct<`diphtheria`:integer[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`method`:integer[]>, `y`:struct<`serum`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`methods`:integer[]>, `y`:struct<`times`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`n1`:integer[]>, `y`:struct<`c1`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`n1`:integer[]>, `y`:struct<`f2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`n1`:integer[]>, `y`:struct<`f4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`n1`:integer[]>, `y`:struct<`n1`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`n1`:integer[]>, `y`:struct<`o2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`n1`:integer[]>, `y`:struct<`o4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o2`:integer[]>, `y`:struct<`c1`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o2`:integer[]>, `y`:struct<`f2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o2`:integer[]>, `y`:struct<`f4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o2`:integer[]>, `y`:struct<`n1`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o2`:integer[]>, `y`:struct<`o2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o2`:integer[]>, `y`:struct<`o4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o4`:integer[]>, `y`:struct<`c1`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o4`:integer[]>, `y`:struct<`f2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o4`:integer[]>, `y`:struct<`f4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o4`:integer[]>, `y`:struct<`n1`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o4`:integer[]>, `y`:struct<`o2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`o4`:integer[]>, `y`:struct<`o4`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`oage`:integer[]>, `y`:struct<`counts`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`ordered(x)`:integer[]>, `y`:struct<`Surv(y)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`ordered(x)`:integer[]>, `y`:struct<`y`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`ox`:integer[]>, `y`:struct<`y`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`potash`:integer[]>, `y`:struct<`strength`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`product`:integer[]>, `y`:struct<`scores`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`Route`:integer[]>, `y`:struct<`Route.Time`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`Route2`:integer[]>, `y`:struct<`Route.Time`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`site`:integer[]>, `y`:struct<`length`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`smoking`:integer[]>, `y`:struct<`disease`:integer[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`smoking`:integer[]>, `y`:struct<`disease`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`SPF`:double[]>, `y`:struct<`Surv(RFS# event)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`stadium`:integer[]>, `y`:struct<`Surv(time# event)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`Surv(y2)`:^double[]>, `y`:struct<`Surv(y1)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`Surv(y2)`:^double[]>, `y`:struct<`y1`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`treatment`:integer[]>, `y`:struct<`cerebellum`:double[], `brainstem`:double[], `cortex`:double[], `hypothalamus`:double[], `striatum`:double[], `hippocampus`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`treatment`:integer[]>, `y`:struct<`counts`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`trend`:double[]>, `y`:struct<`sample2`:double[], `sample3`:double[], `sample4`:double[], `sample6`:double[], `sample7`:double[], `sample8`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`Var1`:integer[]>, `y`:struct<`Var2`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x <= est`:logical[]>, `y`:struct<`w`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_1`:integer[]>, `y`:struct<`y_1`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_2`:integer[]>, `y`:struct<`y_2`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_3`:integer[]>, `y`:struct<`y_3`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_4`:integer[]>, `y`:struct<`y_4`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_5`:integer[]>, `y`:struct<`y_5`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_6`:integer[]>, `y`:struct<`y_6`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_7`:integer[]>, `y`:struct<`y_7`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_8`:integer[]>, `y`:struct<`y_8`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x_9`:integer[]>, `y`:struct<`y_9`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:double[]>, `y`:struct<`w`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:double[]>, `y`:struct<`y`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`x`:double[]>, `y`:struct<`y`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`Surv(y)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`Surv(y1)`:^double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`Surv(y1)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y`:double[]>, `block`:double[], `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y`:double[]>, `block`:integer[], `weights`:double[]> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y1`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y1`:double[], `y2`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y3`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y3`:double[]>, `block`:null, `weights`:integer[]> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y3`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y5`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`y5`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`yy`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x`:integer[]>, `y`:struct<`z`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x1`:double[]>, `y`:struct<`y1`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x1`:double[], `x2`:integer[]>, `y`:struct<`y`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x2`:integer[]>, `y`:struct<`y`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`x3`:integer[]>, `y`:struct<`I(x1 < 0)`:logical[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x3`:integer[]>, `y`:struct<`I(x1/x2)`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x3`:integer[]>, `y`:struct<`x4`:character[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x3`:integer[]>, `y`:struct<`x5`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`x3`:integer[]>, `y`:struct<`x6`:logical[]>, `block`:null, `weights`:null> | struct<`x`:struct<`xw`:integer[]>, `y`:struct<`y3w`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`xx`:logical[]>, `y`:struct<`w`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`y`:double[]>, `y`:struct<`x`:double[]>, `block`:integer[], `weights`:null> | struct<`x`:struct<`y`:double[]>, `y`:struct<`x`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`y`:double[]>, `y`:struct<`x`:integer[]>, `block`:double[], `weights`:null> | struct<`x`:struct<`y`:integer[]>, `y`:struct<`w`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`y`:integer[]>, `y`:struct<`x`:integer[]>, `block`:null, `weights`:double[]> | struct<`x`:struct<`y`:integer[]>, `y`:struct<`z`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`y2`:double[]>, `y`:struct<`Surv(y1)`:^double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`y2`:double[]>, `y`:struct<`y1`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`z`:double[]>, `y`:struct<`x`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`z`:double[]>, `y`:struct<`y`:integer[]>, `block`:null, `weights`:null> | struct<`x`:struct<`z`:integer[]>, `y`:struct<`I(round(x# 1))`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`z`:integer[]>, `y`:struct<`u`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`z`:integer[]>, `y`:struct<`w`:double[]>, `block`:null, `weights`:null> | struct<`x`:struct<`z`:integer[]>, `y`:struct<`x`:double[]>, `block`:null, `weights`:null>;
type `friedman_test.formula` <struct<`times`:double[], `methods`:integer[], `block`:integer[]>, null, ??? | any => any | character | language> => language;
type `friedman_test.SymmetryProblem` < > => character | any => any | ???;
type `fs` <double, double> => double;
type `fsplits` <integer> => ^logical[];
type `ft` <character, language, struct<`alength`:integer[], `elevel`:double[]> | tuple<>, ? double[], ? language, environment> => character;
type `fun` <symbol, character> => double;
type `FUN` <double[] | language, double[] | ???, ??? | double[]> => ^double[] | struct<`z`:double[], `p`:double[]> | character;
type `has_distribution` <struct<`teststat`:character, `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any> | struct<`teststat`:character, `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any> | struct<`teststat`:character, `distribution`:any => any, `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any>> => logical;
type `id_trafo` <^integer[]> => ^integer[];
type `independence_test.formula` <struct<`alength`:integer[], `elevel`:double[]> | tuple<>, ? double[], ? language, any => any | ??? | character | struct<`x`:double[]>> => language;
type `independence_test.IndependenceProblem` <character[] | any => any, character[], any => any, any => any, ? struct<`group`:double[]> | struct<`product`:integer[]> | struct<`x`:double[]> | struct<`ox`:integer[]> | struct<`Job.Satisfaction`:double[], `Income`:double[]>, ? any => any, ???> => character[];
type `independence_test.table` <any => any | character | ???> => ^double[];
type `initialize` < > => struct<> | ^double[];
type `is_2sample` < > => logical;
type `is_censored_x` < > => logical;
type `is_censored_y` < > => logical;
type `is_completeblock` < > => logical;
type `is_contingency` < > => logical;
type `is_contingency_2x2` < > => logical;
type `is_corr` < > => logical;
type `is_doubly_ordered` < > => logical;
type `is_factor_x` < > => logical;
type `is_factor_y` < > => logical;
type `is_integer` <double[], ? double> => logical;
type `is_Ksample` < > => logical;
type `is_numeric_x` < > => logical;
type `is_numeric_y` < > => logical;
type `is_ordered` < > => logical;
type `is_ordered_x` < > => logical;
type `is_ordered_y` < > => logical;
type `is_scalar` < > => logical;
type `is_singly_ordered` < > => logical;
type `is_unity` <double[]> => logical;
type `is_unordered_x` < > => logical;
type `is_unordered_y` < > => logical;
type `is_ytrafo` < > => logical;
type `isequal` <? character | ^double[], ? character | ^double[]> => logical;
type `joint` <???, logical> => ^double[];
type `klotz_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[], `yy`:double[]>, null, null, ??? | character | logical> => language;
type `klotz_test.IndependenceProblem` <logical, double, ??? | character> => character[];
type `klotz_trafo` <^integer[] | double[], character[]> => ^double[];
type `koziol_test.formula` <struct<`CONT`:double[], `INTG`:double[], `DMNR`:double[], `DILG`:double[], `CFMG`:double[], `DECI`:double[], `PREP`:double[], `FAMI`:double[], `ORAL`:double[], `WRIT`:double[], `PHYS`:double[], `RTEN`:double[]>, null, null, ???> => language;
type `koziol_test.IndependenceProblem` <character[], ???> => character[];
type `koziol_trafo` <^integer[] | double[], character[], double> => ^double[];
type `kruskal_test.formula` <struct<`alength`:integer[], `elevel`:double[]>, null, null, ??? | any => any | character | struct<`alength`:double[]>> => language;
type `kruskal_test.IndependenceProblem` < > => character | any => any | ??? | struct<`alength`:double[]>;
type `lbl_test.formula` <struct<`x`:integer[], `y`:integer[], `block`:integer[]>, null, null, ???> => language;
type `lbl_test.IndependenceProblem` < > => any => any | ??? | struct<`Job.Satisfaction`:double[], `Income`:double[]>;
type `lbl_test.table` <any => any | ??? | struct<`Job.Satisfaction`:double[], `Income`:double[]>> => integer[];
type `logrank_test.formula` <struct<`time`:double[], `event`:double[], `group`:integer[]>, null, null, character | ??? | any => any | struct<`x`:double[]>> => language;
type `logrank_test.IndependenceProblem` <character[], ? double, null, ??? | character | any => any | struct<`x`:double[]>> => character[];
type `logrank_trafo` <^double[], character[], any => any, character | ???> => ^double[];
type `marginal` <???, logical> => ^double[];
type `maxstat_test.formula` <struct<`counts`:integer[], `age`:integer[], `coverstorey`:integer[], `coverregen`:integer[], `meanregen`:double[], `coniferous`:integer[], `deadtree`:integer[], `cbpiles`:integer[], `ivytree`:integer[], `fdist`:integer[]> | tuple<>, null, null, ??? | struct<`fage`:integer[]> | struct<`oage`:integer[]> | any => any> => language;
type `maxstat_test.IndependenceProblem` <character[] | any => any, double, double, any => any | ??? | struct<`fage`:integer[]> | struct<`Job.Satisfaction`:integer[], `Income`:integer[]> | struct<`oage`:integer[]> | character> => character[];
type `maxstat_test.table` <??? | struct<`Job.Satisfaction`:integer[], `Income`:integer[]>> => ^integer[];
type `maxstat_trafo` <double[] | ^integer[], double, double> => ^double[];
type `mcp_trafo` <character | ^double[] | struct<>> => any => any | ^double[];
type `median_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[], `yy`:double[]>, null, null, ??? | character | struct<`x`:double[]> | logical> => language;
type `median_test.IndependenceProblem` <logical, double, ??? | character | struct<`x`:double[]>> => character[];
type `median_trafo` <^integer[] | double[], character[]> => ^double[];
type `mh_test.formula` <struct<`diphtheria`:integer[], `media`:integer[], `case`:integer[]>, null, any => any | ???> => language;
type `mh_test.SymmetryProblem` < > => character | any => any | ??? | struct<`response`:double[]>;
type `mh_test.table` <character | any => any | ??? | struct<`response`:double[]>> => ^double[];
type `midpvalue` <double[] | ??? | language | symbol> => ? double[];
type `midpvalue_fun` <double, double[], double[]> => double[];
type `montecarlo` <double> => ^double[];
type `MonteCarlo` <^double[], ^double[], integer[], double[], double, character, symbol, symbol> => ^double[];
type `mood_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[], `yy`:double[]>, null, null, ??? | character | logical> => language;
type `mood_test.IndependenceProblem` <logical, double, ??? | character> => character[];
type `mood_trafo` <^integer[] | double[], character[]> => ^double[];
type `MPinv` <^double[], double> => struct<`MPinv`:^double[], `rank`:integer>;
type `n_decimal_digits` <double[]> => integer;
type `normal_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[], `yy`:double[]>, null, null, ??? | character | struct<`x`:double[]> | logical> => language;
type `normal_test.IndependenceProblem` <logical, double, ??? | character | struct<`x`:double[]>> => character[];
type `normal_trafo` <^integer[] | double[], character[]> => ^double[];
type `numeric_trafo` <double[] | ^integer[], character[], double> => ^double[];
type `of_trafo` <^integer[], ? double[] | struct<`s1`:integer[], `s2`:double[]>> => ^double[];
type `ofmaxstat_trafo` <^integer[], double, double> => ^double[];
type `oneway_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[]>, null, null, character | ??? | any => any | struct<`x`:double[]>> => language;
type `oneway_test.IndependenceProblem` < > => character | ??? | any => any | struct<`x`:double[]>;
type `ordered_scores` <double, double[]> => ^double[];
type `ordered_trafo` <integer[], null> => ^double[];
type `p` <integer[] | double> => double[];
type `p_fun` <double, logical, ???> => double;
type `pmvn` <double, double, double[], ^double[], logical, ???> => double;
type `pperm` <^double[], ???> => ^double[];
type `pv_fun` <double[]> => double[];
type `pvalue` <??? | double[] | character> => ^double[];
type `pvalue_fun` <double, logical> => double;
type `pvalue_interval` <??? | double[] | language | symbol> => ? ^double[];
type `qmvn` <double, double[], ^double[], ???> => double;
type `qperm` <^double[], ???> => ^double[];
type `quade_test.formula` <struct<`y`:double[], `x`:integer[], `b`:integer[]>, null, any => any | character> => language;
type `quade_test.SymmetryProblem` < > => character | any => any;
type `quadrant_test.formula` <struct<`CONT`:double[], `INTG`:double[], `DMNR`:double[], `DILG`:double[], `CFMG`:double[], `DECI`:double[], `PREP`:double[], `FAMI`:double[], `ORAL`:double[], `WRIT`:double[], `PHYS`:double[], `RTEN`:double[]>, null, null, ???> => language;
type `quadrant_test.IndependenceProblem` <character[], ???> => character[];
type `r` <^integer[] | double[], character> => ^integer[];
type `rank_trafo` <^integer[] | double[] | struct<>, character[]> => ^double[];
type `rperm` <double, ???> => double[];
type `savage_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[], `yy`:double[]>, null, null, ??? | character | struct<`x`:double[]> | logical> => language;
type `savage_test.IndependenceProblem` <logical, double, ??? | character | struct<`x`:double[]>> => character[];
type `savage_trafo` <^integer[] | double[], character[]> => ^double[];
type `setAttributes` <double[], ? struct<`dim`:integer[]> | struct<`names`:character>> => ^double[];
type `setColnames` <^double[], character[]> => ^double[];
type `setDimnames` <^double[], tuple<integer[], character[]>> => ^double[];
type `setRownames` <^double[], integer[]> => ^double[];
type `setscores` < > => struct<`alength`:double[]> | struct<`Change`:double[]> | struct<`consumption`:double[]> | struct<`Crater`:double[]> | struct<`fage`:integer[]> | struct<`group`:double[]> | struct<`Income`:integer[]> | struct<`Job.Satisfaction`:double[]> | struct<`oage`:integer[]> | struct<`ox`:integer[]> | struct<`product`:integer[]> | struct<`Rating`:double[]> | struct<`Var2`:double[]> | struct<`x`:double[]> | struct<`response`:double[]>;
type `setup_args` <any => any | ??? | character> => struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any, `paired`:logical> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:null> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`alength`:double[]>, `check`:any => any> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Change`:double[]>, `check`:null> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Income`:integer[]>, `check`:any => any> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Income`:integer[]>, `check`:null> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Job.Satisfaction`:double[]>, `check`:any => any> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Rating`:double[]>, `check`:null> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`response`:double[]>, `check`:any => any, `paired`:logical> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`response`:integer[]>, `check`:any => any, `paired`:logical> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`response`:integer[], `conditions`:integer[]>, `check`:any => any, `paired`:logical> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`x`:double[]>, `check`:any => any> | struct<`teststat`:character[], `distribution`:character[], `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Rating`:double[], `Condition`:double[]>, `check`:null> | struct<`teststat`:character[], `distribution`:character, `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Var2`:double[]>, `check`:any => any> | struct<`teststat`:character[], `distribution`:character, `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Var2`:integer[]>, `check`:any => any> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any, `paired`:logical> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:null> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Crater`:double[]>, `check`:null> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`response`:integer[]>, `check`:any => any, `paired`:logical> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:any => any, `paired`:logical> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:null> | struct<`teststat`:character[], `distribution`:any => any, `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`consumption`:double[]>, `check`:null> | struct<`teststat`:character, `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:null, `paired`:logical> | struct<`teststat`:character, `distribution`:character[], `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Job.Satisfaction`:double[], `Income`:double[]>, `check`:any => any> | struct<`teststat`:character, `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`fage`:integer[]>, `check`:null> | struct<`teststat`:character, `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`Job.Satisfaction`:integer[], `Income`:integer[]>, `check`:null> | struct<`teststat`:character, `distribution`:any => any, `alternative`:character[], `xtrafo`:any => any, `ytrafo`:any => any, `scores`:struct<`oage`:integer[]>, `check`:null> | struct<`teststat`:character, `distribution`:any => any, `alternative`:character, `xtrafo`:any => any, `ytrafo`:any => any, `scores`:null, `check`:null, `paired`:logical>;
type `sign_test.formula` <struct<`y`:double[], `x`:integer[], `block`:integer[]> | tuple<>, null, character> => language;
type `sign_test.SymmetryProblem` < > => character;
type `size` <double> => double;
type `spearman_test.formula` <struct<`CONT`:double[], `INTG`:double[], `DMNR`:double[], `DILG`:double[], `CFMG`:double[], `DECI`:double[], `PREP`:double[], `FAMI`:double[], `ORAL`:double[], `WRIT`:double[], `PHYS`:double[], `RTEN`:double[]>, null, null, ???> => language;
type `spearman_test.IndependenceProblem` <???> => character[];
type `SR_shift_1sample` < > => double;
type `SR_shift_2sample` < > => double;
type `statistic` <??? | character[]> => ^double[];
type `statnames` < > => struct<`dimnames`:tuple<character[], character[]>, `names`:character[]>;
type `str2lang` <character> => language;
type `support` <logical, ??? | logical> => ? ^double[];
type `surv_trafo` <^double[], character[], any => any, ???> => double[];
type `symmetry_test.formula` <struct<`times`:double[], `methods`:integer[], `block`:integer[]> | tuple<>, null, null, any => any | character | logical> => language;
type `symmetry_test.SymmetryProblem` <character[] | integer[] | any => any, character[] | integer, any => any, any => any, ? struct<`x`:integer[]>, ? any => any, logical, ???> => character[] | integer;
type `symmetry_test.table` <any => any | character> => ^double[];
type `table2IndependenceProblem` < > => ^double[];
type `table2SymmetryProblem` < > => ^double[];
type `taha_test.formula` <struct<`x`:integer[], `y`:double[], `block`:integer[], `yy`:double[]>, null, null, ??? | character | logical> => language;
type `taha_test.IndependenceProblem` <double, ??? | character> => logical;
type `trafo` <struct<`asat`:double[]>, any => any | symbol | language, symbol | language | any => any, symbol | any => any | language, symbol | any => any, ? struct<`x`:any => any> | struct<`y`:any => any>, null> => ^double[];
type `unadjusted` <???, ???> => ^double[];
type `validityMethod` < > => logical;
type `variance` <???> => double[];
type `vdW_split_up_2sample` <null, null> => null;
type `w` <double | symbol, double | symbol> => double[];
type `weight` <double[] | language, integer[] | symbol, double[] | symbol, character[], ? struct<`rho`:double[]> | double | symbol, ? struct<`gamma`:double[]> | symbol> => ^double[];
type `wilcox_test.formula` <struct<`pain`:double[], `group`:integer[]> | tuple<>, ? logical[], null, character | ??? | any => any | logical> => language;
type `wilcox_test.IndependenceProblem` <double, character | any => any | ???> => logical;
type `wilcoxsign_test.formula` <struct<`values`:double[], `ind`:integer[], `block`:integer[]> | tuple<>, null, character | ???> => language;
type `wilcoxsign_test.SymmetryProblem` <character | ???> => character[];
type `xtrafo` <struct<`INTG`:double[]>, symbol | any => any, symbol | any => any, symbol | any => any, any => any | symbol, null, null> => ^double[];
type `ytrafo` <struct<`c.foo.x..d...y.`:double[]>, symbol | any => any | character[], symbol | any => any, symbol | any => any, any => any | symbol, null, null> => ^double[];
type `zheng_trafo` <^integer[], double> => ^double[];
