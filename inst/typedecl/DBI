type `filter` <character[]> => logical[];
type `::` <character, character[] | double[] | ??? | tuple<double>, ? ??? | struct<> | character[], ??? | logical, null, logical> => character[] | integer | struct<>;
type `.local` <symbol | double | tuple<raw[], raw[]> | struct<>, character | integer | symbol, logical | tuple<integer[]> | ???, double> => ? struct<> | integer | character[];
type `.nextMethod` <symbol, struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, ???> => character[];
type `[[` <struct<`message`:character, `call`:null>> => null;
type `[[.SQL` <character[], integer> => character;
type `ANSI` <null, null> => null;
type `asMethod` <character, character, logical> => character;
type `check_raw_list` <tuple<raw[], raw[]>> => null;
type `dbAppendTable` <character, struct<`amount`:double>, ???, null> => integer;
type `dbBegin` <character | ???> => logical;
type `dbBind` <???> => list<double[]> | struct<`name`:character> | struct<`species`:character[]> | tuple<character[], character[], character[], ^character[]> | list<^character[]> | tuple<character[], character[], double[], double[], character[]> | list<double[] | ^character[]> | tuple<character[], character[], integer[]> | list<integer[] | ^character[] | ^logical[]> | list<integer[] | ^character[]> | list<character[] | ^integer[]> | list<character[] | ^double[]> | list<character[] | integer[]> | list<^integer[] | ^character[]> | list<^character[] | ^integer[]> | list<^character[] | ^double[]> | list<double[] | character[]> | tuple<^double[]> | list<integer[] | character[]> | list<^double[] | ^character[]>;
type `dbCanConnect` <character> => logical;
type `dbClearResult` <???> => logical;
type `dbColumnInfo` <???> => struct<`name`:character[], `type`:character[]>;
type `dbCommit` <character | ???> => logical;
type `dbConnect` < > => character | ???;
type `dbCreateTable` <character, character[] | struct<>, ???, null, logical> => logical;
type `dbDataType` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]> | tuple<raw[], raw[]> | ^character[] | ^double[], ???> => character[];
type `dbDisconnect` <???> => logical;
type `dbDriver` <???> => character;
type `dbExecute` <character, list<double[]> | ??? | tuple<character[], character[], character[], ^character[]> | list<^character[]> | tuple<character[], character[], double[], double[], character[]> | list<double[] | ^character[]> | tuple<character[], character[], integer[]> | list<integer[] | ^character[] | ^logical[]> | list<integer[] | ^character[]> | list<character[] | ^integer[]> | list<character[] | ^double[]> | list<character[] | integer[]> | list<^integer[] | ^character[]> | list<^character[] | ^integer[]> | list<^character[] | ^double[]> | list<double[] | character[]> | tuple<^double[]> | list<integer[] | character[]> | list<^double[] | ^character[]>> => integer;
type `dbExistsTable` <character, ???> => logical;
type `dbFetch` <double, ??? | logical | tuple<integer[]>> => struct<`1`:integer>;
type `dbGetQuery` <character, tuple<integer[]> | double | ???> => struct<`amount`:double>;
type `dbGetRowCount` <???> => integer;
type `dbGetRowsAffected` <???> => integer;
type `dbGetStatement` <???> => character;
type `dbHasCompleted` <???> => logical;
type `dbiDataType` <double[] | struct<> | tuple<raw[], raw[]> | character[], ???> => character[];
type `dbIsReadOnly` <???> => logical;
type `dbIsValid` <???> => logical;
type `dbListFields` <character, ???> => character[];
type `dbListObjects` <null, ???> => struct<`table`:tuple<>, `is_prefix`:logical[]>;
type `dbListTables` <???> => character[];
type `dbQuoteIdentifier` <character[], ???> => character[];
type `dbQuoteLiteral` <^integer[] | tuple<raw[], null> | character, ???> => character[];
type `dbQuoteString` <^character[], ???> => character[];
type `dbReadTable` <character, ???> => struct<`amount`:double>;
type `dbRemoveTable` <character, ???> => logical;
type `dbRollback` <??? | character> => logical;
type `dbSendQuery` <??? | symbol | list<double[]> | tuple<character[], character[], character[], ^character[]> | list<^character[]> | tuple<character[], character[], double[], double[], character[]> | list<double[] | ^character[]> | tuple<character[], character[], integer[]> | list<integer[] | ^character[] | ^logical[]> | list<integer[] | ^character[]> | list<character[] | ^integer[]> | list<character[] | ^double[]> | list<character[] | integer[]> | list<^integer[] | ^character[]> | list<^character[] | ^integer[]> | list<^character[] | ^double[]> | list<double[] | character[]> | tuple<^double[]> | list<integer[] | character[]> | list<^double[] | ^character[]>> => character;
type `dbSendStatement` <list<double[]> | ??? | tuple<character[], character[], character[], ^character[]> | list<^character[]> | tuple<character[], character[], double[], double[], character[]> | list<double[] | ^character[]> | tuple<character[], character[], integer[]> | list<integer[] | ^character[] | ^logical[]> | list<integer[] | ^character[]> | list<character[] | ^integer[]> | list<character[] | ^double[]> | list<character[] | integer[]> | list<^integer[] | ^character[]> | list<^character[] | ^integer[]> | list<^character[] | ^double[]> | list<double[] | character[]> | tuple<^double[]> | list<integer[] | character[]> | list<^double[] | ^character[]>> => character;
type `dbUnquoteIdentifier` <character[], ???> => tuple<>;
type `dbWithTransaction` <integer | language, ???> => ? integer;
type `dbWriteTable` <character, struct<`amount`:double>, ??? | logical | character[]> => logical;
type `FUN` <? double[] | character[] | raw[], ??? | ^character[] | ^double[], ? ???> => character[];
type `get2` <character, environment> => any => any;
type `guessColName` <symbol, logical> => null;
type `guessRowName` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[]> | symbol | struct<`row_names`:character, `mpg`:character, `cyl`:character, `disp`:character, `hp`:character, `drat`:character, `wt`:character, `qsec`:character, `vs`:character, `am`:character, `gear`:character, `carb`:character> | struct<`Sepal.Length`:character, `Sepal.Width`:character, `Petal.Length`:character, `Petal.Width`:character, `Species`:character>, ? character | logical> => ? character;
type `Id` < > => character;
type `is_attached` <character> => logical;
type `SQL` <character[], ???, ? character[]> => character[];
type `sqlAppendTable` <character, struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`Sepal.Length`:character, `Sepal.Width`:character, `Petal.Length`:character, `Petal.Width`:character, `Species`:character> | struct<`amount`:character> | struct<`speed`:character, `dist`:character> | struct<`a`:character> | struct<`awardID`:character, `yearID`:character, `lgID`:character, `playerID`:character, `pointsWon`:character, `pointsMax`:character, `votesFirst`:character> | struct<`cyl`:character> | struct<`faa`:character, `name`:character, `lat`:character, `lon`:character, `alt`:character, `tz`:character, `dst`:character, `tzone`:character> | struct<`file`:character, `class`:character, `nobs`:character, `nvar`:character, `title`:character> | struct<`franchID`:character, `franchName`:character, `active`:character, `NAassoc`:character> | struct<`park.key`:character, `park.name`:character, `park.alias`:character, `city`:character, `state`:character, `country`:character> | struct<`playerID`:character, `awardID`:character, `yearID`:character, `lgID`:character, `tie`:character, `notes`:character> | struct<`playerID`:character, `birthYear`:character, `birthMonth`:character, `birthDay`:character, `birthCountry`:character, `birthState`:character, `birthCity`:character, `deathYear`:character, `deathMonth`:character, `deathDay`:character, `deathCountry`:character, `deathState`:character, `deathCity`:character, `nameFirst`:character, `nameLast`:character, `nameGiven`:character, `weight`:character, `height`:character, `bats`:character, `throws`:character, `debut`:character, `finalGame`:character, `retroID`:character, `bbrefID`:character, `deathDate`:character, `birthDate`:character> | struct<`playerID`:character, `schoolID`:character, `yearID`:character> | struct<`playerID`:character, `yearID`:character, `gameNum`:character, `gameID`:character, `teamID`:character, `lgID`:character, `GP`:character, `startingPos`:character> | struct<`playerID`:character, `yearID`:character, `round`:character, `teamID`:character, `lgID`:character, `W`:character, `L`:character, `G`:character, `GS`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `H`:character, `ER`:character, `HR`:character, `BB`:character, `SO`:character, `BAOpp`:character, `ERA`:character, `IBB`:character, `WP`:character, `HBP`:character, `BK`:character, `BFP`:character, `GF`:character, `R`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `Glf`:character, `Gcf`:character, `Grf`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `G`:character, `AB`:character, `R`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `RBI`:character, `SB`:character, `CS`:character, `BB`:character, `SO`:character, `IBB`:character, `HBP`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `POS`:character, `G`:character, `GS`:character, `InnOuts`:character, `PO`:character, `A`:character, `E`:character, `DP`:character, `PB`:character, `WP`:character, `SB`:character, `CS`:character, `ZR`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `W`:character, `L`:character, `G`:character, `GS`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `H`:character, `ER`:character, `HR`:character, `BB`:character, `SO`:character, `BAOpp`:character, `ERA`:character, `IBB`:character, `WP`:character, `HBP`:character, `BK`:character, `BFP`:character, `GF`:character, `R`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `inseason`:character, `G`:character, `W`:character, `L`:character, `rank`:character, `plyrMgr`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `inseason`:character, `half`:character, `G`:character, `W`:character, `L`:character, `rank`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `round`:character, `POS`:character, `G`:character, `GS`:character, `InnOuts`:character, `PO`:character, `A`:character, `E`:character, `DP`:character, `TP`:character, `PB`:character, `SB`:character, `CS`:character> | struct<`playerID`:character, `yearID`:character, `votedBy`:character, `ballots`:character, `needed`:character, `votes`:character, `inducted`:character, `category`:character, `needed_note`:character> | struct<`schoolID`:character, `name_full`:character, `city`:character, `state`:character, `country`:character> | struct<`x`:character, `y`:character> | struct<`year`:character, `month`:character, `day`:character, `dep_time`:character, `sched_dep_time`:character, `dep_delay`:character, `arr_time`:character, `sched_arr_time`:character, `arr_delay`:character, `carrier`:character, `flight`:character, `tailnum`:character, `origin`:character, `dest`:character, `air_time`:character, `distance`:character, `hour`:character, `minute`:character, `time_hour`:character> | struct<`yearID`:character, `lgID`:character, `teamID`:character, `franchID`:character, `divID`:character, `Rank`:character, `G`:character, `Ghome`:character, `W`:character, `L`:character, `DivWin`:character, `WCWin`:character, `LgWin`:character, `WSWin`:character, `R`:character, `AB`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `BB`:character, `SO`:character, `SB`:character, `CS`:character, `HBP`:character, `SF`:character, `RA`:character, `ER`:character, `ERA`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `HA`:character, `HRA`:character, `BBA`:character, `SOA`:character, `E`:character, `DP`:character, `FP`:character, `name`:character, `park`:character, `attendance`:character, `BPF`:character, `PPF`:character, `teamIDBR`:character, `teamIDlahman45`:character, `teamIDretro`:character> | struct<`yearID`:character, `lgID`:character, `teamID`:character, `Half`:character, `divID`:character, `DivWin`:character, `Rank`:character, `G`:character, `W`:character, `L`:character> | struct<`yearID`:character, `round`:character, `playerID`:character, `teamID`:character, `lgID`:character, `G`:character, `AB`:character, `R`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `RBI`:character, `SB`:character, `CS`:character, `BB`:character, `SO`:character, `IBB`:character, `HBP`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`yearID`:character, `round`:character, `teamIDwinner`:character, `lgIDwinner`:character, `teamIDloser`:character, `lgIDloser`:character, `wins`:character, `losses`:character, `ties`:character> | struct<`yearID`:character, `teamID`:character, `lgID`:character, `playerID`:character, `G_all`:character, `GS`:character, `G_batting`:character, `G_defense`:character, `G_p`:character, `G_c`:character, `G_1b`:character, `G_2b`:character, `G_3b`:character, `G_ss`:character, `G_lf`:character, `G_cf`:character, `G_rf`:character, `G_of`:character, `G_dh`:character, `G_ph`:character, `G_pr`:character> | struct<`yearID`:character, `teamID`:character, `lgID`:character, `playerID`:character, `salary`:character> | struct<`sepal_length`:character, `sepal_width`:character, `petal_length`:character, `petal_width`:character, `species`:character> | struct<`level`:character, `timestamp`:character, `logger`:character, `caller`:character, `msg`:character>, ? logical, ???> => character;
type `sqlAppendTableTemplate` <character, struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]>, ? logical, character, ???, character> => character;
type `sqlCommentSpec` <character, character, logical> => struct<`start`:character, `end`:character, `endRequired`:logical>;
type `sqlCreateTable` <character, character[] | struct<>, ? symbol | logical, logical, ???> => character;
type `sqlData` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[], `wt`:double[], `qsec`:double[], `vs`:double[], `am`:double[], `gear`:double[], `carb`:double[]> | struct<`Sepal.Length`:character, `Sepal.Width`:character, `Petal.Length`:character, `Petal.Width`:character, `Species`:character> | struct<`amount`:character> | struct<`speed`:character, `dist`:character> | struct<`a`:character> | struct<`awardID`:character, `yearID`:character, `lgID`:character, `playerID`:character, `pointsWon`:character, `pointsMax`:character, `votesFirst`:character> | struct<`cyl`:character> | struct<`faa`:character, `name`:character, `lat`:character, `lon`:character, `alt`:character, `tz`:character, `dst`:character, `tzone`:character> | struct<`file`:character, `class`:character, `nobs`:character, `nvar`:character, `title`:character> | struct<`franchID`:character, `franchName`:character, `active`:character, `NAassoc`:character> | struct<`park.key`:character, `park.name`:character, `park.alias`:character, `city`:character, `state`:character, `country`:character> | struct<`playerID`:character, `awardID`:character, `yearID`:character, `lgID`:character, `tie`:character, `notes`:character> | struct<`playerID`:character, `birthYear`:character, `birthMonth`:character, `birthDay`:character, `birthCountry`:character, `birthState`:character, `birthCity`:character, `deathYear`:character, `deathMonth`:character, `deathDay`:character, `deathCountry`:character, `deathState`:character, `deathCity`:character, `nameFirst`:character, `nameLast`:character, `nameGiven`:character, `weight`:character, `height`:character, `bats`:character, `throws`:character, `debut`:character, `finalGame`:character, `retroID`:character, `bbrefID`:character, `deathDate`:character, `birthDate`:character> | struct<`playerID`:character, `schoolID`:character, `yearID`:character> | struct<`playerID`:character, `yearID`:character, `gameNum`:character, `gameID`:character, `teamID`:character, `lgID`:character, `GP`:character, `startingPos`:character> | struct<`playerID`:character, `yearID`:character, `round`:character, `teamID`:character, `lgID`:character, `W`:character, `L`:character, `G`:character, `GS`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `H`:character, `ER`:character, `HR`:character, `BB`:character, `SO`:character, `BAOpp`:character, `ERA`:character, `IBB`:character, `WP`:character, `HBP`:character, `BK`:character, `BFP`:character, `GF`:character, `R`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `Glf`:character, `Gcf`:character, `Grf`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `G`:character, `AB`:character, `R`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `RBI`:character, `SB`:character, `CS`:character, `BB`:character, `SO`:character, `IBB`:character, `HBP`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `POS`:character, `G`:character, `GS`:character, `InnOuts`:character, `PO`:character, `A`:character, `E`:character, `DP`:character, `PB`:character, `WP`:character, `SB`:character, `CS`:character, `ZR`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `W`:character, `L`:character, `G`:character, `GS`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `H`:character, `ER`:character, `HR`:character, `BB`:character, `SO`:character, `BAOpp`:character, `ERA`:character, `IBB`:character, `WP`:character, `HBP`:character, `BK`:character, `BFP`:character, `GF`:character, `R`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `inseason`:character, `G`:character, `W`:character, `L`:character, `rank`:character, `plyrMgr`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `inseason`:character, `half`:character, `G`:character, `W`:character, `L`:character, `rank`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `round`:character, `POS`:character, `G`:character, `GS`:character, `InnOuts`:character, `PO`:character, `A`:character, `E`:character, `DP`:character, `TP`:character, `PB`:character, `SB`:character, `CS`:character> | struct<`playerID`:character, `yearID`:character, `votedBy`:character, `ballots`:character, `needed`:character, `votes`:character, `inducted`:character, `category`:character, `needed_note`:character> | struct<`schoolID`:character, `name_full`:character, `city`:character, `state`:character, `country`:character> | struct<`x`:character, `y`:character> | struct<`year`:character, `month`:character, `day`:character, `dep_time`:character, `sched_dep_time`:character, `dep_delay`:character, `arr_time`:character, `sched_arr_time`:character, `arr_delay`:character, `carrier`:character, `flight`:character, `tailnum`:character, `origin`:character, `dest`:character, `air_time`:character, `distance`:character, `hour`:character, `minute`:character, `time_hour`:character> | struct<`yearID`:character, `lgID`:character, `teamID`:character, `franchID`:character, `divID`:character, `Rank`:character, `G`:character, `Ghome`:character, `W`:character, `L`:character, `DivWin`:character, `WCWin`:character, `LgWin`:character, `WSWin`:character, `R`:character, `AB`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `BB`:character, `SO`:character, `SB`:character, `CS`:character, `HBP`:character, `SF`:character, `RA`:character, `ER`:character, `ERA`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `HA`:character, `HRA`:character, `BBA`:character, `SOA`:character, `E`:character, `DP`:character, `FP`:character, `name`:character, `park`:character, `attendance`:character, `BPF`:character, `PPF`:character, `teamIDBR`:character, `teamIDlahman45`:character, `teamIDretro`:character> | struct<`yearID`:character, `lgID`:character, `teamID`:character, `Half`:character, `divID`:character, `DivWin`:character, `Rank`:character, `G`:character, `W`:character, `L`:character> | struct<`yearID`:character, `round`:character, `playerID`:character, `teamID`:character, `lgID`:character, `G`:character, `AB`:character, `R`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `RBI`:character, `SB`:character, `CS`:character, `BB`:character, `SO`:character, `IBB`:character, `HBP`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`yearID`:character, `round`:character, `teamIDwinner`:character, `lgIDwinner`:character, `teamIDloser`:character, `lgIDloser`:character, `wins`:character, `losses`:character, `ties`:character> | struct<`yearID`:character, `teamID`:character, `lgID`:character, `playerID`:character, `G_all`:character, `GS`:character, `G_batting`:character, `G_defense`:character, `G_p`:character, `G_c`:character, `G_1b`:character, `G_2b`:character, `G_3b`:character, `G_ss`:character, `G_lf`:character, `G_cf`:character, `G_rf`:character, `G_of`:character, `G_dh`:character, `G_ph`:character, `G_pr`:character> | struct<`yearID`:character, `teamID`:character, `lgID`:character, `playerID`:character, `salary`:character> | struct<`sepal_length`:character, `sepal_width`:character, `petal_length`:character, `petal_width`:character, `species`:character> | struct<`level`:character, `timestamp`:character, `logger`:character, `caller`:character, `msg`:character>, ? logical, ???> => struct<`mpg`:character[], `cyl`:character[], `disp`:character[], `hp`:character[], `drat`:character[], `wt`:character[], `qsec`:character[], `vs`:character[], `am`:character[], `gear`:character[], `carb`:character[]> | struct<`Sepal.Length`:character, `Sepal.Width`:character, `Petal.Length`:character, `Petal.Width`:character, `Species`:character> | struct<`amount`:character> | struct<`speed`:character, `dist`:character> | struct<`a`:character> | struct<`awardID`:character, `yearID`:character, `lgID`:character, `playerID`:character, `pointsWon`:character, `pointsMax`:character, `votesFirst`:character> | struct<`cyl`:character> | struct<`faa`:character, `name`:character, `lat`:character, `lon`:character, `alt`:character, `tz`:character, `dst`:character, `tzone`:character> | struct<`file`:character, `class`:character, `nobs`:character, `nvar`:character, `title`:character> | struct<`franchID`:character, `franchName`:character, `active`:character, `NAassoc`:character> | struct<`park.key`:character, `park.name`:character, `park.alias`:character, `city`:character, `state`:character, `country`:character> | struct<`playerID`:character, `awardID`:character, `yearID`:character, `lgID`:character, `tie`:character, `notes`:character> | struct<`playerID`:character, `birthYear`:character, `birthMonth`:character, `birthDay`:character, `birthCountry`:character, `birthState`:character, `birthCity`:character, `deathYear`:character, `deathMonth`:character, `deathDay`:character, `deathCountry`:character, `deathState`:character, `deathCity`:character, `nameFirst`:character, `nameLast`:character, `nameGiven`:character, `weight`:character, `height`:character, `bats`:character, `throws`:character, `debut`:character, `finalGame`:character, `retroID`:character, `bbrefID`:character, `deathDate`:character, `birthDate`:character> | struct<`playerID`:character, `schoolID`:character, `yearID`:character> | struct<`playerID`:character, `yearID`:character, `gameNum`:character, `gameID`:character, `teamID`:character, `lgID`:character, `GP`:character, `startingPos`:character> | struct<`playerID`:character, `yearID`:character, `round`:character, `teamID`:character, `lgID`:character, `W`:character, `L`:character, `G`:character, `GS`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `H`:character, `ER`:character, `HR`:character, `BB`:character, `SO`:character, `BAOpp`:character, `ERA`:character, `IBB`:character, `WP`:character, `HBP`:character, `BK`:character, `BFP`:character, `GF`:character, `R`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `Glf`:character, `Gcf`:character, `Grf`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `G`:character, `AB`:character, `R`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `RBI`:character, `SB`:character, `CS`:character, `BB`:character, `SO`:character, `IBB`:character, `HBP`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `POS`:character, `G`:character, `GS`:character, `InnOuts`:character, `PO`:character, `A`:character, `E`:character, `DP`:character, `PB`:character, `WP`:character, `SB`:character, `CS`:character, `ZR`:character> | struct<`playerID`:character, `yearID`:character, `stint`:character, `teamID`:character, `lgID`:character, `W`:character, `L`:character, `G`:character, `GS`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `H`:character, `ER`:character, `HR`:character, `BB`:character, `SO`:character, `BAOpp`:character, `ERA`:character, `IBB`:character, `WP`:character, `HBP`:character, `BK`:character, `BFP`:character, `GF`:character, `R`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `inseason`:character, `G`:character, `W`:character, `L`:character, `rank`:character, `plyrMgr`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `inseason`:character, `half`:character, `G`:character, `W`:character, `L`:character, `rank`:character> | struct<`playerID`:character, `yearID`:character, `teamID`:character, `lgID`:character, `round`:character, `POS`:character, `G`:character, `GS`:character, `InnOuts`:character, `PO`:character, `A`:character, `E`:character, `DP`:character, `TP`:character, `PB`:character, `SB`:character, `CS`:character> | struct<`playerID`:character, `yearID`:character, `votedBy`:character, `ballots`:character, `needed`:character, `votes`:character, `inducted`:character, `category`:character, `needed_note`:character> | struct<`schoolID`:character, `name_full`:character, `city`:character, `state`:character, `country`:character> | struct<`x`:character, `y`:character> | struct<`year`:character, `month`:character, `day`:character, `dep_time`:character, `sched_dep_time`:character, `dep_delay`:character, `arr_time`:character, `sched_arr_time`:character, `arr_delay`:character, `carrier`:character, `flight`:character, `tailnum`:character, `origin`:character, `dest`:character, `air_time`:character, `distance`:character, `hour`:character, `minute`:character, `time_hour`:character> | struct<`yearID`:character, `lgID`:character, `teamID`:character, `franchID`:character, `divID`:character, `Rank`:character, `G`:character, `Ghome`:character, `W`:character, `L`:character, `DivWin`:character, `WCWin`:character, `LgWin`:character, `WSWin`:character, `R`:character, `AB`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `BB`:character, `SO`:character, `SB`:character, `CS`:character, `HBP`:character, `SF`:character, `RA`:character, `ER`:character, `ERA`:character, `CG`:character, `SHO`:character, `SV`:character, `IPouts`:character, `HA`:character, `HRA`:character, `BBA`:character, `SOA`:character, `E`:character, `DP`:character, `FP`:character, `name`:character, `park`:character, `attendance`:character, `BPF`:character, `PPF`:character, `teamIDBR`:character, `teamIDlahman45`:character, `teamIDretro`:character> | struct<`yearID`:character, `lgID`:character, `teamID`:character, `Half`:character, `divID`:character, `DivWin`:character, `Rank`:character, `G`:character, `W`:character, `L`:character> | struct<`yearID`:character, `round`:character, `playerID`:character, `teamID`:character, `lgID`:character, `G`:character, `AB`:character, `R`:character, `H`:character, `X2B`:character, `X3B`:character, `HR`:character, `RBI`:character, `SB`:character, `CS`:character, `BB`:character, `SO`:character, `IBB`:character, `HBP`:character, `SH`:character, `SF`:character, `GIDP`:character> | struct<`yearID`:character, `round`:character, `teamIDwinner`:character, `lgIDwinner`:character, `teamIDloser`:character, `lgIDloser`:character, `wins`:character, `losses`:character, `ties`:character> | struct<`yearID`:character, `teamID`:character, `lgID`:character, `playerID`:character, `G_all`:character, `GS`:character, `G_batting`:character, `G_defense`:character, `G_p`:character, `G_c`:character, `G_1b`:character, `G_2b`:character, `G_3b`:character, `G_ss`:character, `G_lf`:character, `G_cf`:character, `G_rf`:character, `G_of`:character, `G_dh`:character, `G_ph`:character, `G_pr`:character> | struct<`yearID`:character, `teamID`:character, `lgID`:character, `playerID`:character, `salary`:character> | struct<`sepal_length`:character, `sepal_width`:character, `petal_length`:character, `petal_width`:character, `species`:character> | struct<`level`:character, `timestamp`:character, `logger`:character, `caller`:character, `msg`:character>;
type `sqlInterpolate` <character, character, tuple<>> => character;
type `sqlParseVariables` <character, ???> => struct<`start`:integer, `end`:integer>;
type `sqlParseVariablesImpl` <character, tuple<struct<`start`:character, `end`:character, `escape`:character, `doubleEscape`:logical>>, tuple<> | tuple<struct<`start`:character, `end`:character, `endRequired`:logical>>> => struct<`start`:integer[], `end`:integer[]>;
type `sqlQuoteSpec` <character, character, character, logical> => struct<`start`:character, `end`:character, `escape`:character, `doubleEscape`:logical>;
type `sqlRownamesToColumn` <struct<`mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[]>, ? logical | character> => struct<`row_names`:character[], `mpg`:double[], `cyl`:double[], `disp`:double[], `hp`:double[], `drat`:double[]>;
type `str_to_vec` <character> => character[];
