type `[.cell_addr` <struct<`row`:integer[], `col`:integer[]>, integer[]> => struct<`row`:integer[], `col`:integer[]>;
type `[[.cell_addr` <struct<`row`:integer[], `col`:integer[]>, double> => struct<`row`:integer, `col`:integer>;
type `%||%` <? logical, language | logical> => logical;
type `A1_to_R1C1` <character[], logical> => ? ^character[];
type `A1_to_ra_ref` <character[], logical> => struct<`$A$1`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$D$12`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$F$2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$F2`:struct<`row_ref`:null, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$Q$24`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`A1`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`A1`:struct<`row_ref`:null, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`B$4`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`B4`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`B4`:struct<`row_ref`:null, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`F2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`Q24`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`RC2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`A3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `D5`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`A4`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `E5`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`A5`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `F15`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`B1`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `D5`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`B3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `D6`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`C1`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `E7`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`C3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `D5`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`C4`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`C5`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>>;
type `add_single_quotes` <? character> => ? character;
type `addr_col.cell_addr` <struct<`row`:integer[], `col`:integer[]> | struct<`row`:null, `col`:integer>, ???> => integer[];
type `addr_row.cell_addr` <struct<`row`:integer[], `col`:integer[]> | struct<`row`:null, `col`:integer>, ???> => ? integer[];
type `anchored` <character, double[], ? character[] | struct<>, ? logical, logical> => struct<`ul`:integer[], `lr`:integer[], `sheet`:null>;
type `as.cell_addr_v.list` <tuple<struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$D$12`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`F2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R4C3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$F2`:struct<`row_ref`:null, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R[-4]C3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>>, ???> => struct<`row`:^integer[], `col`:integer[]> | struct<`row`:null, `col`:integer>;
type `as.cell_addr.character` <character[], null, logical, ???> => struct<`row`:integer[], `col`:integer[]> | struct<`row`:null, `col`:integer>;
type `as.cell_addr.ra_ref` <struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null> | struct<`row_ref`:null, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, ???> => struct<`row`:integer, `col`:integer> | struct<`row`:null, `col`:integer>;
type `as.cell_limits.character` <character, null, ???> => struct<`ul`:integer[], `lr`:integer[], `sheet`:character> | struct<`ul`:integer[], `lr`:integer[], `sheet`:null>;
type `as.ra_ref_v.cell_addr` <struct<`row`:integer[], `col`:integer[]>, ???> => tuple<struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>>;
type `as.ra_ref_v.character` <character[], ? character, logical | symbol, ???> => struct<`$A$1`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `$F$14`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:character, `file`:null>, `B$4`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:character, `file`:null>, `D9`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$D$12`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$F$2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`$F2`:struct<`row_ref`:null, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`B$4`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`B4`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`B4`:struct<`row_ref`:null, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`F2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R[-4]C3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R4C3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`RC2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>>;
type `as.ra_ref.cell_addr` <struct<`row`:integer, `col`:integer>, ???> => struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>;
type `as.ra_ref.character` <character, ? character, logical, ???> => struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null> | struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null> | struct<`row_ref`:null, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null>;
type `as.range` <struct<`ul`:integer[], `lr`:integer[], `sheet`:character> | struct<`ul`:integer[], `lr`:integer[], `sheet`:null>, character[], logical, null> => character;
type `cell_addr` <? ^integer[] | double, double | integer[]> => struct<`row`:^integer[], `col`:integer[]> | struct<`row`:null, `col`:integer>;
type `cell_cols` <^character[] | ^double[]> => struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>;
type `cell_limits` <struct<`row_ref`:integer, `col_ref`:integer> | ^double[], struct<`row_ref`:integer, `col_ref`:integer> | ^double[], ? character> => struct<`ul`:integer[], `lr`:integer[], `sheet`:character> | struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>;
type `cell_rows` <^double[]> => struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>;
type `dim.cell_limits` <struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>> => ^double[];
type `filter` <character[]> => logical[];
type `FUN` <? character[] | struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null> | struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null> | struct<`row_ref`:null, `row_abs`:logical, `col_ref`:null, `col_abs`:logical, `sheet`:null, `file`:null> | integer[] | double> => ? character[] | struct<`row_ref`:null, `row_abs`:null, `col_ref`:null, `col_abs`:null, `sheet`:null, `file`:null> | double;
type `guess_fo` <character[] | double, character[]> => ? character[];
type `is_A1` <character[] | double> => logical[];
type `is_R1C1` <character[] | double> => logical[];
type `isFALSE` <logical> => logical;
type `isTOGGLE` <? logical> => logical;
type `isTRUE_v` <? ^logical[]> => logical[];
type `length.cell_addr` <struct<`row`:integer[], `col`:integer[]>> => integer;
type `letter_to_num` <? ^character[]> => ? ^integer[];
type `NA_or_pos` <^integer[]> => logical[];
type `num_to_letter` <^double[]> => ^character[];
type `parse_ref_string` <character, null> => struct<`input`:character, `file`:character, `sheet`:character, `ref`:character, `invalid`:character, `ref_v`:character[], `fo`:character>;
type `print.ra_ref` <struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, character, ???> => null;
type `R1C1_to_A1` <character[], logical> => ^character[];
type `R1C1_to_ra_ref` <character[]> => struct<`R[-4]C3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R10C52`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R1C1`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R2C3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `R6C9`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R4C2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R4C3`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R5C11`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`RC2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> | struct<`R1C2`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, `R2C5`:struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>>;
type `ra_ref` <? double, ? logical, ? double, ? logical, ? character, null> => struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:character, `file`:null> | struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null> | struct<`row_ref`:null, `row_abs`:null, `col_ref`:null, `col_abs`:null, `sheet`:null, `file`:null>;
type `rel_abs_format` <logical, integer, character[]> => character;
type `relativize` <struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>> => struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>;
type `to_string_v.cell_addr` <struct<`row`:integer[], `col`:integer[]>, character[], logical, logical, ???> => character[];
type `to_string_v.list` <tuple<struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>>, character[], logical, null, ???> => character[];
type `to_string.cell_addr` <struct<`row`:integer[], `col`:integer[]>, character[], logical | symbol, logical, ???> => character[];
type `to_string.ra_ref` <struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:character, `file`:null> | struct<`row_ref`:integer, `row_abs`:logical, `col_ref`:integer, `col_abs`:logical, `sheet`:null, `file`:null>, character[], logical | symbol, ? logical, ???> => character;
type `as.cell_limits.cell_limits` <struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>, ???> => struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>;
type `as.cell_limits.NULL` <null, ???> => struct<`ul`:^integer[], `lr`:^integer[], `sheet`:null>;
