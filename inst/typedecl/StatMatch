type `cohen.ef` <^double[]> => double;
type `comb.samples` <struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Lrn`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical, `postStrata`:tuple<struct<`qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `w`:double[], `stage`:double, `index`:null>>>, struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `c.Days`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical, `postStrata`:tuple<struct<`qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `w`:double[], `stage`:double, `index`:null>>>, ? struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Lrn`:integer[], `c.Days`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical>, character, character, language, ? character, logical, character | ???> => struct<`yz.CIA`:^double[], `call`:language>;
type `comp.prop` <^integer[], ^integer[], integer, ? language | integer, logical> => struct<`meas`:double[], `chi.sq`:double[], `p.exp`:^double[]>;
type `create.fused` <struct<`HH.P.id`:character[], `area5`:integer[], `urb`:integer[], `hsize`:integer[], `hsize5`:integer[], `age`:double[], `c.age`:integer[], `sex`:integer[], `marital`:integer[], `edu7`:integer[], `n.income`:double[], `c.neti`:integer[], `ww`:double[]>, struct<`HH.P.id`:character[], `area5`:integer[], `urb`:integer[], `hsize`:integer[], `hsize5`:integer[], `age`:double[], `c.age`:integer[], `sex`:integer[], `marital`:integer[], `edu7`:integer[], `labour5`:integer[], `ww`:double[]>, ^character[], character, logical, ? character[]> => struct<`HH.P.id`:character[], `area5`:integer[], `urb`:integer[], `hsize`:integer[], `hsize5`:integer[], `age`:double[], `c.age`:integer[], `sex`:integer[], `marital`:integer[], `edu7`:integer[], `n.income`:double[], `c.neti`:integer[], `ww`:double[], `labour5`:^integer[]>;
type `dum.fcn` <integer[], logical> => ^double[];
type `fact2dummy` <struct<`Petal.Length`:double[], `Petal.Width`:double[]>, logical, character> => ^double[];
type `fb.yz` <integer[], integer[], character> => struct<`low.u`:^double[], `up.u`:^double[], `IA`:^double[], `H`:double[], `uncertainty`:double>;
type `Fbwidths.by.x` <integer[], integer[], integer[], character, null, null, logical | ???> => struct<`|Eth`:struct<`Var1`:integer[], `Var2`:integer[], `lower`:double[], `upper`:double[], `width`:double[], `CIA`:double[]>, `|Sex`:struct<`Var1`:integer[], `Var2`:integer[], `lower`:double[], `upper`:double[], `width`:double[], `CIA`:double[]>, `|Age`:struct<`Var1`:integer[], `Var2`:integer[], `lower`:double[], `upper`:double[], `width`:double[], `CIA`:double[]>, `|Eth+Sex`:struct<`Var1`:integer[], `Var2`:integer[], `lower`:double[], `upper`:double[], `width`:double[], `CIA`:double[]>, `|Eth+Age`:struct<`Var1`:integer[], `Var2`:integer[], `lower`:double[], `upper`:double[], `width`:double[], `CIA`:double[]>, `|Sex+Age`:struct<`Var1`:integer[], `Var2`:integer[], `lower`:double[], `upper`:double[], `width`:double[], `CIA`:double[]>, `|Eth+Sex+Age`:null, `sum.unc`:struct<`x.vars`:double[], `x.cells`:^double[], `x.freq0`:^double[], `xy.cells`:^double[], `xy.freq0`:^double[], `xz.cells`:^double[], `xz.freq0`:^double[], `av.n`:double[], `cohen.ef`:^double[], `av.width`:^double[], `penalty1`:double[], `av.width.pen1`:^double[], `penalty2`:double[], `av.width.pen2`:^double[]>>;
type `filter` <character[]> => logical[];
type `findbest.fcn` <integer[], integer[], integer[], tuple<character[], character[]>, double, integer, integer, logical> => struct<`ord`:integer[], `bst`:character[], `av`:double[], `pen`:double[], `av.pen`:double[], `c.info`:^double[]>;
type `Frechet.bounds.cat` <? ^double[], ^double[], ^double[], character, logical, double, logical> => struct<`bounds`:struct<`Eth`:integer[], `Lrn`:integer[], `low.u`:double[], `low.cx`:double[], `CIA`:double[], `up.cx`:double[], `up.u`:double[]>, `uncertainty`:double[]> | struct<`low.u`:^double[], `up.u`:^double[], `CIA`:^double[], `low.cx`:^double[], `up.cx`:^double[], `uncertainty`:double[]> | struct<`low.u`:^double[], `up.u`:^double[], `IA`:^double[], `H`:double[], `uncertainty`:double>;
type `gower.dist` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Species`:integer[]>, struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Species`:integer[]>, null, logical, ? double[]> => ^double[];
type `gower.fcn` <character[] | double[], character[] | double[], ? symbol, symbol | logical> => struct<`dist`:^double[], `delta`:^double[]>;
type `H.fcn` <^double[]> => double;
type `harmonize.x` <struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Lrn`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical>, struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Days`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical> | struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `c.Days`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical>, language, ? ^integer[] | double[], character, ???> => struct<`cal.A`:struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Lrn`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical, `postStrata`:tuple<integer[]>>, `cal.B`:struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Days`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical, `postStrata`:tuple<integer[]>>, `weights.A`:double[], `weights.B`:double[], `call`:language> | struct<`cal.A`:struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Lrn`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical, `postStrata`:tuple<struct<`qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `w`:double[], `stage`:double, `index`:null>>>, `cal.B`:struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Days`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical, `postStrata`:tuple<struct<`qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `w`:double[], `stage`:double, `index`:null>>>, `weights.A`:double[], `weights.B`:double[], `call`:language> | struct<`cal.A`:struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Lrn`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical, `postStrata`:tuple<struct<`qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `w`:double[], `stage`:double, `index`:null>>>, `cal.B`:struct<`cluster`:struct<`id`:integer[]>, `strata`:struct<`V1`:double[]>, `has.strata`:logical, `prob`:double[], `allprob`:struct<`f`:double[]>, `call`:language, `variables`:struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `c.Days`:integer[], `f`:double[]>, `fpc`:struct<`popsize`:^double[], `sampsize`:^integer[]>, `pps`:logical, `postStrata`:tuple<struct<`qr`:struct<`qr`:^double[], `rank`:integer, `qraux`:double[], `pivot`:integer[]>, `w`:double[], `stage`:double, `index`:null>>>, `weights.A`:double[], `weights.B`:double[], `call`:language>;
type `IC.based` <^double[], integer> => ^double[];
type `mahalanobis.dist` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, ? struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, ? ^double[]> => ^double[];
type `maximum.dist` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[]>, logical> => ^double[];
type `mixed.mtc` <struct<`Sepal.Length`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, struct<`Sepal.Width`:double[], `Petal.Length`:double[], `Petal.Width`:double[], `Species`:integer[]>, character[], character, character, character, ? double, logical, character> => struct<`rho.yz`:double[], `mu`:double[], `vc`:^double[], `cor`:^double[], `phi`:double[], `res.var`:double[], `call`:language> | struct<`start.prho.yz`:double, `mu`:double[], `vc`:^double[], `cor`:^double[], `res.var`:double[], `call`:language>;
type `NND.hd` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[]>, struct<`Sepal.Length`:double[], `Sepal.Width`:double[]>, character, logical, character | symbol, ???> => struct<`mtc.ids`:^character[], `dist.rd`:double[], `call`:language>;
type `NND.hotdeck` <struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Length`:double[], `Species`:integer[]>, struct<`Sepal.Length`:double[], `Sepal.Width`:double[], `Petal.Width`:double[], `Species`:integer[]>, character[], ? character, character, logical, character, double, logical, ???> => struct<`mtc.ids`:^character[], `dist.rd`:double[], `call`:language>;
type `pBayes` <double[], character, null> => struct<`info`:double[], `prior`:double[], `pseudoB`:double[]>;
type `prv.rc` <^double[]> => double[];
type `pw.assoc` <language, struct<`Eth`:integer[], `Sex`:integer[], `Age`:integer[], `Lrn`:integer[], `Days`:integer[]>, ? character, logical> => struct<`V`:double[], `bcV`:double[], `mi`:double[], `norm.mi`:double[], `lambda`:double[], `tau`:double[], `U`:double[], `AIC`:double[], `BIC`:double[], `npar`:double[]>;
type `RANDwNND.hd` <struct<`age`:double[]>, struct<`age`:double[]>, character, character, symbol | double, ? double[], ???> => struct<`mtc.ids`:^character[], `sum.dist`:^double[], `noad`:double[], `call`:language>;
type `RANDwNND.hotdeck` <struct<`HH.P.id`:character[], `area5`:integer[], `urb`:integer[], `hsize`:integer[], `hsize5`:integer[], `age`:double[], `c.age`:integer[], `sex`:integer[], `marital`:integer[], `edu7`:integer[], `n.income`:double[], `c.neti`:integer[], `ww`:double[]>, struct<`HH.P.id`:character[], `area5`:integer[], `urb`:integer[], `hsize`:integer[], `hsize5`:integer[], `age`:double[], `c.age`:integer[], `sex`:integer[], `marital`:integer[], `edu7`:integer[], `labour5`:integer[], `ww`:double[]>, character[], character[], character, character, ? double, ? character, logical, ???> => struct<`mtc.ids`:^character[], `sum.dist`:^double[], `noad`:double[], `call`:language>;
type `rankNND.hd` <double[], double[], double[], double[], logical, symbol> => struct<`don.pos`:double[], `dist.rd`:double[], `noad`:integer[], `call`:language>;
type `rankNND.hotdeck` <struct<`HH.P.id`:character[], `area5`:integer[], `urb`:integer[], `hsize`:integer[], `hsize5`:integer[], `age`:double[], `c.age`:integer[], `sex`:integer[], `marital`:integer[], `edu7`:integer[], `n.income`:double[], `c.neti`:integer[], `ww`:double[]>, struct<`HH.P.id`:character[], `area5`:integer[], `urb`:integer[], `hsize`:integer[], `hsize5`:integer[], `age`:double[], `c.age`:integer[], `sex`:integer[], `marital`:integer[], `edu7`:integer[], `labour5`:integer[], `ww`:double[]>, character, character, character, ? character, ? character, logical, character, logical> => struct<`mtc.ids`:^character[], `dist.rd`:double[], `noad`:integer[], `call`:language>;
type `selMtc.by.unc` <integer[], integer[], integer[], double, null, null, logical> => struct<`ini.ord`:double[], `list.xs`:tuple<character, character[]>, `av.df`:struct<`x.vars`:^character[], `nxv`:double[], `nc.x`:^double[], `nc0.x`:^double[], `av.crf.x`:^double[], `veq.x`:^double[], `nc.xy`:double[], `nc0.xy`:double[], `av.crf.xy`:double[], `veq.xy`:double[], `nc.xz`:double[], `nc0.xz`:double[], `av.crf.xz`:double[], `veq.xz`:double[], `min.av`:double[], `avw`:double[], `penalty`:double[], `avw.pen`:double[]>>;
type `V` <^double[], null> => double[];
type `veq.fcn` <^double[]> => double;
type `vlist.fcn` <character, character[]> => tuple<character[], character[]>;
